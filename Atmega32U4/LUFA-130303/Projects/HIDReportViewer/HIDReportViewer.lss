
HIDReportViewer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000027c6  0000285a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fb  00800138  00800138  00002892  2**0
                  ALLOC
  3 .stab         00002310  00000000  00000000  00002894  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ddb  00000000  00000000  00004ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000007a8  00000000  00000000  0000597f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000011c5  00000000  00000000  00006127  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000cfca  00000000  00000000  000072ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002cd8  00000000  00000000  000142b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00009735  00000000  00000000  00016f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000cb0  00000000  00000000  000206c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004db8  00000000  00000000  00021374  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007307  00000000  00000000  0002612c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001f8a  00000000  00000000  0002d433  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a68  00000000  00000000  0002f3bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	96 c2       	rjmp	.+1324   	; 0x52e <__ctors_end>
       2:	00 00       	nop
       4:	b2 c2       	rjmp	.+1380   	; 0x56a <__bad_interrupt>
       6:	00 00       	nop
       8:	b0 c2       	rjmp	.+1376   	; 0x56a <__bad_interrupt>
       a:	00 00       	nop
       c:	ae c2       	rjmp	.+1372   	; 0x56a <__bad_interrupt>
       e:	00 00       	nop
      10:	ac c2       	rjmp	.+1368   	; 0x56a <__bad_interrupt>
      12:	00 00       	nop
      14:	aa c2       	rjmp	.+1364   	; 0x56a <__bad_interrupt>
      16:	00 00       	nop
      18:	a8 c2       	rjmp	.+1360   	; 0x56a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a6 c2       	rjmp	.+1356   	; 0x56a <__bad_interrupt>
      1e:	00 00       	nop
      20:	a4 c2       	rjmp	.+1352   	; 0x56a <__bad_interrupt>
      22:	00 00       	nop
      24:	a2 c2       	rjmp	.+1348   	; 0x56a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <__vector_10>
      2c:	9e c2       	rjmp	.+1340   	; 0x56a <__bad_interrupt>
      2e:	00 00       	nop
      30:	9c c2       	rjmp	.+1336   	; 0x56a <__bad_interrupt>
      32:	00 00       	nop
      34:	9a c2       	rjmp	.+1332   	; 0x56a <__bad_interrupt>
      36:	00 00       	nop
      38:	98 c2       	rjmp	.+1328   	; 0x56a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	96 c2       	rjmp	.+1324   	; 0x56a <__bad_interrupt>
      3e:	00 00       	nop
      40:	94 c2       	rjmp	.+1320   	; 0x56a <__bad_interrupt>
      42:	00 00       	nop
      44:	92 c2       	rjmp	.+1316   	; 0x56a <__bad_interrupt>
      46:	00 00       	nop
      48:	90 c2       	rjmp	.+1312   	; 0x56a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8e c2       	rjmp	.+1308   	; 0x56a <__bad_interrupt>
      4e:	00 00       	nop
      50:	8c c2       	rjmp	.+1304   	; 0x56a <__bad_interrupt>
      52:	00 00       	nop
      54:	8a c2       	rjmp	.+1300   	; 0x56a <__bad_interrupt>
      56:	00 00       	nop
      58:	88 c2       	rjmp	.+1296   	; 0x56a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	86 c2       	rjmp	.+1292   	; 0x56a <__bad_interrupt>
      5e:	00 00       	nop
      60:	84 c2       	rjmp	.+1288   	; 0x56a <__bad_interrupt>
      62:	00 00       	nop
      64:	82 c2       	rjmp	.+1284   	; 0x56a <__bad_interrupt>
      66:	00 00       	nop
      68:	80 c2       	rjmp	.+1280   	; 0x56a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7e c2       	rjmp	.+1276   	; 0x56a <__bad_interrupt>
      6e:	00 00       	nop
      70:	7c c2       	rjmp	.+1272   	; 0x56a <__bad_interrupt>
      72:	00 00       	nop
      74:	7a c2       	rjmp	.+1268   	; 0x56a <__bad_interrupt>
      76:	00 00       	nop
      78:	78 c2       	rjmp	.+1264   	; 0x56a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	76 c2       	rjmp	.+1260   	; 0x56a <__bad_interrupt>
      7e:	00 00       	nop
      80:	74 c2       	rjmp	.+1256   	; 0x56a <__bad_interrupt>
      82:	00 00       	nop
      84:	72 c2       	rjmp	.+1252   	; 0x56a <__bad_interrupt>
      86:	00 00       	nop
      88:	70 c2       	rjmp	.+1248   	; 0x56a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6e c2       	rjmp	.+1244   	; 0x56a <__bad_interrupt>
      8e:	00 00       	nop
      90:	6c c2       	rjmp	.+1240   	; 0x56a <__bad_interrupt>
      92:	00 00       	nop
      94:	6a c2       	rjmp	.+1236   	; 0x56a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4328>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4321>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4316>:
     11d:	48 49 44 20 44 65 76 69 63 65 20 45 6e 75 6d 65     HID Device Enume
     12d:	72 61 74 65 64 2e 0d 0a 00                          rated....

00000136 <__c.4314>:
     136:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
     146:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo
     156:	64 65 2e 0d 0a 00                                   de....

0000015c <__c.4312>:
     15c:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     16c:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     17c:	6f 6e 2e 0d 0a 00                                   on....

00000182 <__c.4310>:
     182:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     192:	4e 6f 74 20 61 20 56 61 6c 69 64 20 48 49 44 20     Not a Valid HID 
     1a2:	44 65 76 69 63 65 2e 0d 0a 00                       Device....

000001ac <__c.4308>:
     1ac:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1bc:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1cc:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001d9 <__c.4301>:
     1d9:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1e9:	68 65 64 2e 0d 0a 00                                hed....

000001f0 <__c.4296>:
     1f0:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     200:	0d 0a 00                                            ...

00000203 <__c.4288>:
     203:	20 20 20 20 20 20 7c 0d 0a 20 20 20 20 20 20 45           |..      E
     213:	4e 44 0d 0a 00                                      ND...

00000218 <__c.4283>:
     218:	20 20 20 20 20 20 7c 0d 0a 20 20 20 20 20 20 2d           |..      -
     228:	20 54 79 70 65 3a 20 20 30 78 25 30 32 58 0d 0a      Type:  0x%02X..
     238:	20 20 20 20 20 20 2d 20 55 73 61 67 65 3a 20 30           - Usage: 0
     248:	78 25 30 32 58 0d 0a 00                             x%02X...

00000250 <__c.4274>:
     250:	20 20 2b 20 49 74 65 6d 20 25 64 3a 0d 0a 20 20       + Item %d:..  
     260:	20 20 2d 20 52 65 70 6f 72 74 20 49 44 3a 20 20       - Report ID:  
     270:	20 20 20 20 20 20 20 20 30 78 25 30 32 58 0d 0a             0x%02X..
     280:	20 20 20 20 2d 20 44 61 74 61 20 44 69 72 65 63         - Data Direc
     290:	74 69 6f 6e 3a 20 20 20 20 20 25 73 0d 0a 20 20     tion:     %s..  
     2a0:	20 20 2d 20 49 74 65 6d 20 46 6c 61 67 73 3a 20       - Item Flags: 
     2b0:	20 20 20 20 20 20 20 20 30 78 25 30 32 58 0d 0a             0x%02X..
     2c0:	20 20 20 20 2d 20 49 74 65 6d 20 4f 66 66 73 65         - Item Offse
     2d0:	74 20 28 42 69 74 73 29 3a 20 30 78 25 30 32 58     t (Bits): 0x%02X
     2e0:	0d 0a 20 20 20 20 2d 20 49 74 65 6d 20 53 69 7a     ..    - Item Siz
     2f0:	65 20 28 42 69 74 73 29 3a 20 20 20 30 78 25 30     e (Bits):   0x%0
     300:	32 58 0d 0a 20 20 20 20 2d 20 55 73 61 67 65 20     2X..    - Usage 
     310:	50 61 67 65 3a 20 20 20 20 20 20 20 20 20 30 78     Page:         0x
     320:	25 30 34 58 0d 0a 20 20 20 20 2d 20 55 73 61 67     %04X..    - Usag
     330:	65 3a 20 20 20 20 20 20 20 20 20 20 20 20 20 20     e:              
     340:	30 78 25 30 34 58 0d 0a 20 20 20 20 2d 20 55 6e     0x%04X..    - Un
     350:	69 74 20 54 79 70 65 3a 20 20 20 20 20 20 20 20     it Type:        
     360:	20 20 30 78 25 30 38 6c 58 0d 0a 20 20 20 20 2d       0x%08lX..    -
     370:	20 55 6e 69 74 20 45 78 70 6f 6e 65 6e 74 3a 20      Unit Exponent: 
     380:	20 20 20 20 20 30 78 25 30 32 58 0d 0a 20 20 20          0x%02X..   
     390:	20 2d 20 4c 6f 67 69 63 61 6c 20 4d 69 6e 69 6d      - Logical Minim
     3a0:	75 6d 3a 20 20 20 20 30 78 25 30 38 6c 58 0d 0a     um:    0x%08lX..
     3b0:	20 20 20 20 2d 20 4c 6f 67 69 63 61 6c 20 4d 61         - Logical Ma
     3c0:	78 69 6d 75 6d 3a 20 20 20 20 30 78 25 30 38 6c     ximum:    0x%08l
     3d0:	58 0d 0a 20 20 20 20 2d 20 50 68 79 73 69 63 61     X..    - Physica
     3e0:	6c 20 4d 69 6e 69 6d 75 6d 3a 20 20 20 30 78 25     l Minimum:   0x%
     3f0:	30 38 6c 58 0d 0a 20 20 20 20 2d 20 50 68 79 73     08lX..    - Phys
     400:	69 63 61 6c 20 4d 61 78 69 6d 75 6d 3a 20 20 20     ical Maximum:   
     410:	30 78 25 30 38 6c 58 0d 0a 20 20 20 20 2d 20 43     0x%08lX..    - C
     420:	6f 6c 6c 65 63 74 69 6f 6e 20 50 61 74 68 3a 0d     ollection Path:.
     430:	0a 00                                               ..

00000432 <__c.4270>:
     432:	0d 0a 52 65 70 6f 72 74 20 49 74 65 6d 73 20 28     ..Report Items (
     442:	25 64 20 69 6e 20 54 61 62 6c 65 29 3a 0d 0a 00     %d in Table):...

00000452 <__c.4262>:
     452:	20 20 2b 20 52 65 70 6f 72 74 20 49 44 20 30 78       + Report ID 0x
     462:	25 30 32 58 0d 0a 20 20 20 20 2d 20 49 6e 70 75     %02X..    - Inpu
     472:	74 20 44 61 74 61 3a 20 20 20 25 64 20 62 69 74     t Data:   %d bit
     482:	73 20 28 25 64 20 62 79 74 65 73 29 0d 0a 20 20     s (%d bytes)..  
     492:	20 20 2d 20 4f 75 74 70 75 74 20 44 61 74 61 3a       - Output Data:
     4a2:	20 20 25 64 20 62 69 74 73 20 28 25 64 20 62 79       %d bits (%d by
     4b2:	74 65 73 29 0d 0a 20 20 20 20 2d 20 46 65 61 74     tes)..    - Feat
     4c2:	75 72 65 20 44 61 74 61 3a 20 25 64 20 62 69 74     ure Data: %d bit
     4d2:	73 20 28 25 64 20 62 79 74 65 73 29 0d 0a 00        s (%d bytes)...

000004e1 <__c.4255>:
     4e1:	0d 0a 0d 0a 54 6f 74 61 6c 20 44 65 76 69 63 65     ....Total Device
     4f1:	20 52 65 70 6f 72 74 73 3a 20 25 64 0d 0a 00         Reports: %d...

00000500 <__c.4246>:
     500:	1b 5b 33 36 6d 48 49 44 20 44 65 76 69 63 65 20     .[36mHID Device 
     510:	52 65 70 6f 72 74 20 56 69 65 77 65 72 20 52 75     Report Viewer Ru
     520:	6e 6e 69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00           nning....[37m.

0000052e <__ctors_end>:
     52e:	11 24       	eor	r1, r1
     530:	1f be       	out	0x3f, r1	; 63
     532:	cf ef       	ldi	r28, 0xFF	; 255
     534:	d0 e2       	ldi	r29, 0x20	; 32
     536:	de bf       	out	0x3e, r29	; 62
     538:	cd bf       	out	0x3d, r28	; 61

0000053a <__do_copy_data>:
     53a:	11 e0       	ldi	r17, 0x01	; 1
     53c:	a0 e0       	ldi	r26, 0x00	; 0
     53e:	b1 e0       	ldi	r27, 0x01	; 1
     540:	e6 ec       	ldi	r30, 0xC6	; 198
     542:	f7 e2       	ldi	r31, 0x27	; 39
     544:	00 e0       	ldi	r16, 0x00	; 0
     546:	0b bf       	out	0x3b, r16	; 59
     548:	02 c0       	rjmp	.+4      	; 0x54e <__do_copy_data+0x14>
     54a:	07 90       	elpm	r0, Z+
     54c:	0d 92       	st	X+, r0
     54e:	a8 33       	cpi	r26, 0x38	; 56
     550:	b1 07       	cpc	r27, r17
     552:	d9 f7       	brne	.-10     	; 0x54a <__do_copy_data+0x10>

00000554 <__do_clear_bss>:
     554:	15 e0       	ldi	r17, 0x05	; 5
     556:	a8 e3       	ldi	r26, 0x38	; 56
     558:	b1 e0       	ldi	r27, 0x01	; 1
     55a:	01 c0       	rjmp	.+2      	; 0x55e <.do_clear_bss_start>

0000055c <.do_clear_bss_loop>:
     55c:	1d 92       	st	X+, r1

0000055e <.do_clear_bss_start>:
     55e:	a3 33       	cpi	r26, 0x33	; 51
     560:	b1 07       	cpc	r27, r17
     562:	e1 f7       	brne	.-8      	; 0x55c <.do_clear_bss_loop>
     564:	ea d1       	rcall	.+980    	; 0x93a <main>
     566:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <_exit>

0000056a <__bad_interrupt>:
     56a:	4a cd       	rjmp	.-1388   	; 0x0 <__vectors>

0000056c <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     56c:	9b b1       	in	r25, 0x0b	; 11
     56e:	9f 70       	andi	r25, 0x0F	; 15
     570:	98 2b       	or	r25, r24
     572:	9b b9       	out	0x0b, r25	; 11
			}
     574:	08 95       	ret

00000576 <OutputReportSizes>:

/** Prints a summary of the device's HID report sizes from the HID parser output to the serial port
 *  for display to the user.
 */
void OutputReportSizes(void)
{
     576:	ef 92       	push	r14
     578:	ff 92       	push	r15
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
	printf_P(PSTR("\r\n\r\nTotal Device Reports: %" PRId8 "\r\n"), HIDReportInfo.TotalDeviceReports);
     582:	00 d0       	rcall	.+0      	; 0x584 <OutputReportSizes+0xe>
     584:	00 d0       	rcall	.+0      	; 0x586 <OutputReportSizes+0x10>
     586:	ed b7       	in	r30, 0x3d	; 61
     588:	fe b7       	in	r31, 0x3e	; 62
     58a:	31 96       	adiw	r30, 0x01	; 1
     58c:	81 ee       	ldi	r24, 0xE1	; 225
     58e:	94 e0       	ldi	r25, 0x04	; 4
     590:	ad b7       	in	r26, 0x3d	; 61
     592:	be b7       	in	r27, 0x3e	; 62
     594:	12 96       	adiw	r26, 0x02	; 2
     596:	9c 93       	st	X, r25
     598:	8e 93       	st	-X, r24
     59a:	11 97       	sbiw	r26, 0x01	; 1
     59c:	80 91 c7 04 	lds	r24, 0x04C7
     5a0:	82 83       	std	Z+2, r24	; 0x02
     5a2:	13 82       	std	Z+3, r1	; 0x03
     5a4:	0e 94 e7 10 	call	0x21ce	; 0x21ce <printf_P>

	for (uint8_t ReportIndex = 0; ReportIndex < HIDReportInfo.TotalDeviceReports; ReportIndex++)
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	10 e0       	ldi	r17, 0x00	; 0
		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     5b2:	52 e5       	ldi	r21, 0x52	; 82
     5b4:	e5 2e       	mov	r14, r21
     5b6:	54 e0       	ldi	r21, 0x04	; 4
     5b8:	f5 2e       	mov	r15, r21
 */
void OutputReportSizes(void)
{
	printf_P(PSTR("\r\n\r\nTotal Device Reports: %" PRId8 "\r\n"), HIDReportInfo.TotalDeviceReports);

	for (uint8_t ReportIndex = 0; ReportIndex < HIDReportInfo.TotalDeviceReports; ReportIndex++)
     5ba:	72 c0       	rjmp	.+228    	; 0x6a0 <OutputReportSizes+0x12a>
	{
		const HID_ReportSizeInfo_t* CurrReportIDInfo = &HIDReportInfo.ReportIDSizes[ReportIndex];
     5bc:	21 2f       	mov	r18, r17
     5be:	30 e0       	ldi	r19, 0x00	; 0

		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
     5c0:	c9 01       	movw	r24, r18
     5c2:	43 e0       	ldi	r20, 0x03	; 3
     5c4:	88 0f       	add	r24, r24
     5c6:	99 1f       	adc	r25, r25
     5c8:	4a 95       	dec	r20
     5ca:	e1 f7       	brne	.-8      	; 0x5c4 <OutputReportSizes+0x4e>
     5cc:	82 1b       	sub	r24, r18
     5ce:	93 0b       	sbc	r25, r19
     5d0:	88 5c       	subi	r24, 0xC8	; 200
     5d2:	9e 4f       	sbci	r25, 0xFE	; 254
     5d4:	fc 01       	movw	r30, r24
     5d6:	ef 56       	subi	r30, 0x6F	; 111
     5d8:	fc 4f       	sbci	r31, 0xFC	; 252
     5da:	00 81       	ld	r16, Z
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
     5dc:	fc 01       	movw	r30, r24
     5de:	ed 56       	subi	r30, 0x6D	; 109
     5e0:	fc 4f       	sbci	r31, 0xFC	; 252
     5e2:	b0 81       	ld	r27, Z
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];
     5e4:	fc 01       	movw	r30, r24
     5e6:	eb 56       	subi	r30, 0x6B	; 107
     5e8:	fc 4f       	sbci	r31, 0xFC	; 252
     5ea:	a0 81       	ld	r26, Z
					  "    - Input Data:   %" PRId8 " bits (%" PRId8 " bytes)\r\n"
					  "    - Output Data:  %" PRId8 " bits (%" PRId8 " bytes)\r\n"
					  "    - Feature Data: %" PRId8 " bits (%" PRId8 " bytes)\r\n"),
				 CurrReportIDInfo->ReportID,
				 ReportSizeInBits,
				 ((ReportSizeInBits      >> 3) + ((ReportSizeInBits      & 0x07) != 0)),
     5ec:	60 2f       	mov	r22, r16
     5ee:	70 e0       	ldi	r23, 0x00	; 0
				 ReportSizeOutBits,
				 ((ReportSizeOutBits     >> 3) + ((ReportSizeOutBits     & 0x07) != 0)),
     5f0:	4b 2f       	mov	r20, r27
     5f2:	50 e0       	ldi	r21, 0x00	; 0
				 ReportSizeFeatureBits,
				 ((ReportSizeFeatureBits >> 3) + ((ReportSizeFeatureBits & 0x07) != 0)));
     5f4:	2a 2f       	mov	r18, r26
     5f6:	30 e0       	ldi	r19, 0x00	; 0
		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	60 97       	sbiw	r28, 0x10	; 16
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
     608:	ed b7       	in	r30, 0x3d	; 61
     60a:	fe b7       	in	r31, 0x3e	; 62
     60c:	31 96       	adiw	r30, 0x01	; 1
     60e:	fa 82       	std	Y+2, r15	; 0x02
     610:	e9 82       	std	Y+1, r14	; 0x01
					  "    - Input Data:   %" PRId8 " bits (%" PRId8 " bytes)\r\n"
					  "    - Output Data:  %" PRId8 " bits (%" PRId8 " bytes)\r\n"
					  "    - Feature Data: %" PRId8 " bits (%" PRId8 " bytes)\r\n"),
				 CurrReportIDInfo->ReportID,
     612:	80 57       	subi	r24, 0x70	; 112
     614:	9c 4f       	sbci	r25, 0xFC	; 252
		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     616:	ec 01       	movw	r28, r24
     618:	88 81       	ld	r24, Y
     61a:	82 83       	std	Z+2, r24	; 0x02
     61c:	13 82       	std	Z+3, r1	; 0x03
     61e:	75 83       	std	Z+5, r23	; 0x05
     620:	64 83       	std	Z+4, r22	; 0x04
					  "    - Input Data:   %" PRId8 " bits (%" PRId8 " bytes)\r\n"
					  "    - Output Data:  %" PRId8 " bits (%" PRId8 " bytes)\r\n"
					  "    - Feature Data: %" PRId8 " bits (%" PRId8 " bytes)\r\n"),
				 CurrReportIDInfo->ReportID,
				 ReportSizeInBits,
				 ((ReportSizeInBits      >> 3) + ((ReportSizeInBits      & 0x07) != 0)),
     622:	67 70       	andi	r22, 0x07	; 7
     624:	70 70       	andi	r23, 0x00	; 0
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	61 15       	cp	r22, r1
     62c:	71 05       	cpc	r23, r1
     62e:	11 f4       	brne	.+4      	; 0x634 <OutputReportSizes+0xbe>
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	06 95       	lsr	r16
     636:	06 95       	lsr	r16
     638:	06 95       	lsr	r16
		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     63a:	80 0f       	add	r24, r16
     63c:	91 1d       	adc	r25, r1
     63e:	97 83       	std	Z+7, r25	; 0x07
     640:	86 83       	std	Z+6, r24	; 0x06
     642:	51 87       	std	Z+9, r21	; 0x09
     644:	40 87       	std	Z+8, r20	; 0x08
					  "    - Feature Data: %" PRId8 " bits (%" PRId8 " bytes)\r\n"),
				 CurrReportIDInfo->ReportID,
				 ReportSizeInBits,
				 ((ReportSizeInBits      >> 3) + ((ReportSizeInBits      & 0x07) != 0)),
				 ReportSizeOutBits,
				 ((ReportSizeOutBits     >> 3) + ((ReportSizeOutBits     & 0x07) != 0)),
     646:	47 70       	andi	r20, 0x07	; 7
     648:	50 70       	andi	r21, 0x00	; 0
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	41 15       	cp	r20, r1
     650:	51 05       	cpc	r21, r1
     652:	11 f4       	brne	.+4      	; 0x658 <OutputReportSizes+0xe2>
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	b6 95       	lsr	r27
     65a:	b6 95       	lsr	r27
     65c:	b6 95       	lsr	r27
		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     65e:	8b 0f       	add	r24, r27
     660:	91 1d       	adc	r25, r1
     662:	93 87       	std	Z+11, r25	; 0x0b
     664:	82 87       	std	Z+10, r24	; 0x0a
     666:	35 87       	std	Z+13, r19	; 0x0d
     668:	24 87       	std	Z+12, r18	; 0x0c
				 ReportSizeInBits,
				 ((ReportSizeInBits      >> 3) + ((ReportSizeInBits      & 0x07) != 0)),
				 ReportSizeOutBits,
				 ((ReportSizeOutBits     >> 3) + ((ReportSizeOutBits     & 0x07) != 0)),
				 ReportSizeFeatureBits,
				 ((ReportSizeFeatureBits >> 3) + ((ReportSizeFeatureBits & 0x07) != 0)));
     66a:	27 70       	andi	r18, 0x07	; 7
     66c:	30 70       	andi	r19, 0x00	; 0
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	21 15       	cp	r18, r1
     674:	31 05       	cpc	r19, r1
     676:	11 f4       	brne	.+4      	; 0x67c <OutputReportSizes+0x106>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	a6 95       	lsr	r26
     67e:	a6 95       	lsr	r26
     680:	a6 95       	lsr	r26
		uint8_t ReportSizeInBits      = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_In];
		uint8_t ReportSizeOutBits     = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Out];
		uint8_t ReportSizeFeatureBits = CurrReportIDInfo->ReportSizeBits[HID_REPORT_ITEM_Feature];

		/* Print out the byte sizes of each report within the device */
		printf_P(PSTR("  + Report ID 0x%02" PRIX8 "\r\n"
     682:	8a 0f       	add	r24, r26
     684:	91 1d       	adc	r25, r1
     686:	97 87       	std	Z+15, r25	; 0x0f
     688:	86 87       	std	Z+14, r24	; 0x0e
     68a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <printf_P>
 */
void OutputReportSizes(void)
{
	printf_P(PSTR("\r\n\r\nTotal Device Reports: %" PRId8 "\r\n"), HIDReportInfo.TotalDeviceReports);

	for (uint8_t ReportIndex = 0; ReportIndex < HIDReportInfo.TotalDeviceReports; ReportIndex++)
     68e:	1f 5f       	subi	r17, 0xFF	; 255
     690:	ed b7       	in	r30, 0x3d	; 61
     692:	fe b7       	in	r31, 0x3e	; 62
     694:	70 96       	adiw	r30, 0x10	; 16
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	f8 94       	cli
     69a:	fe bf       	out	0x3e, r31	; 62
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	ed bf       	out	0x3d, r30	; 61
     6a0:	80 91 c7 04 	lds	r24, 0x04C7
     6a4:	18 17       	cp	r17, r24
     6a6:	08 f4       	brcc	.+2      	; 0x6aa <OutputReportSizes+0x134>
     6a8:	89 cf       	rjmp	.-238    	; 0x5bc <OutputReportSizes+0x46>
				 ReportSizeOutBits,
				 ((ReportSizeOutBits     >> 3) + ((ReportSizeOutBits     & 0x07) != 0)),
				 ReportSizeFeatureBits,
				 ((ReportSizeFeatureBits >> 3) + ((ReportSizeFeatureBits & 0x07) != 0)));
	}
}
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	1f 91       	pop	r17
     6b0:	0f 91       	pop	r16
     6b2:	ff 90       	pop	r15
     6b4:	ef 90       	pop	r14
     6b6:	08 95       	ret

000006b8 <OutputCollectionPath>:
 *  for display to the user, from the given starting node to the root node.
 *
 *  \param[in] CollectionPath  Starting HID Collection node to print
 */
void OutputCollectionPath(const HID_CollectionPath_t* const CollectionPath)
{
     6b8:	ef 92       	push	r14
     6ba:	ff 92       	push	r15
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
	const HID_CollectionPath_t* CurrentNode = CollectionPath;
     6c4:	e8 2e       	mov	r14, r24
     6c6:	e7 01       	movw	r28, r14
     6c8:	7e 01       	movw	r14, r28
     6ca:	f9 2e       	mov	r15, r25
     6cc:	e7 01       	movw	r28, r14

	while (CurrentNode != NULL)
	{
		printf_P(PSTR("      |\r\n"
     6ce:	08 e1       	ldi	r16, 0x18	; 24
     6d0:	12 e0       	ldi	r17, 0x02	; 2
 */
void OutputCollectionPath(const HID_CollectionPath_t* const CollectionPath)
{
	const HID_CollectionPath_t* CurrentNode = CollectionPath;

	while (CurrentNode != NULL)
     6d2:	27 c0       	rjmp	.+78     	; 0x722 <OutputCollectionPath+0x6a>
	{
		printf_P(PSTR("      |\r\n"
     6d4:	ad b7       	in	r26, 0x3d	; 61
     6d6:	be b7       	in	r27, 0x3e	; 62
     6d8:	18 97       	sbiw	r26, 0x08	; 8
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	be bf       	out	0x3e, r27	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	ad bf       	out	0x3d, r26	; 61
     6e4:	ed b7       	in	r30, 0x3d	; 61
     6e6:	fe b7       	in	r31, 0x3e	; 62
     6e8:	31 96       	adiw	r30, 0x01	; 1
     6ea:	12 96       	adiw	r26, 0x02	; 2
     6ec:	1c 93       	st	X, r17
     6ee:	0e 93       	st	-X, r16
     6f0:	11 97       	sbiw	r26, 0x01	; 1
     6f2:	88 81       	ld	r24, Y
     6f4:	82 83       	std	Z+2, r24	; 0x02
     6f6:	13 82       	std	Z+3, r1	; 0x03
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	9a 81       	ldd	r25, Y+2	; 0x02
     6fc:	ab 81       	ldd	r26, Y+3	; 0x03
     6fe:	bc 81       	ldd	r27, Y+4	; 0x04
     700:	84 83       	std	Z+4, r24	; 0x04
     702:	95 83       	std	Z+5, r25	; 0x05
     704:	a6 83       	std	Z+6, r26	; 0x06
     706:	b7 83       	std	Z+7, r27	; 0x07
     708:	0e 94 e7 10 	call	0x21ce	; 0x21ce <printf_P>
					  "      - Type:  0x%02" PRIX8 "\r\n"
					  "      - Usage: 0x%02" PRIX8 "\r\n"),
					  CurrentNode->Type, CurrentNode->Usage);

		CurrentNode = CurrentNode->Parent;
     70c:	0d 80       	ldd	r0, Y+5	; 0x05
     70e:	de 81       	ldd	r29, Y+6	; 0x06
     710:	c0 2d       	mov	r28, r0
     712:	ed b7       	in	r30, 0x3d	; 61
     714:	fe b7       	in	r31, 0x3e	; 62
     716:	38 96       	adiw	r30, 0x08	; 8
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	fe bf       	out	0x3e, r31	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	ed bf       	out	0x3d, r30	; 61
 */
void OutputCollectionPath(const HID_CollectionPath_t* const CollectionPath)
{
	const HID_CollectionPath_t* CurrentNode = CollectionPath;

	while (CurrentNode != NULL)
     722:	20 97       	sbiw	r28, 0x00	; 0
     724:	b9 f6       	brne	.-82     	; 0x6d4 <OutputCollectionPath+0x1c>
					  CurrentNode->Type, CurrentNode->Usage);

		CurrentNode = CurrentNode->Parent;
	}

	printf_P(PSTR("      |\r\n"
     726:	00 d0       	rcall	.+0      	; 0x728 <OutputCollectionPath+0x70>
     728:	83 e0       	ldi	r24, 0x03	; 3
     72a:	92 e0       	ldi	r25, 0x02	; 2
     72c:	ad b7       	in	r26, 0x3d	; 61
     72e:	be b7       	in	r27, 0x3e	; 62
     730:	12 96       	adiw	r26, 0x02	; 2
     732:	9c 93       	st	X, r25
     734:	8e 93       	st	-X, r24
     736:	11 97       	sbiw	r26, 0x01	; 1
     738:	0e 94 e7 10 	call	0x21ce	; 0x21ce <printf_P>
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
				  "      END\r\n"));
}
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	ff 90       	pop	r15
     74a:	ef 90       	pop	r14
     74c:	08 95       	ret

0000074e <OutputParsedReportItems>:

/** Prints a summary of the device's parsed and stored report items along with their attributes
 *  to the serial port for display to the user.
 */
void OutputParsedReportItems(void)
{
     74e:	df 92       	push	r13
     750:	ef 92       	push	r14
     752:	ff 92       	push	r15
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
	printf_P(PSTR("\r\nReport Items (%" PRId8 " in Table):\r\n"), HIDReportInfo.TotalReportItems);
     75c:	00 d0       	rcall	.+0      	; 0x75e <OutputParsedReportItems+0x10>
     75e:	00 d0       	rcall	.+0      	; 0x760 <OutputParsedReportItems+0x12>
     760:	ed b7       	in	r30, 0x3d	; 61
     762:	fe b7       	in	r31, 0x3e	; 62
     764:	31 96       	adiw	r30, 0x01	; 1
     766:	82 e3       	ldi	r24, 0x32	; 50
     768:	94 e0       	ldi	r25, 0x04	; 4
     76a:	ad b7       	in	r26, 0x3d	; 61
     76c:	be b7       	in	r27, 0x3e	; 62
     76e:	12 96       	adiw	r26, 0x02	; 2
     770:	9c 93       	st	X, r25
     772:	8e 93       	st	-X, r24
     774:	11 97       	sbiw	r26, 0x01	; 1
     776:	80 91 38 01 	lds	r24, 0x0138
     77a:	82 83       	std	Z+2, r24	; 0x02
     77c:	13 82       	std	Z+3, r1	; 0x03
     77e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <printf_P>

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	dd 24       	eor	r13, r13
					  "    - Logical Maximum:    0x%08" PRIX32 "\r\n"
					  "    - Physical Minimum:   0x%08" PRIX32 "\r\n"
					  "    - Physical Maximum:   0x%08" PRIX32 "\r\n"
					  "    - Collection Path:\r\n"),
				 ItemIndex,
				 RItem->ReportID,
     78c:	0a e2       	ldi	r16, 0x2A	; 42
     78e:	10 e0       	ldi	r17, 0x00	; 0

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     790:	60 e5       	ldi	r22, 0x50	; 80
     792:	e6 2e       	mov	r14, r22
     794:	62 e0       	ldi	r22, 0x02	; 2
     796:	f6 2e       	mov	r15, r22
 */
void OutputParsedReportItems(void)
{
	printf_P(PSTR("\r\nReport Items (%" PRId8 " in Table):\r\n"), HIDReportInfo.TotalReportItems);

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
     798:	87 c0       	rjmp	.+270    	; 0x8a8 <OutputParsedReportItems+0x15a>
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];
     79a:	2d 2d       	mov	r18, r13
     79c:	30 e0       	ldi	r19, 0x00	; 0
					  "    - Logical Maximum:    0x%08" PRIX32 "\r\n"
					  "    - Physical Minimum:   0x%08" PRIX32 "\r\n"
					  "    - Physical Maximum:   0x%08" PRIX32 "\r\n"
					  "    - Collection Path:\r\n"),
				 ItemIndex,
				 RItem->ReportID,
     79e:	20 9f       	mul	r18, r16
     7a0:	f0 01       	movw	r30, r0
     7a2:	21 9f       	mul	r18, r17
     7a4:	f0 0d       	add	r31, r0
     7a6:	30 9f       	mul	r19, r16
     7a8:	f0 0d       	add	r31, r0
     7aa:	11 24       	eor	r1, r1
     7ac:	e8 5c       	subi	r30, 0xC8	; 200
     7ae:	fe 4f       	sbci	r31, 0xFE	; 254

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     7b0:	46 81       	ldd	r20, Z+6	; 0x06
					  "    - Physical Minimum:   0x%08" PRIX32 "\r\n"
					  "    - Physical Maximum:   0x%08" PRIX32 "\r\n"
					  "    - Collection Path:\r\n"),
				 ItemIndex,
				 RItem->ReportID,
				 ((RItem->ItemType == HID_REPORT_ITEM_In) ? "IN" : ((RItem->ItemType == HID_REPORT_ITEM_Out) ? "OUT" : "FEATURE")),
     7b2:	83 81       	ldd	r24, Z+3	; 0x03

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     7b4:	88 23       	and	r24, r24
     7b6:	29 f0       	breq	.+10     	; 0x7c2 <OutputParsedReportItems+0x74>
					  "    - Physical Minimum:   0x%08" PRIX32 "\r\n"
					  "    - Physical Maximum:   0x%08" PRIX32 "\r\n"
					  "    - Collection Path:\r\n"),
				 ItemIndex,
				 RItem->ReportID,
				 ((RItem->ItemType == HID_REPORT_ITEM_In) ? "IN" : ((RItem->ItemType == HID_REPORT_ITEM_Out) ? "OUT" : "FEATURE")),
     7b8:	81 30       	cpi	r24, 0x01	; 1
     7ba:	31 f4       	brne	.+12     	; 0x7c8 <OutputParsedReportItems+0x7a>
     7bc:	8b e0       	ldi	r24, 0x0B	; 11
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	05 c0       	rjmp	.+10     	; 0x7cc <OutputParsedReportItems+0x7e>

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     7c2:	88 e0       	ldi	r24, 0x08	; 8
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <OutputParsedReportItems+0x7e>
					  "    - Physical Minimum:   0x%08" PRIX32 "\r\n"
					  "    - Physical Maximum:   0x%08" PRIX32 "\r\n"
					  "    - Collection Path:\r\n"),
				 ItemIndex,
				 RItem->ReportID,
				 ((RItem->ItemType == HID_REPORT_ITEM_In) ? "IN" : ((RItem->ItemType == HID_REPORT_ITEM_Out) ? "OUT" : "FEATURE")),
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	91 e0       	ldi	r25, 0x01	; 1

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
	{
		const HID_ReportItem_t* RItem = &HIDReportInfo.ReportItems[ItemIndex];

		printf_P(PSTR("  + Item %" PRId8 ":\r\n"
     7cc:	6d b7       	in	r22, 0x3d	; 61
     7ce:	7e b7       	in	r23, 0x3e	; 62
     7d0:	68 52       	subi	r22, 0x28	; 40
     7d2:	70 40       	sbci	r23, 0x00	; 0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	7e bf       	out	0x3e, r23	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	6d bf       	out	0x3d, r22	; 61
     7de:	ed b7       	in	r30, 0x3d	; 61
     7e0:	fe b7       	in	r31, 0x3e	; 62
     7e2:	31 96       	adiw	r30, 0x01	; 1
     7e4:	ad b7       	in	r26, 0x3d	; 61
     7e6:	be b7       	in	r27, 0x3e	; 62
     7e8:	12 96       	adiw	r26, 0x02	; 2
     7ea:	fc 92       	st	X, r15
     7ec:	ee 92       	st	-X, r14
     7ee:	11 97       	sbiw	r26, 0x01	; 1
     7f0:	d2 82       	std	Z+2, r13	; 0x02
     7f2:	13 82       	std	Z+3, r1	; 0x03
     7f4:	44 83       	std	Z+4, r20	; 0x04
     7f6:	15 82       	std	Z+5, r1	; 0x05
     7f8:	97 83       	std	Z+7, r25	; 0x07
     7fa:	86 83       	std	Z+6, r24	; 0x06
     7fc:	20 9f       	mul	r18, r16
     7fe:	e0 01       	movw	r28, r0
     800:	21 9f       	mul	r18, r17
     802:	d0 0d       	add	r29, r0
     804:	30 9f       	mul	r19, r16
     806:	d0 0d       	add	r29, r0
     808:	11 24       	eor	r1, r1
     80a:	c8 5c       	subi	r28, 0xC8	; 200
     80c:	de 4f       	sbci	r29, 0xFE	; 254
     80e:	8c 81       	ldd	r24, Y+4	; 0x04
     810:	9d 81       	ldd	r25, Y+5	; 0x05
     812:	91 87       	std	Z+9, r25	; 0x09
     814:	80 87       	std	Z+8, r24	; 0x08
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	9a 81       	ldd	r25, Y+2	; 0x02
     81a:	93 87       	std	Z+11, r25	; 0x0b
     81c:	82 87       	std	Z+10, r24	; 0x0a
     81e:	89 85       	ldd	r24, Y+9	; 0x09
     820:	84 87       	std	Z+12, r24	; 0x0c
     822:	15 86       	std	Z+13, r1	; 0x0d
     824:	8a 85       	ldd	r24, Y+10	; 0x0a
     826:	9b 85       	ldd	r25, Y+11	; 0x0b
     828:	97 87       	std	Z+15, r25	; 0x0f
     82a:	86 87       	std	Z+14, r24	; 0x0e
     82c:	8c 85       	ldd	r24, Y+12	; 0x0c
     82e:	9d 85       	ldd	r25, Y+13	; 0x0d
     830:	91 8b       	std	Z+17, r25	; 0x11
     832:	80 8b       	std	Z+16, r24	; 0x10
     834:	8e 85       	ldd	r24, Y+14	; 0x0e
     836:	9f 85       	ldd	r25, Y+15	; 0x0f
     838:	a8 89       	ldd	r26, Y+16	; 0x10
     83a:	b9 89       	ldd	r27, Y+17	; 0x11
     83c:	82 8b       	std	Z+18, r24	; 0x12
     83e:	93 8b       	std	Z+19, r25	; 0x13
     840:	a4 8b       	std	Z+20, r26	; 0x14
     842:	b5 8b       	std	Z+21, r27	; 0x15
     844:	8a 89       	ldd	r24, Y+18	; 0x12
     846:	86 8b       	std	Z+22, r24	; 0x16
     848:	17 8a       	std	Z+23, r1	; 0x17
     84a:	8b 89       	ldd	r24, Y+19	; 0x13
     84c:	9c 89       	ldd	r25, Y+20	; 0x14
     84e:	ad 89       	ldd	r26, Y+21	; 0x15
     850:	be 89       	ldd	r27, Y+22	; 0x16
     852:	80 8f       	std	Z+24, r24	; 0x18
     854:	91 8f       	std	Z+25, r25	; 0x19
     856:	a2 8f       	std	Z+26, r26	; 0x1a
     858:	b3 8f       	std	Z+27, r27	; 0x1b
     85a:	8f 89       	ldd	r24, Y+23	; 0x17
     85c:	98 8d       	ldd	r25, Y+24	; 0x18
     85e:	a9 8d       	ldd	r26, Y+25	; 0x19
     860:	ba 8d       	ldd	r27, Y+26	; 0x1a
     862:	84 8f       	std	Z+28, r24	; 0x1c
     864:	95 8f       	std	Z+29, r25	; 0x1d
     866:	a6 8f       	std	Z+30, r26	; 0x1e
     868:	b7 8f       	std	Z+31, r27	; 0x1f
     86a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     86c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     86e:	ad 8d       	ldd	r26, Y+29	; 0x1d
     870:	be 8d       	ldd	r27, Y+30	; 0x1e
     872:	80 a3       	std	Z+32, r24	; 0x20
     874:	91 a3       	std	Z+33, r25	; 0x21
     876:	a2 a3       	std	Z+34, r26	; 0x22
     878:	b3 a3       	std	Z+35, r27	; 0x23
     87a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     87c:	98 a1       	ldd	r25, Y+32	; 0x20
     87e:	a9 a1       	ldd	r26, Y+33	; 0x21
     880:	ba a1       	ldd	r27, Y+34	; 0x22
     882:	84 a3       	std	Z+36, r24	; 0x24
     884:	95 a3       	std	Z+37, r25	; 0x25
     886:	a6 a3       	std	Z+38, r26	; 0x26
     888:	b7 a3       	std	Z+39, r27	; 0x27
     88a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <printf_P>
				 RItem->Attributes.Logical.Minimum,
				 RItem->Attributes.Logical.Maximum,
				 RItem->Attributes.Physical.Minimum,
				 RItem->Attributes.Physical.Maximum);

		OutputCollectionPath(RItem->CollectionPath);
     88e:	6d b7       	in	r22, 0x3d	; 61
     890:	7e b7       	in	r23, 0x3e	; 62
     892:	68 5d       	subi	r22, 0xD8	; 216
     894:	7f 4f       	sbci	r23, 0xFF	; 255
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	7e bf       	out	0x3e, r23	; 62
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	6d bf       	out	0x3d, r22	; 61
     8a0:	8f 81       	ldd	r24, Y+7	; 0x07
     8a2:	98 85       	ldd	r25, Y+8	; 0x08
     8a4:	09 df       	rcall	.-494    	; 0x6b8 <OutputCollectionPath>
 */
void OutputParsedReportItems(void)
{
	printf_P(PSTR("\r\nReport Items (%" PRId8 " in Table):\r\n"), HIDReportInfo.TotalReportItems);

	for (uint8_t ItemIndex = 0; ItemIndex < HIDReportInfo.TotalReportItems; ItemIndex++)
     8a6:	d3 94       	inc	r13
     8a8:	80 91 38 01 	lds	r24, 0x0138
     8ac:	d8 16       	cp	r13, r24
     8ae:	08 f4       	brcc	.+2      	; 0x8b2 <OutputParsedReportItems+0x164>
     8b0:	74 cf       	rjmp	.-280    	; 0x79a <OutputParsedReportItems+0x4c>
				 RItem->Attributes.Physical.Minimum,
				 RItem->Attributes.Physical.Maximum);

		OutputCollectionPath(RItem->CollectionPath);
	}
}
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	ff 90       	pop	r15
     8bc:	ef 90       	pop	r14
     8be:	df 90       	pop	r13
     8c0:	08 95       	ret

000008c2 <RetrieveDeviceData>:
/** Task to retrieve the HID device information from an attached device, and output
 *  the relevant data to the serial port for analysis.
 */
void RetrieveDeviceData(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     8c2:	80 91 1e 05 	lds	r24, 0x051E
     8c6:	8b 30       	cpi	r24, 0x0B	; 11
     8c8:	49 f4       	brne	.+18     	; 0x8dc <RetrieveDeviceData+0x1a>
	  return;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     8ca:	80 ed       	ldi	r24, 0xD0	; 208
     8cc:	4f de       	rcall	.-866    	; 0x56c <LEDs_SetAllLEDs>

	OutputReportSizes();
     8ce:	53 de       	rcall	.-858    	; 0x576 <OutputReportSizes>
	OutputParsedReportItems();
     8d0:	3e df       	rcall	.-388    	; 0x74e <OutputParsedReportItems>

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     8d2:	80 e6       	ldi	r24, 0x60	; 96
     8d4:	4b de       	rcall	.-874    	; 0x56c <LEDs_SetAllLEDs>
	USB_Host_SetDeviceConfiguration(0);
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <USB_Host_SetDeviceConfiguration>
     8dc:	08 95       	ret

000008de <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     8de:	84 b7       	in	r24, 0x34	; 52
     8e0:	87 7f       	andi	r24, 0xF7	; 247
     8e2:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     8e4:	28 e1       	ldi	r18, 0x18	; 24
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	f8 94       	cli
     8ea:	20 93 60 00 	sts	0x0060, r18
     8ee:	10 92 60 00 	sts	0x0060, r1
     8f2:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	80 e8       	ldi	r24, 0x80	; 128
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	80 93 61 00 	sts	0x0061, r24
     900:	90 93 61 00 	sts	0x0061, r25
     904:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     906:	83 e3       	ldi	r24, 0x33	; 51
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	90 93 cd 00 	sts	0x00CD, r25
     90e:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     912:	86 e0       	ldi	r24, 0x06	; 6
     914:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     918:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     91c:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     920:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     922:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     924:	8a b1       	in	r24, 0x0a	; 10
     926:	80 6f       	ori	r24, 0xF0	; 240
     928:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     92a:	8b b1       	in	r24, 0x0b	; 11
     92c:	8f 70       	andi	r24, 0x0F	; 15
     92e:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     930:	ce d7       	rcall	.+3996   	; 0x18ce <USB_Init>

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <Serial_CreateStream>

0000093a <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     93a:	d1 df       	rcall	.-94     	; 0x8de <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "HID Device Report Viewer Running.\r\n" ESC_FG_WHITE));
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	95 e0       	ldi	r25, 0x05	; 5
     940:	0e 94 06 11 	call	0x220c	; 0x220c <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     944:	80 e1       	ldi	r24, 0x10	; 16
     946:	12 de       	rcall	.-988    	; 0x56c <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     948:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		RetrieveDeviceData();
     94a:	bb df       	rcall	.-138    	; 0x8c2 <RetrieveDeviceData>

		HID_Host_USBTask(&Device_HID_Interface);
		USB_USBTask();
     94c:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <USB_USBTask>
     950:	fc cf       	rjmp	.-8      	; 0x94a <main+0x10>

00000952 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     952:	80 ef       	ldi	r24, 0xF0	; 240
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	0e 94 06 11 	call	0x220c	; 0x220c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     95a:	80 ea       	ldi	r24, 0xA0	; 160
}
     95c:	07 ce       	rjmp	.-1010   	; 0x56c <LEDs_SetAllLEDs>

0000095e <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     95e:	89 ed       	ldi	r24, 0xD9	; 217
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	0e 94 06 11 	call	0x220c	; 0x220c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     966:	80 e1       	ldi	r24, 0x10	; 16
}
     968:	01 ce       	rjmp	.-1022   	; 0x56c <LEDs_SetAllLEDs>

0000096a <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     96a:	0f 93       	push	r16
     96c:	1f 93       	push	r17
     96e:	df 93       	push	r29
     970:	cf 93       	push	r28
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	c2 50       	subi	r28, 0x02	; 2
     978:	d2 40       	sbci	r29, 0x02	; 2
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     984:	80 ea       	ldi	r24, 0xA0	; 160
     986:	f2 dd       	rcall	.-1052   	; 0x56c <LEDs_SetAllLEDs>

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     988:	8e 01       	movw	r16, r28
     98a:	0d 5f       	subi	r16, 0xFD	; 253
     98c:	1f 4f       	sbci	r17, 0xFF	; 255
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	be 01       	movw	r22, r28
     992:	6f 5f       	subi	r22, 0xFF	; 255
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	a8 01       	movw	r20, r16
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	32 e0       	ldi	r19, 0x02	; 2
     99c:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <USB_Host_GetDeviceConfigDescriptor>
     9a0:	88 23       	and	r24, r24
     9a2:	19 f0       	breq	.+6      	; 0x9aa <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     9a4:	8c ea       	ldi	r24, 0xAC	; 172
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	13 c0       	rjmp	.+38     	; 0x9d0 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Device_HID_Interface,
     9aa:	69 81       	ldd	r22, Y+1	; 0x01
     9ac:	7a 81       	ldd	r23, Y+2	; 0x02
     9ae:	8f e0       	ldi	r24, 0x0F	; 15
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	a8 01       	movw	r20, r16
     9b4:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <HID_Host_ConfigurePipes>
     9b8:	88 23       	and	r24, r24
     9ba:	19 f0       	breq	.+6      	; 0x9c2 <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid HID Device.\r\n"));
     9bc:	82 e8       	ldi	r24, 0x82	; 130
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	07 c0       	rjmp	.+14     	; 0x9d0 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USB_Host_SetDeviceConfiguration>
     9c8:	88 23       	and	r24, r24
     9ca:	31 f0       	breq	.+12     	; 0x9d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x6e>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     9cc:	8c e5       	ldi	r24, 0x5C	; 92
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	0e 94 06 11 	call	0x220c	; 0x220c <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     9d4:	80 e9       	ldi	r24, 0x90	; 144
     9d6:	15 c0       	rjmp	.+42     	; 0xa02 <EVENT_USB_Host_DeviceEnumerationComplete+0x98>
		return;
	}

	if (HID_Host_SetReportProtocol(&Device_HID_Interface) != 0)
     9d8:	8f e0       	ldi	r24, 0x0F	; 15
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	0e 94 0b 10 	call	0x2016	; 0x2016 <HID_Host_SetReportProtocol>
     9e0:	88 23       	and	r24, r24
     9e2:	51 f0       	breq	.+20     	; 0x9f8 <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
	{
		puts_P(PSTR("Error Setting Report Protocol Mode.\r\n"));
     9e4:	86 e3       	ldi	r24, 0x36	; 54
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	0e 94 06 11 	call	0x220c	; 0x220c <puts_P>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     9ec:	80 e9       	ldi	r24, 0x90	; 144
     9ee:	be dd       	rcall	.-1156   	; 0x56c <LEDs_SetAllLEDs>
		USB_Host_SetDeviceConfiguration(0);
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <USB_Host_SetDeviceConfiguration>
		return;
     9f6:	06 c0       	rjmp	.+12     	; 0xa04 <EVENT_USB_Host_DeviceEnumerationComplete+0x9a>
	}

	puts_P(PSTR("HID Device Enumerated.\r\n"));
     9f8:	8d e1       	ldi	r24, 0x1D	; 29
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	0e 94 06 11 	call	0x220c	; 0x220c <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     a00:	80 e6       	ldi	r24, 0x60	; 96
     a02:	b4 dd       	rcall	.-1176   	; 0x56c <LEDs_SetAllLEDs>
}
     a04:	ce 5f       	subi	r28, 0xFE	; 254
     a06:	dd 4f       	sbci	r29, 0xFD	; 253
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
     a12:	cf 91       	pop	r28
     a14:	df 91       	pop	r29
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	08 95       	ret

00000a1c <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     a1c:	df 93       	push	r29
     a1e:	cf 93       	push	r28
     a20:	0f 92       	push	r0
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     a26:	89 83       	std	Y+1, r24	; 0x01
     a28:	ea d6       	rcall	.+3540   	; 0x17fe <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     a2a:	00 d0       	rcall	.+0      	; 0xa2c <EVENT_USB_Host_HostError+0x10>
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <EVENT_USB_Host_HostError+0x12>
     a2e:	ed b7       	in	r30, 0x3d	; 61
     a30:	fe b7       	in	r31, 0x3e	; 62
     a32:	31 96       	adiw	r30, 0x01	; 1
     a34:	2e ee       	ldi	r18, 0xEE	; 238
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	ad b7       	in	r26, 0x3d	; 61
     a3a:	be b7       	in	r27, 0x3e	; 62
     a3c:	12 96       	adiw	r26, 0x02	; 2
     a3e:	3c 93       	st	X, r19
     a40:	2e 93       	st	-X, r18
     a42:	11 97       	sbiw	r26, 0x01	; 1
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	82 83       	std	Z+2, r24	; 0x02
     a48:	13 82       	std	Z+3, r1	; 0x03
     a4a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <printf_P>
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), ErrorCode);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	80 e9       	ldi	r24, 0x90	; 144
     a58:	89 dd       	rcall	.-1262   	; 0x56c <LEDs_SetAllLEDs>
     a5a:	ff cf       	rjmp	.-2      	; 0xa5a <EVENT_USB_Host_HostError+0x3e>

00000a5c <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     a5c:	90 91 1e 05 	lds	r25, 0x051E
     a60:	2d b7       	in	r18, 0x3d	; 61
     a62:	3e b7       	in	r19, 0x3e	; 62
     a64:	28 50       	subi	r18, 0x08	; 8
     a66:	30 40       	sbci	r19, 0x00	; 0
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	f8 94       	cli
     a6c:	3e bf       	out	0x3e, r19	; 62
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	2d bf       	out	0x3d, r18	; 61
     a72:	ed b7       	in	r30, 0x3d	; 61
     a74:	fe b7       	in	r31, 0x3e	; 62
     a76:	31 96       	adiw	r30, 0x01	; 1
     a78:	28 e9       	ldi	r18, 0x98	; 152
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	ad b7       	in	r26, 0x3d	; 61
     a7e:	be b7       	in	r27, 0x3e	; 62
     a80:	12 96       	adiw	r26, 0x02	; 2
     a82:	3c 93       	st	X, r19
     a84:	2e 93       	st	-X, r18
     a86:	11 97       	sbiw	r26, 0x01	; 1
     a88:	82 83       	std	Z+2, r24	; 0x02
     a8a:	13 82       	std	Z+3, r1	; 0x03
     a8c:	64 83       	std	Z+4, r22	; 0x04
     a8e:	15 82       	std	Z+5, r1	; 0x05
     a90:	96 83       	std	Z+6, r25	; 0x06
     a92:	17 82       	std	Z+7, r1	; 0x07
     a94:	0e 94 e7 10 	call	0x21ce	; 0x21ce <printf_P>
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     a98:	2d b7       	in	r18, 0x3d	; 61
     a9a:	3e b7       	in	r19, 0x3e	; 62
     a9c:	28 5f       	subi	r18, 0xF8	; 248
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	f8 94       	cli
     aa4:	3e bf       	out	0x3e, r19	; 62
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	2d bf       	out	0x3d, r18	; 61
     aaa:	80 e9       	ldi	r24, 0x90	; 144
}
     aac:	5f cd       	rjmp	.-1346   	; 0x56c <LEDs_SetAllLEDs>

00000aae <CALLBACK_HIDParser_FilterHIDReportItem>:
 *  \return Boolean true if the item should be stored into the HID report structure, false if it should be discarded
 */
bool CALLBACK_HIDParser_FilterHIDReportItem(HID_ReportItem_t* const CurrentItem)
{
	return true;
}
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	08 95       	ret

00000ab2 <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
     ab2:	2f 92       	push	r2
     ab4:	3f 92       	push	r3
     ab6:	4f 92       	push	r4
     ab8:	5f 92       	push	r5
     aba:	6f 92       	push	r6
     abc:	7f 92       	push	r7
     abe:	8f 92       	push	r8
     ac0:	9f 92       	push	r9
     ac2:	af 92       	push	r10
     ac4:	bf 92       	push	r11
     ac6:	cf 92       	push	r12
     ac8:	df 92       	push	r13
     aca:	ef 92       	push	r14
     acc:	ff 92       	push	r15
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	df 93       	push	r29
     ad4:	cf 93       	push	r28
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
     ada:	c9 59       	subi	r28, 0x99	; 153
     adc:	d0 40       	sbci	r29, 0x00	; 0
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	cd bf       	out	0x3d, r28	; 61
     ae8:	6c 01       	movw	r12, r24
     aea:	1b 01       	movw	r2, r22
     aec:	ba 01       	movw	r22, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
     aee:	40 57       	subi	r20, 0x70	; 112
     af0:	5c 4f       	sbci	r21, 0xFC	; 252
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
     af2:	89 ed       	ldi	r24, 0xD9	; 217
     af4:	93 e0       	ldi	r25, 0x03	; 3
     af6:	db 01       	movw	r26, r22
     af8:	9c 01       	movw	r18, r24
     afa:	1d 92       	st	X+, r1
     afc:	21 50       	subi	r18, 0x01	; 1
     afe:	30 40       	sbci	r19, 0x00	; 0
     b00:	e1 f7       	brne	.-8      	; 0xafa <USB_ProcessHIDReport+0x48>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
     b02:	9e 01       	movw	r18, r28
     b04:	25 5c       	subi	r18, 0xC5	; 197
     b06:	3f 4f       	sbci	r19, 0xFF	; 255
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
     b08:	8c e1       	ldi	r24, 0x1C	; 28
     b0a:	d9 01       	movw	r26, r18
     b0c:	1d 92       	st	X+, r1
     b0e:	8a 95       	dec	r24
     b10:	e9 f7       	brne	.-6      	; 0xb0c <USB_ProcessHIDReport+0x5a>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     b12:	87 e0       	ldi	r24, 0x07	; 7
     b14:	da 01       	movw	r26, r20
     b16:	1d 92       	st	X+, r1
     b18:	8a 95       	dec	r24
     b1a:	e9 f7       	brne	.-6      	; 0xb16 <USB_ProcessHIDReport+0x64>

	ParserData->TotalDeviceReports = 1;
     b1c:	fb 01       	movw	r30, r22
     b1e:	e1 57       	subi	r30, 0x71	; 113
     b20:	fc 4f       	sbci	r31, 0xFC	; 252
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	80 83       	st	Z, r24
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
     b26:	e9 96       	adiw	r28, 0x39	; 57
     b28:	1c ae       	std	Y+60, r1	; 0x3c
     b2a:	1d ae       	std	Y+61, r1	; 0x3d
     b2c:	1e ae       	std	Y+62, r1	; 0x3e
     b2e:	1f ae       	std	Y+63, r1	; 0x3f
     b30:	e9 97       	sbiw	r28, 0x39	; 57
     b32:	44 24       	eor	r4, r4
     b34:	55 24       	eor	r5, r5
     b36:	32 01       	movw	r6, r4
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
     b38:	bb 24       	eor	r11, r11
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
     b3a:	88 24       	eor	r8, r8
     b3c:	99 24       	eor	r9, r9

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     b3e:	cb 01       	movw	r24, r22
     b40:	8a 52       	subi	r24, 0x2A	; 42
     b42:	9c 4f       	sbci	r25, 0xFC	; 252
     b44:	c0 58       	subi	r28, 0x80	; 128
     b46:	df 4f       	sbci	r29, 0xFF	; 255
     b48:	99 83       	std	Y+1, r25	; 0x01
     b4a:	88 83       	st	Y, r24
     b4c:	c0 58       	subi	r28, 0x80	; 128
     b4e:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     b50:	c8 56       	subi	r28, 0x68	; 104
     b52:	df 4f       	sbci	r29, 0xFF	; 255
     b54:	39 83       	std	Y+1, r19	; 0x01
     b56:	28 83       	st	Y, r18
     b58:	c8 59       	subi	r28, 0x98	; 152
     b5a:	d0 40       	sbci	r29, 0x00	; 0
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     b5c:	db 01       	movw	r26, r22
     b5e:	a0 5b       	subi	r26, 0xB0	; 176
     b60:	bc 4f       	sbci	r27, 0xFC	; 252
     b62:	c6 57       	subi	r28, 0x76	; 118
     b64:	df 4f       	sbci	r29, 0xFF	; 255
     b66:	b9 83       	std	Y+1, r27	; 0x01
     b68:	a8 83       	st	Y, r26
     b6a:	ca 58       	subi	r28, 0x8A	; 138
     b6c:	d0 40       	sbci	r29, 0x00	; 0

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     b6e:	cb 01       	movw	r24, r22
     b70:	88 57       	subi	r24, 0x78	; 120
     b72:	9c 4f       	sbci	r25, 0xFC	; 252
     b74:	c4 57       	subi	r28, 0x74	; 116
     b76:	df 4f       	sbci	r29, 0xFF	; 255
     b78:	99 83       	std	Y+1, r25	; 0x01
     b7a:	88 83       	st	Y, r24
     b7c:	cc 58       	subi	r28, 0x8C	; 140
     b7e:	d0 40       	sbci	r29, 0x00	; 0
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     b80:	db 01       	movw	r26, r22
     b82:	a7 5b       	subi	r26, 0xB7	; 183
     b84:	bc 4f       	sbci	r27, 0xFC	; 252
     b86:	c2 57       	subi	r28, 0x72	; 114
     b88:	df 4f       	sbci	r29, 0xFF	; 255
     b8a:	b9 83       	std	Y+1, r27	; 0x01
     b8c:	a8 83       	st	Y, r26
     b8e:	ce 58       	subi	r28, 0x8E	; 142
     b90:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     b92:	c9 01       	movw	r24, r18
     b94:	4c 96       	adiw	r24, 0x1c	; 28
     b96:	c0 57       	subi	r28, 0x70	; 112
     b98:	df 4f       	sbci	r29, 0xFF	; 255
     b9a:	99 83       	std	Y+1, r25	; 0x01
     b9c:	88 83       	st	Y, r24
     b9e:	c0 59       	subi	r28, 0x90	; 144
     ba0:	d0 40       	sbci	r29, 0x00	; 0
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     ba2:	db 01       	movw	r26, r22
     ba4:	a8 52       	subi	r26, 0x28	; 40
     ba6:	bc 4f       	sbci	r27, 0xFC	; 252
     ba8:	ce 57       	subi	r28, 0x7E	; 126
     baa:	df 4f       	sbci	r29, 0xFF	; 255
     bac:	b9 83       	std	Y+1, r27	; 0x01
     bae:	a8 83       	st	Y, r26
     bb0:	c2 58       	subi	r28, 0x82	; 130
     bb2:	d0 40       	sbci	r29, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     bb4:	cc 57       	subi	r28, 0x7C	; 124
     bb6:	df 4f       	sbci	r29, 0xFF	; 255
     bb8:	f9 83       	std	Y+1, r31	; 0x01
     bba:	e8 83       	st	Y, r30
     bbc:	c4 58       	subi	r28, 0x84	; 132
     bbe:	d0 40       	sbci	r29, 0x00	; 0

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     bc0:	ca 01       	movw	r24, r20
     bc2:	ce 56       	subi	r28, 0x6E	; 110
     bc4:	df 4f       	sbci	r29, 0xFF	; 255
     bc6:	48 83       	st	Y, r20
     bc8:	c2 59       	subi	r28, 0x92	; 146
     bca:	d0 40       	sbci	r29, 0x00	; 0
     bcc:	cd 56       	subi	r28, 0x6D	; 109
     bce:	df 4f       	sbci	r29, 0xFF	; 255
     bd0:	98 83       	st	Y, r25
     bd2:	c3 59       	subi	r28, 0x93	; 147
     bd4:	d0 40       	sbci	r29, 0x00	; 0
     bd6:	e5 96       	adiw	r28, 0x35	; 53
     bd8:	7f af       	std	Y+63, r23	; 0x3f
     bda:	6e af       	std	Y+62, r22	; 0x3e
     bdc:	e5 97       	sbiw	r28, 0x35	; 53
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     bde:	38 c3       	rjmp	.+1648   	; 0x1250 <USB_ProcessHIDReport+0x79e>
	{
		uint8_t  HIDReportItem  = *ReportData;
     be0:	f6 01       	movw	r30, r12
     be2:	61 91       	ld	r22, Z+
     be4:	6f 01       	movw	r12, r30
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
     be6:	08 94       	sec
     be8:	21 08       	sbc	r2, r1
     bea:	31 08       	sbc	r3, r1

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
     bec:	86 2f       	mov	r24, r22
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	eb 96       	adiw	r28, 0x3b	; 59
     bf2:	9f af       	std	Y+63, r25	; 0x3f
     bf4:	8e af       	std	Y+62, r24	; 0x3e
     bf6:	eb 97       	sbiw	r28, 0x3b	; 59
     bf8:	83 70       	andi	r24, 0x03	; 3
     bfa:	90 70       	andi	r25, 0x00	; 0
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	91 05       	cpc	r25, r1
     c00:	09 f4       	brne	.+2      	; 0xc04 <USB_ProcessHIDReport+0x152>
     c02:	3f c0       	rjmp	.+126    	; 0xc82 <USB_ProcessHIDReport+0x1d0>
     c04:	83 30       	cpi	r24, 0x03	; 3
     c06:	91 05       	cpc	r25, r1
     c08:	29 f0       	breq	.+10     	; 0xc14 <USB_ProcessHIDReport+0x162>
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	91 05       	cpc	r25, r1
     c0e:	09 f0       	breq	.+2      	; 0xc12 <USB_ProcessHIDReport+0x160>
     c10:	5c c0       	rjmp	.+184    	; 0xcca <USB_ProcessHIDReport+0x218>
     c12:	52 c0       	rjmp	.+164    	; 0xcb8 <USB_ProcessHIDReport+0x206>
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     c14:	df 01       	movw	r26, r30
     c16:	e3 80       	ldd	r14, Z+3	; 0x03
     c18:	ff 24       	eor	r15, r15
     c1a:	00 e0       	ldi	r16, 0x00	; 0
     c1c:	10 e0       	ldi	r17, 0x00	; 0
     c1e:	1e 2d       	mov	r17, r14
     c20:	00 27       	eor	r16, r16
     c22:	ff 24       	eor	r15, r15
     c24:	ee 24       	eor	r14, r14
     c26:	12 96       	adiw	r26, 0x02	; 2
     c28:	8c 91       	ld	r24, X
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	dc 01       	movw	r26, r24
     c32:	99 27       	eor	r25, r25
     c34:	88 27       	eor	r24, r24
     c36:	e8 2a       	or	r14, r24
     c38:	f9 2a       	or	r15, r25
     c3a:	0a 2b       	or	r16, r26
     c3c:	1b 2b       	or	r17, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     c3e:	f6 01       	movw	r30, r12
     c40:	80 81       	ld	r24, Z
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	a0 e0       	ldi	r26, 0x00	; 0
     c46:	b0 e0       	ldi	r27, 0x00	; 0
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     c48:	e8 2a       	or	r14, r24
     c4a:	f9 2a       	or	r15, r25
     c4c:	0a 2b       	or	r16, r26
     c4e:	1b 2b       	or	r17, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     c50:	f1 81       	ldd	r31, Z+1	; 0x01
     c52:	ed 96       	adiw	r28, 0x3d	; 61
     c54:	ff af       	std	Y+63, r31	; 0x3f
     c56:	ed 97       	sbiw	r28, 0x3d	; 61
     c58:	ec 96       	adiw	r28, 0x3c	; 60
     c5a:	1f ae       	std	Y+63, r1	; 0x3f
     c5c:	ec 97       	sbiw	r28, 0x3c	; 60
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     c5e:	ed 96       	adiw	r28, 0x3d	; 61
     c60:	ee ad       	ldd	r30, Y+62	; 0x3e
     c62:	ff ad       	ldd	r31, Y+63	; 0x3f
     c64:	ed 97       	sbiw	r28, 0x3d	; 61
     c66:	cf 01       	movw	r24, r30
     c68:	a0 e0       	ldi	r26, 0x00	; 0
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e8 2a       	or	r14, r24
     c6e:	f9 2a       	or	r15, r25
     c70:	0a 2b       	or	r16, r26
     c72:	1b 2b       	or	r17, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     c74:	8c ef       	ldi	r24, 0xFC	; 252
     c76:	9f ef       	ldi	r25, 0xFF	; 255
     c78:	28 0e       	add	r2, r24
     c7a:	39 1e       	adc	r3, r25
				ReportData     += 4;
     c7c:	a4 e0       	ldi	r26, 0x04	; 4
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	18 c0       	rjmp	.+48     	; 0xcb2 <USB_ProcessHIDReport+0x200>
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     c82:	f1 81       	ldd	r31, Z+1	; 0x01
     c84:	ef 96       	adiw	r28, 0x3f	; 63
     c86:	ff af       	std	Y+63, r31	; 0x3f
     c88:	ef 97       	sbiw	r28, 0x3f	; 63
     c8a:	ee 96       	adiw	r28, 0x3e	; 62
     c8c:	1f ae       	std	Y+63, r1	; 0x3f
     c8e:	ee 97       	sbiw	r28, 0x3e	; 62
     c90:	d6 01       	movw	r26, r12
     c92:	ec 90       	ld	r14, X
     c94:	ff 24       	eor	r15, r15
     c96:	ef 96       	adiw	r28, 0x3f	; 63
     c98:	ee ad       	ldd	r30, Y+62	; 0x3e
     c9a:	ff ad       	ldd	r31, Y+63	; 0x3f
     c9c:	ef 97       	sbiw	r28, 0x3f	; 63
     c9e:	ee 2a       	or	r14, r30
     ca0:	ff 2a       	or	r15, r31
     ca2:	00 e0       	ldi	r16, 0x00	; 0
     ca4:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 2;
     ca6:	8e ef       	ldi	r24, 0xFE	; 254
     ca8:	9f ef       	ldi	r25, 0xFF	; 255
     caa:	28 0e       	add	r2, r24
     cac:	39 1e       	adc	r3, r25
				ReportData     += 2;
     cae:	a2 e0       	ldi	r26, 0x02	; 2
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	ca 0e       	add	r12, r26
     cb4:	db 1e       	adc	r13, r27
				break;
     cb6:	0c c0       	rjmp	.+24     	; 0xcd0 <USB_ProcessHIDReport+0x21e>

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     cb8:	e1 90       	ld	r14, Z+
     cba:	6f 01       	movw	r12, r30
     cbc:	ff 24       	eor	r15, r15
     cbe:	00 e0       	ldi	r16, 0x00	; 0
     cc0:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 1;
     cc2:	08 94       	sec
     cc4:	21 08       	sbc	r2, r1
     cc6:	31 08       	sbc	r3, r1
				ReportData     += 1;
				break;
     cc8:	03 c0       	rjmp	.+6      	; 0xcd0 <USB_ProcessHIDReport+0x21e>

			default:
				ReportItemData  = 0;
     cca:	ee 24       	eor	r14, r14
     ccc:	ff 24       	eor	r15, r15
     cce:	87 01       	movw	r16, r14
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     cd0:	eb 96       	adiw	r28, 0x3b	; 59
     cd2:	8e ad       	ldd	r24, Y+62	; 0x3e
     cd4:	9f ad       	ldd	r25, Y+63	; 0x3f
     cd6:	eb 97       	sbiw	r28, 0x3b	; 59
     cd8:	8c 7f       	andi	r24, 0xFC	; 252
     cda:	90 70       	andi	r25, 0x00	; 0
     cdc:	84 36       	cpi	r24, 0x64	; 100
     cde:	91 05       	cpc	r25, r1
     ce0:	09 f4       	brne	.+2      	; 0xce4 <USB_ProcessHIDReport+0x232>
     ce2:	c9 c0       	rjmp	.+402    	; 0xe76 <USB_ProcessHIDReport+0x3c4>
     ce4:	85 36       	cpi	r24, 0x65	; 101
     ce6:	91 05       	cpc	r25, r1
     ce8:	8c f5       	brge	.+98     	; 0xd4c <USB_ProcessHIDReport+0x29a>
     cea:	84 32       	cpi	r24, 0x24	; 36
     cec:	91 05       	cpc	r25, r1
     cee:	09 f4       	brne	.+2      	; 0xcf2 <USB_ProcessHIDReport+0x240>
     cf0:	a9 c0       	rjmp	.+338    	; 0xe44 <USB_ProcessHIDReport+0x392>
     cf2:	85 32       	cpi	r24, 0x25	; 37
     cf4:	91 05       	cpc	r25, r1
     cf6:	ac f4       	brge	.+42     	; 0xd22 <USB_ProcessHIDReport+0x270>
     cf8:	88 30       	cpi	r24, 0x08	; 8
     cfa:	91 05       	cpc	r25, r1
     cfc:	09 f4       	brne	.+2      	; 0xd00 <USB_ProcessHIDReport+0x24e>
     cfe:	31 c1       	rjmp	.+610    	; 0xf62 <USB_ProcessHIDReport+0x4b0>
     d00:	89 30       	cpi	r24, 0x09	; 9
     d02:	91 05       	cpc	r25, r1
     d04:	2c f4       	brge	.+10     	; 0xd10 <USB_ProcessHIDReport+0x25e>
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	91 05       	cpc	r25, r1
     d0a:	09 f0       	breq	.+2      	; 0xd0e <USB_ProcessHIDReport+0x25c>
     d0c:	8f c2       	rjmp	.+1310   	; 0x122c <USB_ProcessHIDReport+0x77a>
     d0e:	8e c0       	rjmp	.+284    	; 0xe2c <USB_ProcessHIDReport+0x37a>
     d10:	84 31       	cpi	r24, 0x14	; 20
     d12:	91 05       	cpc	r25, r1
     d14:	09 f4       	brne	.+2      	; 0xd18 <USB_ProcessHIDReport+0x266>
     d16:	8e c0       	rjmp	.+284    	; 0xe34 <USB_ProcessHIDReport+0x382>
     d18:	88 31       	cpi	r24, 0x18	; 24
     d1a:	91 05       	cpc	r25, r1
     d1c:	09 f0       	breq	.+2      	; 0xd20 <USB_ProcessHIDReport+0x26e>
     d1e:	86 c2       	rjmp	.+1292   	; 0x122c <USB_ProcessHIDReport+0x77a>
     d20:	83 c2       	rjmp	.+1286   	; 0x1228 <USB_ProcessHIDReport+0x776>
     d22:	84 33       	cpi	r24, 0x34	; 52
     d24:	91 05       	cpc	r25, r1
     d26:	09 f4       	brne	.+2      	; 0xd2a <USB_ProcessHIDReport+0x278>
     d28:	93 c0       	rjmp	.+294    	; 0xe50 <USB_ProcessHIDReport+0x39e>
     d2a:	85 33       	cpi	r24, 0x35	; 53
     d2c:	91 05       	cpc	r25, r1
     d2e:	2c f4       	brge	.+10     	; 0xd3a <USB_ProcessHIDReport+0x288>
     d30:	88 32       	cpi	r24, 0x28	; 40
     d32:	91 05       	cpc	r25, r1
     d34:	09 f0       	breq	.+2      	; 0xd38 <USB_ProcessHIDReport+0x286>
     d36:	7a c2       	rjmp	.+1268   	; 0x122c <USB_ProcessHIDReport+0x77a>
     d38:	26 c1       	rjmp	.+588    	; 0xf86 <USB_ProcessHIDReport+0x4d4>
     d3a:	84 34       	cpi	r24, 0x44	; 68
     d3c:	91 05       	cpc	r25, r1
     d3e:	09 f4       	brne	.+2      	; 0xd42 <USB_ProcessHIDReport+0x290>
     d40:	8f c0       	rjmp	.+286    	; 0xe60 <USB_ProcessHIDReport+0x3ae>
     d42:	84 35       	cpi	r24, 0x54	; 84
     d44:	91 05       	cpc	r25, r1
     d46:	09 f0       	breq	.+2      	; 0xd4a <USB_ProcessHIDReport+0x298>
     d48:	71 c2       	rjmp	.+1250   	; 0x122c <USB_ProcessHIDReport+0x77a>
     d4a:	90 c0       	rjmp	.+288    	; 0xe6c <USB_ProcessHIDReport+0x3ba>
     d4c:	84 39       	cpi	r24, 0x94	; 148
     d4e:	91 05       	cpc	r25, r1
     d50:	09 f4       	brne	.+2      	; 0xd54 <USB_ProcessHIDReport+0x2a2>
     d52:	9a c0       	rjmp	.+308    	; 0xe88 <USB_ProcessHIDReport+0x3d6>
     d54:	85 39       	cpi	r24, 0x95	; 149
     d56:	91 05       	cpc	r25, r1
     d58:	a4 f4       	brge	.+40     	; 0xd82 <USB_ProcessHIDReport+0x2d0>
     d5a:	80 38       	cpi	r24, 0x80	; 128
     d5c:	91 05       	cpc	r25, r1
     d5e:	41 f1       	breq	.+80     	; 0xdb0 <USB_ProcessHIDReport+0x2fe>
     d60:	81 38       	cpi	r24, 0x81	; 129
     d62:	91 05       	cpc	r25, r1
     d64:	2c f4       	brge	.+10     	; 0xd70 <USB_ProcessHIDReport+0x2be>
     d66:	84 37       	cpi	r24, 0x74	; 116
     d68:	91 05       	cpc	r25, r1
     d6a:	09 f0       	breq	.+2      	; 0xd6e <USB_ProcessHIDReport+0x2bc>
     d6c:	5f c2       	rjmp	.+1214   	; 0x122c <USB_ProcessHIDReport+0x77a>
     d6e:	89 c0       	rjmp	.+274    	; 0xe82 <USB_ProcessHIDReport+0x3d0>
     d70:	84 38       	cpi	r24, 0x84	; 132
     d72:	91 05       	cpc	r25, r1
     d74:	09 f4       	brne	.+2      	; 0xd78 <USB_ProcessHIDReport+0x2c6>
     d76:	8b c0       	rjmp	.+278    	; 0xe8e <USB_ProcessHIDReport+0x3dc>
     d78:	80 39       	cpi	r24, 0x90	; 144
     d7a:	91 05       	cpc	r25, r1
     d7c:	09 f0       	breq	.+2      	; 0xd80 <USB_ProcessHIDReport+0x2ce>
     d7e:	56 c2       	rjmp	.+1196   	; 0x122c <USB_ProcessHIDReport+0x77a>
     d80:	17 c0       	rjmp	.+46     	; 0xdb0 <USB_ProcessHIDReport+0x2fe>
     d82:	80 3b       	cpi	r24, 0xB0	; 176
     d84:	91 05       	cpc	r25, r1
     d86:	a1 f0       	breq	.+40     	; 0xdb0 <USB_ProcessHIDReport+0x2fe>
     d88:	81 3b       	cpi	r24, 0xB1	; 177
     d8a:	91 05       	cpc	r25, r1
     d8c:	4c f4       	brge	.+18     	; 0xda0 <USB_ProcessHIDReport+0x2ee>
     d8e:	80 3a       	cpi	r24, 0xA0	; 160
     d90:	91 05       	cpc	r25, r1
     d92:	09 f4       	brne	.+2      	; 0xd96 <USB_ProcessHIDReport+0x2e4>
     d94:	ff c0       	rjmp	.+510    	; 0xf94 <USB_ProcessHIDReport+0x4e2>
     d96:	84 3a       	cpi	r24, 0xA4	; 164
     d98:	91 05       	cpc	r25, r1
     d9a:	09 f0       	breq	.+2      	; 0xd9e <USB_ProcessHIDReport+0x2ec>
     d9c:	47 c2       	rjmp	.+1166   	; 0x122c <USB_ProcessHIDReport+0x77a>
     d9e:	24 c0       	rjmp	.+72     	; 0xde8 <USB_ProcessHIDReport+0x336>
     da0:	84 3b       	cpi	r24, 0xB4	; 180
     da2:	91 05       	cpc	r25, r1
     da4:	b1 f1       	breq	.+108    	; 0xe12 <USB_ProcessHIDReport+0x360>
     da6:	80 3c       	cpi	r24, 0xC0	; 192
     da8:	91 05       	cpc	r25, r1
     daa:	09 f0       	breq	.+2      	; 0xdae <USB_ProcessHIDReport+0x2fc>
     dac:	3f c2       	rjmp	.+1150   	; 0x122c <USB_ProcessHIDReport+0x77a>
     dae:	4f c1       	rjmp	.+670    	; 0x104e <USB_ProcessHIDReport+0x59c>
     db0:	aa 24       	eor	r10, r10
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
     db2:	6c 7f       	andi	r22, 0xFC	; 252
     db4:	c1 58       	subi	r28, 0x81	; 129
     db6:	df 4f       	sbci	r29, 0xFF	; 255
     db8:	68 83       	st	Y, r22
     dba:	cf 57       	subi	r28, 0x7F	; 127
     dbc:	d0 40       	sbci	r29, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     dbe:	c8 01       	movw	r24, r16
     dc0:	b7 01       	movw	r22, r14
     dc2:	61 70       	andi	r22, 0x01	; 1
     dc4:	70 70       	andi	r23, 0x00	; 0
     dc6:	80 70       	andi	r24, 0x00	; 0
     dc8:	90 70       	andi	r25, 0x00	; 0
     dca:	ca 57       	subi	r28, 0x7A	; 122
     dcc:	df 4f       	sbci	r29, 0xFF	; 255
     dce:	68 83       	st	Y, r22
     dd0:	79 83       	std	Y+1, r23	; 0x01
     dd2:	8a 83       	std	Y+2, r24	; 0x02
     dd4:	9b 83       	std	Y+3, r25	; 0x03
     dd6:	c6 58       	subi	r28, 0x86	; 134
     dd8:	d0 40       	sbci	r29, 0x00	; 0
     dda:	c6 01       	movw	r24, r12
     ddc:	6a 01       	movw	r12, r20
     dde:	b8 01       	movw	r22, r16
     de0:	a7 01       	movw	r20, r14
     de2:	79 01       	movw	r14, r18
     de4:	8c 01       	movw	r16, r24
     de6:	17 c2       	rjmp	.+1070   	; 0x1216 <USB_ProcessHIDReport+0x764>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     de8:	c0 57       	subi	r28, 0x70	; 112
     dea:	df 4f       	sbci	r29, 0xFF	; 255
     dec:	88 81       	ld	r24, Y
     dee:	99 81       	ldd	r25, Y+1	; 0x01
     df0:	c0 59       	subi	r28, 0x90	; 144
     df2:	d0 40       	sbci	r29, 0x00	; 0
     df4:	28 17       	cp	r18, r24
     df6:	39 07       	cpc	r19, r25
     df8:	09 f4       	brne	.+2      	; 0xdfc <USB_ProcessHIDReport+0x34a>
     dfa:	38 c2       	rjmp	.+1136   	; 0x126c <USB_ProcessHIDReport+0x7ba>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     dfc:	c9 01       	movw	r24, r18
     dfe:	4c 96       	adiw	r24, 0x1c	; 28
     e00:	fc 01       	movw	r30, r24
     e02:	d9 01       	movw	r26, r18
     e04:	2a e2       	ldi	r18, 0x2A	; 42
     e06:	0d 90       	ld	r0, X+
     e08:	01 92       	st	Z+, r0
     e0a:	21 50       	subi	r18, 0x01	; 1
     e0c:	e1 f7       	brne	.-8      	; 0xe06 <USB_ProcessHIDReport+0x354>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     e0e:	9c 01       	movw	r18, r24
				break;
     e10:	0d c2       	rjmp	.+1050   	; 0x122c <USB_ProcessHIDReport+0x77a>
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     e12:	c8 56       	subi	r28, 0x68	; 104
     e14:	df 4f       	sbci	r29, 0xFF	; 255
     e16:	a8 81       	ld	r26, Y
     e18:	b9 81       	ldd	r27, Y+1	; 0x01
     e1a:	c8 59       	subi	r28, 0x98	; 152
     e1c:	d0 40       	sbci	r29, 0x00	; 0
     e1e:	2a 17       	cp	r18, r26
     e20:	3b 07       	cpc	r19, r27
     e22:	09 f4       	brne	.+2      	; 0xe26 <USB_ProcessHIDReport+0x374>
     e24:	25 c2       	rjmp	.+1098   	; 0x1270 <USB_ProcessHIDReport+0x7be>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     e26:	2c 51       	subi	r18, 0x1C	; 28
     e28:	30 40       	sbci	r19, 0x00	; 0
				break;
     e2a:	00 c2       	rjmp	.+1024   	; 0x122c <USB_ProcessHIDReport+0x77a>
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     e2c:	f9 01       	movw	r30, r18
     e2e:	f2 82       	std	Z+2, r15	; 0x02
     e30:	e1 82       	std	Z+1, r14	; 0x01
				break;
     e32:	fc c1       	rjmp	.+1016   	; 0x122c <USB_ProcessHIDReport+0x77a>
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     e34:	d9 01       	movw	r26, r18
     e36:	1a 96       	adiw	r26, 0x0a	; 10
     e38:	ed 92       	st	X+, r14
     e3a:	fd 92       	st	X+, r15
     e3c:	0d 93       	st	X+, r16
     e3e:	1c 93       	st	X, r17
     e40:	1d 97       	sbiw	r26, 0x0d	; 13
				break;
     e42:	f4 c1       	rjmp	.+1000   	; 0x122c <USB_ProcessHIDReport+0x77a>
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     e44:	f9 01       	movw	r30, r18
     e46:	e6 86       	std	Z+14, r14	; 0x0e
     e48:	f7 86       	std	Z+15, r15	; 0x0f
     e4a:	00 8b       	std	Z+16, r16	; 0x10
     e4c:	11 8b       	std	Z+17, r17	; 0x11
				break;
     e4e:	ee c1       	rjmp	.+988    	; 0x122c <USB_ProcessHIDReport+0x77a>
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     e50:	d9 01       	movw	r26, r18
     e52:	52 96       	adiw	r26, 0x12	; 18
     e54:	ed 92       	st	X+, r14
     e56:	fd 92       	st	X+, r15
     e58:	0d 93       	st	X+, r16
     e5a:	1c 93       	st	X, r17
     e5c:	55 97       	sbiw	r26, 0x15	; 21
				break;
     e5e:	e6 c1       	rjmp	.+972    	; 0x122c <USB_ProcessHIDReport+0x77a>
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     e60:	f9 01       	movw	r30, r18
     e62:	e6 8a       	std	Z+22, r14	; 0x16
     e64:	f7 8a       	std	Z+23, r15	; 0x17
     e66:	00 8f       	std	Z+24, r16	; 0x18
     e68:	11 8f       	std	Z+25, r17	; 0x19
				break;
     e6a:	e0 c1       	rjmp	.+960    	; 0x122c <USB_ProcessHIDReport+0x77a>
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     e6c:	d9 01       	movw	r26, r18
     e6e:	19 96       	adiw	r26, 0x09	; 9
     e70:	ec 92       	st	X, r14
     e72:	19 97       	sbiw	r26, 0x09	; 9
				break;
     e74:	db c1       	rjmp	.+950    	; 0x122c <USB_ProcessHIDReport+0x77a>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     e76:	f9 01       	movw	r30, r18
     e78:	e5 82       	std	Z+5, r14	; 0x05
     e7a:	f6 82       	std	Z+6, r15	; 0x06
     e7c:	07 83       	std	Z+7, r16	; 0x07
     e7e:	10 87       	std	Z+8, r17	; 0x08
				break;
     e80:	d5 c1       	rjmp	.+938    	; 0x122c <USB_ProcessHIDReport+0x77a>
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     e82:	d9 01       	movw	r26, r18
     e84:	ec 92       	st	X, r14
				break;
     e86:	d2 c1       	rjmp	.+932    	; 0x122c <USB_ProcessHIDReport+0x77a>
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     e88:	f9 01       	movw	r30, r18
     e8a:	e2 8e       	std	Z+26, r14	; 0x1a
				break;
     e8c:	cf c1       	rjmp	.+926    	; 0x122c <USB_ProcessHIDReport+0x77a>
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     e8e:	9e 2d       	mov	r25, r14
     e90:	d9 01       	movw	r26, r18
     e92:	5b 96       	adiw	r26, 0x1b	; 27
     e94:	ec 92       	st	X, r14
     e96:	5b 97       	sbiw	r26, 0x1b	; 27

				if (ParserData->UsingReportIDs)
     e98:	ce 57       	subi	r28, 0x7E	; 126
     e9a:	df 4f       	sbci	r29, 0xFF	; 255
     e9c:	e8 81       	ld	r30, Y
     e9e:	f9 81       	ldd	r31, Y+1	; 0x01
     ea0:	c2 58       	subi	r28, 0x82	; 130
     ea2:	d0 40       	sbci	r29, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	88 23       	and	r24, r24
     ea8:	09 f4       	brne	.+2      	; 0xeac <USB_ProcessHIDReport+0x3fa>
     eaa:	4c c0       	rjmp	.+152    	; 0xf44 <USB_ProcessHIDReport+0x492>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     eac:	cc 57       	subi	r28, 0x7C	; 124
     eae:	df 4f       	sbci	r29, 0xFF	; 255
     eb0:	a8 81       	ld	r26, Y
     eb2:	b9 81       	ldd	r27, Y+1	; 0x01
     eb4:	c4 58       	subi	r28, 0x84	; 132
     eb6:	d0 40       	sbci	r29, 0x00	; 0
     eb8:	6c 91       	ld	r22, X

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     eba:	ce 56       	subi	r28, 0x6E	; 110
     ebc:	df 4f       	sbci	r29, 0xFF	; 255
     ebe:	e8 81       	ld	r30, Y
     ec0:	c2 59       	subi	r28, 0x92	; 146
     ec2:	d0 40       	sbci	r29, 0x00	; 0
     ec4:	cd 56       	subi	r28, 0x6D	; 109
     ec6:	df 4f       	sbci	r29, 0xFF	; 255
     ec8:	f8 81       	ld	r31, Y
     eca:	c3 59       	subi	r28, 0x93	; 147
     ecc:	d0 40       	sbci	r29, 0x00	; 0
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	17 c0       	rjmp	.+46     	; 0xf00 <USB_ProcessHIDReport+0x44e>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     ed2:	40 81       	ld	r20, Z
     ed4:	37 96       	adiw	r30, 0x07	; 7
     ed6:	49 17       	cp	r20, r25
     ed8:	91 f4       	brne	.+36     	; 0xefe <USB_ProcessHIDReport+0x44c>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	ac 01       	movw	r20, r24
     ede:	f3 e0       	ldi	r31, 0x03	; 3
     ee0:	44 0f       	add	r20, r20
     ee2:	55 1f       	adc	r21, r21
     ee4:	fa 95       	dec	r31
     ee6:	e1 f7       	brne	.-8      	; 0xee0 <USB_ProcessHIDReport+0x42e>
     ee8:	48 1b       	sub	r20, r24
     eea:	59 0b       	sbc	r21, r25
     eec:	40 57       	subi	r20, 0x70	; 112
     eee:	5c 4f       	sbci	r21, 0xFC	; 252
     ef0:	e5 96       	adiw	r28, 0x35	; 53
     ef2:	ee ad       	ldd	r30, Y+62	; 0x3e
     ef4:	ff ad       	ldd	r31, Y+63	; 0x3f
     ef6:	e5 97       	sbiw	r28, 0x35	; 53
     ef8:	4e 0f       	add	r20, r30
     efa:	5f 1f       	adc	r21, r31
     efc:	23 c0       	rjmp	.+70     	; 0xf44 <USB_ProcessHIDReport+0x492>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     efe:	8f 5f       	subi	r24, 0xFF	; 255
     f00:	86 17       	cp	r24, r22
     f02:	38 f3       	brcs	.-50     	; 0xed2 <USB_ProcessHIDReport+0x420>
     f04:	dc c1       	rjmp	.+952    	; 0x12be <USB_ProcessHIDReport+0x80c>
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     f06:	86 2f       	mov	r24, r22
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	ac 01       	movw	r20, r24
     f0c:	e3 e0       	ldi	r30, 0x03	; 3
     f0e:	44 0f       	add	r20, r20
     f10:	55 1f       	adc	r21, r21
     f12:	ea 95       	dec	r30
     f14:	e1 f7       	brne	.-8      	; 0xf0e <USB_ProcessHIDReport+0x45c>
     f16:	48 1b       	sub	r20, r24
     f18:	59 0b       	sbc	r21, r25
     f1a:	40 57       	subi	r20, 0x70	; 112
     f1c:	5c 4f       	sbci	r21, 0xFC	; 252
     f1e:	e5 96       	adiw	r28, 0x35	; 53
     f20:	8e ad       	ldd	r24, Y+62	; 0x3e
     f22:	9f ad       	ldd	r25, Y+63	; 0x3f
     f24:	e5 97       	sbiw	r28, 0x35	; 53
     f26:	48 0f       	add	r20, r24
     f28:	59 1f       	adc	r21, r25
     f2a:	6f 5f       	subi	r22, 0xFF	; 255
     f2c:	cc 57       	subi	r28, 0x7C	; 124
     f2e:	df 4f       	sbci	r29, 0xFF	; 255
     f30:	a8 81       	ld	r26, Y
     f32:	b9 81       	ldd	r27, Y+1	; 0x01
     f34:	c4 58       	subi	r28, 0x84	; 132
     f36:	d0 40       	sbci	r29, 0x00	; 0
     f38:	6c 93       	st	X, r22
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     f3a:	87 e0       	ldi	r24, 0x07	; 7
     f3c:	da 01       	movw	r26, r20
     f3e:	1d 92       	st	X+, r1
     f40:	8a 95       	dec	r24
     f42:	e9 f7       	brne	.-6      	; 0xf3e <USB_ProcessHIDReport+0x48c>
					}
				}

				ParserData->UsingReportIDs = true;
     f44:	61 e0       	ldi	r22, 0x01	; 1
     f46:	ce 57       	subi	r28, 0x7E	; 126
     f48:	df 4f       	sbci	r29, 0xFF	; 255
     f4a:	e8 81       	ld	r30, Y
     f4c:	f9 81       	ldd	r31, Y+1	; 0x01
     f4e:	c2 58       	subi	r28, 0x82	; 130
     f50:	d0 40       	sbci	r29, 0x00	; 0
     f52:	60 83       	st	Z, r22

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     f54:	d9 01       	movw	r26, r18
     f56:	5b 96       	adiw	r26, 0x1b	; 27
     f58:	8c 91       	ld	r24, X
     f5a:	5b 97       	sbiw	r26, 0x1b	; 27
     f5c:	fa 01       	movw	r30, r20
     f5e:	80 83       	st	Z, r24
				break;
     f60:	65 c1       	rjmp	.+714    	; 0x122c <USB_ProcessHIDReport+0x77a>
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     f62:	fb 2d       	mov	r31, r11
     f64:	f8 30       	cpi	r31, 0x08	; 8
     f66:	09 f4       	brne	.+2      	; 0xf6a <USB_ProcessHIDReport+0x4b8>
     f68:	85 c1       	rjmp	.+778    	; 0x1274 <USB_ProcessHIDReport+0x7c2>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     f6a:	eb 2d       	mov	r30, r11
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	ee 0f       	add	r30, r30
     f70:	ff 1f       	adc	r31, r31
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	6c 0f       	add	r22, r28
     f78:	7d 1f       	adc	r23, r29
     f7a:	e6 0f       	add	r30, r22
     f7c:	f7 1f       	adc	r31, r23
     f7e:	f1 82       	std	Z+1, r15	; 0x01
     f80:	e0 82       	st	Z, r14
     f82:	b3 94       	inc	r11
				break;
     f84:	53 c1       	rjmp	.+678    	; 0x122c <USB_ProcessHIDReport+0x77a>
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     f86:	e9 96       	adiw	r28, 0x39	; 57
     f88:	ec ae       	std	Y+60, r14	; 0x3c
     f8a:	fd ae       	std	Y+61, r15	; 0x3d
     f8c:	0e af       	std	Y+62, r16	; 0x3e
     f8e:	1f af       	std	Y+63, r17	; 0x3f
     f90:	e9 97       	sbiw	r28, 0x39	; 57
     f92:	4c c1       	rjmp	.+664    	; 0x122c <USB_ProcessHIDReport+0x77a>
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     f94:	81 14       	cp	r8, r1
     f96:	91 04       	cpc	r9, r1
     f98:	39 f4       	brne	.+14     	; 0xfa8 <USB_ProcessHIDReport+0x4f6>
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     f9a:	c2 57       	subi	r28, 0x72	; 114
     f9c:	df 4f       	sbci	r29, 0xFF	; 255
     f9e:	88 80       	ld	r8, Y
     fa0:	99 80       	ldd	r9, Y+1	; 0x01
     fa2:	ce 58       	subi	r28, 0x8E	; 142
     fa4:	d0 40       	sbci	r29, 0x00	; 0
     fa6:	19 c0       	rjmp	.+50     	; 0xfda <USB_ProcessHIDReport+0x528>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     fa8:	c6 57       	subi	r28, 0x76	; 118
     faa:	df 4f       	sbci	r29, 0xFF	; 255
     fac:	e8 81       	ld	r30, Y
     fae:	f9 81       	ldd	r31, Y+1	; 0x01
     fb0:	ca 58       	subi	r28, 0x8A	; 138
     fb2:	d0 40       	sbci	r29, 0x00	; 0

					while (CurrCollectionPath->Parent != NULL)
     fb4:	0b c0       	rjmp	.+22     	; 0xfcc <USB_ProcessHIDReport+0x51a>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     fb6:	c4 57       	subi	r28, 0x74	; 116
     fb8:	df 4f       	sbci	r29, 0xFF	; 255
     fba:	88 81       	ld	r24, Y
     fbc:	99 81       	ldd	r25, Y+1	; 0x01
     fbe:	cc 58       	subi	r28, 0x8C	; 140
     fc0:	d0 40       	sbci	r29, 0x00	; 0
     fc2:	e8 17       	cp	r30, r24
     fc4:	f9 07       	cpc	r31, r25
     fc6:	09 f4       	brne	.+2      	; 0xfca <USB_ProcessHIDReport+0x518>
     fc8:	57 c1       	rjmp	.+686    	; 0x1278 <USB_ProcessHIDReport+0x7c6>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     fca:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     fcc:	85 81       	ldd	r24, Z+5	; 0x05
     fce:	96 81       	ldd	r25, Z+6	; 0x06
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	89 f7       	brne	.-30     	; 0xfb6 <USB_ProcessHIDReport+0x504>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     fd4:	96 82       	std	Z+6, r9	; 0x06
     fd6:	85 82       	std	Z+5, r8	; 0x05
     fd8:	4f 01       	movw	r8, r30
				}

				CurrCollectionPath->Type       = ReportItemData;
     fda:	d4 01       	movw	r26, r8
     fdc:	ec 92       	st	X, r14
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     fde:	f9 01       	movw	r30, r18
     fe0:	81 81       	ldd	r24, Z+1	; 0x01
     fe2:	92 81       	ldd	r25, Z+2	; 0x02
     fe4:	12 96       	adiw	r26, 0x02	; 2
     fe6:	9c 93       	st	X, r25
     fe8:	8e 93       	st	-X, r24
     fea:	11 97       	sbiw	r26, 0x01	; 1

				if (UsageListSize)
     fec:	bb 20       	and	r11, r11
     fee:	c1 f0       	breq	.+48     	; 0x1020 <USB_ProcessHIDReport+0x56e>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	9a 81       	ldd	r25, Y+2	; 0x02
     ff4:	14 96       	adiw	r26, 0x04	; 4
     ff6:	9c 93       	st	X, r25
     ff8:	8e 93       	st	-X, r24
     ffa:	13 97       	sbiw	r26, 0x03	; 3
     ffc:	fe 01       	movw	r30, r28
     ffe:	31 96       	adiw	r30, 0x01	; 1

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
    1000:	8b 2d       	mov	r24, r11
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	8e 0f       	add	r24, r30
    100a:	9f 1f       	adc	r25, r31

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
    100c:	04 c0       	rjmp	.+8      	; 0x1016 <USB_ProcessHIDReport+0x564>
					  UsageList[i] = UsageList[i + 1];
    100e:	62 81       	ldd	r22, Z+2	; 0x02
    1010:	73 81       	ldd	r23, Z+3	; 0x03
    1012:	61 93       	st	Z+, r22
    1014:	71 93       	st	Z+, r23

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
    1016:	e8 17       	cp	r30, r24
    1018:	f9 07       	cpc	r31, r25
    101a:	c9 f7       	brne	.-14     	; 0x100e <USB_ProcessHIDReport+0x55c>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
    101c:	ba 94       	dec	r11
    101e:	06 c1       	rjmp	.+524    	; 0x122c <USB_ProcessHIDReport+0x77a>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    1020:	e9 96       	adiw	r28, 0x39	; 57
    1022:	8c ad       	ldd	r24, Y+60	; 0x3c
    1024:	9d ad       	ldd	r25, Y+61	; 0x3d
    1026:	ae ad       	ldd	r26, Y+62	; 0x3e
    1028:	bf ad       	ldd	r27, Y+63	; 0x3f
    102a:	e9 97       	sbiw	r28, 0x39	; 57
    102c:	84 15       	cp	r24, r4
    102e:	95 05       	cpc	r25, r5
    1030:	a6 05       	cpc	r26, r6
    1032:	b7 05       	cpc	r27, r7
    1034:	08 f4       	brcc	.+2      	; 0x1038 <USB_ProcessHIDReport+0x586>
    1036:	fa c0       	rjmp	.+500    	; 0x122c <USB_ProcessHIDReport+0x77a>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
    1038:	d4 01       	movw	r26, r8
    103a:	14 96       	adiw	r26, 0x04	; 4
    103c:	5c 92       	st	X, r5
    103e:	4e 92       	st	-X, r4
    1040:	13 97       	sbiw	r26, 0x03	; 3
    1042:	08 94       	sec
    1044:	41 1c       	adc	r4, r1
    1046:	51 1c       	adc	r5, r1
    1048:	61 1c       	adc	r6, r1
    104a:	71 1c       	adc	r7, r1
    104c:	ef c0       	rjmp	.+478    	; 0x122c <USB_ProcessHIDReport+0x77a>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    104e:	81 14       	cp	r8, r1
    1050:	91 04       	cpc	r9, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <USB_ProcessHIDReport+0x5a4>
    1054:	13 c1       	rjmp	.+550    	; 0x127c <USB_ProcessHIDReport+0x7ca>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
    1056:	f4 01       	movw	r30, r8
    1058:	85 80       	ldd	r8, Z+5	; 0x05
    105a:	96 80       	ldd	r9, Z+6	; 0x06
				break;
    105c:	e7 c0       	rjmp	.+462    	; 0x122c <USB_ProcessHIDReport+0x77a>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    105e:	de 01       	movw	r26, r28
    1060:	59 96       	adiw	r26, 0x19	; 25
    1062:	f7 01       	movw	r30, r14
    1064:	8a e1       	ldi	r24, 0x1A	; 26
    1066:	01 90       	ld	r0, Z+
    1068:	0d 92       	st	X+, r0
    106a:	81 50       	subi	r24, 0x01	; 1
    106c:	e1 f7       	brne	.-8      	; 0x1066 <USB_ProcessHIDReport+0x5b4>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
    106e:	5d 8b       	std	Y+21, r21	; 0x15
    1070:	4c 8b       	std	Y+20, r20	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
    1072:	98 8e       	std	Y+24, r9	; 0x18
    1074:	8f 8a       	std	Y+23, r8	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
    1076:	d7 01       	movw	r26, r14
    1078:	5b 96       	adiw	r26, 0x1b	; 27
    107a:	8c 91       	ld	r24, X
    107c:	5b 97       	sbiw	r26, 0x1b	; 27
    107e:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
    1080:	bb 20       	and	r11, r11
    1082:	b1 f0       	breq	.+44     	; 0x10b0 <USB_ProcessHIDReport+0x5fe>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	9a 81       	ldd	r25, Y+2	; 0x02
    1088:	9d 8f       	std	Y+29, r25	; 0x1d
    108a:	8c 8f       	std	Y+28, r24	; 0x1c
    108c:	fe 01       	movw	r30, r28
    108e:	31 96       	adiw	r30, 0x01	; 1

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
    1090:	8b 2d       	mov	r24, r11
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	8e 0f       	add	r24, r30
    109a:	9f 1f       	adc	r25, r31

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
    109c:	04 c0       	rjmp	.+8      	; 0x10a6 <USB_ProcessHIDReport+0x5f4>
						  UsageList[i] = UsageList[i + 1];
    109e:	22 81       	ldd	r18, Z+2	; 0x02
    10a0:	33 81       	ldd	r19, Z+3	; 0x03
    10a2:	21 93       	st	Z+, r18
    10a4:	31 93       	st	Z+, r19

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
    10a6:	e8 17       	cp	r30, r24
    10a8:	f9 07       	cpc	r31, r25
    10aa:	c9 f7       	brne	.-14     	; 0x109e <USB_ProcessHIDReport+0x5ec>
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
    10ac:	ba 94       	dec	r11
    10ae:	12 c0       	rjmp	.+36     	; 0x10d4 <USB_ProcessHIDReport+0x622>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    10b0:	e9 96       	adiw	r28, 0x39	; 57
    10b2:	8c ad       	ldd	r24, Y+60	; 0x3c
    10b4:	9d ad       	ldd	r25, Y+61	; 0x3d
    10b6:	ae ad       	ldd	r26, Y+62	; 0x3e
    10b8:	bf ad       	ldd	r27, Y+63	; 0x3f
    10ba:	e9 97       	sbiw	r28, 0x39	; 57
    10bc:	84 15       	cp	r24, r4
    10be:	95 05       	cpc	r25, r5
    10c0:	a6 05       	cpc	r26, r6
    10c2:	b7 05       	cpc	r27, r7
    10c4:	38 f0       	brcs	.+14     	; 0x10d4 <USB_ProcessHIDReport+0x622>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
    10c6:	5d 8e       	std	Y+29, r5	; 0x1d
    10c8:	4c 8e       	std	Y+28, r4	; 0x1c
    10ca:	08 94       	sec
    10cc:	41 1c       	adc	r4, r1
    10ce:	51 1c       	adc	r5, r1
    10d0:	61 1c       	adc	r6, r1
    10d2:	71 1c       	adc	r7, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
    10d4:	c1 58       	subi	r28, 0x81	; 129
    10d6:	df 4f       	sbci	r29, 0xFF	; 255
    10d8:	98 81       	ld	r25, Y
    10da:	cf 57       	subi	r28, 0x7F	; 127
    10dc:	d0 40       	sbci	r29, 0x00	; 0
    10de:	90 38       	cpi	r25, 0x80	; 128
    10e0:	11 f4       	brne	.+4      	; 0x10e6 <USB_ProcessHIDReport+0x634>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
    10e2:	1b 8a       	std	Y+19, r1	; 0x13
    10e4:	0c c0       	rjmp	.+24     	; 0x10fe <USB_ProcessHIDReport+0x64c>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
    10e6:	c1 58       	subi	r28, 0x81	; 129
    10e8:	df 4f       	sbci	r29, 0xFF	; 255
    10ea:	a8 81       	ld	r26, Y
    10ec:	cf 57       	subi	r28, 0x7F	; 127
    10ee:	d0 40       	sbci	r29, 0x00	; 0
    10f0:	a0 39       	cpi	r26, 0x90	; 144
    10f2:	19 f4       	brne	.+6      	; 0x10fa <USB_ProcessHIDReport+0x648>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
    10f4:	b1 e0       	ldi	r27, 0x01	; 1
    10f6:	bb 8b       	std	Y+19, r27	; 0x13
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <USB_ProcessHIDReport+0x64c>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
    10fa:	e2 e0       	ldi	r30, 0x02	; 2
    10fc:	eb 8b       	std	Y+19, r30	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
    10fe:	eb 89       	ldd	r30, Y+19	; 0x13
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	ee 0f       	add	r30, r30
    1104:	ff 1f       	adc	r31, r31
    1106:	ec 0d       	add	r30, r12
    1108:	fd 1d       	adc	r31, r13
    110a:	81 81       	ldd	r24, Z+1	; 0x01
    110c:	92 81       	ldd	r25, Z+2	; 0x02
    110e:	9a 8b       	std	Y+18, r25	; 0x12
    1110:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
    1112:	d7 01       	movw	r26, r14
    1114:	2c 91       	ld	r18, X
    1116:	81 81       	ldd	r24, Z+1	; 0x01
    1118:	92 81       	ldd	r25, Z+2	; 0x02
    111a:	82 0f       	add	r24, r18
    111c:	91 1d       	adc	r25, r1
    111e:	92 83       	std	Z+2, r25	; 0x02
    1120:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
    1122:	eb 89       	ldd	r30, Y+19	; 0x13
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	ee 0f       	add	r30, r30
    1128:	ff 1f       	adc	r31, r31
    112a:	ec 0d       	add	r30, r12
    112c:	fd 1d       	adc	r31, r13
    112e:	c0 58       	subi	r28, 0x80	; 128
    1130:	df 4f       	sbci	r29, 0xFF	; 255
    1132:	a8 81       	ld	r26, Y
    1134:	b9 81       	ldd	r27, Y+1	; 0x01
    1136:	c0 58       	subi	r28, 0x80	; 128
    1138:	d0 40       	sbci	r29, 0x00	; 0
    113a:	8d 91       	ld	r24, X+
    113c:	9c 91       	ld	r25, X
    113e:	11 97       	sbiw	r26, 0x01	; 1
    1140:	21 81       	ldd	r18, Z+1	; 0x01
    1142:	32 81       	ldd	r19, Z+2	; 0x02
    1144:	28 17       	cp	r18, r24
    1146:	39 07       	cpc	r19, r25
    1148:	08 f4       	brcc	.+2      	; 0x114c <USB_ProcessHIDReport+0x69a>
    114a:	9c 01       	movw	r18, r24
    114c:	c0 58       	subi	r28, 0x80	; 128
    114e:	df 4f       	sbci	r29, 0xFF	; 255
    1150:	e8 81       	ld	r30, Y
    1152:	f9 81       	ldd	r31, Y+1	; 0x01
    1154:	c0 58       	subi	r28, 0x80	; 128
    1156:	d0 40       	sbci	r29, 0x00	; 0
    1158:	31 83       	std	Z+1, r19	; 0x01
    115a:	20 83       	st	Z, r18

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
    115c:	e5 96       	adiw	r28, 0x35	; 53
    115e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1160:	bf ad       	ldd	r27, Y+63	; 0x3f
    1162:	e5 97       	sbiw	r28, 0x35	; 53
    1164:	8c 91       	ld	r24, X
    1166:	84 31       	cpi	r24, 0x14	; 20
    1168:	09 f4       	brne	.+2      	; 0x116c <USB_ProcessHIDReport+0x6ba>
    116a:	8a c0       	rjmp	.+276    	; 0x1280 <USB_ProcessHIDReport+0x7ce>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	2a e2       	ldi	r18, 0x2A	; 42
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	82 9f       	mul	r24, r18
    1174:	f0 01       	movw	r30, r0
    1176:	83 9f       	mul	r24, r19
    1178:	f0 0d       	add	r31, r0
    117a:	92 9f       	mul	r25, r18
    117c:	f0 0d       	add	r31, r0
    117e:	11 24       	eor	r1, r1
    1180:	ea 0f       	add	r30, r26
    1182:	fb 1f       	adc	r31, r27
    1184:	31 96       	adiw	r30, 0x01	; 1
    1186:	de 01       	movw	r26, r28
    1188:	51 96       	adiw	r26, 0x11	; 17
    118a:	8a e2       	ldi	r24, 0x2A	; 42
    118c:	0d 90       	ld	r0, X+
    118e:	01 92       	st	Z+, r0
    1190:	81 50       	subi	r24, 0x01	; 1
    1192:	e1 f7       	brne	.-8      	; 0x118c <USB_ProcessHIDReport+0x6da>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1194:	ca 57       	subi	r28, 0x7A	; 122
    1196:	df 4f       	sbci	r29, 0xFF	; 255
    1198:	88 81       	ld	r24, Y
    119a:	99 81       	ldd	r25, Y+1	; 0x01
    119c:	aa 81       	ldd	r26, Y+2	; 0x02
    119e:	bb 81       	ldd	r27, Y+3	; 0x03
    11a0:	c6 58       	subi	r28, 0x86	; 134
    11a2:	d0 40       	sbci	r29, 0x00	; 0
    11a4:	00 97       	sbiw	r24, 0x00	; 0
    11a6:	a1 05       	cpc	r26, r1
    11a8:	b1 05       	cpc	r27, r1
    11aa:	a1 f5       	brne	.+104    	; 0x1214 <USB_ProcessHIDReport+0x762>
    11ac:	ce 01       	movw	r24, r28
    11ae:	41 96       	adiw	r24, 0x11	; 17
    11b0:	cc 56       	subi	r28, 0x6C	; 108
    11b2:	df 4f       	sbci	r29, 0xFF	; 255
    11b4:	48 83       	st	Y, r20
    11b6:	c4 59       	subi	r28, 0x94	; 148
    11b8:	d0 40       	sbci	r29, 0x00	; 0
    11ba:	cb 56       	subi	r28, 0x6B	; 107
    11bc:	df 4f       	sbci	r29, 0xFF	; 255
    11be:	58 83       	st	Y, r21
    11c0:	c5 59       	subi	r28, 0x95	; 149
    11c2:	d0 40       	sbci	r29, 0x00	; 0
    11c4:	ca 56       	subi	r28, 0x6A	; 106
    11c6:	df 4f       	sbci	r29, 0xFF	; 255
    11c8:	68 83       	st	Y, r22
    11ca:	c6 59       	subi	r28, 0x96	; 150
    11cc:	d0 40       	sbci	r29, 0x00	; 0
    11ce:	c9 56       	subi	r28, 0x69	; 105
    11d0:	df 4f       	sbci	r29, 0xFF	; 255
    11d2:	78 83       	st	Y, r23
    11d4:	c7 59       	subi	r28, 0x97	; 151
    11d6:	d0 40       	sbci	r29, 0x00	; 0
    11d8:	6a dc       	rcall	.-1836   	; 0xaae <CALLBACK_HIDParser_FilterHIDReportItem>
    11da:	cc 56       	subi	r28, 0x6C	; 108
    11dc:	df 4f       	sbci	r29, 0xFF	; 255
    11de:	48 81       	ld	r20, Y
    11e0:	c4 59       	subi	r28, 0x94	; 148
    11e2:	d0 40       	sbci	r29, 0x00	; 0
    11e4:	cb 56       	subi	r28, 0x6B	; 107
    11e6:	df 4f       	sbci	r29, 0xFF	; 255
    11e8:	58 81       	ld	r21, Y
    11ea:	c5 59       	subi	r28, 0x95	; 149
    11ec:	d0 40       	sbci	r29, 0x00	; 0
    11ee:	ca 56       	subi	r28, 0x6A	; 106
    11f0:	df 4f       	sbci	r29, 0xFF	; 255
    11f2:	68 81       	ld	r22, Y
    11f4:	c6 59       	subi	r28, 0x96	; 150
    11f6:	d0 40       	sbci	r29, 0x00	; 0
    11f8:	c9 56       	subi	r28, 0x69	; 105
    11fa:	df 4f       	sbci	r29, 0xFF	; 255
    11fc:	78 81       	ld	r23, Y
    11fe:	c7 59       	subi	r28, 0x97	; 151
    1200:	d0 40       	sbci	r29, 0x00	; 0
    1202:	88 23       	and	r24, r24
    1204:	39 f0       	breq	.+14     	; 0x1214 <USB_ProcessHIDReport+0x762>
					  ParserData->TotalReportItems++;
    1206:	e5 96       	adiw	r28, 0x35	; 53
    1208:	ae ad       	ldd	r26, Y+62	; 0x3e
    120a:	bf ad       	ldd	r27, Y+63	; 0x3f
    120c:	e5 97       	sbiw	r28, 0x35	; 53
    120e:	8c 91       	ld	r24, X
    1210:	8f 5f       	subi	r24, 0xFF	; 255
    1212:	8c 93       	st	X, r24
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    1214:	a3 94       	inc	r10
    1216:	f7 01       	movw	r30, r14
    1218:	82 8d       	ldd	r24, Z+26	; 0x1a
    121a:	a8 16       	cp	r10, r24
    121c:	08 f4       	brcc	.+2      	; 0x1220 <USB_ProcessHIDReport+0x76e>
    121e:	1f cf       	rjmp	.-450    	; 0x105e <USB_ProcessHIDReport+0x5ac>
    1220:	97 01       	movw	r18, r14
    1222:	a6 01       	movw	r20, r12
    1224:	68 01       	movw	r12, r16
    1226:	02 c0       	rjmp	.+4      	; 0x122c <USB_ProcessHIDReport+0x77a>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    1228:	27 01       	movw	r4, r14
    122a:	38 01       	movw	r6, r16
			
			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
    122c:	eb 96       	adiw	r28, 0x3b	; 59
    122e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1230:	9f ad       	ldd	r25, Y+63	; 0x3f
    1232:	eb 97       	sbiw	r28, 0x3b	; 59
    1234:	8c 70       	andi	r24, 0x0C	; 12
    1236:	90 70       	andi	r25, 0x00	; 0
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	51 f4       	brne	.+20     	; 0x1250 <USB_ProcessHIDReport+0x79e>
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
    123c:	e9 96       	adiw	r28, 0x39	; 57
    123e:	1c ae       	std	Y+60, r1	; 0x3c
    1240:	1d ae       	std	Y+61, r1	; 0x3d
    1242:	1e ae       	std	Y+62, r1	; 0x3e
    1244:	1f ae       	std	Y+63, r1	; 0x3f
    1246:	e9 97       	sbiw	r28, 0x39	; 57
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
    1248:	44 24       	eor	r4, r4
    124a:	55 24       	eor	r5, r5
    124c:	32 01       	movw	r6, r4
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
    124e:	bb 24       	eor	r11, r11
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
    1250:	21 14       	cp	r2, r1
    1252:	31 04       	cpc	r3, r1
    1254:	09 f0       	breq	.+2      	; 0x1258 <USB_ProcessHIDReport+0x7a6>
    1256:	c4 cc       	rjmp	.-1656   	; 0xbe0 <USB_ProcessHIDReport+0x12e>
    1258:	e5 96       	adiw	r28, 0x35	; 53
    125a:	6e ad       	ldd	r22, Y+62	; 0x3e
    125c:	7f ad       	ldd	r23, Y+63	; 0x3f
    125e:	e5 97       	sbiw	r28, 0x35	; 53
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
    1260:	db 01       	movw	r26, r22
    1262:	8c 91       	ld	r24, X
    1264:	88 23       	and	r24, r24
    1266:	71 f4       	brne	.+28     	; 0x1284 <USB_ProcessHIDReport+0x7d2>
	  return HID_PARSE_NoUnfilteredReportItems;
    1268:	88 e0       	ldi	r24, 0x08	; 8
    126a:	0f c0       	rjmp	.+30     	; 0x128a <USB_ProcessHIDReport+0x7d8>

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	0d c0       	rjmp	.+26     	; 0x128a <USB_ProcessHIDReport+0x7d8>

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
    1270:	82 e0       	ldi	r24, 0x02	; 2
    1272:	0b c0       	rjmp	.+22     	; 0x128a <USB_ProcessHIDReport+0x7d8>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
    1274:	86 e0       	ldi	r24, 0x06	; 6
    1276:	09 c0       	rjmp	.+18     	; 0x128a <USB_ProcessHIDReport+0x7d8>
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
    1278:	85 e0       	ldi	r24, 0x05	; 5
    127a:	07 c0       	rjmp	.+14     	; 0x128a <USB_ProcessHIDReport+0x7d8>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
    127c:	84 e0       	ldi	r24, 0x04	; 4
    127e:	05 c0       	rjmp	.+10     	; 0x128a <USB_ProcessHIDReport+0x7d8>
					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;
    1280:	83 e0       	ldi	r24, 0x03	; 3
    1282:	03 c0       	rjmp	.+6      	; 0x128a <USB_ProcessHIDReport+0x7d8>
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	01 c0       	rjmp	.+2      	; 0x128a <USB_ProcessHIDReport+0x7d8>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
    1288:	87 e0       	ldi	r24, 0x07	; 7

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    128a:	c7 56       	subi	r28, 0x67	; 103
    128c:	df 4f       	sbci	r29, 0xFF	; 255
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	ff 90       	pop	r15
    12a2:	ef 90       	pop	r14
    12a4:	df 90       	pop	r13
    12a6:	cf 90       	pop	r12
    12a8:	bf 90       	pop	r11
    12aa:	af 90       	pop	r10
    12ac:	9f 90       	pop	r9
    12ae:	8f 90       	pop	r8
    12b0:	7f 90       	pop	r7
    12b2:	6f 90       	pop	r6
    12b4:	5f 90       	pop	r5
    12b6:	4f 90       	pop	r4
    12b8:	3f 90       	pop	r3
    12ba:	2f 90       	pop	r2
    12bc:	08 95       	ret
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    12be:	6a 30       	cpi	r22, 0x0A	; 10
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <USB_ProcessHIDReport+0x812>
    12c2:	21 ce       	rjmp	.-958    	; 0xf06 <USB_ProcessHIDReport+0x454>
    12c4:	e1 cf       	rjmp	.-62     	; 0x1288 <USB_ProcessHIDReport+0x7d6>

000012c6 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    12c6:	80 91 9e 00 	lds	r24, 0x009E
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	81 70       	andi	r24, 0x01	; 1
    12ce:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    12d0:	20 91 a0 00 	lds	r18, 0x00A0
    12d4:	2d 7f       	andi	r18, 0xFD	; 253
    12d6:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
    12da:	20 91 9e 00 	lds	r18, 0x009E
    12de:	22 60       	ori	r18, 0x02	; 2
    12e0:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
    12e4:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
    12e8:	21 fd       	sbrc	r18, 1
    12ea:	fc cf       	rjmp	.-8      	; 0x12e4 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    12ec:	20 91 9e 00 	lds	r18, 0x009E
    12f0:	21 60       	ori	r18, 0x01	; 1
    12f2:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
    12f6:	10 92 14 05 	sts	0x0514, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    12fa:	20 91 a0 00 	lds	r18, 0x00A0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	20 72       	andi	r18, 0x20	; 32
    1302:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    1304:	40 91 a0 00 	lds	r20, 0x00A0
    1308:	4f 7d       	andi	r20, 0xDF	; 223
    130a:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    130e:	40 91 9f 00 	lds	r20, 0x009F
    1312:	4f 7d       	andi	r20, 0xDF	; 223
    1314:	40 93 9f 00 	sts	0x009F, r20
    1318:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    131a:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    131e:	55 ff       	sbrs	r21, 5
    1320:	0b c0       	rjmp	.+22     	; 0x1338 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1322:	40 91 9f 00 	lds	r20, 0x009F
    1326:	4f 7d       	andi	r20, 0xDF	; 223
    1328:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    132c:	40 91 9f 00 	lds	r20, 0x009F
    1330:	4d 7f       	andi	r20, 0xFD	; 253
    1332:	40 93 9f 00 	sts	0x009F, r20
    1336:	08 c0       	rjmp	.+16     	; 0x1348 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1338:	ef ec       	ldi	r30, 0xCF	; 207
    133a:	f7 e0       	ldi	r31, 0x07	; 7
    133c:	31 97       	sbiw	r30, 0x01	; 1
    133e:	f1 f7       	brne	.-4      	; 0x133c <USB_Host_ResetDevice+0x76>
    1340:	00 c0       	rjmp	.+0      	; 0x1342 <USB_Host_ResetDevice+0x7c>
    1342:	00 00       	nop
    1344:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
    1346:	49 f7       	brne	.-46     	; 0x131a <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
    1348:	21 15       	cp	r18, r1
    134a:	31 05       	cpc	r19, r1
    134c:	29 f0       	breq	.+10     	; 0x1358 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    134e:	20 91 a0 00 	lds	r18, 0x00A0
    1352:	20 62       	ori	r18, 0x20	; 32
    1354:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	29 f4       	brne	.+10     	; 0x1366 <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    135c:	80 91 9e 00 	lds	r24, 0x009E
    1360:	8e 7f       	andi	r24, 0xFE	; 254
    1362:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1366:	80 91 a0 00 	lds	r24, 0x00A0
    136a:	82 60       	ori	r24, 0x02	; 2
    136c:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
    1370:	08 95       	ret

00001372 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1372:	40 91 9e 00 	lds	r20, 0x009E
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	41 70       	andi	r20, 0x01	; 1
    137a:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    137c:	20 91 a0 00 	lds	r18, 0x00A0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	20 72       	andi	r18, 0x20	; 32
    1384:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    1386:	90 91 a0 00 	lds	r25, 0x00A0
    138a:	9f 7d       	andi	r25, 0xDF	; 223
    138c:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1390:	90 91 9f 00 	lds	r25, 0x009F
    1394:	9f 7d       	andi	r25, 0xDF	; 223
    1396:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    139a:	90 91 9e 00 	lds	r25, 0x009E
    139e:	91 60       	ori	r25, 0x01	; 1
    13a0:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    13a4:	26 c0       	rjmp	.+76     	; 0x13f2 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    13a6:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    13aa:	95 ff       	sbrs	r25, 5
    13ac:	06 c0       	rjmp	.+12     	; 0x13ba <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    13ae:	90 91 9f 00 	lds	r25, 0x009F
    13b2:	9f 7d       	andi	r25, 0xDF	; 223
    13b4:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
    13b8:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
    13ba:	90 91 1e 05 	lds	r25, 0x051E
    13be:	91 30       	cpi	r25, 0x01	; 1
    13c0:	d9 f0       	breq	.+54     	; 0x13f8 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
    13c2:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
    13c6:	94 ff       	sbrs	r25, 4
    13c8:	09 c0       	rjmp	.+18     	; 0x13dc <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    13ca:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    13ce:	80 91 a6 00 	lds	r24, 0x00A6
    13d2:	8f 7e       	andi	r24, 0xEF	; 239
    13d4:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
    13d8:	82 e0       	ldi	r24, 0x02	; 2

			break;
    13da:	0f c0       	rjmp	.+30     	; 0x13fa <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    13dc:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
    13e0:	91 ff       	sbrs	r25, 1
    13e2:	07 c0       	rjmp	.+14     	; 0x13f2 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    13e4:	80 91 a6 00 	lds	r24, 0x00A6
    13e8:	8d 7f       	andi	r24, 0xFD	; 253
    13ea:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
    13ee:	83 e0       	ldi	r24, 0x03	; 3

			break;
    13f0:	04 c0       	rjmp	.+8      	; 0x13fa <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    13f2:	88 23       	and	r24, r24
    13f4:	c1 f6       	brne	.-80     	; 0x13a6 <USB_Host_WaitMS+0x34>
    13f6:	01 c0       	rjmp	.+2      	; 0x13fa <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
    13f8:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
    13fa:	41 15       	cp	r20, r1
    13fc:	51 05       	cpc	r21, r1
    13fe:	29 f4       	brne	.+10     	; 0x140a <USB_Host_WaitMS+0x98>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1400:	90 91 9e 00 	lds	r25, 0x009E
    1404:	9e 7f       	andi	r25, 0xFE	; 254
    1406:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    140a:	21 15       	cp	r18, r1
    140c:	31 05       	cpc	r19, r1
    140e:	29 f0       	breq	.+10     	; 0x141a <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    1410:	90 91 a0 00 	lds	r25, 0x00A0
    1414:	90 62       	ori	r25, 0x20	; 32
    1416:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    141a:	08 95       	ret

0000141c <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	28 97       	sbiw	r28, 0x08	; 8
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    1434:	80 91 1e 05 	lds	r24, 0x051E
    1438:	85 30       	cpi	r24, 0x05	; 5
    143a:	09 f4       	brne	.+2      	; 0x143e <USB_Host_ProcessNextHostState+0x22>
    143c:	99 c0       	rjmp	.+306    	; 0x1570 <USB_Host_ProcessNextHostState+0x154>
    143e:	86 30       	cpi	r24, 0x06	; 6
    1440:	68 f4       	brcc	.+26     	; 0x145c <USB_Host_ProcessNextHostState+0x40>
    1442:	82 30       	cpi	r24, 0x02	; 2
    1444:	c1 f1       	breq	.+112    	; 0x14b6 <USB_Host_ProcessNextHostState+0x9a>
    1446:	83 30       	cpi	r24, 0x03	; 3
    1448:	18 f4       	brcc	.+6      	; 0x1450 <USB_Host_ProcessNextHostState+0x34>
    144a:	88 23       	and	r24, r24
    144c:	a1 f0       	breq	.+40     	; 0x1476 <USB_Host_ProcessNextHostState+0x5a>
    144e:	04 c1       	rjmp	.+520    	; 0x1658 <USB_Host_ProcessNextHostState+0x23c>
    1450:	83 30       	cpi	r24, 0x03	; 3
    1452:	d9 f1       	breq	.+118    	; 0x14ca <USB_Host_ProcessNextHostState+0xae>
    1454:	84 30       	cpi	r24, 0x04	; 4
    1456:	09 f0       	breq	.+2      	; 0x145a <USB_Host_ProcessNextHostState+0x3e>
    1458:	ff c0       	rjmp	.+510    	; 0x1658 <USB_Host_ProcessNextHostState+0x23c>
    145a:	62 c0       	rjmp	.+196    	; 0x1520 <USB_Host_ProcessNextHostState+0x104>
    145c:	87 30       	cpi	r24, 0x07	; 7
    145e:	09 f4       	brne	.+2      	; 0x1462 <USB_Host_ProcessNextHostState+0x46>
    1460:	9e c0       	rjmp	.+316    	; 0x159e <USB_Host_ProcessNextHostState+0x182>
    1462:	87 30       	cpi	r24, 0x07	; 7
    1464:	08 f4       	brcc	.+2      	; 0x1468 <USB_Host_ProcessNextHostState+0x4c>
    1466:	8f c0       	rjmp	.+286    	; 0x1586 <USB_Host_ProcessNextHostState+0x16a>
    1468:	88 30       	cpi	r24, 0x08	; 8
    146a:	09 f4       	brne	.+2      	; 0x146e <USB_Host_ProcessNextHostState+0x52>
    146c:	b8 c0       	rjmp	.+368    	; 0x15de <USB_Host_ProcessNextHostState+0x1c2>
    146e:	89 30       	cpi	r24, 0x09	; 9
    1470:	09 f0       	breq	.+2      	; 0x1474 <USB_Host_ProcessNextHostState+0x58>
    1472:	f2 c0       	rjmp	.+484    	; 0x1658 <USB_Host_ProcessNextHostState+0x23c>
    1474:	d9 c0       	rjmp	.+434    	; 0x1628 <USB_Host_ProcessNextHostState+0x20c>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    1476:	00 91 12 05 	lds	r16, 0x0512
    147a:	10 91 13 05 	lds	r17, 0x0513
    147e:	01 15       	cp	r16, r1
    1480:	11 05       	cpc	r17, r1
    1482:	09 f4       	brne	.+2      	; 0x1486 <USB_Host_ProcessNextHostState+0x6a>
    1484:	e9 c0       	rjmp	.+466    	; 0x1658 <USB_Host_ProcessNextHostState+0x23c>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	74 df       	rcall	.-280    	; 0x1372 <USB_Host_WaitMS>
    148a:	68 2f       	mov	r22, r24
    148c:	88 23       	and	r24, r24
    148e:	31 f0       	breq	.+12     	; 0x149c <USB_Host_ProcessNextHostState+0x80>
				{
					USB_HostState = PostWaitState;
    1490:	80 91 11 05 	lds	r24, 0x0511
    1494:	80 93 1e 05 	sts	0x051E, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    1498:	81 e0       	ldi	r24, 0x01	; 1
					break;
    149a:	d2 c0       	rjmp	.+420    	; 0x1640 <USB_Host_ProcessNextHostState+0x224>
				}

				if (!(--WaitMSRemaining))
    149c:	01 50       	subi	r16, 0x01	; 1
    149e:	10 40       	sbci	r17, 0x00	; 0
    14a0:	10 93 13 05 	sts	0x0513, r17
    14a4:	00 93 12 05 	sts	0x0512, r16
    14a8:	01 15       	cp	r16, r1
    14aa:	11 05       	cpc	r17, r1
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <USB_Host_ProcessNextHostState+0x94>
    14ae:	d4 c0       	rjmp	.+424    	; 0x1658 <USB_Host_ProcessNextHostState+0x23c>
				  USB_HostState = PostWaitState;
    14b0:	80 91 11 05 	lds	r24, 0x0511
    14b4:	07 c0       	rjmp	.+14     	; 0x14c4 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    14b6:	88 ee       	ldi	r24, 0xE8	; 232
    14b8:	93 e0       	ldi	r25, 0x03	; 3
    14ba:	90 93 13 05 	sts	0x0513, r25
    14be:	80 93 12 05 	sts	0x0512, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    14c2:	83 e0       	ldi	r24, 0x03	; 3
    14c4:	80 93 1e 05 	sts	0x051E, r24
			break;
    14c8:	c7 c0       	rjmp	.+398    	; 0x1658 <USB_Host_ProcessNextHostState+0x23c>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    14ca:	80 91 12 05 	lds	r24, 0x0512
    14ce:	90 91 13 05 	lds	r25, 0x0513
    14d2:	9c 01       	movw	r18, r24
    14d4:	21 50       	subi	r18, 0x01	; 1
    14d6:	30 40       	sbci	r19, 0x00	; 0
    14d8:	30 93 13 05 	sts	0x0513, r19
    14dc:	20 93 12 05 	sts	0x0512, r18
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	39 f0       	breq	.+14     	; 0x14f2 <USB_Host_ProcessNextHostState+0xd6>
    14e4:	8f ec       	ldi	r24, 0xCF	; 207
    14e6:	97 e0       	ldi	r25, 0x07	; 7
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <USB_Host_ProcessNextHostState+0xcc>
    14ec:	00 c0       	rjmp	.+0      	; 0x14ee <USB_Host_ProcessNextHostState+0xd2>
    14ee:	00 00       	nop
    14f0:	b3 c0       	rjmp	.+358    	; 0x1658 <USB_Host_ProcessNextHostState+0x23c>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    14f2:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    14f4:	80 91 d8 00 	lds	r24, 0x00D8
    14f8:	80 61       	ori	r24, 0x10	; 16
    14fa:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    14fe:	80 91 dd 00 	lds	r24, 0x00DD
    1502:	8b 7f       	andi	r24, 0xFB	; 251
    1504:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
    1508:	80 91 d7 00 	lds	r24, 0x00D7
    150c:	80 61       	ori	r24, 0x10	; 16
    150e:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    1512:	80 91 dd 00 	lds	r24, 0x00DD
    1516:	82 60       	ori	r24, 0x02	; 2
    1518:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    151c:	84 e0       	ldi	r24, 0x04	; 4
    151e:	d2 cf       	rjmp	.-92     	; 0x14c4 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    1520:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    1524:	80 ff       	sbrs	r24, 0
    1526:	98 c0       	rjmp	.+304    	; 0x1658 <USB_Host_ProcessNextHostState+0x23c>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1528:	80 91 9f 00 	lds	r24, 0x009F
    152c:	8e 7f       	andi	r24, 0xFE	; 254
    152e:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1532:	80 91 9f 00 	lds	r24, 0x009F
    1536:	8d 7f       	andi	r24, 0xFD	; 253
    1538:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    153c:	80 91 df 00 	lds	r24, 0x00DF
    1540:	8d 7f       	andi	r24, 0xFD	; 253
    1542:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    1546:	80 91 de 00 	lds	r24, 0x00DE
    154a:	82 60       	ori	r24, 0x02	; 2
    154c:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1550:	80 91 9e 00 	lds	r24, 0x009E
    1554:	81 60       	ori	r24, 0x01	; 1
    1556:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    155a:	17 d1       	rcall	.+558    	; 0x178a <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    155c:	10 92 1e 05 	sts	0x051E, r1
    1560:	84 e6       	ldi	r24, 0x64	; 100
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	90 93 13 05 	sts	0x0513, r25
    1568:	80 93 12 05 	sts	0x0512, r24
    156c:	85 e0       	ldi	r24, 0x05	; 5
    156e:	59 c0       	rjmp	.+178    	; 0x1622 <USB_Host_ProcessNextHostState+0x206>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    1570:	aa de       	rcall	.-684    	; 0x12c6 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    1572:	10 92 1e 05 	sts	0x051E, r1
    1576:	88 ec       	ldi	r24, 0xC8	; 200
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	90 93 13 05 	sts	0x0513, r25
    157e:	80 93 12 05 	sts	0x0512, r24
    1582:	86 e0       	ldi	r24, 0x06	; 6
    1584:	4e c0       	rjmp	.+156    	; 0x1622 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	40 e0       	ldi	r20, 0x00	; 0
    158c:	20 e4       	ldi	r18, 0x40	; 64
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	01 e0       	ldi	r16, 0x01	; 1
    1592:	6d d0       	rcall	.+218    	; 0x166e <Pipe_ConfigurePipe>
    1594:	88 23       	and	r24, r24
    1596:	09 f4       	brne	.+2      	; 0x159a <USB_Host_ProcessNextHostState+0x17e>
    1598:	4f c0       	rjmp	.+158    	; 0x1638 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    159a:	87 e0       	ldi	r24, 0x07	; 7
    159c:	93 cf       	rjmp	.-218    	; 0x14c4 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    159e:	a6 e1       	ldi	r26, 0x16	; 22
    15a0:	b5 e0       	ldi	r27, 0x05	; 5
    15a2:	ee e2       	ldi	r30, 0x2E	; 46
    15a4:	f1 e0       	ldi	r31, 0x01	; 1
    15a6:	88 e0       	ldi	r24, 0x08	; 8
    15a8:	01 90       	ld	r0, Z+
    15aa:	0d 92       	st	X+, r0
    15ac:	81 50       	subi	r24, 0x01	; 1
    15ae:	e1 f7       	brne	.-8      	; 0x15a8 <USB_Host_ProcessNextHostState+0x18c>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    15b0:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    15b4:	ce 01       	movw	r24, r28
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	00 d3       	rcall	.+1536   	; 0x1bba <USB_Host_SendControlRequest>
    15ba:	68 2f       	mov	r22, r24
    15bc:	88 23       	and	r24, r24
    15be:	09 f0       	breq	.+2      	; 0x15c2 <USB_Host_ProcessNextHostState+0x1a6>
    15c0:	3e c0       	rjmp	.+124    	; 0x163e <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    15c2:	88 85       	ldd	r24, Y+8	; 0x08
    15c4:	80 93 36 01 	sts	0x0136, r24

			USB_Host_ResetDevice();
    15c8:	7e de       	rcall	.-772    	; 0x12c6 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    15ca:	10 92 1e 05 	sts	0x051E, r1
    15ce:	88 ec       	ldi	r24, 0xC8	; 200
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	90 93 13 05 	sts	0x0513, r25
    15d6:	80 93 12 05 	sts	0x0512, r24
    15da:	88 e0       	ldi	r24, 0x08	; 8
    15dc:	22 c0       	rjmp	.+68     	; 0x1622 <USB_Host_ProcessNextHostState+0x206>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
    15de:	20 91 36 01 	lds	r18, 0x0136
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	01 e0       	ldi	r16, 0x01	; 1
    15ec:	40 d0       	rcall	.+128    	; 0x166e <Pipe_ConfigurePipe>
    15ee:	88 23       	and	r24, r24
    15f0:	19 f1       	breq	.+70     	; 0x1638 <USB_Host_ProcessNextHostState+0x21c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    15f2:	a6 e1       	ldi	r26, 0x16	; 22
    15f4:	b5 e0       	ldi	r27, 0x05	; 5
    15f6:	e6 e2       	ldi	r30, 0x26	; 38
    15f8:	f1 e0       	ldi	r31, 0x01	; 1
    15fa:	88 e0       	ldi	r24, 0x08	; 8
    15fc:	01 90       	ld	r0, Z+
    15fe:	0d 92       	st	X+, r0
    1600:	81 50       	subi	r24, 0x01	; 1
    1602:	e1 f7       	brne	.-8      	; 0x15fc <USB_Host_ProcessNextHostState+0x1e0>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	d8 d2       	rcall	.+1456   	; 0x1bba <USB_Host_SendControlRequest>
    160a:	68 2f       	mov	r22, r24
    160c:	88 23       	and	r24, r24
    160e:	b9 f4       	brne	.+46     	; 0x163e <USB_Host_ProcessNextHostState+0x222>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    1610:	10 92 1e 05 	sts	0x051E, r1
    1614:	84 e6       	ldi	r24, 0x64	; 100
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	90 93 13 05 	sts	0x0513, r25
    161c:	80 93 12 05 	sts	0x0512, r24
    1620:	89 e0       	ldi	r24, 0x09	; 9
    1622:	80 93 11 05 	sts	0x0511, r24
			break;
    1626:	18 c0       	rjmp	.+48     	; 0x1658 <USB_Host_ProcessNextHostState+0x23c>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    162e:	8a e0       	ldi	r24, 0x0A	; 10
    1630:	80 93 1e 05 	sts	0x051E, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
    1634:	9a d9       	rcall	.-3276   	; 0x96a <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
    1636:	10 c0       	rjmp	.+32     	; 0x1658 <USB_Host_ProcessNextHostState+0x23c>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    1638:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    163a:	84 e0       	ldi	r24, 0x04	; 4
    163c:	01 c0       	rjmp	.+2      	; 0x1640 <USB_Host_ProcessNextHostState+0x224>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
    163e:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    1640:	90 91 1e 05 	lds	r25, 0x051E
    1644:	91 30       	cpi	r25, 0x01	; 1
    1646:	41 f0       	breq	.+16     	; 0x1658 <USB_Host_ProcessNextHostState+0x23c>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    1648:	09 da       	rcall	.-3054   	; 0xa5c <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    164a:	80 91 dd 00 	lds	r24, 0x00DD
    164e:	81 60       	ori	r24, 0x01	; 1
    1650:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    1654:	84 d9       	rcall	.-3320   	; 0x95e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1656:	eb d0       	rcall	.+470    	; 0x182e <USB_ResetInterface>
	}
}
    1658:	28 96       	adiw	r28, 0x08	; 8
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	1f 91       	pop	r17
    166a:	0f 91       	pop	r16
    166c:	08 95       	ret

0000166e <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    166e:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
    1670:	58 2f       	mov	r21, r24
    1672:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
    1674:	87 ff       	sbrs	r24, 7
    1676:	02 c0       	rjmp	.+4      	; 0x167c <Pipe_ConfigurePipe+0xe>
    1678:	80 e1       	ldi	r24, 0x10	; 16
    167a:	01 c0       	rjmp	.+2      	; 0x167e <Pipe_ConfigurePipe+0x10>
    167c:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
    167e:	57 30       	cpi	r21, 0x07	; 7
    1680:	08 f0       	brcs	.+2      	; 0x1684 <Pipe_ConfigurePipe+0x16>
    1682:	59 c0       	rjmp	.+178    	; 0x1736 <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
    1684:	66 23       	and	r22, r22
    1686:	09 f4       	brne	.+2      	; 0x168a <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
    1688:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    168a:	4f 70       	andi	r20, 0x0F	; 15
    168c:	62 95       	swap	r22
    168e:	66 0f       	add	r22, r22
    1690:	66 0f       	add	r22, r22
    1692:	60 7c       	andi	r22, 0xC0	; 192
    1694:	64 2b       	or	r22, r20
    1696:	68 2b       	or	r22, r24
    1698:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    169a:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    169c:	84 2f       	mov	r24, r20
    169e:	8f 70       	andi	r24, 0x0F	; 15
    16a0:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
    16a4:	45 17       	cp	r20, r21
    16a6:	a1 f4       	brne	.+40     	; 0x16d0 <Pipe_ConfigurePipe+0x62>
    16a8:	88 e0       	ldi	r24, 0x08	; 8
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	03 c0       	rjmp	.+6      	; 0x16b6 <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    16b0:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    16b6:	82 17       	cp	r24, r18
    16b8:	93 07       	cpc	r25, r19
    16ba:	10 f4       	brcc	.+4      	; 0x16c0 <Pipe_ConfigurePipe+0x52>
    16bc:	75 30       	cpi	r23, 0x05	; 5
    16be:	c1 f7       	brne	.-16     	; 0x16b0 <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    16c0:	87 2f       	mov	r24, r23
    16c2:	82 95       	swap	r24
    16c4:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    16c6:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
    16c8:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    16ca:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    16cc:	e0 e0       	ldi	r30, 0x00	; 0
    16ce:	08 c0       	rjmp	.+16     	; 0x16e0 <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    16d0:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    16d4:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    16d8:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
    16dc:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    16e0:	81 ff       	sbrs	r24, 1
    16e2:	20 c0       	rjmp	.+64     	; 0x1724 <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    16e4:	90 91 a9 00 	lds	r25, 0x00A9
    16e8:	9e 7f       	andi	r25, 0xFE	; 254
    16ea:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    16ee:	90 91 ab 00 	lds	r25, 0x00AB
    16f2:	9d 7f       	andi	r25, 0xFD	; 253
    16f4:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    16f8:	90 91 a9 00 	lds	r25, 0x00A9
    16fc:	91 60       	ori	r25, 0x01	; 1
    16fe:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    1702:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
    1706:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
    170a:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
    170e:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    1712:	80 91 a9 00 	lds	r24, 0x00A9
    1716:	80 62       	ori	r24, 0x20	; 32
    1718:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    171c:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
    1720:	87 ff       	sbrs	r24, 7
    1722:	09 c0       	rjmp	.+18     	; 0x1736 <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    1724:	4f 5f       	subi	r20, 0xFF	; 255
    1726:	47 30       	cpi	r20, 0x07	; 7
    1728:	09 f0       	breq	.+2      	; 0x172c <Pipe_ConfigurePipe+0xbe>
    172a:	b8 cf       	rjmp	.-144    	; 0x169c <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    172c:	5f 70       	andi	r21, 0x0F	; 15
    172e:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	01 c0       	rjmp	.+2      	; 0x1738 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
    1736:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
    1738:	0f 91       	pop	r16
    173a:	08 95       	ret

0000173c <Pipe_ConfigurePipeTable>:

uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
    173c:	ef 92       	push	r14
    173e:	ff 92       	push	r15
    1740:	0f 93       	push	r16
    1742:	1f 93       	push	r17
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	16 2f       	mov	r17, r22
		{
			return false;
		}
	}
	
	return true;
    174a:	e8 2e       	mov	r14, r24
    174c:	e7 01       	movw	r28, r14
    174e:	7e 01       	movw	r14, r28
    1750:	f9 2e       	mov	r15, r25
    1752:	e7 01       	movw	r28, r14
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1754:	ff 24       	eor	r15, r15
    1756:	0d c0       	rjmp	.+26     	; 0x1772 <Pipe_ConfigurePipeTable+0x36>
	{
		if (!(Table[i].Address))
    1758:	88 81       	ld	r24, Y
    175a:	88 23       	and	r24, r24
    175c:	41 f0       	breq	.+16     	; 0x176e <Pipe_ConfigurePipeTable+0x32>
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
    175e:	29 81       	ldd	r18, Y+1	; 0x01
    1760:	3a 81       	ldd	r19, Y+2	; 0x02
    1762:	6c 81       	ldd	r22, Y+4	; 0x04
    1764:	4b 81       	ldd	r20, Y+3	; 0x03
    1766:	0d 81       	ldd	r16, Y+5	; 0x05
    1768:	82 df       	rcall	.-252    	; 0x166e <Pipe_ConfigurePipe>
    176a:	88 23       	and	r24, r24
    176c:	31 f0       	breq	.+12     	; 0x177a <Pipe_ConfigurePipeTable+0x3e>
uint8_t USB_Host_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipeTable(const USB_Pipe_Table_t* const Table,
                             const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    176e:	f3 94       	inc	r15
    1770:	26 96       	adiw	r28, 0x06	; 6
    1772:	f1 16       	cp	r15, r17
    1774:	88 f3       	brcs	.-30     	; 0x1758 <Pipe_ConfigurePipeTable+0x1c>
		{
			return false;
		}
	}
	
	return true;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	01 c0       	rjmp	.+2      	; 0x177c <Pipe_ConfigurePipeTable+0x40>
		if (!(Table[i].Address))
		  continue;
	
		if (!(Pipe_ConfigurePipe(Table[i].Address, Table[i].Type, Table[i].EndpointAddress, Table[i].Size, Table[i].Banks)))
		{
			return false;
    177a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return true;
}
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	ff 90       	pop	r15
    1786:	ef 90       	pop	r14
    1788:	08 95       	ret

0000178a <Pipe_ClearPipes>:
#endif
}

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    178a:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	98 2f       	mov	r25, r24
    1792:	9f 70       	andi	r25, 0x0F	; 15
    1794:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1798:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    179c:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    17a0:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    17a4:	90 91 a9 00 	lds	r25, 0x00A9
    17a8:	9e 7f       	andi	r25, 0xFE	; 254
    17aa:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    17ae:	8f 5f       	subi	r24, 0xFF	; 255
    17b0:	87 30       	cpi	r24, 0x07	; 7
    17b2:	71 f7       	brne	.-36     	; 0x1790 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    17b4:	08 95       	ret

000017b6 <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    17b6:	40 91 a7 00 	lds	r20, 0x00A7
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    17ba:	90 91 aa 00 	lds	r25, 0x00AA

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    17be:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    17c0:	29 2f       	mov	r18, r25
    17c2:	2f 70       	andi	r18, 0x0F	; 15
    17c4:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    17c8:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    17cc:	27 ff       	sbrs	r18, 7
    17ce:	0c c0       	rjmp	.+24     	; 0x17e8 <Pipe_IsEndpointBound+0x32>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				uint8_t UPCFG0X_Temp = UPCFG0X;
    17d0:	30 91 aa 00 	lds	r19, 0x00AA
				
				return (((UPCFG0X_Temp >> PEPNUM0) & PIPE_EPNUM_MASK) | ((UPCFG0X_Temp & PEPNUM1) ? ENDPOINT_DIR_OUT : ENDPOINT_DIR_IN));
    17d4:	53 2f       	mov	r21, r19
    17d6:	5f 70       	andi	r21, 0x0F	; 15
    17d8:	30 ff       	sbrs	r19, 0
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <Pipe_IsEndpointBound+0x2a>
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	01 c0       	rjmp	.+2      	; 0x17e2 <Pipe_IsEndpointBound+0x2c>
    17e0:	20 e8       	ldi	r18, 0x80	; 128
    17e2:	25 2b       	or	r18, r21
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    17e4:	28 17       	cp	r18, r24
    17e6:	49 f0       	breq	.+18     	; 0x17fa <Pipe_IsEndpointBound+0x44>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    17e8:	9f 5f       	subi	r25, 0xFF	; 255
    17ea:	97 30       	cpi	r25, 0x07	; 7
    17ec:	49 f7       	brne	.-46     	; 0x17c0 <Pipe_IsEndpointBound+0xa>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    17ee:	84 2f       	mov	r24, r20
    17f0:	8f 70       	andi	r24, 0x0F	; 15
    17f2:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
    17fa:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
    17fc:	08 95       	ret

000017fe <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    17fe:	75 d0       	rcall	.+234    	; 0x18ea <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1800:	7c d0       	rcall	.+248    	; 0x18fa <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1802:	e0 ee       	ldi	r30, 0xE0	; 224
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	81 60       	ori	r24, 0x01	; 1
    180a:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    180c:	e8 ed       	ldi	r30, 0xD8	; 216
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	8f 77       	andi	r24, 0x7F	; 127
    1814:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1816:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1818:	a7 ed       	ldi	r26, 0xD7	; 215
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	8c 91       	ld	r24, X
    181e:	8e 7f       	andi	r24, 0xFE	; 254
    1820:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1822:	80 81       	ld	r24, Z
    1824:	8f 7e       	andi	r24, 0xEF	; 239
    1826:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1828:	10 92 15 05 	sts	0x0515, r1
}
    182c:	08 95       	ret

0000182e <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    182e:	5d d0       	rcall	.+186    	; 0x18ea <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1830:	64 d0       	rcall	.+200    	; 0x18fa <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1832:	80 91 d8 00 	lds	r24, 0x00D8
    1836:	8f 77       	andi	r24, 0x7F	; 127
    1838:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    183c:	80 91 d8 00 	lds	r24, 0x00D8
    1840:	80 68       	ori	r24, 0x80	; 128
    1842:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1846:	80 91 d8 00 	lds	r24, 0x00D8
    184a:	8f 7d       	andi	r24, 0xDF	; 223
    184c:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    1850:	80 91 d7 00 	lds	r24, 0x00D7
    1854:	8f 77       	andi	r24, 0x7F	; 127
    1856:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    185a:	8c e0       	ldi	r24, 0x0C	; 12
    185c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    185e:	8e e0       	ldi	r24, 0x0E	; 14
    1860:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1862:	09 b4       	in	r0, 0x29	; 41
    1864:	00 fe       	sbrs	r0, 0
    1866:	fd cf       	rjmp	.-6      	; 0x1862 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	80 93 1e 05 	sts	0x051E, r24
	USB_Host_ConfigurationNumber = 0;
    186e:	10 92 14 05 	sts	0x0514, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1872:	80 e4       	ldi	r24, 0x40	; 64
    1874:	80 93 36 01 	sts	0x0136, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    1878:	80 91 d8 00 	lds	r24, 0x00D8
    187c:	80 64       	ori	r24, 0x40	; 64
    187e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1882:	80 91 dd 00 	lds	r24, 0x00DD
    1886:	81 60       	ori	r24, 0x01	; 1
    1888:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    188c:	80 91 dd 00 	lds	r24, 0x00DD
    1890:	84 60       	ori	r24, 0x04	; 4
    1892:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    1896:	80 91 d7 00 	lds	r24, 0x00D7
    189a:	8f 7e       	andi	r24, 0xEF	; 239
    189c:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    18a0:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
    18a2:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    18a4:	80 91 de 00 	lds	r24, 0x00DE
    18a8:	81 60       	ori	r24, 0x01	; 1
    18aa:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    18ae:	80 91 de 00 	lds	r24, 0x00DE
    18b2:	84 60       	ori	r24, 0x04	; 4
    18b4:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    18b8:	80 91 e0 00 	lds	r24, 0x00E0
    18bc:	8e 7f       	andi	r24, 0xFE	; 254
    18be:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    18c2:	80 91 d8 00 	lds	r24, 0x00D8
    18c6:	80 61       	ori	r24, 0x10	; 16
    18c8:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    18cc:	08 95       	ret

000018ce <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    18ce:	e8 ed       	ldi	r30, 0xD8	; 216
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	8f 7e       	andi	r24, 0xEF	; 239
    18d6:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    18d8:	e7 ed       	ldi	r30, 0xD7	; 215
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	81 60       	ori	r24, 0x01	; 1
    18e0:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	80 93 15 05 	sts	0x0515, r24

	USB_ResetInterface();
}
    18e8:	a2 cf       	rjmp	.-188    	; 0x182e <USB_ResetInterface>

000018ea <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    18ea:	e8 ed       	ldi	r30, 0xD8	; 216
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	8c 7f       	andi	r24, 0xFC	; 252
    18f2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    18f4:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    18f8:	08 95       	ret

000018fa <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    18fa:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    18fe:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    1902:	08 95       	ret

00001904 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1904:	1f 92       	push	r1
    1906:	0f 92       	push	r0
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	0f 92       	push	r0
    190c:	0b b6       	in	r0, 0x3b	; 59
    190e:	0f 92       	push	r0
    1910:	11 24       	eor	r1, r1
    1912:	2f 93       	push	r18
    1914:	3f 93       	push	r19
    1916:	4f 93       	push	r20
    1918:	5f 93       	push	r21
    191a:	6f 93       	push	r22
    191c:	7f 93       	push	r23
    191e:	8f 93       	push	r24
    1920:	9f 93       	push	r25
    1922:	af 93       	push	r26
    1924:	bf 93       	push	r27
    1926:	ef 93       	push	r30
    1928:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    192a:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    192e:	85 ff       	sbrs	r24, 5
    1930:	0a c0       	rjmp	.+20     	; 0x1946 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1932:	80 91 a0 00 	lds	r24, 0x00A0
    1936:	85 ff       	sbrs	r24, 5
    1938:	06 c0       	rjmp	.+12     	; 0x1946 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    193a:	80 91 9f 00 	lds	r24, 0x009F
    193e:	8f 7d       	andi	r24, 0xDF	; 223
    1940:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    1944:	10 d1       	rcall	.+544    	; 0x1b66 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    1946:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    194a:	81 ff       	sbrs	r24, 1
    194c:	16 c0       	rjmp	.+44     	; 0x197a <__vector_10+0x76>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    194e:	80 91 a0 00 	lds	r24, 0x00A0
    1952:	81 ff       	sbrs	r24, 1
    1954:	12 c0       	rjmp	.+36     	; 0x197a <__vector_10+0x76>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1956:	80 91 9f 00 	lds	r24, 0x009F
    195a:	8d 7f       	andi	r24, 0xFD	; 253
    195c:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1960:	80 91 9f 00 	lds	r24, 0x009F
    1964:	8e 7f       	andi	r24, 0xFE	; 254
    1966:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    196a:	80 91 a0 00 	lds	r24, 0x00A0
    196e:	8d 7f       	andi	r24, 0xFD	; 253
    1970:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    1974:	0e 94 af 04 	call	0x95e	; 0x95e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1978:	5a df       	rcall	.-332    	; 0x182e <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    197a:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    197e:	81 ff       	sbrs	r24, 1
    1980:	16 c0       	rjmp	.+44     	; 0x19ae <__vector_10+0xaa>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1982:	80 91 de 00 	lds	r24, 0x00DE
    1986:	81 ff       	sbrs	r24, 1
    1988:	12 c0       	rjmp	.+36     	; 0x19ae <__vector_10+0xaa>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    198a:	80 91 df 00 	lds	r24, 0x00DF
    198e:	8d 7f       	andi	r24, 0xFD	; 253
    1990:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    1994:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1996:	80 91 dd 00 	lds	r24, 0x00DD
    199a:	81 60       	ori	r24, 0x01	; 1
    199c:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	3c d8       	rcall	.-3976   	; 0xa1c <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    19a4:	0e 94 af 04 	call	0x95e	; 0x95e <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	80 93 1e 05 	sts	0x051E, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    19ae:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    19b2:	80 ff       	sbrs	r24, 0
    19b4:	18 c0       	rjmp	.+48     	; 0x19e6 <__vector_10+0xe2>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    19b6:	80 91 de 00 	lds	r24, 0x00DE
    19ba:	80 ff       	sbrs	r24, 0
    19bc:	14 c0       	rjmp	.+40     	; 0x19e6 <__vector_10+0xe2>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    19be:	80 91 df 00 	lds	r24, 0x00DF
    19c2:	8e 7f       	andi	r24, 0xFE	; 254
    19c4:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    19c8:	80 91 de 00 	lds	r24, 0x00DE
    19cc:	8e 7f       	andi	r24, 0xFE	; 254
    19ce:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    19d2:	0e 94 a9 04 	call	0x952	; 0x952 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    19d6:	80 91 a0 00 	lds	r24, 0x00A0
    19da:	82 60       	ori	r24, 0x02	; 2
    19dc:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    19e0:	82 e0       	ldi	r24, 0x02	; 2
    19e2:	80 93 1e 05 	sts	0x051E, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    19e6:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    19ea:	82 ff       	sbrs	r24, 2
    19ec:	0f c0       	rjmp	.+30     	; 0x1a0c <__vector_10+0x108>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    19ee:	80 91 de 00 	lds	r24, 0x00DE
    19f2:	82 ff       	sbrs	r24, 2
    19f4:	0b c0       	rjmp	.+22     	; 0x1a0c <__vector_10+0x108>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    19f6:	80 91 df 00 	lds	r24, 0x00DF
    19fa:	8b 7f       	andi	r24, 0xFB	; 251
    19fc:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1a00:	82 e0       	ldi	r24, 0x02	; 2
    1a02:	60 e0       	ldi	r22, 0x00	; 0
    1a04:	2b d8       	rcall	.-4010   	; 0xa5c <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    1a06:	0e 94 af 04 	call	0x95e	; 0x95e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1a0a:	11 df       	rcall	.-478    	; 0x182e <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1a0c:	ff 91       	pop	r31
    1a0e:	ef 91       	pop	r30
    1a10:	bf 91       	pop	r27
    1a12:	af 91       	pop	r26
    1a14:	9f 91       	pop	r25
    1a16:	8f 91       	pop	r24
    1a18:	7f 91       	pop	r23
    1a1a:	6f 91       	pop	r22
    1a1c:	5f 91       	pop	r21
    1a1e:	4f 91       	pop	r20
    1a20:	3f 91       	pop	r19
    1a22:	2f 91       	pop	r18
    1a24:	0f 90       	pop	r0
    1a26:	0b be       	out	0x3b, r0	; 59
    1a28:	0f 90       	pop	r0
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	0f 90       	pop	r0
    1a2e:	1f 90       	pop	r1
    1a30:	18 95       	reti

00001a32 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1a32:	cf 92       	push	r12
    1a34:	df 92       	push	r13
    1a36:	ef 92       	push	r14
    1a38:	ff 92       	push	r15
    1a3a:	0f 93       	push	r16
    1a3c:	1f 93       	push	r17
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	29 97       	sbiw	r28, 0x09	; 9
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	6b 01       	movw	r12, r22
    1a54:	8a 01       	movw	r16, r20
    1a56:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1a58:	90 e8       	ldi	r25, 0x80	; 128
    1a5a:	90 93 16 05 	sts	0x0516, r25
    1a5e:	96 e0       	ldi	r25, 0x06	; 6
    1a60:	90 93 17 05 	sts	0x0517, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1a6a:	90 93 19 05 	sts	0x0519, r25
    1a6e:	80 93 18 05 	sts	0x0518, r24
    1a72:	10 92 1b 05 	sts	0x051B, r1
    1a76:	10 92 1a 05 	sts	0x051A, r1
    1a7a:	89 e0       	ldi	r24, 0x09	; 9
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	90 93 1d 05 	sts	0x051D, r25
    1a82:	80 93 1c 05 	sts	0x051C, r24
    1a86:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1a8a:	ce 01       	movw	r24, r28
    1a8c:	01 96       	adiw	r24, 0x01	; 1
    1a8e:	95 d0       	rcall	.+298    	; 0x1bba <USB_Host_SendControlRequest>
    1a90:	88 23       	and	r24, r24
    1a92:	b9 f4       	brne	.+46     	; 0x1ac2 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	f6 01       	movw	r30, r12
    1a9a:	91 83       	std	Z+1, r25	; 0x01
    1a9c:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1a9e:	e8 16       	cp	r14, r24
    1aa0:	f9 06       	cpc	r15, r25
    1aa2:	70 f0       	brcs	.+28     	; 0x1ac0 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1aa4:	90 93 1d 05 	sts	0x051D, r25
    1aa8:	80 93 1c 05 	sts	0x051C, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1aac:	c8 01       	movw	r24, r16
    1aae:	85 d0       	rcall	.+266    	; 0x1bba <USB_Host_SendControlRequest>
    1ab0:	88 23       	and	r24, r24
    1ab2:	39 f4       	brne	.+14     	; 0x1ac2 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	91 81       	ldd	r25, Z+1	; 0x01
    1ab8:	92 30       	cpi	r25, 0x02	; 2
    1aba:	19 f0       	breq	.+6      	; 0x1ac2 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1abc:	86 e0       	ldi	r24, 0x06	; 6
    1abe:	01 c0       	rjmp	.+2      	; 0x1ac2 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1ac0:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1ac2:	29 96       	adiw	r28, 0x09	; 9
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	cd bf       	out	0x3d, r28	; 61
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	1f 91       	pop	r17
    1ad4:	0f 91       	pop	r16
    1ad6:	ff 90       	pop	r15
    1ad8:	ef 90       	pop	r14
    1ada:	df 90       	pop	r13
    1adc:	cf 90       	pop	r12
    1ade:	08 95       	ret

00001ae0 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1ae0:	af 92       	push	r10
    1ae2:	bf 92       	push	r11
    1ae4:	cf 92       	push	r12
    1ae6:	df 92       	push	r13
    1ae8:	ef 92       	push	r14
    1aea:	ff 92       	push	r15
    1aec:	0f 93       	push	r16
    1aee:	1f 93       	push	r17
    1af0:	cf 93       	push	r28
    1af2:	df 93       	push	r29
    1af4:	8c 01       	movw	r16, r24
    1af6:	eb 01       	movw	r28, r22
    1af8:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1afa:	23 c0       	rjmp	.+70     	; 0x1b42 <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1afc:	e8 81       	ld	r30, Y
    1afe:	f9 81       	ldd	r31, Y+1	; 0x01
    1b00:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1b02:	20 81       	ld	r18, Z
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	c7 01       	movw	r24, r14
    1b08:	2e 15       	cp	r18, r14
    1b0a:	3f 05       	cpc	r19, r15
    1b0c:	08 f4       	brcc	.+2      	; 0x1b10 <USB_GetNextDescriptorComp+0x30>
    1b0e:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1b10:	e8 0f       	add	r30, r24
    1b12:	f9 1f       	adc	r31, r25
    1b14:	f9 83       	std	Y+1, r31	; 0x01
    1b16:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    1b18:	f8 01       	movw	r30, r16
    1b1a:	20 81       	ld	r18, Z
    1b1c:	31 81       	ldd	r19, Z+1	; 0x01
    1b1e:	28 1b       	sub	r18, r24
    1b20:	39 0b       	sbc	r19, r25
    1b22:	31 83       	std	Z+1, r19	; 0x01
    1b24:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1b26:	88 81       	ld	r24, Y
    1b28:	99 81       	ldd	r25, Y+1	; 0x01
    1b2a:	f6 01       	movw	r30, r12
    1b2c:	09 95       	icall
    1b2e:	82 30       	cpi	r24, 0x02	; 2
    1b30:	41 f0       	breq	.+16     	; 0x1b42 <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1b32:	81 30       	cpi	r24, 0x01	; 1
    1b34:	69 f4       	brne	.+26     	; 0x1b50 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
    1b36:	a8 82       	st	Y, r10
    1b38:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    1b3a:	f8 01       	movw	r30, r16
    1b3c:	f1 82       	std	Z+1, r15	; 0x01
    1b3e:	e0 82       	st	Z, r14
    1b40:	07 c0       	rjmp	.+14     	; 0x1b50 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1b42:	f8 01       	movw	r30, r16
    1b44:	e0 80       	ld	r14, Z
    1b46:	f1 80       	ldd	r15, Z+1	; 0x01
    1b48:	e1 14       	cp	r14, r1
    1b4a:	f1 04       	cpc	r15, r1
    1b4c:	b9 f6       	brne	.-82     	; 0x1afc <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1b4e:	82 e0       	ldi	r24, 0x02	; 2
}
    1b50:	df 91       	pop	r29
    1b52:	cf 91       	pop	r28
    1b54:	1f 91       	pop	r17
    1b56:	0f 91       	pop	r16
    1b58:	ff 90       	pop	r15
    1b5a:	ef 90       	pop	r14
    1b5c:	df 90       	pop	r13
    1b5e:	cf 90       	pop	r12
    1b60:	bf 90       	pop	r11
    1b62:	af 90       	pop	r10
    1b64:	08 95       	ret

00001b66 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1b66:	08 95       	ret

00001b68 <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1b68:	1f 93       	push	r17
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
    1b6e:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    1b70:	c8 ee       	ldi	r28, 0xE8	; 232
    1b72:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1b74:	07 c0       	rjmp	.+14     	; 0x1b84 <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	fc db       	rcall	.-2056   	; 0x1372 <USB_Host_WaitMS>
    1b7a:	88 23       	and	r24, r24
    1b7c:	d1 f4       	brne	.+52     	; 0x1bb2 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1b7e:	20 97       	sbiw	r28, 0x00	; 0
    1b80:	b9 f0       	breq	.+46     	; 0x1bb0 <USB_Host_WaitForIOS+0x48>
    1b82:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1b84:	11 23       	and	r17, r17
    1b86:	29 f4       	brne	.+10     	; 0x1b92 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1b88:	80 91 a6 00 	lds	r24, 0x00A6
    1b8c:	83 ff       	sbrs	r24, 3
    1b8e:	f3 cf       	rjmp	.-26     	; 0x1b76 <USB_Host_WaitForIOS+0xe>
    1b90:	0d c0       	rjmp	.+26     	; 0x1bac <USB_Host_WaitForIOS+0x44>
    1b92:	11 30       	cpi	r17, 0x01	; 1
    1b94:	29 f4       	brne	.+10     	; 0x1ba0 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1b96:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1b9a:	80 ff       	sbrs	r24, 0
    1b9c:	ec cf       	rjmp	.-40     	; 0x1b76 <USB_Host_WaitForIOS+0xe>
    1b9e:	06 c0       	rjmp	.+12     	; 0x1bac <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1ba0:	12 30       	cpi	r17, 0x02	; 2
    1ba2:	49 f7       	brne	.-46     	; 0x1b76 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1ba4:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1ba8:	82 ff       	sbrs	r24, 2
    1baa:	e5 cf       	rjmp	.-54     	; 0x1b76 <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	01 c0       	rjmp	.+2      	; 0x1bb2 <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1bb0:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	08 95       	ret

00001bba <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1bba:	ef 92       	push	r14
    1bbc:	ff 92       	push	r15
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1bc8:	e0 90 9e 00 	lds	r14, 0x009E
    1bcc:	ff 24       	eor	r15, r15
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	e8 22       	and	r14, r24
    1bd2:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1bd4:	c0 91 1c 05 	lds	r28, 0x051C
    1bd8:	d0 91 1d 05 	lds	r29, 0x051D
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1bdc:	80 91 9e 00 	lds	r24, 0x009E
    1be0:	81 60       	ori	r24, 0x01	; 1
    1be2:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	c4 db       	rcall	.-2168   	; 0x1372 <USB_Host_WaitMS>
    1bea:	88 23       	and	r24, r24
    1bec:	09 f0       	breq	.+2      	; 0x1bf0 <USB_Host_SendControlRequest+0x36>
    1bee:	cb c0       	rjmp	.+406    	; 0x1d86 <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1bf0:	80 91 aa 00 	lds	r24, 0x00AA
    1bf4:	8f 7c       	andi	r24, 0xCF	; 207
    1bf6:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1bfa:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1bfe:	80 91 a6 00 	lds	r24, 0x00A6
    1c02:	8f 7e       	andi	r24, 0xEF	; 239
    1c04:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c08:	80 91 a9 00 	lds	r24, 0x00A9
    1c0c:	8f 7b       	andi	r24, 0xBF	; 191
    1c0e:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1c12:	e6 e1       	ldi	r30, 0x16	; 22
    1c14:	f5 e0       	ldi	r31, 0x05	; 5

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1c16:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1c18:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1c1c:	85 e0       	ldi	r24, 0x05	; 5
    1c1e:	ee 31       	cpi	r30, 0x1E	; 30
    1c20:	f8 07       	cpc	r31, r24
    1c22:	c9 f7       	brne	.-14     	; 0x1c16 <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1c24:	80 91 a6 00 	lds	r24, 0x00A6
    1c28:	87 77       	andi	r24, 0x77	; 119
    1c2a:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	9b df       	rcall	.-202    	; 0x1b68 <USB_Host_WaitForIOS>
    1c32:	88 23       	and	r24, r24
    1c34:	09 f0       	breq	.+2      	; 0x1c38 <USB_Host_SendControlRequest+0x7e>
    1c36:	a7 c0       	rjmp	.+334    	; 0x1d86 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1c38:	80 91 a9 00 	lds	r24, 0x00A9
    1c3c:	80 64       	ori	r24, 0x40	; 64
    1c3e:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	96 db       	rcall	.-2260   	; 0x1372 <USB_Host_WaitMS>
    1c46:	88 23       	and	r24, r24
    1c48:	09 f0       	breq	.+2      	; 0x1c4c <USB_Host_SendControlRequest+0x92>
    1c4a:	9d c0       	rjmp	.+314    	; 0x1d86 <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1c4c:	80 91 16 05 	lds	r24, 0x0516
    1c50:	87 ff       	sbrs	r24, 7
    1c52:	4f c0       	rjmp	.+158    	; 0x1cf2 <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1c54:	80 91 aa 00 	lds	r24, 0x00AA
    1c58:	8f 7c       	andi	r24, 0xCF	; 207
    1c5a:	80 61       	ori	r24, 0x10	; 16
    1c5c:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1c60:	01 15       	cp	r16, r1
    1c62:	11 05       	cpc	r17, r1
    1c64:	61 f5       	brne	.+88     	; 0x1cbe <USB_Host_SendControlRequest+0x104>
    1c66:	2d c0       	rjmp	.+90     	; 0x1cc2 <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1c68:	80 91 a9 00 	lds	r24, 0x00A9
    1c6c:	8f 7b       	andi	r24, 0xBF	; 191
    1c6e:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	79 df       	rcall	.-270    	; 0x1b68 <USB_Host_WaitForIOS>
    1c76:	88 23       	and	r24, r24
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <USB_Host_SendControlRequest+0xc2>
    1c7a:	85 c0       	rjmp	.+266    	; 0x1d86 <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1c7c:	80 91 f6 00 	lds	r24, 0x00F6
    1c80:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	49 f4       	brne	.+18     	; 0x1c9a <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    1c88:	c0 e0       	ldi	r28, 0x00	; 0
    1c8a:	d0 e0       	ldi	r29, 0x00	; 0
    1c8c:	06 c0       	rjmp	.+12     	; 0x1c9a <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1c8e:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1c92:	f8 01       	movw	r30, r16
    1c94:	81 93       	st	Z+, r24
    1c96:	8f 01       	movw	r16, r30
					DataLen--;
    1c98:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1c9a:	80 91 f6 00 	lds	r24, 0x00F6
    1c9e:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1ca2:	00 97       	sbiw	r24, 0x00	; 0
    1ca4:	11 f0       	breq	.+4      	; 0x1caa <USB_Host_SendControlRequest+0xf0>
    1ca6:	20 97       	sbiw	r28, 0x00	; 0
    1ca8:	91 f7       	brne	.-28     	; 0x1c8e <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1caa:	80 91 a9 00 	lds	r24, 0x00A9
    1cae:	80 64       	ori	r24, 0x40	; 64
    1cb0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1cb4:	80 91 a6 00 	lds	r24, 0x00A6
    1cb8:	8e 77       	andi	r24, 0x7E	; 126
    1cba:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1cbe:	20 97       	sbiw	r28, 0x00	; 0
    1cc0:	99 f6       	brne	.-90     	; 0x1c68 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1cc2:	80 91 aa 00 	lds	r24, 0x00AA
    1cc6:	8f 7c       	andi	r24, 0xCF	; 207
    1cc8:	80 62       	ori	r24, 0x20	; 32
    1cca:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1cce:	80 91 a9 00 	lds	r24, 0x00A9
    1cd2:	8f 7b       	andi	r24, 0xBF	; 191
    1cd4:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1cd8:	82 e0       	ldi	r24, 0x02	; 2
    1cda:	46 df       	rcall	.-372    	; 0x1b68 <USB_Host_WaitForIOS>
    1cdc:	88 23       	and	r24, r24
    1cde:	09 f0       	breq	.+2      	; 0x1ce2 <USB_Host_SendControlRequest+0x128>
    1ce0:	52 c0       	rjmp	.+164    	; 0x1d86 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1ce2:	80 91 a6 00 	lds	r24, 0x00A6
    1ce6:	8b 77       	andi	r24, 0x7B	; 123
    1ce8:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1cec:	82 e0       	ldi	r24, 0x02	; 2
    1cee:	3c df       	rcall	.-392    	; 0x1b68 <USB_Host_WaitForIOS>
    1cf0:	4a c0       	rjmp	.+148    	; 0x1d86 <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
    1cf2:	01 15       	cp	r16, r1
    1cf4:	11 05       	cpc	r17, r1
    1cf6:	99 f1       	breq	.+102    	; 0x1d5e <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1cf8:	80 91 aa 00 	lds	r24, 0x00AA
    1cfc:	8f 7c       	andi	r24, 0xCF	; 207
    1cfe:	80 62       	ori	r24, 0x20	; 32
    1d00:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d04:	80 91 a9 00 	lds	r24, 0x00A9
    1d08:	8f 7b       	andi	r24, 0xBF	; 191
    1d0a:	80 93 a9 00 	sts	0x00A9, r24
    1d0e:	1c c0       	rjmp	.+56     	; 0x1d48 <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1d10:	82 e0       	ldi	r24, 0x02	; 2
    1d12:	2a df       	rcall	.-428    	; 0x1b68 <USB_Host_WaitForIOS>
    1d14:	88 23       	and	r24, r24
    1d16:	b9 f5       	brne	.+110    	; 0x1d86 <USB_Host_SendControlRequest+0x1cc>
    1d18:	f8 01       	movw	r30, r16
    1d1a:	06 c0       	rjmp	.+12     	; 0x1d28 <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1d1c:	81 91       	ld	r24, Z+
    1d1e:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1d20:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1d24:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1d26:	59 f0       	breq	.+22     	; 0x1d3e <USB_Host_SendControlRequest+0x184>
    1d28:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1d2a:	20 91 f6 00 	lds	r18, 0x00F6
    1d2e:	30 91 f7 00 	lds	r19, 0x00F7
    1d32:	80 91 36 01 	lds	r24, 0x0136
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	28 17       	cp	r18, r24
    1d3a:	39 07       	cpc	r19, r25
    1d3c:	78 f3       	brcs	.-34     	; 0x1d1c <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1d3e:	80 91 a6 00 	lds	r24, 0x00A6
    1d42:	8b 77       	andi	r24, 0x7B	; 123
    1d44:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1d48:	20 97       	sbiw	r28, 0x00	; 0
    1d4a:	11 f7       	brne	.-60     	; 0x1d10 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1d4c:	82 e0       	ldi	r24, 0x02	; 2
    1d4e:	0c df       	rcall	.-488    	; 0x1b68 <USB_Host_WaitForIOS>
    1d50:	88 23       	and	r24, r24
    1d52:	c9 f4       	brne	.+50     	; 0x1d86 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1d54:	80 91 a9 00 	lds	r24, 0x00A9
    1d58:	80 64       	ori	r24, 0x40	; 64
    1d5a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1d5e:	80 91 aa 00 	lds	r24, 0x00AA
    1d62:	8f 7c       	andi	r24, 0xCF	; 207
    1d64:	80 61       	ori	r24, 0x10	; 16
    1d66:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d6a:	80 91 a9 00 	lds	r24, 0x00A9
    1d6e:	8f 7b       	andi	r24, 0xBF	; 191
    1d70:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	f8 de       	rcall	.-528    	; 0x1b68 <USB_Host_WaitForIOS>
    1d78:	88 23       	and	r24, r24
    1d7a:	29 f4       	brne	.+10     	; 0x1d86 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1d7c:	90 91 a6 00 	lds	r25, 0x00A6
    1d80:	9e 77       	andi	r25, 0x7E	; 126
    1d82:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1d86:	90 91 a9 00 	lds	r25, 0x00A9
    1d8a:	90 64       	ori	r25, 0x40	; 64
    1d8c:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
    1d90:	e1 14       	cp	r14, r1
    1d92:	f1 04       	cpc	r15, r1
    1d94:	29 f4       	brne	.+10     	; 0x1da0 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1d96:	90 91 9e 00 	lds	r25, 0x009E
    1d9a:	9e 7f       	andi	r25, 0xFE	; 254
    1d9c:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
    1da0:	91 e0       	ldi	r25, 0x01	; 1
    1da2:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    1da6:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	1f 91       	pop	r17
    1db0:	0f 91       	pop	r16
    1db2:	ff 90       	pop	r15
    1db4:	ef 90       	pop	r14
    1db6:	08 95       	ret

00001db8 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1db8:	1f 93       	push	r17
    1dba:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1dbc:	10 92 16 05 	sts	0x0516, r1
    1dc0:	89 e0       	ldi	r24, 0x09	; 9
    1dc2:	80 93 17 05 	sts	0x0517, r24
    1dc6:	10 93 18 05 	sts	0x0518, r17
    1dca:	10 92 19 05 	sts	0x0519, r1
    1dce:	10 92 1b 05 	sts	0x051B, r1
    1dd2:	10 92 1a 05 	sts	0x051A, r1
    1dd6:	10 92 1d 05 	sts	0x051D, r1
    1dda:	10 92 1c 05 	sts	0x051C, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1dde:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	e9 de       	rcall	.-558    	; 0x1bba <USB_Host_SendControlRequest>
    1de8:	88 23       	and	r24, r24
    1dea:	49 f4       	brne	.+18     	; 0x1dfe <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1dec:	10 93 14 05 	sts	0x0514, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1df0:	11 23       	and	r17, r17
    1df2:	11 f0       	breq	.+4      	; 0x1df8 <USB_Host_SetDeviceConfiguration+0x40>
    1df4:	9b e0       	ldi	r25, 0x0B	; 11
    1df6:	01 c0       	rjmp	.+2      	; 0x1dfa <USB_Host_SetDeviceConfiguration+0x42>
    1df8:	9a e0       	ldi	r25, 0x0A	; 10
    1dfa:	90 93 1e 05 	sts	0x051E, r25
	}

	return ErrorCode;
}
    1dfe:	1f 91       	pop	r17
    1e00:	08 95       	ret

00001e02 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1e02:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
    1e04:	10 91 a7 00 	lds	r17, 0x00A7
    1e08:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
    1e0a:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    1e0e:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1e12:	04 db       	rcall	.-2552   	; 0x141c <USB_Host_ProcessNextHostState>
    1e14:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1e18:	1f 91       	pop	r17
    1e1a:	08 95       	ret

00001e1c <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    1e1c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1e1e:	81 81       	ldd	r24, Z+1	; 0x01
    1e20:	84 30       	cpi	r24, 0x04	; 4
    1e22:	19 f4       	brne	.+6      	; 0x1e2a <DCOMP_HID_Host_NextHIDInterface+0xe>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    1e24:	85 81       	ldd	r24, Z+5	; 0x05
    1e26:	83 30       	cpi	r24, 0x03	; 3
    1e28:	11 f0       	breq	.+4      	; 0x1e2e <DCOMP_HID_Host_NextHIDInterface+0x12>
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1e2a:	82 e0       	ldi	r24, 0x02	; 2
    1e2c:	08 95       	ret
	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
		  return DESCRIPTOR_SEARCH_Found;
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1e30:	08 95       	ret

00001e32 <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    1e32:	fc 01       	movw	r30, r24
    1e34:	81 81       	ldd	r24, Z+1	; 0x01
    1e36:	81 32       	cpi	r24, 0x21	; 33
    1e38:	21 f0       	breq	.+8      	; 0x1e42 <DCOMP_HID_Host_NextHIDDescriptor+0x10>
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    1e3a:	84 30       	cpi	r24, 0x04	; 4
    1e3c:	21 f4       	brne	.+8      	; 0x1e46 <DCOMP_HID_Host_NextHIDDescriptor+0x14>
	  return DESCRIPTOR_SEARCH_Fail;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	08 95       	ret
static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
	  return DESCRIPTOR_SEARCH_Found;
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	08 95       	ret
	else if (Header->Type == DTYPE_Interface)
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
    1e46:	82 e0       	ldi	r24, 0x02	; 2
}
    1e48:	08 95       	ret

00001e4a <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    1e4a:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1e4c:	81 81       	ldd	r24, Z+1	; 0x01
    1e4e:	85 30       	cpi	r24, 0x05	; 5
    1e50:	29 f4       	brne	.+10     	; 0x1e5c <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x12>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1e52:	82 81       	ldd	r24, Z+2	; 0x02
    1e54:	b0 dc       	rcall	.-1696   	; 0x17b6 <Pipe_IsEndpointBound>
    1e56:	88 23       	and	r24, r24
    1e58:	19 f4       	brne	.+6      	; 0x1e60 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x16>
    1e5a:	04 c0       	rjmp	.+8      	; 0x1e64 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1a>
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1e5c:	84 30       	cpi	r24, 0x04	; 4
    1e5e:	21 f0       	breq	.+8      	; 0x1e68 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1e>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1e60:	82 e0       	ldi	r24, 0x02	; 2
    1e62:	08 95       	ret
	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		  return DESCRIPTOR_SEARCH_Found;
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	08 95       	ret
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1e6a:	08 95       	ret

00001e6c <HID_Host_ConfigurePipes>:
#include "HIDClassHost.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1e6c:	4f 92       	push	r4
    1e6e:	5f 92       	push	r5
    1e70:	6f 92       	push	r6
    1e72:	7f 92       	push	r7
    1e74:	8f 92       	push	r8
    1e76:	9f 92       	push	r9
    1e78:	af 92       	push	r10
    1e7a:	bf 92       	push	r11
    1e7c:	cf 92       	push	r12
    1e7e:	df 92       	push	r13
    1e80:	ef 92       	push	r14
    1e82:	ff 92       	push	r15
    1e84:	0f 93       	push	r16
    1e86:	1f 93       	push	r17
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <HID_Host_ConfigurePipes+0x22>
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <HID_Host_ConfigurePipes+0x24>
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	8c 01       	movw	r16, r24
    1e96:	7a 83       	std	Y+2, r23	; 0x02
    1e98:	69 83       	std	Y+1, r22	; 0x01
    1e9a:	5c 83       	std	Y+4, r21	; 0x04
    1e9c:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1e9e:	0f 96       	adiw	r24, 0x0f	; 15
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	88 e0       	ldi	r24, 0x08	; 8
    1ea4:	df 01       	movw	r26, r30
    1ea6:	1d 92       	st	X+, r1
    1ea8:	8a 95       	dec	r24
    1eaa:	e9 f7       	brne	.-6      	; 0x1ea6 <HID_Host_ConfigurePipes+0x3a>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1eac:	eb 81       	ldd	r30, Y+3	; 0x03
    1eae:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb0:	81 81       	ldd	r24, Z+1	; 0x01
    1eb2:	82 30       	cpi	r24, 0x02	; 2
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <HID_Host_ConfigurePipes+0x4c>
    1eb6:	95 c0       	rjmp	.+298    	; 0x1fe2 <HID_Host_ConfigurePipes+0x176>
    1eb8:	44 24       	eor	r4, r4
    1eba:	55 24       	eor	r5, r5
    1ebc:	aa 24       	eor	r10, r10
    1ebe:	bb 24       	eor	r11, r11
    1ec0:	ee 24       	eor	r14, r14
    1ec2:	ff 24       	eor	r15, r15
    1ec4:	cc 24       	eor	r12, r12
    1ec6:	dd 24       	eor	r13, r13
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1ec8:	93 e0       	ldi	r25, 0x03	; 3
    1eca:	69 2e       	mov	r6, r25
    1ecc:	71 2c       	mov	r7, r1
    1ece:	6c 0e       	add	r6, r28
    1ed0:	7d 1e       	adc	r7, r29
    1ed2:	4e 01       	movw	r8, r28
    1ed4:	08 94       	sec
    1ed6:	81 1c       	adc	r8, r1
    1ed8:	91 1c       	adc	r9, r1
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1eda:	a1 14       	cp	r10, r1
    1edc:	b1 04       	cpc	r11, r1
    1ede:	39 f0       	breq	.+14     	; 0x1eee <HID_Host_ConfigurePipes+0x82>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1ee0:	c4 01       	movw	r24, r8
    1ee2:	b3 01       	movw	r22, r6
    1ee4:	45 e2       	ldi	r20, 0x25	; 37
    1ee6:	5f e0       	ldi	r21, 0x0F	; 15
    1ee8:	fb dd       	rcall	.-1034   	; 0x1ae0 <USB_GetNextDescriptorComp>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1eea:	88 23       	and	r24, r24
    1eec:	21 f1       	breq	.+72     	; 0x1f36 <HID_Host_ConfigurePipes+0xca>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint)
    1eee:	c1 14       	cp	r12, r1
    1ef0:	d1 04       	cpc	r13, r1
    1ef2:	79 f5       	brne	.+94     	; 0x1f52 <HID_Host_ConfigurePipes+0xe6>
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1ef4:	c4 01       	movw	r24, r8
    1ef6:	b3 01       	movw	r22, r6
    1ef8:	4e e0       	ldi	r20, 0x0E	; 14
    1efa:	5f e0       	ldi	r21, 0x0F	; 15
    1efc:	f1 dd       	rcall	.-1054   	; 0x1ae0 <USB_GetNextDescriptorComp>
    1efe:	88 23       	and	r24, r24
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <HID_Host_ConfigurePipes+0x98>
    1f02:	71 c0       	rjmp	.+226    	; 0x1fe6 <HID_Host_ConfigurePipes+0x17a>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1f04:	ab 80       	ldd	r10, Y+3	; 0x03
    1f06:	bc 80       	ldd	r11, Y+4	; 0x04
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1f08:	f8 01       	movw	r30, r16
    1f0a:	84 85       	ldd	r24, Z+12	; 0x0c
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1f0c:	88 23       	and	r24, r24
    1f0e:	31 f0       	breq	.+12     	; 0x1f1c <HID_Host_ConfigurePipes+0xb0>
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
    1f10:	d5 01       	movw	r26, r10
    1f12:	17 96       	adiw	r26, 0x07	; 7
    1f14:	9c 91       	ld	r25, X
    1f16:	17 97       	sbiw	r26, 0x07	; 7
    1f18:	98 17       	cp	r25, r24
    1f1a:	61 f7       	brne	.-40     	; 0x1ef4 <HID_Host_ConfigurePipes+0x88>
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1f1c:	c4 01       	movw	r24, r8
    1f1e:	b3 01       	movw	r22, r6
    1f20:	49 e1       	ldi	r20, 0x19	; 25
    1f22:	5f e0       	ldi	r21, 0x0F	; 15
    1f24:	dd dd       	rcall	.-1094   	; 0x1ae0 <USB_GetNextDescriptorComp>
    1f26:	88 23       	and	r24, r24
    1f28:	09 f0       	breq	.+2      	; 0x1f2c <HID_Host_ConfigurePipes+0xc0>
    1f2a:	5d c0       	rjmp	.+186    	; 0x1fe6 <HID_Host_ConfigurePipes+0x17a>
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    1f2c:	4b 80       	ldd	r4, Y+3	; 0x03
    1f2e:	5c 80       	ldd	r5, Y+4	; 0x04

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    1f30:	ee 24       	eor	r14, r14
    1f32:	ff 24       	eor	r15, r15
    1f34:	d2 cf       	rjmp	.-92     	; 0x1eda <HID_Host_ConfigurePipes+0x6e>

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1f36:	eb 81       	ldd	r30, Y+3	; 0x03
    1f38:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1f3a:	82 81       	ldd	r24, Z+2	; 0x02
    1f3c:	87 ff       	sbrs	r24, 7
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <HID_Host_ConfigurePipes+0xd8>
		  DataINEndpoint  = EndpointData;
    1f40:	6f 01       	movw	r12, r30
    1f42:	01 c0       	rjmp	.+2      	; 0x1f46 <HID_Host_ConfigurePipes+0xda>
		else
		  DataOUTEndpoint = EndpointData;
    1f44:	7f 01       	movw	r14, r30
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1f46:	c1 14       	cp	r12, r1
    1f48:	d1 04       	cpc	r13, r1
    1f4a:	39 f2       	breq	.-114    	; 0x1eda <HID_Host_ConfigurePipes+0x6e>
    1f4c:	e1 14       	cp	r14, r1
    1f4e:	f1 04       	cpc	r15, r1
    1f50:	21 f2       	breq	.-120    	; 0x1eda <HID_Host_ConfigurePipes+0x6e>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	HIDInterfaceInfo->Config.DataINPipe.Size  = le16_to_cpu(DataINEndpoint->EndpointSize);
    1f52:	f6 01       	movw	r30, r12
    1f54:	84 81       	ldd	r24, Z+4	; 0x04
    1f56:	95 81       	ldd	r25, Z+5	; 0x05
    1f58:	d8 01       	movw	r26, r16
    1f5a:	12 96       	adiw	r26, 0x02	; 2
    1f5c:	9c 93       	st	X, r25
    1f5e:	8e 93       	st	-X, r24
    1f60:	11 97       	sbiw	r26, 0x01	; 1
	HIDInterfaceInfo->Config.DataINPipe.EndpointAddress = DataINEndpoint->EndpointAddress;
    1f62:	82 81       	ldd	r24, Z+2	; 0x02
    1f64:	13 96       	adiw	r26, 0x03	; 3
    1f66:	8c 93       	st	X, r24
    1f68:	13 97       	sbiw	r26, 0x03	; 3
	HIDInterfaceInfo->Config.DataINPipe.Type  = EP_TYPE_INTERRUPT;
    1f6a:	83 e0       	ldi	r24, 0x03	; 3
    1f6c:	c8 2e       	mov	r12, r24
    1f6e:	14 96       	adiw	r26, 0x04	; 4
    1f70:	cc 92       	st	X, r12

	if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataINPipe, 1)))
    1f72:	c8 01       	movw	r24, r16
    1f74:	61 e0       	ldi	r22, 0x01	; 1
    1f76:	e2 db       	rcall	.-2108   	; 0x173c <Pipe_ConfigurePipeTable>
    1f78:	88 23       	and	r24, r24
    1f7a:	b9 f1       	breq	.+110    	; 0x1fea <HID_Host_ConfigurePipes+0x17e>
	  return false;

	if (DataOUTEndpoint)
    1f7c:	e1 14       	cp	r14, r1
    1f7e:	f1 04       	cpc	r15, r1
    1f80:	a1 f0       	breq	.+40     	; 0x1faa <HID_Host_ConfigurePipes+0x13e>
	{
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1f82:	f7 01       	movw	r30, r14
    1f84:	84 81       	ldd	r24, Z+4	; 0x04
    1f86:	95 81       	ldd	r25, Z+5	; 0x05
    1f88:	d8 01       	movw	r26, r16
    1f8a:	18 96       	adiw	r26, 0x08	; 8
    1f8c:	9c 93       	st	X, r25
    1f8e:	8e 93       	st	-X, r24
    1f90:	17 97       	sbiw	r26, 0x07	; 7
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1f92:	82 81       	ldd	r24, Z+2	; 0x02
    1f94:	19 96       	adiw	r26, 0x09	; 9
    1f96:	8c 93       	st	X, r24
    1f98:	19 97       	sbiw	r26, 0x09	; 9
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;
    1f9a:	1a 96       	adiw	r26, 0x0a	; 10
    1f9c:	cc 92       	st	X, r12

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
    1f9e:	c8 01       	movw	r24, r16
    1fa0:	06 96       	adiw	r24, 0x06	; 6
    1fa2:	61 e0       	ldi	r22, 0x01	; 1
    1fa4:	cb db       	rcall	.-2154   	; 0x173c <Pipe_ConfigurePipeTable>
    1fa6:	88 23       	and	r24, r24
    1fa8:	01 f1       	breq	.+64     	; 0x1fea <HID_Host_ConfigurePipes+0x17e>
		  return false;
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    1faa:	f5 01       	movw	r30, r10
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	d8 01       	movw	r26, r16
    1fb0:	50 96       	adiw	r26, 0x10	; 16
    1fb2:	8c 93       	st	X, r24
    1fb4:	50 97       	sbiw	r26, 0x10	; 16
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    1fb6:	f2 01       	movw	r30, r4
    1fb8:	87 81       	ldd	r24, Z+7	; 0x07
    1fba:	90 85       	ldd	r25, Z+8	; 0x08
    1fbc:	55 96       	adiw	r26, 0x15	; 21
    1fbe:	9c 93       	st	X, r25
    1fc0:	8e 93       	st	-X, r24
    1fc2:	54 97       	sbiw	r26, 0x14	; 20
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	d5 01       	movw	r26, r10
    1fc8:	16 96       	adiw	r26, 0x06	; 6
    1fca:	9c 91       	ld	r25, X
    1fcc:	16 97       	sbiw	r26, 0x06	; 6
    1fce:	99 23       	and	r25, r25
    1fd0:	09 f4       	brne	.+2      	; 0x1fd4 <HID_Host_ConfigurePipes+0x168>
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	f8 01       	movw	r30, r16
    1fd6:	81 8b       	std	Z+17, r24	; 0x11
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    1fd8:	88 e0       	ldi	r24, 0x08	; 8
    1fda:	86 8b       	std	Z+22, r24	; 0x16
	HIDInterfaceInfo->State.IsActive             = true;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	87 87       	std	Z+15, r24	; 0x0f
    1fe0:	04 c0       	rjmp	.+8      	; 0x1fea <HID_Host_ConfigurePipes+0x17e>
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	03 c0       	rjmp	.+6      	; 0x1fec <HID_Host_ConfigurePipes+0x180>
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
    1fe6:	82 e0       	ldi	r24, 0x02	; 2
    1fe8:	01 c0       	rjmp	.+2      	; 0x1fec <HID_Host_ConfigurePipes+0x180>
		HIDInterfaceInfo->Config.DataOUTPipe.Size = le16_to_cpu(DataOUTEndpoint->EndpointSize);
		HIDInterfaceInfo->Config.DataOUTPipe.EndpointAddress = DataOUTEndpoint->EndpointAddress;
		HIDInterfaceInfo->Config.DataOUTPipe.Type = EP_TYPE_INTERRUPT;

		if (!(Pipe_ConfigurePipeTable(&HIDInterfaceInfo->Config.DataOUTPipe, 1)))
		  return false;
    1fea:	80 e0       	ldi	r24, 0x00	; 0
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
	HIDInterfaceInfo->State.LargestReportSize    = 8;
	HIDInterfaceInfo->State.IsActive             = true;

	return HID_ENUMERROR_NoError;
}
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	1f 91       	pop	r17
    1ffa:	0f 91       	pop	r16
    1ffc:	ff 90       	pop	r15
    1ffe:	ef 90       	pop	r14
    2000:	df 90       	pop	r13
    2002:	cf 90       	pop	r12
    2004:	bf 90       	pop	r11
    2006:	af 90       	pop	r10
    2008:	9f 90       	pop	r9
    200a:	8f 90       	pop	r8
    200c:	7f 90       	pop	r7
    200e:	6f 90       	pop	r6
    2010:	5f 90       	pop	r5
    2012:	4f 90       	pop	r4
    2014:	08 95       	ret

00002016 <HID_Host_SetReportProtocol>:
	return USB_Host_SendControlRequest(NULL);
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    2016:	af 92       	push	r10
    2018:	bf 92       	push	r11
    201a:	cf 92       	push	r12
    201c:	df 92       	push	r13
    201e:	ef 92       	push	r14
    2020:	ff 92       	push	r15
    2022:	0f 93       	push	r16
    2024:	1f 93       	push	r17
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	8c 01       	movw	r16, r24

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    2030:	cd b6       	in	r12, 0x3d	; 61
    2032:	de b6       	in	r13, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    2034:	dc 01       	movw	r26, r24
    2036:	54 96       	adiw	r26, 0x14	; 20
    2038:	4d 91       	ld	r20, X+
    203a:	5c 91       	ld	r21, X
    203c:	55 97       	sbiw	r26, 0x15	; 21
    203e:	ed b7       	in	r30, 0x3d	; 61
    2040:	fe b7       	in	r31, 0x3e	; 62
    2042:	e4 1b       	sub	r30, r20
    2044:	f5 0b       	sbc	r31, r21
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	fe bf       	out	0x3e, r31	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	ed bf       	out	0x3d, r30	; 61
    2050:	2d b7       	in	r18, 0x3d	; 61
    2052:	3e b7       	in	r19, 0x3e	; 62
    2054:	2f 5f       	subi	r18, 0xFF	; 255
    2056:	3f 4f       	sbci	r19, 0xFF	; 255
    2058:	59 01       	movw	r10, r18

	USB_ControlRequest = (USB_Request_Header_t)
    205a:	50 96       	adiw	r26, 0x10	; 16
    205c:	6c 91       	ld	r22, X
    205e:	81 e8       	ldi	r24, 0x81	; 129
    2060:	80 93 16 05 	sts	0x0516, r24
    2064:	86 e0       	ldi	r24, 0x06	; 6
    2066:	80 93 17 05 	sts	0x0517, r24
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	92 e2       	ldi	r25, 0x22	; 34
    206e:	90 93 19 05 	sts	0x0519, r25
    2072:	80 93 18 05 	sts	0x0518, r24
    2076:	7a e1       	ldi	r23, 0x1A	; 26
    2078:	e7 2e       	mov	r14, r23
    207a:	75 e0       	ldi	r23, 0x05	; 5
    207c:	f7 2e       	mov	r15, r23
    207e:	60 93 1a 05 	sts	0x051A, r22
    2082:	d7 01       	movw	r26, r14
    2084:	11 96       	adiw	r26, 0x01	; 1
    2086:	1c 92       	st	X, r1
    2088:	50 93 1d 05 	sts	0x051D, r21
    208c:	40 93 1c 05 	sts	0x051C, r20
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
    2090:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    2094:	c9 01       	movw	r24, r18
    2096:	91 dd       	rcall	.-1246   	; 0x1bba <USB_Host_SendControlRequest>
    2098:	88 23       	and	r24, r24
    209a:	09 f0       	breq	.+2      	; 0x209e <HID_Host_SetReportProtocol+0x88>
    209c:	4f c0       	rjmp	.+158    	; 0x213c <__stack+0x3d>
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    209e:	f8 01       	movw	r30, r16
    20a0:	83 89       	ldd	r24, Z+19	; 0x13
    20a2:	88 23       	and	r24, r24
    20a4:	e9 f0       	breq	.+58     	; 0x20e0 <HID_Host_SetReportProtocol+0xca>
	{
		USB_ControlRequest = (USB_Request_Header_t)
    20a6:	20 89       	ldd	r18, Z+16	; 0x10
    20a8:	81 e2       	ldi	r24, 0x21	; 33
    20aa:	80 93 16 05 	sts	0x0516, r24
    20ae:	8b e0       	ldi	r24, 0x0B	; 11
    20b0:	80 93 17 05 	sts	0x0517, r24
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	90 93 19 05 	sts	0x0519, r25
    20bc:	80 93 18 05 	sts	0x0518, r24
    20c0:	20 93 1a 05 	sts	0x051A, r18
    20c4:	d7 01       	movw	r26, r14
    20c6:	11 96       	adiw	r26, 0x01	; 1
    20c8:	1c 92       	st	X, r1
    20ca:	10 92 1d 05 	sts	0x051D, r1
    20ce:	10 92 1c 05 	sts	0x051C, r1
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	71 dd       	rcall	.-1310   	; 0x1bba <USB_Host_SendControlRequest>
    20d8:	88 23       	and	r24, r24
    20da:	81 f5       	brne	.+96     	; 0x213c <__stack+0x3d>
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    20dc:	f8 01       	movw	r30, r16
    20de:	13 8a       	std	Z+19, r1	; 0x13
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    20e0:	d8 01       	movw	r26, r16
    20e2:	1d 96       	adiw	r26, 0x0d	; 13
    20e4:	4d 91       	ld	r20, X+
    20e6:	5c 91       	ld	r21, X
    20e8:	1e 97       	sbiw	r26, 0x0e	; 14
    20ea:	41 15       	cp	r20, r1
    20ec:	51 05       	cpc	r21, r1
    20ee:	29 f1       	breq	.+74     	; 0x213a <__stack+0x3b>
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    20f0:	54 96       	adiw	r26, 0x14	; 20
    20f2:	6d 91       	ld	r22, X+
    20f4:	7c 91       	ld	r23, X
    20f6:	55 97       	sbiw	r26, 0x15	; 21
    20f8:	c5 01       	movw	r24, r10
    20fa:	0e 94 59 05 	call	0xab2	; 0xab2 <USB_ProcessHIDReport>
    20fe:	88 23       	and	r24, r24
    2100:	11 f0       	breq	.+4      	; 0x2106 <__stack+0x7>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    2102:	80 68       	ori	r24, 0x80	; 128
    2104:	1b c0       	rjmp	.+54     	; 0x213c <__stack+0x3d>
	}

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    2106:	d8 01       	movw	r26, r16
    2108:	1d 96       	adiw	r26, 0x0d	; 13
    210a:	ed 91       	ld	r30, X+
    210c:	fc 91       	ld	r31, X
    210e:	1e 97       	sbiw	r26, 0x0e	; 14
    2110:	ea 52       	subi	r30, 0x2A	; 42
    2112:	fc 4f       	sbci	r31, 0xFC	; 252
    2114:	20 81       	ld	r18, Z
    2116:	31 81       	ldd	r19, Z+1	; 0x01
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    2118:	a9 01       	movw	r20, r18
    211a:	47 70       	andi	r20, 0x07	; 7
    211c:	50 70       	andi	r21, 0x00	; 0
    211e:	91 e0       	ldi	r25, 0x01	; 1
    2120:	41 15       	cp	r20, r1
    2122:	51 05       	cpc	r21, r1
    2124:	09 f4       	brne	.+2      	; 0x2128 <__stack+0x29>
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	43 e0       	ldi	r20, 0x03	; 3
    212a:	36 95       	lsr	r19
    212c:	27 95       	ror	r18
    212e:	4a 95       	dec	r20
    2130:	e1 f7       	brne	.-8      	; 0x212a <__stack+0x2b>
    2132:	29 0f       	add	r18, r25
    2134:	f8 01       	movw	r30, r16
    2136:	26 8b       	std	Z+22, r18	; 0x16
    2138:	01 c0       	rjmp	.+2      	; 0x213c <__stack+0x3d>

		HIDInterfaceInfo->State.UsingBootProtocol = false;
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
	  return HID_ERROR_LOGICAL;
    213a:	80 e8       	ldi	r24, 0x80	; 128

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	de be       	out	0x3e, r13	; 62
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	cd be       	out	0x3d, r12	; 61
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	1f 91       	pop	r17
    214c:	0f 91       	pop	r16
    214e:	ff 90       	pop	r15
    2150:	ef 90       	pop	r14
    2152:	df 90       	pop	r13
    2154:	cf 90       	pop	r12
    2156:	bf 90       	pop	r11
    2158:	af 90       	pop	r10
    215a:	08 95       	ret

0000215c <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    215c:	90 91 c8 00 	lds	r25, 0x00C8
    2160:	95 ff       	sbrs	r25, 5
    2162:	fc cf       	rjmp	.-8      	; 0x215c <Serial_putchar>
				UDR1 = DataByte;
    2164:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	08 95       	ret

0000216e <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    216e:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    2172:	87 ff       	sbrs	r24, 7
    2174:	08 c0       	rjmp	.+16     	; 0x2186 <Serial_getchar+0x18>
    2176:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    217a:	87 ff       	sbrs	r24, 7
    217c:	07 c0       	rjmp	.+14     	; 0x218c <Serial_getchar+0x1e>
				  return -1;

				return UDR1;
    217e:	20 91 ce 00 	lds	r18, 0x00CE
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	05 c0       	rjmp	.+10     	; 0x2190 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    2186:	2e ef       	ldi	r18, 0xFE	; 254
    2188:	3f ef       	ldi	r19, 0xFF	; 255
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    218c:	2f ef       	ldi	r18, 0xFF	; 255
    218e:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    2190:	c9 01       	movw	r24, r18
    2192:	08 95       	ret

00002194 <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*((uint8_t*)Buffer++));
}

void Serial_CreateStream(FILE* Stream)
{
    2194:	fc 01       	movw	r30, r24
	if (!(Stream))
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	51 f4       	brne	.+20     	; 0x21ae <Serial_CreateStream+0x1a>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    219a:	ef e1       	ldi	r30, 0x1F	; 31
    219c:	f5 e0       	ldi	r31, 0x05	; 5
    219e:	f0 93 2e 05 	sts	0x052E, r31
    21a2:	e0 93 2d 05 	sts	0x052D, r30
		stdout = Stream;
    21a6:	f0 93 30 05 	sts	0x0530, r31
    21aa:	e0 93 2f 05 	sts	0x052F, r30
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    21ae:	8e e0       	ldi	r24, 0x0E	; 14
    21b0:	df 01       	movw	r26, r30
    21b2:	1d 92       	st	X+, r1
    21b4:	8a 95       	dec	r24
    21b6:	e9 f7       	brne	.-6      	; 0x21b2 <Serial_CreateStream+0x1e>
    21b8:	83 e0       	ldi	r24, 0x03	; 3
    21ba:	83 83       	std	Z+3, r24	; 0x03
    21bc:	8e ea       	ldi	r24, 0xAE	; 174
    21be:	90 e1       	ldi	r25, 0x10	; 16
    21c0:	91 87       	std	Z+9, r25	; 0x09
    21c2:	80 87       	std	Z+8, r24	; 0x08
    21c4:	87 eb       	ldi	r24, 0xB7	; 183
    21c6:	90 e1       	ldi	r25, 0x10	; 16
    21c8:	93 87       	std	Z+11, r25	; 0x0b
    21ca:	82 87       	std	Z+10, r24	; 0x0a
}
    21cc:	08 95       	ret

000021ce <printf_P>:
    21ce:	df 93       	push	r29
    21d0:	cf 93       	push	r28
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	fe 01       	movw	r30, r28
    21d8:	35 96       	adiw	r30, 0x05	; 5
    21da:	61 91       	ld	r22, Z+
    21dc:	71 91       	ld	r23, Z+
    21de:	80 91 2f 05 	lds	r24, 0x052F
    21e2:	90 91 30 05 	lds	r25, 0x0530
    21e6:	dc 01       	movw	r26, r24
    21e8:	13 96       	adiw	r26, 0x03	; 3
    21ea:	2c 91       	ld	r18, X
    21ec:	13 97       	sbiw	r26, 0x03	; 3
    21ee:	28 60       	ori	r18, 0x08	; 8
    21f0:	13 96       	adiw	r26, 0x03	; 3
    21f2:	2c 93       	st	X, r18
    21f4:	af 01       	movw	r20, r30
    21f6:	42 d0       	rcall	.+132    	; 0x227c <vfprintf>
    21f8:	e0 91 2f 05 	lds	r30, 0x052F
    21fc:	f0 91 30 05 	lds	r31, 0x0530
    2200:	23 81       	ldd	r18, Z+3	; 0x03
    2202:	27 7f       	andi	r18, 0xF7	; 247
    2204:	23 83       	std	Z+3, r18	; 0x03
    2206:	cf 91       	pop	r28
    2208:	df 91       	pop	r29
    220a:	08 95       	ret

0000220c <puts_P>:
    220c:	ef 92       	push	r14
    220e:	ff 92       	push	r15
    2210:	0f 93       	push	r16
    2212:	1f 93       	push	r17
    2214:	cf 93       	push	r28
    2216:	df 93       	push	r29
    2218:	8c 01       	movw	r16, r24
    221a:	e0 91 2f 05 	lds	r30, 0x052F
    221e:	f0 91 30 05 	lds	r31, 0x0530
    2222:	83 81       	ldd	r24, Z+3	; 0x03
    2224:	81 ff       	sbrs	r24, 1
    2226:	20 c0       	rjmp	.+64     	; 0x2268 <puts_P+0x5c>
    2228:	c0 e0       	ldi	r28, 0x00	; 0
    222a:	d0 e0       	ldi	r29, 0x00	; 0
    222c:	0c c0       	rjmp	.+24     	; 0x2246 <puts_P+0x3a>
    222e:	db 01       	movw	r26, r22
    2230:	18 96       	adiw	r26, 0x08	; 8
    2232:	ed 91       	ld	r30, X+
    2234:	fc 91       	ld	r31, X
    2236:	19 97       	sbiw	r26, 0x09	; 9
    2238:	09 95       	icall
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	11 f0       	breq	.+4      	; 0x2242 <puts_P+0x36>
    223e:	cf ef       	ldi	r28, 0xFF	; 255
    2240:	df ef       	ldi	r29, 0xFF	; 255
    2242:	0f 5f       	subi	r16, 0xFF	; 255
    2244:	1f 4f       	sbci	r17, 0xFF	; 255
    2246:	f8 01       	movw	r30, r16
    2248:	84 91       	lpm	r24, Z+
    224a:	60 91 2f 05 	lds	r22, 0x052F
    224e:	70 91 30 05 	lds	r23, 0x0530
    2252:	88 23       	and	r24, r24
    2254:	61 f7       	brne	.-40     	; 0x222e <puts_P+0x22>
    2256:	db 01       	movw	r26, r22
    2258:	18 96       	adiw	r26, 0x08	; 8
    225a:	ed 91       	ld	r30, X+
    225c:	fc 91       	ld	r31, X
    225e:	19 97       	sbiw	r26, 0x09	; 9
    2260:	8a e0       	ldi	r24, 0x0A	; 10
    2262:	09 95       	icall
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	11 f0       	breq	.+4      	; 0x226c <puts_P+0x60>
    2268:	cf ef       	ldi	r28, 0xFF	; 255
    226a:	df ef       	ldi	r29, 0xFF	; 255
    226c:	ce 01       	movw	r24, r28
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
    2272:	1f 91       	pop	r17
    2274:	0f 91       	pop	r16
    2276:	ff 90       	pop	r15
    2278:	ef 90       	pop	r14
    227a:	08 95       	ret

0000227c <vfprintf>:
    227c:	2f 92       	push	r2
    227e:	3f 92       	push	r3
    2280:	4f 92       	push	r4
    2282:	5f 92       	push	r5
    2284:	6f 92       	push	r6
    2286:	7f 92       	push	r7
    2288:	8f 92       	push	r8
    228a:	9f 92       	push	r9
    228c:	af 92       	push	r10
    228e:	bf 92       	push	r11
    2290:	cf 92       	push	r12
    2292:	df 92       	push	r13
    2294:	ef 92       	push	r14
    2296:	ff 92       	push	r15
    2298:	0f 93       	push	r16
    229a:	1f 93       	push	r17
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	2c 97       	sbiw	r28, 0x0c	; 12
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	6c 01       	movw	r12, r24
    22b2:	1b 01       	movw	r2, r22
    22b4:	8a 01       	movw	r16, r20
    22b6:	fc 01       	movw	r30, r24
    22b8:	17 82       	std	Z+7, r1	; 0x07
    22ba:	16 82       	std	Z+6, r1	; 0x06
    22bc:	83 81       	ldd	r24, Z+3	; 0x03
    22be:	81 ff       	sbrs	r24, 1
    22c0:	c4 c1       	rjmp	.+904    	; 0x264a <vfprintf+0x3ce>
    22c2:	2e 01       	movw	r4, r28
    22c4:	08 94       	sec
    22c6:	41 1c       	adc	r4, r1
    22c8:	51 1c       	adc	r5, r1
    22ca:	f6 01       	movw	r30, r12
    22cc:	93 81       	ldd	r25, Z+3	; 0x03
    22ce:	f1 01       	movw	r30, r2
    22d0:	93 fd       	sbrc	r25, 3
    22d2:	85 91       	lpm	r24, Z+
    22d4:	93 ff       	sbrs	r25, 3
    22d6:	81 91       	ld	r24, Z+
    22d8:	1f 01       	movw	r2, r30
    22da:	88 23       	and	r24, r24
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <vfprintf+0x64>
    22de:	b1 c1       	rjmp	.+866    	; 0x2642 <vfprintf+0x3c6>
    22e0:	85 32       	cpi	r24, 0x25	; 37
    22e2:	39 f4       	brne	.+14     	; 0x22f2 <vfprintf+0x76>
    22e4:	93 fd       	sbrc	r25, 3
    22e6:	85 91       	lpm	r24, Z+
    22e8:	93 ff       	sbrs	r25, 3
    22ea:	81 91       	ld	r24, Z+
    22ec:	1f 01       	movw	r2, r30
    22ee:	85 32       	cpi	r24, 0x25	; 37
    22f0:	21 f4       	brne	.+8      	; 0x22fa <vfprintf+0x7e>
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	b6 01       	movw	r22, r12
    22f6:	db d1       	rcall	.+950    	; 0x26ae <fputc>
    22f8:	e8 cf       	rjmp	.-48     	; 0x22ca <vfprintf+0x4e>
    22fa:	ee 24       	eor	r14, r14
    22fc:	ff 24       	eor	r15, r15
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	20 32       	cpi	r18, 0x20	; 32
    2302:	b0 f4       	brcc	.+44     	; 0x2330 <vfprintf+0xb4>
    2304:	8b 32       	cpi	r24, 0x2B	; 43
    2306:	69 f0       	breq	.+26     	; 0x2322 <vfprintf+0xa6>
    2308:	8c 32       	cpi	r24, 0x2C	; 44
    230a:	28 f4       	brcc	.+10     	; 0x2316 <vfprintf+0x9a>
    230c:	80 32       	cpi	r24, 0x20	; 32
    230e:	51 f0       	breq	.+20     	; 0x2324 <vfprintf+0xa8>
    2310:	83 32       	cpi	r24, 0x23	; 35
    2312:	71 f4       	brne	.+28     	; 0x2330 <vfprintf+0xb4>
    2314:	0b c0       	rjmp	.+22     	; 0x232c <vfprintf+0xb0>
    2316:	8d 32       	cpi	r24, 0x2D	; 45
    2318:	39 f0       	breq	.+14     	; 0x2328 <vfprintf+0xac>
    231a:	80 33       	cpi	r24, 0x30	; 48
    231c:	49 f4       	brne	.+18     	; 0x2330 <vfprintf+0xb4>
    231e:	21 60       	ori	r18, 0x01	; 1
    2320:	2c c0       	rjmp	.+88     	; 0x237a <vfprintf+0xfe>
    2322:	22 60       	ori	r18, 0x02	; 2
    2324:	24 60       	ori	r18, 0x04	; 4
    2326:	29 c0       	rjmp	.+82     	; 0x237a <vfprintf+0xfe>
    2328:	28 60       	ori	r18, 0x08	; 8
    232a:	27 c0       	rjmp	.+78     	; 0x237a <vfprintf+0xfe>
    232c:	20 61       	ori	r18, 0x10	; 16
    232e:	25 c0       	rjmp	.+74     	; 0x237a <vfprintf+0xfe>
    2330:	27 fd       	sbrc	r18, 7
    2332:	2c c0       	rjmp	.+88     	; 0x238c <vfprintf+0x110>
    2334:	38 2f       	mov	r19, r24
    2336:	30 53       	subi	r19, 0x30	; 48
    2338:	3a 30       	cpi	r19, 0x0A	; 10
    233a:	98 f4       	brcc	.+38     	; 0x2362 <vfprintf+0xe6>
    233c:	26 ff       	sbrs	r18, 6
    233e:	08 c0       	rjmp	.+16     	; 0x2350 <vfprintf+0xd4>
    2340:	8e 2d       	mov	r24, r14
    2342:	88 0f       	add	r24, r24
    2344:	e8 2e       	mov	r14, r24
    2346:	ee 0c       	add	r14, r14
    2348:	ee 0c       	add	r14, r14
    234a:	e8 0e       	add	r14, r24
    234c:	e3 0e       	add	r14, r19
    234e:	15 c0       	rjmp	.+42     	; 0x237a <vfprintf+0xfe>
    2350:	8f 2d       	mov	r24, r15
    2352:	88 0f       	add	r24, r24
    2354:	f8 2e       	mov	r15, r24
    2356:	ff 0c       	add	r15, r15
    2358:	ff 0c       	add	r15, r15
    235a:	f8 0e       	add	r15, r24
    235c:	f3 0e       	add	r15, r19
    235e:	20 62       	ori	r18, 0x20	; 32
    2360:	0c c0       	rjmp	.+24     	; 0x237a <vfprintf+0xfe>
    2362:	8e 32       	cpi	r24, 0x2E	; 46
    2364:	21 f4       	brne	.+8      	; 0x236e <vfprintf+0xf2>
    2366:	26 fd       	sbrc	r18, 6
    2368:	6c c1       	rjmp	.+728    	; 0x2642 <vfprintf+0x3c6>
    236a:	20 64       	ori	r18, 0x40	; 64
    236c:	06 c0       	rjmp	.+12     	; 0x237a <vfprintf+0xfe>
    236e:	8c 36       	cpi	r24, 0x6C	; 108
    2370:	11 f4       	brne	.+4      	; 0x2376 <vfprintf+0xfa>
    2372:	20 68       	ori	r18, 0x80	; 128
    2374:	02 c0       	rjmp	.+4      	; 0x237a <vfprintf+0xfe>
    2376:	88 36       	cpi	r24, 0x68	; 104
    2378:	49 f4       	brne	.+18     	; 0x238c <vfprintf+0x110>
    237a:	f1 01       	movw	r30, r2
    237c:	93 fd       	sbrc	r25, 3
    237e:	85 91       	lpm	r24, Z+
    2380:	93 ff       	sbrs	r25, 3
    2382:	81 91       	ld	r24, Z+
    2384:	1f 01       	movw	r2, r30
    2386:	88 23       	and	r24, r24
    2388:	09 f0       	breq	.+2      	; 0x238c <vfprintf+0x110>
    238a:	ba cf       	rjmp	.-140    	; 0x2300 <vfprintf+0x84>
    238c:	98 2f       	mov	r25, r24
    238e:	95 54       	subi	r25, 0x45	; 69
    2390:	93 30       	cpi	r25, 0x03	; 3
    2392:	18 f0       	brcs	.+6      	; 0x239a <vfprintf+0x11e>
    2394:	90 52       	subi	r25, 0x20	; 32
    2396:	93 30       	cpi	r25, 0x03	; 3
    2398:	28 f4       	brcc	.+10     	; 0x23a4 <vfprintf+0x128>
    239a:	0c 5f       	subi	r16, 0xFC	; 252
    239c:	1f 4f       	sbci	r17, 0xFF	; 255
    239e:	ff e3       	ldi	r31, 0x3F	; 63
    23a0:	f9 83       	std	Y+1, r31	; 0x01
    23a2:	0d c0       	rjmp	.+26     	; 0x23be <vfprintf+0x142>
    23a4:	83 36       	cpi	r24, 0x63	; 99
    23a6:	31 f0       	breq	.+12     	; 0x23b4 <vfprintf+0x138>
    23a8:	83 37       	cpi	r24, 0x73	; 115
    23aa:	71 f0       	breq	.+28     	; 0x23c8 <vfprintf+0x14c>
    23ac:	83 35       	cpi	r24, 0x53	; 83
    23ae:	09 f0       	breq	.+2      	; 0x23b2 <vfprintf+0x136>
    23b0:	5c c0       	rjmp	.+184    	; 0x246a <vfprintf+0x1ee>
    23b2:	21 c0       	rjmp	.+66     	; 0x23f6 <vfprintf+0x17a>
    23b4:	f8 01       	movw	r30, r16
    23b6:	80 81       	ld	r24, Z
    23b8:	89 83       	std	Y+1, r24	; 0x01
    23ba:	0e 5f       	subi	r16, 0xFE	; 254
    23bc:	1f 4f       	sbci	r17, 0xFF	; 255
    23be:	42 01       	movw	r8, r4
    23c0:	71 e0       	ldi	r23, 0x01	; 1
    23c2:	a7 2e       	mov	r10, r23
    23c4:	b1 2c       	mov	r11, r1
    23c6:	15 c0       	rjmp	.+42     	; 0x23f2 <vfprintf+0x176>
    23c8:	62 e0       	ldi	r22, 0x02	; 2
    23ca:	66 2e       	mov	r6, r22
    23cc:	71 2c       	mov	r7, r1
    23ce:	60 0e       	add	r6, r16
    23d0:	71 1e       	adc	r7, r17
    23d2:	f8 01       	movw	r30, r16
    23d4:	80 80       	ld	r8, Z
    23d6:	91 80       	ldd	r9, Z+1	; 0x01
    23d8:	26 ff       	sbrs	r18, 6
    23da:	03 c0       	rjmp	.+6      	; 0x23e2 <vfprintf+0x166>
    23dc:	6e 2d       	mov	r22, r14
    23de:	70 e0       	ldi	r23, 0x00	; 0
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <vfprintf+0x16a>
    23e2:	6f ef       	ldi	r22, 0xFF	; 255
    23e4:	7f ef       	ldi	r23, 0xFF	; 255
    23e6:	c4 01       	movw	r24, r8
    23e8:	2c 87       	std	Y+12, r18	; 0x0c
    23ea:	56 d1       	rcall	.+684    	; 0x2698 <strnlen>
    23ec:	5c 01       	movw	r10, r24
    23ee:	83 01       	movw	r16, r6
    23f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    23f2:	2f 77       	andi	r18, 0x7F	; 127
    23f4:	16 c0       	rjmp	.+44     	; 0x2422 <vfprintf+0x1a6>
    23f6:	52 e0       	ldi	r21, 0x02	; 2
    23f8:	65 2e       	mov	r6, r21
    23fa:	71 2c       	mov	r7, r1
    23fc:	60 0e       	add	r6, r16
    23fe:	71 1e       	adc	r7, r17
    2400:	f8 01       	movw	r30, r16
    2402:	80 80       	ld	r8, Z
    2404:	91 80       	ldd	r9, Z+1	; 0x01
    2406:	26 ff       	sbrs	r18, 6
    2408:	03 c0       	rjmp	.+6      	; 0x2410 <vfprintf+0x194>
    240a:	6e 2d       	mov	r22, r14
    240c:	70 e0       	ldi	r23, 0x00	; 0
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <vfprintf+0x198>
    2410:	6f ef       	ldi	r22, 0xFF	; 255
    2412:	7f ef       	ldi	r23, 0xFF	; 255
    2414:	c4 01       	movw	r24, r8
    2416:	2c 87       	std	Y+12, r18	; 0x0c
    2418:	34 d1       	rcall	.+616    	; 0x2682 <strnlen_P>
    241a:	5c 01       	movw	r10, r24
    241c:	2c 85       	ldd	r18, Y+12	; 0x0c
    241e:	20 68       	ori	r18, 0x80	; 128
    2420:	83 01       	movw	r16, r6
    2422:	23 fd       	sbrc	r18, 3
    2424:	1e c0       	rjmp	.+60     	; 0x2462 <vfprintf+0x1e6>
    2426:	07 c0       	rjmp	.+14     	; 0x2436 <vfprintf+0x1ba>
    2428:	80 e2       	ldi	r24, 0x20	; 32
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	b6 01       	movw	r22, r12
    242e:	2c 87       	std	Y+12, r18	; 0x0c
    2430:	3e d1       	rcall	.+636    	; 0x26ae <fputc>
    2432:	fa 94       	dec	r15
    2434:	2c 85       	ldd	r18, Y+12	; 0x0c
    2436:	8f 2d       	mov	r24, r15
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	a8 16       	cp	r10, r24
    243c:	b9 06       	cpc	r11, r25
    243e:	a0 f3       	brcs	.-24     	; 0x2428 <vfprintf+0x1ac>
    2440:	10 c0       	rjmp	.+32     	; 0x2462 <vfprintf+0x1e6>
    2442:	f4 01       	movw	r30, r8
    2444:	27 fd       	sbrc	r18, 7
    2446:	85 91       	lpm	r24, Z+
    2448:	27 ff       	sbrs	r18, 7
    244a:	81 91       	ld	r24, Z+
    244c:	4f 01       	movw	r8, r30
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	b6 01       	movw	r22, r12
    2452:	2c 87       	std	Y+12, r18	; 0x0c
    2454:	2c d1       	rcall	.+600    	; 0x26ae <fputc>
    2456:	2c 85       	ldd	r18, Y+12	; 0x0c
    2458:	f1 10       	cpse	r15, r1
    245a:	fa 94       	dec	r15
    245c:	08 94       	sec
    245e:	a1 08       	sbc	r10, r1
    2460:	b1 08       	sbc	r11, r1
    2462:	a1 14       	cp	r10, r1
    2464:	b1 04       	cpc	r11, r1
    2466:	69 f7       	brne	.-38     	; 0x2442 <vfprintf+0x1c6>
    2468:	e9 c0       	rjmp	.+466    	; 0x263c <vfprintf+0x3c0>
    246a:	84 36       	cpi	r24, 0x64	; 100
    246c:	11 f0       	breq	.+4      	; 0x2472 <vfprintf+0x1f6>
    246e:	89 36       	cpi	r24, 0x69	; 105
    2470:	41 f5       	brne	.+80     	; 0x24c2 <vfprintf+0x246>
    2472:	27 ff       	sbrs	r18, 7
    2474:	08 c0       	rjmp	.+16     	; 0x2486 <vfprintf+0x20a>
    2476:	f8 01       	movw	r30, r16
    2478:	60 81       	ld	r22, Z
    247a:	71 81       	ldd	r23, Z+1	; 0x01
    247c:	82 81       	ldd	r24, Z+2	; 0x02
    247e:	93 81       	ldd	r25, Z+3	; 0x03
    2480:	0c 5f       	subi	r16, 0xFC	; 252
    2482:	1f 4f       	sbci	r17, 0xFF	; 255
    2484:	09 c0       	rjmp	.+18     	; 0x2498 <vfprintf+0x21c>
    2486:	f8 01       	movw	r30, r16
    2488:	60 81       	ld	r22, Z
    248a:	71 81       	ldd	r23, Z+1	; 0x01
    248c:	88 27       	eor	r24, r24
    248e:	77 fd       	sbrc	r23, 7
    2490:	80 95       	com	r24
    2492:	98 2f       	mov	r25, r24
    2494:	0e 5f       	subi	r16, 0xFE	; 254
    2496:	1f 4f       	sbci	r17, 0xFF	; 255
    2498:	4f e6       	ldi	r20, 0x6F	; 111
    249a:	b4 2e       	mov	r11, r20
    249c:	b2 22       	and	r11, r18
    249e:	97 ff       	sbrs	r25, 7
    24a0:	09 c0       	rjmp	.+18     	; 0x24b4 <vfprintf+0x238>
    24a2:	90 95       	com	r25
    24a4:	80 95       	com	r24
    24a6:	70 95       	com	r23
    24a8:	61 95       	neg	r22
    24aa:	7f 4f       	sbci	r23, 0xFF	; 255
    24ac:	8f 4f       	sbci	r24, 0xFF	; 255
    24ae:	9f 4f       	sbci	r25, 0xFF	; 255
    24b0:	f0 e8       	ldi	r31, 0x80	; 128
    24b2:	bf 2a       	or	r11, r31
    24b4:	a2 01       	movw	r20, r4
    24b6:	2a e0       	ldi	r18, 0x0A	; 10
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	25 d1       	rcall	.+586    	; 0x2706 <__ultoa_invert>
    24bc:	78 2e       	mov	r7, r24
    24be:	74 18       	sub	r7, r4
    24c0:	44 c0       	rjmp	.+136    	; 0x254a <vfprintf+0x2ce>
    24c2:	85 37       	cpi	r24, 0x75	; 117
    24c4:	31 f4       	brne	.+12     	; 0x24d2 <vfprintf+0x256>
    24c6:	3f ee       	ldi	r19, 0xEF	; 239
    24c8:	b3 2e       	mov	r11, r19
    24ca:	b2 22       	and	r11, r18
    24cc:	2a e0       	ldi	r18, 0x0A	; 10
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	25 c0       	rjmp	.+74     	; 0x251c <vfprintf+0x2a0>
    24d2:	99 ef       	ldi	r25, 0xF9	; 249
    24d4:	b9 2e       	mov	r11, r25
    24d6:	b2 22       	and	r11, r18
    24d8:	8f 36       	cpi	r24, 0x6F	; 111
    24da:	c1 f0       	breq	.+48     	; 0x250c <vfprintf+0x290>
    24dc:	80 37       	cpi	r24, 0x70	; 112
    24de:	20 f4       	brcc	.+8      	; 0x24e8 <vfprintf+0x26c>
    24e0:	88 35       	cpi	r24, 0x58	; 88
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <vfprintf+0x26a>
    24e4:	ae c0       	rjmp	.+348    	; 0x2642 <vfprintf+0x3c6>
    24e6:	0d c0       	rjmp	.+26     	; 0x2502 <vfprintf+0x286>
    24e8:	80 37       	cpi	r24, 0x70	; 112
    24ea:	21 f0       	breq	.+8      	; 0x24f4 <vfprintf+0x278>
    24ec:	88 37       	cpi	r24, 0x78	; 120
    24ee:	09 f0       	breq	.+2      	; 0x24f2 <vfprintf+0x276>
    24f0:	a8 c0       	rjmp	.+336    	; 0x2642 <vfprintf+0x3c6>
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <vfprintf+0x27c>
    24f4:	20 e1       	ldi	r18, 0x10	; 16
    24f6:	b2 2a       	or	r11, r18
    24f8:	b4 fe       	sbrs	r11, 4
    24fa:	0b c0       	rjmp	.+22     	; 0x2512 <vfprintf+0x296>
    24fc:	84 e0       	ldi	r24, 0x04	; 4
    24fe:	b8 2a       	or	r11, r24
    2500:	08 c0       	rjmp	.+16     	; 0x2512 <vfprintf+0x296>
    2502:	b4 fe       	sbrs	r11, 4
    2504:	09 c0       	rjmp	.+18     	; 0x2518 <vfprintf+0x29c>
    2506:	e6 e0       	ldi	r30, 0x06	; 6
    2508:	be 2a       	or	r11, r30
    250a:	06 c0       	rjmp	.+12     	; 0x2518 <vfprintf+0x29c>
    250c:	28 e0       	ldi	r18, 0x08	; 8
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	05 c0       	rjmp	.+10     	; 0x251c <vfprintf+0x2a0>
    2512:	20 e1       	ldi	r18, 0x10	; 16
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	02 c0       	rjmp	.+4      	; 0x251c <vfprintf+0x2a0>
    2518:	20 e1       	ldi	r18, 0x10	; 16
    251a:	32 e0       	ldi	r19, 0x02	; 2
    251c:	b7 fe       	sbrs	r11, 7
    251e:	08 c0       	rjmp	.+16     	; 0x2530 <vfprintf+0x2b4>
    2520:	f8 01       	movw	r30, r16
    2522:	60 81       	ld	r22, Z
    2524:	71 81       	ldd	r23, Z+1	; 0x01
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	93 81       	ldd	r25, Z+3	; 0x03
    252a:	0c 5f       	subi	r16, 0xFC	; 252
    252c:	1f 4f       	sbci	r17, 0xFF	; 255
    252e:	07 c0       	rjmp	.+14     	; 0x253e <vfprintf+0x2c2>
    2530:	f8 01       	movw	r30, r16
    2532:	60 81       	ld	r22, Z
    2534:	71 81       	ldd	r23, Z+1	; 0x01
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	0e 5f       	subi	r16, 0xFE	; 254
    253c:	1f 4f       	sbci	r17, 0xFF	; 255
    253e:	a2 01       	movw	r20, r4
    2540:	e2 d0       	rcall	.+452    	; 0x2706 <__ultoa_invert>
    2542:	78 2e       	mov	r7, r24
    2544:	74 18       	sub	r7, r4
    2546:	ff e7       	ldi	r31, 0x7F	; 127
    2548:	bf 22       	and	r11, r31
    254a:	b6 fe       	sbrs	r11, 6
    254c:	0b c0       	rjmp	.+22     	; 0x2564 <vfprintf+0x2e8>
    254e:	2e ef       	ldi	r18, 0xFE	; 254
    2550:	b2 22       	and	r11, r18
    2552:	7e 14       	cp	r7, r14
    2554:	38 f4       	brcc	.+14     	; 0x2564 <vfprintf+0x2e8>
    2556:	b4 fe       	sbrs	r11, 4
    2558:	07 c0       	rjmp	.+14     	; 0x2568 <vfprintf+0x2ec>
    255a:	b2 fc       	sbrc	r11, 2
    255c:	05 c0       	rjmp	.+10     	; 0x2568 <vfprintf+0x2ec>
    255e:	8f ee       	ldi	r24, 0xEF	; 239
    2560:	b8 22       	and	r11, r24
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <vfprintf+0x2ec>
    2564:	a7 2c       	mov	r10, r7
    2566:	01 c0       	rjmp	.+2      	; 0x256a <vfprintf+0x2ee>
    2568:	ae 2c       	mov	r10, r14
    256a:	8b 2d       	mov	r24, r11
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	b4 fe       	sbrs	r11, 4
    2570:	0d c0       	rjmp	.+26     	; 0x258c <vfprintf+0x310>
    2572:	fe 01       	movw	r30, r28
    2574:	e7 0d       	add	r30, r7
    2576:	f1 1d       	adc	r31, r1
    2578:	20 81       	ld	r18, Z
    257a:	20 33       	cpi	r18, 0x30	; 48
    257c:	19 f4       	brne	.+6      	; 0x2584 <vfprintf+0x308>
    257e:	e9 ee       	ldi	r30, 0xE9	; 233
    2580:	be 22       	and	r11, r30
    2582:	09 c0       	rjmp	.+18     	; 0x2596 <vfprintf+0x31a>
    2584:	a3 94       	inc	r10
    2586:	b2 fe       	sbrs	r11, 2
    2588:	06 c0       	rjmp	.+12     	; 0x2596 <vfprintf+0x31a>
    258a:	04 c0       	rjmp	.+8      	; 0x2594 <vfprintf+0x318>
    258c:	86 78       	andi	r24, 0x86	; 134
    258e:	90 70       	andi	r25, 0x00	; 0
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	09 f0       	breq	.+2      	; 0x2596 <vfprintf+0x31a>
    2594:	a3 94       	inc	r10
    2596:	8b 2c       	mov	r8, r11
    2598:	99 24       	eor	r9, r9
    259a:	b3 fc       	sbrc	r11, 3
    259c:	13 c0       	rjmp	.+38     	; 0x25c4 <vfprintf+0x348>
    259e:	b0 fe       	sbrs	r11, 0
    25a0:	0e c0       	rjmp	.+28     	; 0x25be <vfprintf+0x342>
    25a2:	af 14       	cp	r10, r15
    25a4:	28 f4       	brcc	.+10     	; 0x25b0 <vfprintf+0x334>
    25a6:	e7 2c       	mov	r14, r7
    25a8:	ef 0c       	add	r14, r15
    25aa:	ea 18       	sub	r14, r10
    25ac:	af 2c       	mov	r10, r15
    25ae:	07 c0       	rjmp	.+14     	; 0x25be <vfprintf+0x342>
    25b0:	e7 2c       	mov	r14, r7
    25b2:	05 c0       	rjmp	.+10     	; 0x25be <vfprintf+0x342>
    25b4:	80 e2       	ldi	r24, 0x20	; 32
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	b6 01       	movw	r22, r12
    25ba:	79 d0       	rcall	.+242    	; 0x26ae <fputc>
    25bc:	a3 94       	inc	r10
    25be:	af 14       	cp	r10, r15
    25c0:	c8 f3       	brcs	.-14     	; 0x25b4 <vfprintf+0x338>
    25c2:	04 c0       	rjmp	.+8      	; 0x25cc <vfprintf+0x350>
    25c4:	af 14       	cp	r10, r15
    25c6:	10 f4       	brcc	.+4      	; 0x25cc <vfprintf+0x350>
    25c8:	fa 18       	sub	r15, r10
    25ca:	01 c0       	rjmp	.+2      	; 0x25ce <vfprintf+0x352>
    25cc:	ff 24       	eor	r15, r15
    25ce:	84 fe       	sbrs	r8, 4
    25d0:	0e c0       	rjmp	.+28     	; 0x25ee <vfprintf+0x372>
    25d2:	80 e3       	ldi	r24, 0x30	; 48
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	b6 01       	movw	r22, r12
    25d8:	6a d0       	rcall	.+212    	; 0x26ae <fputc>
    25da:	82 fe       	sbrs	r8, 2
    25dc:	1d c0       	rjmp	.+58     	; 0x2618 <vfprintf+0x39c>
    25de:	81 fe       	sbrs	r8, 1
    25e0:	03 c0       	rjmp	.+6      	; 0x25e8 <vfprintf+0x36c>
    25e2:	88 e5       	ldi	r24, 0x58	; 88
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	10 c0       	rjmp	.+32     	; 0x2608 <vfprintf+0x38c>
    25e8:	88 e7       	ldi	r24, 0x78	; 120
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	0d c0       	rjmp	.+26     	; 0x2608 <vfprintf+0x38c>
    25ee:	c4 01       	movw	r24, r8
    25f0:	86 78       	andi	r24, 0x86	; 134
    25f2:	90 70       	andi	r25, 0x00	; 0
    25f4:	00 97       	sbiw	r24, 0x00	; 0
    25f6:	81 f0       	breq	.+32     	; 0x2618 <vfprintf+0x39c>
    25f8:	81 fc       	sbrc	r8, 1
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <vfprintf+0x384>
    25fc:	80 e2       	ldi	r24, 0x20	; 32
    25fe:	01 c0       	rjmp	.+2      	; 0x2602 <vfprintf+0x386>
    2600:	8b e2       	ldi	r24, 0x2B	; 43
    2602:	b7 fc       	sbrc	r11, 7
    2604:	8d e2       	ldi	r24, 0x2D	; 45
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	b6 01       	movw	r22, r12
    260a:	51 d0       	rcall	.+162    	; 0x26ae <fputc>
    260c:	05 c0       	rjmp	.+10     	; 0x2618 <vfprintf+0x39c>
    260e:	80 e3       	ldi	r24, 0x30	; 48
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	b6 01       	movw	r22, r12
    2614:	4c d0       	rcall	.+152    	; 0x26ae <fputc>
    2616:	ea 94       	dec	r14
    2618:	7e 14       	cp	r7, r14
    261a:	c8 f3       	brcs	.-14     	; 0x260e <vfprintf+0x392>
    261c:	7a 94       	dec	r7
    261e:	f2 01       	movw	r30, r4
    2620:	e7 0d       	add	r30, r7
    2622:	f1 1d       	adc	r31, r1
    2624:	80 81       	ld	r24, Z
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	b6 01       	movw	r22, r12
    262a:	41 d0       	rcall	.+130    	; 0x26ae <fputc>
    262c:	77 20       	and	r7, r7
    262e:	b1 f7       	brne	.-20     	; 0x261c <vfprintf+0x3a0>
    2630:	05 c0       	rjmp	.+10     	; 0x263c <vfprintf+0x3c0>
    2632:	80 e2       	ldi	r24, 0x20	; 32
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	b6 01       	movw	r22, r12
    2638:	3a d0       	rcall	.+116    	; 0x26ae <fputc>
    263a:	fa 94       	dec	r15
    263c:	ff 20       	and	r15, r15
    263e:	c9 f7       	brne	.-14     	; 0x2632 <vfprintf+0x3b6>
    2640:	44 ce       	rjmp	.-888    	; 0x22ca <vfprintf+0x4e>
    2642:	f6 01       	movw	r30, r12
    2644:	26 81       	ldd	r18, Z+6	; 0x06
    2646:	37 81       	ldd	r19, Z+7	; 0x07
    2648:	02 c0       	rjmp	.+4      	; 0x264e <vfprintf+0x3d2>
    264a:	2f ef       	ldi	r18, 0xFF	; 255
    264c:	3f ef       	ldi	r19, 0xFF	; 255
    264e:	c9 01       	movw	r24, r18
    2650:	2c 96       	adiw	r28, 0x0c	; 12
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	1f 91       	pop	r17
    2662:	0f 91       	pop	r16
    2664:	ff 90       	pop	r15
    2666:	ef 90       	pop	r14
    2668:	df 90       	pop	r13
    266a:	cf 90       	pop	r12
    266c:	bf 90       	pop	r11
    266e:	af 90       	pop	r10
    2670:	9f 90       	pop	r9
    2672:	8f 90       	pop	r8
    2674:	7f 90       	pop	r7
    2676:	6f 90       	pop	r6
    2678:	5f 90       	pop	r5
    267a:	4f 90       	pop	r4
    267c:	3f 90       	pop	r3
    267e:	2f 90       	pop	r2
    2680:	08 95       	ret

00002682 <strnlen_P>:
    2682:	fc 01       	movw	r30, r24
    2684:	05 90       	lpm	r0, Z+
    2686:	61 50       	subi	r22, 0x01	; 1
    2688:	70 40       	sbci	r23, 0x00	; 0
    268a:	01 10       	cpse	r0, r1
    268c:	d8 f7       	brcc	.-10     	; 0x2684 <strnlen_P+0x2>
    268e:	80 95       	com	r24
    2690:	90 95       	com	r25
    2692:	8e 0f       	add	r24, r30
    2694:	9f 1f       	adc	r25, r31
    2696:	08 95       	ret

00002698 <strnlen>:
    2698:	fc 01       	movw	r30, r24
    269a:	61 50       	subi	r22, 0x01	; 1
    269c:	70 40       	sbci	r23, 0x00	; 0
    269e:	01 90       	ld	r0, Z+
    26a0:	01 10       	cpse	r0, r1
    26a2:	d8 f7       	brcc	.-10     	; 0x269a <strnlen+0x2>
    26a4:	80 95       	com	r24
    26a6:	90 95       	com	r25
    26a8:	8e 0f       	add	r24, r30
    26aa:	9f 1f       	adc	r25, r31
    26ac:	08 95       	ret

000026ae <fputc>:
    26ae:	0f 93       	push	r16
    26b0:	1f 93       	push	r17
    26b2:	cf 93       	push	r28
    26b4:	df 93       	push	r29
    26b6:	8c 01       	movw	r16, r24
    26b8:	eb 01       	movw	r28, r22
    26ba:	8b 81       	ldd	r24, Y+3	; 0x03
    26bc:	81 ff       	sbrs	r24, 1
    26be:	1b c0       	rjmp	.+54     	; 0x26f6 <fputc+0x48>
    26c0:	82 ff       	sbrs	r24, 2
    26c2:	0d c0       	rjmp	.+26     	; 0x26de <fputc+0x30>
    26c4:	2e 81       	ldd	r18, Y+6	; 0x06
    26c6:	3f 81       	ldd	r19, Y+7	; 0x07
    26c8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ca:	9d 81       	ldd	r25, Y+5	; 0x05
    26cc:	28 17       	cp	r18, r24
    26ce:	39 07       	cpc	r19, r25
    26d0:	64 f4       	brge	.+24     	; 0x26ea <fputc+0x3c>
    26d2:	e8 81       	ld	r30, Y
    26d4:	f9 81       	ldd	r31, Y+1	; 0x01
    26d6:	01 93       	st	Z+, r16
    26d8:	f9 83       	std	Y+1, r31	; 0x01
    26da:	e8 83       	st	Y, r30
    26dc:	06 c0       	rjmp	.+12     	; 0x26ea <fputc+0x3c>
    26de:	e8 85       	ldd	r30, Y+8	; 0x08
    26e0:	f9 85       	ldd	r31, Y+9	; 0x09
    26e2:	80 2f       	mov	r24, r16
    26e4:	09 95       	icall
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	31 f4       	brne	.+12     	; 0x26f6 <fputc+0x48>
    26ea:	8e 81       	ldd	r24, Y+6	; 0x06
    26ec:	9f 81       	ldd	r25, Y+7	; 0x07
    26ee:	01 96       	adiw	r24, 0x01	; 1
    26f0:	9f 83       	std	Y+7, r25	; 0x07
    26f2:	8e 83       	std	Y+6, r24	; 0x06
    26f4:	02 c0       	rjmp	.+4      	; 0x26fa <fputc+0x4c>
    26f6:	0f ef       	ldi	r16, 0xFF	; 255
    26f8:	1f ef       	ldi	r17, 0xFF	; 255
    26fa:	c8 01       	movw	r24, r16
    26fc:	df 91       	pop	r29
    26fe:	cf 91       	pop	r28
    2700:	1f 91       	pop	r17
    2702:	0f 91       	pop	r16
    2704:	08 95       	ret

00002706 <__ultoa_invert>:
    2706:	fa 01       	movw	r30, r20
    2708:	aa 27       	eor	r26, r26
    270a:	28 30       	cpi	r18, 0x08	; 8
    270c:	51 f1       	breq	.+84     	; 0x2762 <__ultoa_invert+0x5c>
    270e:	20 31       	cpi	r18, 0x10	; 16
    2710:	81 f1       	breq	.+96     	; 0x2772 <__ultoa_invert+0x6c>
    2712:	e8 94       	clt
    2714:	6f 93       	push	r22
    2716:	6e 7f       	andi	r22, 0xFE	; 254
    2718:	6e 5f       	subi	r22, 0xFE	; 254
    271a:	7f 4f       	sbci	r23, 0xFF	; 255
    271c:	8f 4f       	sbci	r24, 0xFF	; 255
    271e:	9f 4f       	sbci	r25, 0xFF	; 255
    2720:	af 4f       	sbci	r26, 0xFF	; 255
    2722:	b1 e0       	ldi	r27, 0x01	; 1
    2724:	3e d0       	rcall	.+124    	; 0x27a2 <__ultoa_invert+0x9c>
    2726:	b4 e0       	ldi	r27, 0x04	; 4
    2728:	3c d0       	rcall	.+120    	; 0x27a2 <__ultoa_invert+0x9c>
    272a:	67 0f       	add	r22, r23
    272c:	78 1f       	adc	r23, r24
    272e:	89 1f       	adc	r24, r25
    2730:	9a 1f       	adc	r25, r26
    2732:	a1 1d       	adc	r26, r1
    2734:	68 0f       	add	r22, r24
    2736:	79 1f       	adc	r23, r25
    2738:	8a 1f       	adc	r24, r26
    273a:	91 1d       	adc	r25, r1
    273c:	a1 1d       	adc	r26, r1
    273e:	6a 0f       	add	r22, r26
    2740:	71 1d       	adc	r23, r1
    2742:	81 1d       	adc	r24, r1
    2744:	91 1d       	adc	r25, r1
    2746:	a1 1d       	adc	r26, r1
    2748:	20 d0       	rcall	.+64     	; 0x278a <__ultoa_invert+0x84>
    274a:	09 f4       	brne	.+2      	; 0x274e <__ultoa_invert+0x48>
    274c:	68 94       	set
    274e:	3f 91       	pop	r19
    2750:	2a e0       	ldi	r18, 0x0A	; 10
    2752:	26 9f       	mul	r18, r22
    2754:	11 24       	eor	r1, r1
    2756:	30 19       	sub	r19, r0
    2758:	30 5d       	subi	r19, 0xD0	; 208
    275a:	31 93       	st	Z+, r19
    275c:	de f6       	brtc	.-74     	; 0x2714 <__ultoa_invert+0xe>
    275e:	cf 01       	movw	r24, r30
    2760:	08 95       	ret
    2762:	46 2f       	mov	r20, r22
    2764:	47 70       	andi	r20, 0x07	; 7
    2766:	40 5d       	subi	r20, 0xD0	; 208
    2768:	41 93       	st	Z+, r20
    276a:	b3 e0       	ldi	r27, 0x03	; 3
    276c:	0f d0       	rcall	.+30     	; 0x278c <__ultoa_invert+0x86>
    276e:	c9 f7       	brne	.-14     	; 0x2762 <__ultoa_invert+0x5c>
    2770:	f6 cf       	rjmp	.-20     	; 0x275e <__ultoa_invert+0x58>
    2772:	46 2f       	mov	r20, r22
    2774:	4f 70       	andi	r20, 0x0F	; 15
    2776:	40 5d       	subi	r20, 0xD0	; 208
    2778:	4a 33       	cpi	r20, 0x3A	; 58
    277a:	18 f0       	brcs	.+6      	; 0x2782 <__ultoa_invert+0x7c>
    277c:	49 5d       	subi	r20, 0xD9	; 217
    277e:	31 fd       	sbrc	r19, 1
    2780:	40 52       	subi	r20, 0x20	; 32
    2782:	41 93       	st	Z+, r20
    2784:	02 d0       	rcall	.+4      	; 0x278a <__ultoa_invert+0x84>
    2786:	a9 f7       	brne	.-22     	; 0x2772 <__ultoa_invert+0x6c>
    2788:	ea cf       	rjmp	.-44     	; 0x275e <__ultoa_invert+0x58>
    278a:	b4 e0       	ldi	r27, 0x04	; 4
    278c:	a6 95       	lsr	r26
    278e:	97 95       	ror	r25
    2790:	87 95       	ror	r24
    2792:	77 95       	ror	r23
    2794:	67 95       	ror	r22
    2796:	ba 95       	dec	r27
    2798:	c9 f7       	brne	.-14     	; 0x278c <__ultoa_invert+0x86>
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	61 05       	cpc	r22, r1
    279e:	71 05       	cpc	r23, r1
    27a0:	08 95       	ret
    27a2:	9b 01       	movw	r18, r22
    27a4:	ac 01       	movw	r20, r24
    27a6:	0a 2e       	mov	r0, r26
    27a8:	06 94       	lsr	r0
    27aa:	57 95       	ror	r21
    27ac:	47 95       	ror	r20
    27ae:	37 95       	ror	r19
    27b0:	27 95       	ror	r18
    27b2:	ba 95       	dec	r27
    27b4:	c9 f7       	brne	.-14     	; 0x27a8 <__ultoa_invert+0xa2>
    27b6:	62 0f       	add	r22, r18
    27b8:	73 1f       	adc	r23, r19
    27ba:	84 1f       	adc	r24, r20
    27bc:	95 1f       	adc	r25, r21
    27be:	a0 1d       	adc	r26, r0
    27c0:	08 95       	ret

000027c2 <_exit>:
    27c2:	f8 94       	cli

000027c4 <__stop_program>:
    27c4:	ff cf       	rjmp	.-2      	; 0x27c4 <__stop_program>
