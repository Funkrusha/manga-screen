
MediaController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001154  000011e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001154  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800110  00800110  000011f8  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  000011f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000490  00000000  00000000  00001dff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000cec  00000000  00000000  0000228f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000083a0  00000000  00000000  00002f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f70  00000000  00000000  0000b31b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006b24  00000000  00000000  0000d28b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006e0  00000000  00000000  00013db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000037bb  00000000  00000000  00014490  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000041d7  00000000  00000000  00017c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000104d  00000000  00000000  0001be22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006e8  00000000  00000000  0001ce6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
       0:	a1 c0       	rjmp	.+322    	; 0x144 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
       4:	bc c0       	rjmp	.+376    	; 0x17e <__bad_interrupt>
       6:	00 00       	nop
       8:	ba c0       	rjmp	.+372    	; 0x17e <__bad_interrupt>
       a:	00 00       	nop
       c:	b8 c0       	rjmp	.+368    	; 0x17e <__bad_interrupt>
       e:	00 00       	nop
      10:	b6 c0       	rjmp	.+364    	; 0x17e <__bad_interrupt>
      12:	00 00       	nop
      14:	b4 c0       	rjmp	.+360    	; 0x17e <__bad_interrupt>
      16:	00 00       	nop
      18:	b2 c0       	rjmp	.+356    	; 0x17e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b0 c0       	rjmp	.+352    	; 0x17e <__bad_interrupt>
      1e:	00 00       	nop
      20:	ae c0       	rjmp	.+348    	; 0x17e <__bad_interrupt>
      22:	00 00       	nop
      24:	ac c0       	rjmp	.+344    	; 0x17e <__bad_interrupt>
      26:	00 00       	nop
      28:	15 c4       	rjmp	.+2090   	; 0x854 <__vector_10>
      2a:	00 00       	nop
      2c:	a8 c0       	rjmp	.+336    	; 0x17e <__bad_interrupt>
      2e:	00 00       	nop
      30:	a6 c0       	rjmp	.+332    	; 0x17e <__bad_interrupt>
      32:	00 00       	nop
      34:	a4 c0       	rjmp	.+328    	; 0x17e <__bad_interrupt>
      36:	00 00       	nop
      38:	a2 c0       	rjmp	.+324    	; 0x17e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a0 c0       	rjmp	.+320    	; 0x17e <__bad_interrupt>
      3e:	00 00       	nop
      40:	9e c0       	rjmp	.+316    	; 0x17e <__bad_interrupt>
      42:	00 00       	nop
      44:	9c c0       	rjmp	.+312    	; 0x17e <__bad_interrupt>
      46:	00 00       	nop
      48:	9a c0       	rjmp	.+308    	; 0x17e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	98 c0       	rjmp	.+304    	; 0x17e <__bad_interrupt>
      4e:	00 00       	nop
      50:	96 c0       	rjmp	.+300    	; 0x17e <__bad_interrupt>
      52:	00 00       	nop
      54:	94 c0       	rjmp	.+296    	; 0x17e <__bad_interrupt>
      56:	00 00       	nop
      58:	92 c0       	rjmp	.+292    	; 0x17e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	90 c0       	rjmp	.+288    	; 0x17e <__bad_interrupt>
      5e:	00 00       	nop
      60:	8e c0       	rjmp	.+284    	; 0x17e <__bad_interrupt>
      62:	00 00       	nop
      64:	8c c0       	rjmp	.+280    	; 0x17e <__bad_interrupt>
      66:	00 00       	nop
      68:	8a c0       	rjmp	.+276    	; 0x17e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	88 c0       	rjmp	.+272    	; 0x17e <__bad_interrupt>
      6e:	00 00       	nop
      70:	86 c0       	rjmp	.+268    	; 0x17e <__bad_interrupt>
      72:	00 00       	nop
      74:	84 c0       	rjmp	.+264    	; 0x17e <__bad_interrupt>
      76:	00 00       	nop
      78:	82 c0       	rjmp	.+260    	; 0x17e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	80 c0       	rjmp	.+256    	; 0x17e <__bad_interrupt>
      7e:	00 00       	nop
      80:	7e c0       	rjmp	.+252    	; 0x17e <__bad_interrupt>
      82:	00 00       	nop
      84:	7c c0       	rjmp	.+248    	; 0x17e <__bad_interrupt>
      86:	00 00       	nop
      88:	7a c0       	rjmp	.+244    	; 0x17e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	78 c0       	rjmp	.+240    	; 0x17e <__bad_interrupt>
      8e:	00 00       	nop
      90:	76 c0       	rjmp	.+236    	; 0x17e <__bad_interrupt>
      92:	00 00       	nop
      94:	74 c0       	rjmp	.+232    	; 0x17e <__bad_interrupt>
      96:	00 00       	nop

00000098 <MediaControlReport>:
      98:	05 0c 09 01 a1 01 09 b0 09 b1 09 b3 09 b4 09 b5     ................
      a8:	09 b6 09 b7 09 cd 09 e2 09 e9 09 ea 75 01 95 0b     ............u...
      b8:	15 00 25 01 81 06 95 05 81 01 c0                    ..%........

000000c3 <DeviceDescriptor>:
      c3:	12 01 10 01 00 00 00 08 eb 03 6a 20 01 00 01 02     ..........j ....
      d3:	00 01                                               ..

000000d5 <ConfigurationDescriptor>:
      d5:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
      e5:	00 00 09 21 11 01 00 01 22 2b 00 07 05 81 03 08     ...!...."+......
      f5:	00 05                                               ..

000000f7 <LanguageString>:
      f7:	04 03 09 04                                         ....

000000fb <ManufacturerString>:
      fb:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     10b:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000115 <ProductString>:
     115:	2c 03 4c 00 55 00 46 00 41 00 20 00 4d 00 65 00     ,.L.U.F.A. .M.e.
     125:	64 00 69 00 61 00 20 00 43 00 6f 00 6e 00 74 00     d.i.a. .C.o.n.t.
     135:	72 00 6f 00 6c 00 6c 00 65 00 72 00 00 00 00        r.o.l.l.e.r....

00000144 <__ctors_end>:
     144:	11 24       	eor	r1, r1
     146:	1f be       	out	0x3f, r1	; 63
     148:	cf ef       	ldi	r28, 0xFF	; 255
     14a:	d0 e2       	ldi	r29, 0x20	; 32
     14c:	de bf       	out	0x3e, r29	; 62
     14e:	cd bf       	out	0x3d, r28	; 61

00000150 <__do_copy_data>:
     150:	11 e0       	ldi	r17, 0x01	; 1
     152:	a0 e0       	ldi	r26, 0x00	; 0
     154:	b1 e0       	ldi	r27, 0x01	; 1
     156:	e4 e5       	ldi	r30, 0x54	; 84
     158:	f1 e1       	ldi	r31, 0x11	; 17
     15a:	00 e0       	ldi	r16, 0x00	; 0
     15c:	0b bf       	out	0x3b, r16	; 59
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__do_copy_data+0x14>
     160:	07 90       	elpm	r0, Z+
     162:	0d 92       	st	X+, r0
     164:	a0 31       	cpi	r26, 0x10	; 16
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <__do_copy_data+0x10>

0000016a <__do_clear_bss>:
     16a:	11 e0       	ldi	r17, 0x01	; 1
     16c:	a0 e1       	ldi	r26, 0x10	; 16
     16e:	b1 e0       	ldi	r27, 0x01	; 1
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	ae 31       	cpi	r26, 0x1E	; 30
     176:	b1 07       	cpc	r27, r17
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
     17a:	30 d0       	rcall	.+96     	; 0x1dc <main>
     17c:	e9 c7       	rjmp	.+4050   	; 0x1150 <_exit>

0000017e <__bad_interrupt>:
     17e:	40 cf       	rjmp	.-384    	; 0x0 <__vectors>

00000180 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     180:	9b b1       	in	r25, 0x0b	; 11
     182:	9f 70       	andi	r25, 0x0F	; 15
     184:	98 2b       	or	r25, r24
     186:	9b b9       	out	0x0b, r25	; 11
			}
     188:	08 95       	ret

0000018a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     18a:	84 b7       	in	r24, 0x34	; 52
     18c:	87 7f       	andi	r24, 0xF7	; 247
     18e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     190:	88 e1       	ldi	r24, 0x18	; 24
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	f8 94       	cli
     196:	80 93 60 00 	sts	0x0060, r24
     19a:	10 92 60 00 	sts	0x0060, r1
     19e:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	80 e8       	ldi	r24, 0x80	; 128
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	f8 94       	cli
     1a8:	80 93 61 00 	sts	0x0061, r24
     1ac:	90 93 61 00 	sts	0x0061, r25
     1b0:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     1b2:	84 b1       	in	r24, 0x04	; 4
     1b4:	8f 71       	andi	r24, 0x1F	; 31
     1b6:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     1b8:	8d b1       	in	r24, 0x0d	; 13
     1ba:	8f 7c       	andi	r24, 0xCF	; 207
     1bc:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     1be:	85 b1       	in	r24, 0x05	; 5
     1c0:	80 6e       	ori	r24, 0xE0	; 224
     1c2:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     1c4:	8e b1       	in	r24, 0x0e	; 14
     1c6:	80 63       	ori	r24, 0x30	; 48
     1c8:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1ca:	8a b1       	in	r24, 0x0a	; 10
     1cc:	80 6f       	ori	r24, 0xF0	; 240
     1ce:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     1d0:	8b b1       	in	r24, 0x0b	; 11
     1d2:	8f 70       	andi	r24, 0x0F	; 15
     1d4:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     1d6:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     1d8:	72 9a       	sbi	0x0e, 2	; 14
	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
}
     1da:	21 c3       	rjmp	.+1602   	; 0x81e <USB_Init>

000001dc <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     1dc:	d6 df       	rcall	.-84     	; 0x18a <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1de:	80 e1       	ldi	r24, 0x10	; 16
     1e0:	cf df       	rcall	.-98     	; 0x180 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     1e2:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		HID_Device_USBTask(&MediaControl_HID_Interface);
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	91 e0       	ldi	r25, 0x01	; 1
     1e8:	cb d6       	rcall	.+3478   	; 0xf80 <HID_Device_USBTask>
		USB_USBTask();
     1ea:	59 d5       	rcall	.+2738   	; 0xc9e <USB_USBTask>
     1ec:	fb cf       	rjmp	.-10     	; 0x1e4 <main+0x8>

000001ee <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     1ee:	80 ea       	ldi	r24, 0xA0	; 160
}
     1f0:	c7 cf       	rjmp	.-114    	; 0x180 <LEDs_SetAllLEDs>

000001f2 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1f2:	80 e1       	ldi	r24, 0x10	; 16
}
     1f4:	c5 cf       	rjmp	.-118    	; 0x180 <LEDs_SetAllLEDs>

000001f6 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&MediaControl_HID_Interface);
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	91 e0       	ldi	r25, 0x01	; 1
     1fa:	a9 d6       	rcall	.+3410   	; 0xf4e <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     1fc:	90 91 e2 00 	lds	r25, 0x00E2
     200:	94 60       	ori	r25, 0x04	; 4
     202:	90 93 e2 00 	sts	0x00E2, r25

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     206:	80 ff       	sbrs	r24, 0
     208:	02 c0       	rjmp	.+4      	; 0x20e <EVENT_USB_Device_ConfigurationChanged+0x18>
     20a:	80 e6       	ldi	r24, 0x60	; 96
     20c:	01 c0       	rjmp	.+2      	; 0x210 <EVENT_USB_Device_ConfigurationChanged+0x1a>
     20e:	80 e9       	ldi	r24, 0x90	; 144
}
     210:	b7 cf       	rjmp	.-146    	; 0x180 <LEDs_SetAllLEDs>

00000212 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&MediaControl_HID_Interface);
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	91 e0       	ldi	r25, 0x01	; 1
}
     216:	5e c5       	rjmp	.+2748   	; 0xcd4 <HID_Device_ProcessControlRequest>

00000218 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     218:	80 91 0e 01 	lds	r24, 0x010E
     21c:	90 91 0f 01 	lds	r25, 0x010F
     220:	00 97       	sbiw	r24, 0x00	; 0
     222:	29 f0       	breq	.+10     	; 0x22e <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     224:	01 97       	sbiw	r24, 0x01	; 1
     226:	90 93 0f 01 	sts	0x010F, r25
     22a:	80 93 0e 01 	sts	0x010E, r24
     22e:	08 95       	ret

00000230 <CALLBACK_HID_Device_CreateHIDReport>:
 *
 *  \return Boolean true to force the sending of the report, false to let the library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo, uint8_t* const ReportID,
                                         const uint8_t ReportType, void* ReportData, uint16_t* const ReportSize)
{
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
     234:	d8 01       	movw	r26, r16
	USB_MediaReport_Data_t* MediaReport = (USB_MediaReport_Data_t*)ReportData;
     236:	f9 01       	movw	r30, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     238:	23 b1       	in	r18, 0x03	; 3
     23a:	8c b1       	in	r24, 0x0c	; 12
     23c:	80 95       	com	r24
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	80 73       	andi	r24, 0x30	; 48
     242:	90 70       	andi	r25, 0x00	; 0
     244:	95 95       	asr	r25
     246:	87 95       	ror	r24
     248:	20 95       	com	r18
     24a:	20 7e       	andi	r18, 0xE0	; 224
     24c:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     24e:	8c b1       	in	r24, 0x0c	; 12

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	/* Update the Media Control report with the user button presses */
	MediaReport->Mute          = ((ButtonStatus_LCL & BUTTONS_BUTTON1) ? true : false);
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	82 fd       	sbrc	r24, 2
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	81 81       	ldd	r24, Z+1	; 0x01
     258:	8e 7f       	andi	r24, 0xFE	; 254
     25a:	89 2b       	or	r24, r25
     25c:	81 83       	std	Z+1, r24	; 0x01
	MediaReport->PlayPause     = ((JoyStatus_LCL & JOY_PRESS) ? true : false);
     25e:	92 2f       	mov	r25, r18
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	25 ff       	sbrs	r18, 5
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	38 2f       	mov	r19, r24
     268:	37 95       	ror	r19
     26a:	33 27       	eor	r19, r19
     26c:	37 95       	ror	r19
     26e:	80 81       	ld	r24, Z
     270:	8f 77       	andi	r24, 0x7F	; 127
     272:	83 2b       	or	r24, r19
     274:	80 83       	st	Z, r24
	MediaReport->VolumeUp      = ((JoyStatus_LCL & JOY_UP)    ? true : false);
     276:	22 1f       	adc	r18, r18
     278:	22 27       	eor	r18, r18
     27a:	22 1f       	adc	r18, r18
     27c:	22 0f       	add	r18, r18
     27e:	81 81       	ldd	r24, Z+1	; 0x01
     280:	8d 7f       	andi	r24, 0xFD	; 253
     282:	82 2b       	or	r24, r18
     284:	81 83       	std	Z+1, r24	; 0x01
	MediaReport->VolumeDown    = ((JoyStatus_LCL & JOY_DOWN)  ? true : false);
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	94 ff       	sbrs	r25, 4
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	28 2f       	mov	r18, r24
     28e:	22 0f       	add	r18, r18
     290:	22 0f       	add	r18, r18
     292:	81 81       	ldd	r24, Z+1	; 0x01
     294:	8b 7f       	andi	r24, 0xFB	; 251
     296:	82 2b       	or	r24, r18
     298:	81 83       	std	Z+1, r24	; 0x01
	MediaReport->PreviousTrack = ((JoyStatus_LCL & JOY_LEFT)  ? true : false);
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	96 ff       	sbrs	r25, 6
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	28 2f       	mov	r18, r24
     2a2:	22 95       	swap	r18
     2a4:	22 0f       	add	r18, r18
     2a6:	20 7e       	andi	r18, 0xE0	; 224
     2a8:	80 81       	ld	r24, Z
     2aa:	8f 7d       	andi	r24, 0xDF	; 223
     2ac:	82 2b       	or	r24, r18
     2ae:	80 83       	st	Z, r24
	MediaReport->NextTrack     = ((JoyStatus_LCL & JOY_RIGHT) ? true : false);
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	93 ff       	sbrs	r25, 3
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	98 2f       	mov	r25, r24
     2b8:	92 95       	swap	r25
     2ba:	90 7f       	andi	r25, 0xF0	; 240
     2bc:	80 81       	ld	r24, Z
     2be:	8f 7e       	andi	r24, 0xEF	; 239
     2c0:	89 2b       	or	r24, r25
     2c2:	80 83       	st	Z, r24

	*ReportSize = sizeof(USB_MediaReport_Data_t);
     2c4:	82 e0       	ldi	r24, 0x02	; 2
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	11 96       	adiw	r26, 0x01	; 1
     2ca:	9c 93       	st	X, r25
     2cc:	8e 93       	st	-X, r24
	return false;
}
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	08 95       	ret

000002d6 <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	// Unused (but mandatory for the HID class driver) in this demo, since there are no Host->Device reports
}
     2d6:	08 95       	ret

000002d8 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     2d8:	93 30       	cpi	r25, 0x03	; 3
     2da:	89 f0       	breq	.+34     	; 0x2fe <CALLBACK_USB_GetDescriptor+0x26>
     2dc:	94 30       	cpi	r25, 0x04	; 4
     2de:	28 f4       	brcc	.+10     	; 0x2ea <CALLBACK_USB_GetDescriptor+0x12>
     2e0:	91 30       	cpi	r25, 0x01	; 1
     2e2:	49 f1       	breq	.+82     	; 0x336 <CALLBACK_USB_GetDescriptor+0x5e>
     2e4:	92 30       	cpi	r25, 0x02	; 2
     2e6:	61 f5       	brne	.+88     	; 0x340 <CALLBACK_USB_GetDescriptor+0x68>
     2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <CALLBACK_USB_GetDescriptor+0x1c>
     2ea:	91 32       	cpi	r25, 0x21	; 33
     2ec:	d1 f0       	breq	.+52     	; 0x322 <CALLBACK_USB_GetDescriptor+0x4a>
     2ee:	92 32       	cpi	r25, 0x22	; 34
     2f0:	39 f5       	brne	.+78     	; 0x340 <CALLBACK_USB_GetDescriptor+0x68>
     2f2:	1c c0       	rjmp	.+56     	; 0x32c <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     2f4:	22 e2       	ldi	r18, 0x22	; 34
     2f6:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     2f8:	e5 ed       	ldi	r30, 0xD5	; 213
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     2fc:	25 c0       	rjmp	.+74     	; 0x348 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
     2fe:	81 30       	cpi	r24, 0x01	; 1
     300:	41 f0       	breq	.+16     	; 0x312 <CALLBACK_USB_GetDescriptor+0x3a>
     302:	81 30       	cpi	r24, 0x01	; 1
     304:	18 f0       	brcs	.+6      	; 0x30c <CALLBACK_USB_GetDescriptor+0x34>
     306:	82 30       	cpi	r24, 0x02	; 2
     308:	d9 f4       	brne	.+54     	; 0x340 <CALLBACK_USB_GetDescriptor+0x68>
     30a:	06 c0       	rjmp	.+12     	; 0x318 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     30c:	e7 ef       	ldi	r30, 0xF7	; 247
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	05 c0       	rjmp	.+10     	; 0x31c <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     312:	eb ef       	ldi	r30, 0xFB	; 251
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	02 c0       	rjmp	.+4      	; 0x31c <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     318:	e5 e1       	ldi	r30, 0x15	; 21
     31a:	f1 e0       	ldi	r31, 0x01	; 1
     31c:	24 91       	lpm	r18, Z+
     31e:	30 e0       	ldi	r19, 0x00	; 0
					break;
     320:	13 c0       	rjmp	.+38     	; 0x348 <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MediaControlHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     322:	29 e0       	ldi	r18, 0x09	; 9
     324:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MediaControlHID;
     326:	e7 ee       	ldi	r30, 0xE7	; 231
     328:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     32a:	0e c0       	rjmp	.+28     	; 0x348 <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &MediaControlReport;
			Size    = sizeof(MediaControlReport);
     32c:	2b e2       	ldi	r18, 0x2B	; 43
     32e:	30 e0       	ldi	r19, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MediaControlHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MediaControlReport;
     330:	e8 e9       	ldi	r30, 0x98	; 152
     332:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(MediaControlReport);
			break;
     334:	09 c0       	rjmp	.+18     	; 0x348 <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     336:	22 e1       	ldi	r18, 0x12	; 18
     338:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     33a:	e3 ec       	ldi	r30, 0xC3	; 195
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	04 c0       	rjmp	.+8      	; 0x348 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     344:	e0 e0       	ldi	r30, 0x00	; 0
     346:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &MediaControlReport;
			Size    = sizeof(MediaControlReport);
			break;
	}

	*DescriptorAddress = Address;
     348:	da 01       	movw	r26, r20
     34a:	11 96       	adiw	r26, 0x01	; 1
     34c:	fc 93       	st	X, r31
     34e:	ee 93       	st	-X, r30
	return Size;
}
     350:	c9 01       	movw	r24, r18
     352:	08 95       	ret

00000354 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     354:	8f 92       	push	r8
     356:	9f 92       	push	r9
     358:	bf 92       	push	r11
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	df 93       	push	r29
     368:	cf 93       	push	r28
     36a:	0f 92       	push	r0
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	e8 2e       	mov	r14, r24
     372:	4b 01       	movw	r8, r22
     374:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     376:	99 83       	std	Y+1, r25	; 0x01
     378:	db d1       	rcall	.+950    	; 0x730 <Endpoint_WaitUntilReady>
     37a:	b8 2e       	mov	r11, r24
     37c:	99 81       	ldd	r25, Y+1	; 0x01
     37e:	88 23       	and	r24, r24
     380:	c9 f5       	brne	.+114    	; 0x3f4 <Endpoint_Write_Stream_LE+0xa0>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     382:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     384:	01 15       	cp	r16, r1
     386:	11 05       	cpc	r17, r1
     388:	39 f0       	breq	.+14     	; 0x398 <Endpoint_Write_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
     38a:	f8 01       	movw	r30, r16
     38c:	20 81       	ld	r18, Z
     38e:	31 81       	ldd	r19, Z+1	; 0x01
     390:	82 1a       	sub	r8, r18
     392:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     394:	e2 0e       	add	r14, r18
     396:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     398:	cc 24       	eor	r12, r12
     39a:	dd 24       	eor	r13, r13
     39c:	26 c0       	rjmp	.+76     	; 0x3ea <Endpoint_Write_Stream_LE+0x96>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     39e:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     3a2:	85 fd       	sbrc	r24, 5
     3a4:	17 c0       	rjmp	.+46     	; 0x3d4 <Endpoint_Write_Stream_LE+0x80>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3a6:	80 91 e8 00 	lds	r24, 0x00E8
     3aa:	8e 77       	andi	r24, 0x7E	; 126
     3ac:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     3b0:	76 d4       	rcall	.+2284   	; 0xc9e <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
     3b2:	01 15       	cp	r16, r1
     3b4:	11 05       	cpc	r17, r1
     3b6:	51 f0       	breq	.+20     	; 0x3cc <Endpoint_Write_Stream_LE+0x78>
			{
				*BytesProcessed += BytesInTransfer;
     3b8:	f8 01       	movw	r30, r16
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	8c 0d       	add	r24, r12
     3c0:	9d 1d       	adc	r25, r13
     3c2:	91 83       	std	Z+1, r25	; 0x01
     3c4:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     3c6:	25 e0       	ldi	r18, 0x05	; 5
     3c8:	b2 2e       	mov	r11, r18
     3ca:	14 c0       	rjmp	.+40     	; 0x3f4 <Endpoint_Write_Stream_LE+0xa0>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     3cc:	b1 d1       	rcall	.+866    	; 0x730 <Endpoint_WaitUntilReady>
     3ce:	88 23       	and	r24, r24
     3d0:	61 f0       	breq	.+24     	; 0x3ea <Endpoint_Write_Stream_LE+0x96>
     3d2:	0f c0       	rjmp	.+30     	; 0x3f2 <Endpoint_Write_Stream_LE+0x9e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     3d4:	f7 01       	movw	r30, r14
     3d6:	81 91       	ld	r24, Z+
     3d8:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     3da:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     3de:	08 94       	sec
     3e0:	81 08       	sbc	r8, r1
     3e2:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     3e4:	08 94       	sec
     3e6:	c1 1c       	adc	r12, r1
     3e8:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     3ea:	81 14       	cp	r8, r1
     3ec:	91 04       	cpc	r9, r1
     3ee:	b9 f6       	brne	.-82     	; 0x39e <Endpoint_Write_Stream_LE+0x4a>
     3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <Endpoint_Write_Stream_LE+0xa0>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     3f2:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     3f4:	8b 2d       	mov	r24, r11
     3f6:	0f 90       	pop	r0
     3f8:	cf 91       	pop	r28
     3fa:	df 91       	pop	r29
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	df 90       	pop	r13
     406:	cf 90       	pop	r12
     408:	bf 90       	pop	r11
     40a:	9f 90       	pop	r9
     40c:	8f 90       	pop	r8
     40e:	08 95       	ret

00000410 <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     410:	28 2f       	mov	r18, r24
     412:	39 2f       	mov	r19, r25
     414:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     416:	80 91 1c 01 	lds	r24, 0x011C
     41a:	90 91 1d 01 	lds	r25, 0x011D
     41e:	86 17       	cp	r24, r22
     420:	97 07       	cpc	r25, r23
     422:	18 f4       	brcc	.+6      	; 0x42a <Endpoint_Write_Control_Stream_LE+0x1a>
     424:	bc 01       	movw	r22, r24
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	35 c0       	rjmp	.+106    	; 0x494 <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     42a:	61 15       	cp	r22, r1
     42c:	71 05       	cpc	r23, r1
     42e:	d9 f7       	brne	.-10     	; 0x426 <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     430:	80 91 e8 00 	lds	r24, 0x00E8
     434:	8e 77       	andi	r24, 0x7E	; 126
     436:	80 93 e8 00 	sts	0x00E8, r24
     43a:	f5 cf       	rjmp	.-22     	; 0x426 <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     43c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     43e:	88 23       	and	r24, r24
     440:	f1 f1       	breq	.+124    	; 0x4be <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     442:	85 30       	cpi	r24, 0x05	; 5
     444:	c1 f1       	breq	.+112    	; 0x4b6 <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     446:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     44a:	83 fd       	sbrc	r24, 3
     44c:	36 c0       	rjmp	.+108    	; 0x4ba <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     44e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     452:	82 fd       	sbrc	r24, 2
     454:	2a c0       	rjmp	.+84     	; 0x4aa <Endpoint_Write_Control_Stream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     456:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     45a:	80 ff       	sbrs	r24, 0
     45c:	1b c0       	rjmp	.+54     	; 0x494 <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     45e:	80 91 f2 00 	lds	r24, 0x00F2
     462:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     466:	06 c0       	rjmp	.+12     	; 0x474 <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     468:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     46a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     46e:	61 50       	subi	r22, 0x01	; 1
     470:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     472:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     474:	61 15       	cp	r22, r1
     476:	71 05       	cpc	r23, r1
     478:	19 f0       	breq	.+6      	; 0x480 <Endpoint_Write_Control_Stream_LE+0x70>
     47a:	88 30       	cpi	r24, 0x08	; 8
     47c:	91 05       	cpc	r25, r1
     47e:	a0 f3       	brcs	.-24     	; 0x468 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     480:	21 e0       	ldi	r18, 0x01	; 1
     482:	88 30       	cpi	r24, 0x08	; 8
     484:	91 05       	cpc	r25, r1
     486:	09 f0       	breq	.+2      	; 0x48a <Endpoint_Write_Control_Stream_LE+0x7a>
     488:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     48a:	80 91 e8 00 	lds	r24, 0x00E8
     48e:	8e 77       	andi	r24, 0x7E	; 126
     490:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     494:	61 15       	cp	r22, r1
     496:	71 05       	cpc	r23, r1
     498:	89 f6       	brne	.-94     	; 0x43c <Endpoint_Write_Control_Stream_LE+0x2c>
     49a:	22 23       	and	r18, r18
     49c:	79 f6       	brne	.-98     	; 0x43c <Endpoint_Write_Control_Stream_LE+0x2c>
     49e:	05 c0       	rjmp	.+10     	; 0x4aa <Endpoint_Write_Control_Stream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4a0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4a2:	88 23       	and	r24, r24
     4a4:	61 f0       	breq	.+24     	; 0x4be <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4a6:	85 30       	cpi	r24, 0x05	; 5
     4a8:	61 f0       	breq	.+24     	; 0x4c2 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4aa:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     4ae:	82 ff       	sbrs	r24, 2
     4b0:	f7 cf       	rjmp	.-18     	; 0x4a0 <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     4b6:	83 e0       	ldi	r24, 0x03	; 3
     4b8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     4be:	82 e0       	ldi	r24, 0x02	; 2
     4c0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     4c2:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     4c4:	08 95       	ret

000004c6 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     4c6:	61 15       	cp	r22, r1
     4c8:	71 05       	cpc	r23, r1
     4ca:	29 f5       	brne	.+74     	; 0x516 <Endpoint_Read_Control_Stream_LE+0x50>
     4cc:	1f c0       	rjmp	.+62     	; 0x50c <Endpoint_Read_Control_Stream_LE+0x46>
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4ce:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4d0:	22 23       	and	r18, r18
     4d2:	a1 f1       	breq	.+104    	; 0x53c <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4d4:	25 30       	cpi	r18, 0x05	; 5
     4d6:	71 f1       	breq	.+92     	; 0x534 <Endpoint_Read_Control_Stream_LE+0x6e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     4d8:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     4dc:	23 fd       	sbrc	r18, 3
     4de:	2c c0       	rjmp	.+88     	; 0x538 <Endpoint_Read_Control_Stream_LE+0x72>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4e0:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     4e4:	22 ff       	sbrs	r18, 2
     4e6:	f3 cf       	rjmp	.-26     	; 0x4ce <Endpoint_Read_Control_Stream_LE+0x8>
     4e8:	e8 2f       	mov	r30, r24
     4ea:	f9 2f       	mov	r31, r25
     4ec:	07 c0       	rjmp	.+14     	; 0x4fc <Endpoint_Read_Control_Stream_LE+0x36>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     4ee:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     4f2:	81 93       	st	Z+, r24
     4f4:	cf 01       	movw	r24, r30
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     4f6:	61 50       	subi	r22, 0x01	; 1
     4f8:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     4fa:	41 f0       	breq	.+16     	; 0x50c <Endpoint_Read_Control_Stream_LE+0x46>
     4fc:	cf 01       	movw	r24, r30
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     4fe:	20 91 f2 00 	lds	r18, 0x00F2
     502:	30 91 f3 00 	lds	r19, 0x00F3
     506:	21 15       	cp	r18, r1
     508:	31 05       	cpc	r19, r1
     50a:	89 f7       	brne	.-30     	; 0x4ee <Endpoint_Read_Control_Stream_LE+0x28>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     50c:	20 91 e8 00 	lds	r18, 0x00E8
     510:	2b 77       	andi	r18, 0x7B	; 123
     512:	20 93 e8 00 	sts	0x00E8, r18
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     516:	61 15       	cp	r22, r1
     518:	71 05       	cpc	r23, r1
     51a:	c9 f6       	brne	.-78     	; 0x4ce <Endpoint_Read_Control_Stream_LE+0x8>
     51c:	05 c0       	rjmp	.+10     	; 0x528 <Endpoint_Read_Control_Stream_LE+0x62>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     51e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     520:	88 23       	and	r24, r24
     522:	61 f0       	breq	.+24     	; 0x53c <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     524:	85 30       	cpi	r24, 0x05	; 5
     526:	61 f0       	breq	.+24     	; 0x540 <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     528:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     52c:	80 ff       	sbrs	r24, 0
     52e:	f7 cf       	rjmp	.-18     	; 0x51e <Endpoint_Read_Control_Stream_LE+0x58>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     534:	83 e0       	ldi	r24, 0x03	; 3
     536:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     53c:	82 e0       	ldi	r24, 0x02	; 2
     53e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     540:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     542:	08 95       	ret

00000544 <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     544:	e8 2f       	mov	r30, r24
     546:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     548:	80 91 1c 01 	lds	r24, 0x011C
     54c:	90 91 1d 01 	lds	r25, 0x011D
     550:	86 17       	cp	r24, r22
     552:	97 07       	cpc	r25, r23
     554:	18 f4       	brcc	.+6      	; 0x55c <Endpoint_Write_Control_PStream_LE+0x18>
     556:	bc 01       	movw	r22, r24
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	37 c0       	rjmp	.+110    	; 0x5ca <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     55c:	61 15       	cp	r22, r1
     55e:	71 05       	cpc	r23, r1
     560:	d9 f7       	brne	.-10     	; 0x558 <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     562:	80 91 e8 00 	lds	r24, 0x00E8
     566:	8e 77       	andi	r24, 0x7E	; 126
     568:	80 93 e8 00 	sts	0x00E8, r24
     56c:	f5 cf       	rjmp	.-22     	; 0x558 <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     56e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     570:	88 23       	and	r24, r24
     572:	09 f4       	brne	.+2      	; 0x576 <Endpoint_Write_Control_PStream_LE+0x32>
     574:	3f c0       	rjmp	.+126    	; 0x5f4 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     576:	85 30       	cpi	r24, 0x05	; 5
     578:	c9 f1       	breq	.+114    	; 0x5ec <Endpoint_Write_Control_PStream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     57a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     57e:	83 fd       	sbrc	r24, 3
     580:	37 c0       	rjmp	.+110    	; 0x5f0 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     582:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     586:	82 fd       	sbrc	r24, 2
     588:	2b c0       	rjmp	.+86     	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     58a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     58e:	80 ff       	sbrs	r24, 0
     590:	1c c0       	rjmp	.+56     	; 0x5ca <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     592:	80 91 f2 00 	lds	r24, 0x00F2
     596:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     59a:	07 c0       	rjmp	.+14     	; 0x5aa <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     59c:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     59e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     5a2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     5a4:	61 50       	subi	r22, 0x01	; 1
     5a6:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     5a8:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     5aa:	61 15       	cp	r22, r1
     5ac:	71 05       	cpc	r23, r1
     5ae:	19 f0       	breq	.+6      	; 0x5b6 <Endpoint_Write_Control_PStream_LE+0x72>
     5b0:	88 30       	cpi	r24, 0x08	; 8
     5b2:	91 05       	cpc	r25, r1
     5b4:	98 f3       	brcs	.-26     	; 0x59c <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	88 30       	cpi	r24, 0x08	; 8
     5ba:	91 05       	cpc	r25, r1
     5bc:	09 f0       	breq	.+2      	; 0x5c0 <Endpoint_Write_Control_PStream_LE+0x7c>
     5be:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5c0:	80 91 e8 00 	lds	r24, 0x00E8
     5c4:	8e 77       	andi	r24, 0x7E	; 126
     5c6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     5ca:	61 15       	cp	r22, r1
     5cc:	71 05       	cpc	r23, r1
     5ce:	79 f6       	brne	.-98     	; 0x56e <Endpoint_Write_Control_PStream_LE+0x2a>
     5d0:	22 23       	and	r18, r18
     5d2:	69 f6       	brne	.-102    	; 0x56e <Endpoint_Write_Control_PStream_LE+0x2a>
     5d4:	05 c0       	rjmp	.+10     	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5d6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5d8:	88 23       	and	r24, r24
     5da:	61 f0       	breq	.+24     	; 0x5f4 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5dc:	85 30       	cpi	r24, 0x05	; 5
     5de:	61 f0       	breq	.+24     	; 0x5f8 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5e0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     5e4:	82 ff       	sbrs	r24, 2
     5e6:	f7 cf       	rjmp	.-18     	; 0x5d6 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5ec:	83 e0       	ldi	r24, 0x03	; 3
     5ee:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     5f4:	82 e0       	ldi	r24, 0x02	; 2
     5f6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5f8:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     5fa:	08 95       	ret

000005fc <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     5fc:	98 2f       	mov	r25, r24
     5fe:	2c c0       	rjmp	.+88     	; 0x658 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     600:	29 2f       	mov	r18, r25
     602:	2f 70       	andi	r18, 0x0F	; 15
     604:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     608:	98 17       	cp	r25, r24
     60a:	39 f0       	breq	.+14     	; 0x61a <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     60c:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     610:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     614:	50 91 f0 00 	lds	r21, 0x00F0
     618:	03 c0       	rjmp	.+6      	; 0x620 <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     61a:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     61c:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     61e:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     620:	21 ff       	sbrs	r18, 1
     622:	19 c0       	rjmp	.+50     	; 0x656 <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     624:	30 91 eb 00 	lds	r19, 0x00EB
     628:	3e 7f       	andi	r19, 0xFE	; 254
     62a:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     62e:	30 91 ed 00 	lds	r19, 0x00ED
     632:	3d 7f       	andi	r19, 0xFD	; 253
     634:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     638:	30 91 eb 00 	lds	r19, 0x00EB
     63c:	31 60       	ori	r19, 0x01	; 1
     63e:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     642:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     646:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     64a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     64e:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     652:	27 ff       	sbrs	r18, 7
     654:	08 c0       	rjmp	.+16     	; 0x666 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     656:	9f 5f       	subi	r25, 0xFF	; 255
     658:	97 30       	cpi	r25, 0x07	; 7
     65a:	90 f2       	brcs	.-92     	; 0x600 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     65c:	8f 70       	andi	r24, 0x0F	; 15
     65e:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     666:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     668:	08 95       	ret

0000066a <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     66a:	ef 92       	push	r14
     66c:	ff 92       	push	r15
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     678:	e8 2e       	mov	r14, r24
     67a:	e7 01       	movw	r28, r14
     67c:	7e 01       	movw	r14, r28
     67e:	f9 2e       	mov	r15, r25
     680:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     682:	00 e0       	ldi	r16, 0x00	; 0
     684:	2a c0       	rjmp	.+84     	; 0x6da <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
     686:	98 81       	ld	r25, Y
     688:	99 23       	and	r25, r25
     68a:	29 f1       	breq	.+74     	; 0x6d6 <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     68c:	6b 81       	ldd	r22, Y+3	; 0x03
     68e:	e9 81       	ldd	r30, Y+1	; 0x01
     690:	fa 81       	ldd	r31, Y+2	; 0x02
     692:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     694:	89 2f       	mov	r24, r25
     696:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     698:	87 30       	cpi	r24, 0x07	; 7
     69a:	18 f5       	brcc	.+70     	; 0x6e2 <Endpoint_ConfigureEndpointTable+0x78>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     69c:	62 95       	swap	r22
     69e:	66 0f       	add	r22, r22
     6a0:	66 0f       	add	r22, r22
     6a2:	60 7c       	andi	r22, 0xC0	; 192
     6a4:	99 1f       	adc	r25, r25
     6a6:	99 27       	eor	r25, r25
     6a8:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     6aa:	69 2b       	or	r22, r25
     6ac:	22 30       	cpi	r18, 0x02	; 2
     6ae:	10 f0       	brcs	.+4      	; 0x6b4 <Endpoint_ConfigureEndpointTable+0x4a>
     6b0:	96 e0       	ldi	r25, 0x06	; 6
     6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <Endpoint_ConfigureEndpointTable+0x4c>
     6b4:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     6b6:	28 e0       	ldi	r18, 0x08	; 8
     6b8:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     6ba:	40 e0       	ldi	r20, 0x00	; 0
     6bc:	03 c0       	rjmp	.+6      	; 0x6c4 <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     6be:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     6c0:	22 0f       	add	r18, r18
     6c2:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     6c4:	2e 17       	cp	r18, r30
     6c6:	3f 07       	cpc	r19, r31
     6c8:	d0 f3       	brcs	.-12     	; 0x6be <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     6ca:	42 95       	swap	r20
     6cc:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     6ce:	49 2b       	or	r20, r25
     6d0:	95 df       	rcall	.-214    	; 0x5fc <Endpoint_ConfigureEndpoint_Prv>
     6d2:	88 23       	and	r24, r24
     6d4:	31 f0       	breq	.+12     	; 0x6e2 <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     6d6:	0f 5f       	subi	r16, 0xFF	; 255
     6d8:	25 96       	adiw	r28, 0x05	; 5
     6da:	01 17       	cp	r16, r17
     6dc:	a0 f2       	brcs	.-88     	; 0x686 <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     6e2:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	ff 90       	pop	r15
     6ee:	ef 90       	pop	r14
     6f0:	08 95       	ret

000006f2 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     6f2:	80 91 16 01 	lds	r24, 0x0116
     6f6:	87 ff       	sbrs	r24, 7
     6f8:	11 c0       	rjmp	.+34     	; 0x71c <Endpoint_ClearStatusStage+0x2a>
     6fa:	03 c0       	rjmp	.+6      	; 0x702 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6fc:	8e b3       	in	r24, 0x1e	; 30
     6fe:	88 23       	and	r24, r24
     700:	b1 f0       	breq	.+44     	; 0x72e <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     702:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     706:	82 ff       	sbrs	r24, 2
     708:	f9 cf       	rjmp	.-14     	; 0x6fc <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     70a:	80 91 e8 00 	lds	r24, 0x00E8
     70e:	8b 77       	andi	r24, 0x7B	; 123
     710:	80 93 e8 00 	sts	0x00E8, r24
     714:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     716:	8e b3       	in	r24, 0x1e	; 30
     718:	88 23       	and	r24, r24
     71a:	49 f0       	breq	.+18     	; 0x72e <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     71c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     720:	80 ff       	sbrs	r24, 0
     722:	f9 cf       	rjmp	.-14     	; 0x716 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     724:	80 91 e8 00 	lds	r24, 0x00E8
     728:	8e 77       	andi	r24, 0x7E	; 126
     72a:	80 93 e8 00 	sts	0x00E8, r24
     72e:	08 95       	ret

00000730 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     730:	80 91 e4 00 	lds	r24, 0x00E4
     734:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     738:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     73a:	20 91 ec 00 	lds	r18, 0x00EC
     73e:	20 ff       	sbrs	r18, 0
     740:	25 c0       	rjmp	.+74     	; 0x78c <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     742:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     746:	20 fd       	sbrc	r18, 0
     748:	15 c0       	rjmp	.+42     	; 0x774 <Endpoint_WaitUntilReady+0x44>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     74a:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     74c:	22 23       	and	r18, r18
     74e:	a1 f0       	breq	.+40     	; 0x778 <Endpoint_WaitUntilReady+0x48>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     750:	25 30       	cpi	r18, 0x05	; 5
     752:	a1 f0       	breq	.+40     	; 0x77c <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     754:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     758:	25 fd       	sbrc	r18, 5
     75a:	12 c0       	rjmp	.+36     	; 0x780 <Endpoint_WaitUntilReady+0x50>
     75c:	20 91 e4 00 	lds	r18, 0x00E4
     760:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     764:	28 17       	cp	r18, r24
     766:	39 07       	cpc	r19, r25
     768:	41 f3       	breq	.-48     	; 0x73a <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     76a:	44 23       	and	r20, r20
     76c:	59 f0       	breq	.+22     	; 0x784 <Endpoint_WaitUntilReady+0x54>
     76e:	41 50       	subi	r20, 0x01	; 1
     770:	c9 01       	movw	r24, r18
     772:	e3 cf       	rjmp	.-58     	; 0x73a <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     77c:	83 e0       	ldi	r24, 0x03	; 3
     77e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     784:	84 e0       	ldi	r24, 0x04	; 4
     786:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     788:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     78a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     78c:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     790:	22 ff       	sbrs	r18, 2
     792:	db cf       	rjmp	.-74     	; 0x74a <Endpoint_WaitUntilReady+0x1a>
     794:	f9 cf       	rjmp	.-14     	; 0x788 <Endpoint_WaitUntilReady+0x58>

00000796 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     79e:	4d d0       	rcall	.+154    	; 0x83a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     7a0:	54 d0       	rcall	.+168    	; 0x84a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     7a2:	c8 ed       	ldi	r28, 0xD8	; 216
     7a4:	d0 e0       	ldi	r29, 0x00	; 0
     7a6:	88 81       	ld	r24, Y
     7a8:	8f 77       	andi	r24, 0x7F	; 127
     7aa:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     7ac:	88 81       	ld	r24, Y
     7ae:	80 68       	ori	r24, 0x80	; 128
     7b0:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     7b2:	88 81       	ld	r24, Y
     7b4:	8f 7d       	andi	r24, 0xDF	; 223
     7b6:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     7b8:	e7 ed       	ldi	r30, 0xD7	; 215
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	80 68       	ori	r24, 0x80	; 128
     7c0:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     7c2:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     7c4:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
     7c6:	10 92 12 01 	sts	0x0112, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     7ca:	10 92 14 01 	sts	0x0114, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     7ce:	10 92 13 01 	sts	0x0113, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     7d2:	00 ee       	ldi	r16, 0xE0	; 224
     7d4:	10 e0       	ldi	r17, 0x00	; 0
     7d6:	f8 01       	movw	r30, r16
     7d8:	80 81       	ld	r24, Z
     7da:	8b 7f       	andi	r24, 0xFB	; 251
     7dc:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     7de:	88 81       	ld	r24, Y
     7e0:	81 60       	ori	r24, 0x01	; 1
     7e2:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	42 e0       	ldi	r20, 0x02	; 2
     7ea:	08 df       	rcall	.-496    	; 0x5fc <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     7ec:	e1 ee       	ldi	r30, 0xE1	; 225
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	80 81       	ld	r24, Z
     7f2:	8e 7f       	andi	r24, 0xFE	; 254
     7f4:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     7f6:	e2 ee       	ldi	r30, 0xE2	; 226
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	81 60       	ori	r24, 0x01	; 1
     7fe:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     800:	80 81       	ld	r24, Z
     802:	88 60       	ori	r24, 0x08	; 8
     804:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     806:	f8 01       	movw	r30, r16
     808:	80 81       	ld	r24, Z
     80a:	8e 7f       	andi	r24, 0xFE	; 254
     80c:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     80e:	88 81       	ld	r24, Y
     810:	80 61       	ori	r24, 0x10	; 16
     812:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	08 95       	ret

0000081e <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     81e:	e8 ed       	ldi	r30, 0xD8	; 216
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	80 81       	ld	r24, Z
     824:	8f 7e       	andi	r24, 0xEF	; 239
     826:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     828:	e7 ed       	ldi	r30, 0xD7	; 215
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	80 81       	ld	r24, Z
     82e:	81 60       	ori	r24, 0x01	; 1
     830:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	80 93 15 01 	sts	0x0115, r24

	USB_ResetInterface();
}
     838:	ae cf       	rjmp	.-164    	; 0x796 <USB_ResetInterface>

0000083a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     83a:	e8 ed       	ldi	r30, 0xD8	; 216
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	80 81       	ld	r24, Z
     840:	8c 7f       	andi	r24, 0xFC	; 252
     842:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     844:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     848:	08 95       	ret

0000084a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     84a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     84e:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     852:	08 95       	ret

00000854 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     854:	1f 92       	push	r1
     856:	0f 92       	push	r0
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	0f 92       	push	r0
     85c:	0b b6       	in	r0, 0x3b	; 59
     85e:	0f 92       	push	r0
     860:	11 24       	eor	r1, r1
     862:	2f 93       	push	r18
     864:	3f 93       	push	r19
     866:	4f 93       	push	r20
     868:	5f 93       	push	r21
     86a:	6f 93       	push	r22
     86c:	7f 93       	push	r23
     86e:	8f 93       	push	r24
     870:	9f 93       	push	r25
     872:	af 93       	push	r26
     874:	bf 93       	push	r27
     876:	ef 93       	push	r30
     878:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     87a:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     87e:	82 ff       	sbrs	r24, 2
     880:	0a c0       	rjmp	.+20     	; 0x896 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     882:	80 91 e2 00 	lds	r24, 0x00E2
     886:	82 ff       	sbrs	r24, 2
     888:	06 c0       	rjmp	.+12     	; 0x896 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     88a:	80 91 e1 00 	lds	r24, 0x00E1
     88e:	8b 7f       	andi	r24, 0xFB	; 251
     890:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     894:	c1 dc       	rcall	.-1662   	; 0x218 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     896:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     89a:	80 ff       	sbrs	r24, 0
     89c:	1b c0       	rjmp	.+54     	; 0x8d4 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     89e:	80 91 d8 00 	lds	r24, 0x00D8
     8a2:	80 ff       	sbrs	r24, 0
     8a4:	17 c0       	rjmp	.+46     	; 0x8d4 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     8a6:	80 91 da 00 	lds	r24, 0x00DA
     8aa:	8e 7f       	andi	r24, 0xFE	; 254
     8ac:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     8b0:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     8b4:	80 ff       	sbrs	r24, 0
     8b6:	0b c0       	rjmp	.+22     	; 0x8ce <__vector_10+0x7a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8b8:	8c e0       	ldi	r24, 0x0C	; 12
     8ba:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8bc:	8e e0       	ldi	r24, 0x0E	; 14
     8be:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     8c0:	09 b4       	in	r0, 0x29	; 41
     8c2:	00 fe       	sbrs	r0, 0
     8c4:	fd cf       	rjmp	.-6      	; 0x8c0 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
     8ca:	91 dc       	rcall	.-1758   	; 0x1ee <EVENT_USB_Device_Connect>
     8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8ce:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     8d0:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
     8d2:	8f dc       	rcall	.-1762   	; 0x1f2 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     8d4:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     8d8:	80 ff       	sbrs	r24, 0
     8da:	17 c0       	rjmp	.+46     	; 0x90a <__vector_10+0xb6>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     8dc:	80 91 e2 00 	lds	r24, 0x00E2
     8e0:	80 ff       	sbrs	r24, 0
     8e2:	13 c0       	rjmp	.+38     	; 0x90a <__vector_10+0xb6>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8e4:	80 91 e2 00 	lds	r24, 0x00E2
     8e8:	8e 7f       	andi	r24, 0xFE	; 254
     8ea:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8ee:	80 91 e2 00 	lds	r24, 0x00E2
     8f2:	80 61       	ori	r24, 0x10	; 16
     8f4:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     8f8:	80 91 d8 00 	lds	r24, 0x00D8
     8fc:	80 62       	ori	r24, 0x20	; 32
     8fe:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     902:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     904:	85 e0       	ldi	r24, 0x05	; 5
     906:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
     908:	c9 d1       	rcall	.+914    	; 0xc9c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     90a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     90e:	84 ff       	sbrs	r24, 4
     910:	2c c0       	rjmp	.+88     	; 0x96a <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     912:	80 91 e2 00 	lds	r24, 0x00E2
     916:	84 ff       	sbrs	r24, 4
     918:	28 c0       	rjmp	.+80     	; 0x96a <__vector_10+0x116>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     91a:	8c e0       	ldi	r24, 0x0C	; 12
     91c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     91e:	8e e0       	ldi	r24, 0x0E	; 14
     920:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     922:	09 b4       	in	r0, 0x29	; 41
     924:	00 fe       	sbrs	r0, 0
     926:	fd cf       	rjmp	.-6      	; 0x922 <__vector_10+0xce>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     928:	80 91 d8 00 	lds	r24, 0x00D8
     92c:	8f 7d       	andi	r24, 0xDF	; 223
     92e:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     932:	80 91 e1 00 	lds	r24, 0x00E1
     936:	8f 7e       	andi	r24, 0xEF	; 239
     938:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     93c:	80 91 e2 00 	lds	r24, 0x00E2
     940:	8f 7e       	andi	r24, 0xEF	; 239
     942:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     946:	80 91 e2 00 	lds	r24, 0x00E2
     94a:	81 60       	ori	r24, 0x01	; 1
     94c:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     950:	80 91 12 01 	lds	r24, 0x0112
     954:	88 23       	and	r24, r24
     956:	21 f4       	brne	.+8      	; 0x960 <__vector_10+0x10c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     958:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     95c:	87 ff       	sbrs	r24, 7
     95e:	02 c0       	rjmp	.+4      	; 0x964 <__vector_10+0x110>
     960:	84 e0       	ldi	r24, 0x04	; 4
     962:	01 c0       	rjmp	.+2      	; 0x966 <__vector_10+0x112>
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     968:	99 d1       	rcall	.+818    	; 0xc9c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     96a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     96e:	83 ff       	sbrs	r24, 3
     970:	21 c0       	rjmp	.+66     	; 0x9b4 <__vector_10+0x160>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     972:	80 91 e2 00 	lds	r24, 0x00E2
     976:	83 ff       	sbrs	r24, 3
     978:	1d c0       	rjmp	.+58     	; 0x9b4 <__vector_10+0x160>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     97a:	80 91 e1 00 	lds	r24, 0x00E1
     97e:	87 7f       	andi	r24, 0xF7	; 247
     980:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
     988:	10 92 12 01 	sts	0x0112, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     98c:	80 91 e1 00 	lds	r24, 0x00E1
     990:	8e 7f       	andi	r24, 0xFE	; 254
     992:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     996:	80 91 e2 00 	lds	r24, 0x00E2
     99a:	8e 7f       	andi	r24, 0xFE	; 254
     99c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9a0:	80 91 e2 00 	lds	r24, 0x00E2
     9a4:	80 61       	ori	r24, 0x10	; 16
     9a6:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	42 e0       	ldi	r20, 0x02	; 2
     9b0:	25 de       	rcall	.-950    	; 0x5fc <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     9b2:	74 d1       	rcall	.+744    	; 0xc9c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     9b4:	ff 91       	pop	r31
     9b6:	ef 91       	pop	r30
     9b8:	bf 91       	pop	r27
     9ba:	af 91       	pop	r26
     9bc:	9f 91       	pop	r25
     9be:	8f 91       	pop	r24
     9c0:	7f 91       	pop	r23
     9c2:	6f 91       	pop	r22
     9c4:	5f 91       	pop	r21
     9c6:	4f 91       	pop	r20
     9c8:	3f 91       	pop	r19
     9ca:	2f 91       	pop	r18
     9cc:	0f 90       	pop	r0
     9ce:	0b be       	out	0x3b, r0	; 59
     9d0:	0f 90       	pop	r0
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	0f 90       	pop	r0
     9d6:	1f 90       	pop	r1
     9d8:	18 95       	reti

000009da <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     9da:	1f 93       	push	r17
     9dc:	df 93       	push	r29
     9de:	cf 93       	push	r28
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	ac 97       	sbiw	r28, 0x2c	; 44
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	de bf       	out	0x3e, r29	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     9f0:	e6 e1       	ldi	r30, 0x16	; 22
     9f2:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     9f4:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     9f8:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     9fa:	21 e0       	ldi	r18, 0x01	; 1
     9fc:	ee 31       	cpi	r30, 0x1E	; 30
     9fe:	f2 07       	cpc	r31, r18
     a00:	c9 f7       	brne	.-14     	; 0x9f4 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     a02:	07 dc       	rcall	.-2034   	; 0x212 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a04:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     a08:	83 ff       	sbrs	r24, 3
     a0a:	30 c1       	rjmp	.+608    	; 0xc6c <USB_Device_ProcessControlRequest+0x292>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a0c:	80 91 16 01 	lds	r24, 0x0116

		switch (USB_ControlRequest.bRequest)
     a10:	20 91 17 01 	lds	r18, 0x0117
     a14:	25 30       	cpi	r18, 0x05	; 5
     a16:	09 f4       	brne	.+2      	; 0xa1a <USB_Device_ProcessControlRequest+0x40>
     a18:	84 c0       	rjmp	.+264    	; 0xb22 <USB_Device_ProcessControlRequest+0x148>
     a1a:	26 30       	cpi	r18, 0x06	; 6
     a1c:	40 f4       	brcc	.+16     	; 0xa2e <USB_Device_ProcessControlRequest+0x54>
     a1e:	21 30       	cpi	r18, 0x01	; 1
     a20:	a1 f1       	breq	.+104    	; 0xa8a <USB_Device_ProcessControlRequest+0xb0>
     a22:	21 30       	cpi	r18, 0x01	; 1
     a24:	70 f0       	brcs	.+28     	; 0xa42 <USB_Device_ProcessControlRequest+0x68>
     a26:	23 30       	cpi	r18, 0x03	; 3
     a28:	09 f0       	breq	.+2      	; 0xa2c <USB_Device_ProcessControlRequest+0x52>
     a2a:	20 c1       	rjmp	.+576    	; 0xc6c <USB_Device_ProcessControlRequest+0x292>
     a2c:	2e c0       	rjmp	.+92     	; 0xa8a <USB_Device_ProcessControlRequest+0xb0>
     a2e:	28 30       	cpi	r18, 0x08	; 8
     a30:	09 f4       	brne	.+2      	; 0xa34 <USB_Device_ProcessControlRequest+0x5a>
     a32:	ef c0       	rjmp	.+478    	; 0xc12 <USB_Device_ProcessControlRequest+0x238>
     a34:	29 30       	cpi	r18, 0x09	; 9
     a36:	09 f4       	brne	.+2      	; 0xa3a <USB_Device_ProcessControlRequest+0x60>
     a38:	fe c0       	rjmp	.+508    	; 0xc36 <USB_Device_ProcessControlRequest+0x25c>
     a3a:	26 30       	cpi	r18, 0x06	; 6
     a3c:	09 f0       	breq	.+2      	; 0xa40 <USB_Device_ProcessControlRequest+0x66>
     a3e:	16 c1       	rjmp	.+556    	; 0xc6c <USB_Device_ProcessControlRequest+0x292>
     a40:	92 c0       	rjmp	.+292    	; 0xb66 <USB_Device_ProcessControlRequest+0x18c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a42:	80 38       	cpi	r24, 0x80	; 128
     a44:	21 f0       	breq	.+8      	; 0xa4e <USB_Device_ProcessControlRequest+0x74>
     a46:	82 38       	cpi	r24, 0x82	; 130
     a48:	09 f0       	breq	.+2      	; 0xa4c <USB_Device_ProcessControlRequest+0x72>
     a4a:	10 c1       	rjmp	.+544    	; 0xc6c <USB_Device_ProcessControlRequest+0x292>
     a4c:	08 c0       	rjmp	.+16     	; 0xa5e <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     a4e:	80 91 13 01 	lds	r24, 0x0113
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     a52:	90 91 14 01 	lds	r25, 0x0114
     a56:	99 23       	and	r25, r25
     a58:	71 f0       	breq	.+28     	; 0xa76 <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a5a:	82 60       	ori	r24, 0x02	; 2
     a5c:	0c c0       	rjmp	.+24     	; 0xa76 <USB_Device_ProcessControlRequest+0x9c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a5e:	80 91 1a 01 	lds	r24, 0x011A
     a62:	8f 70       	andi	r24, 0x0F	; 15
     a64:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a68:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	95 ff       	sbrs	r25, 5
     a70:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a72:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a76:	90 91 e8 00 	lds	r25, 0x00E8
     a7a:	97 7f       	andi	r25, 0xF7	; 247
     a7c:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     a80:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     a84:	10 92 f1 00 	sts	0x00F1, r1
     a88:	cf c0       	rjmp	.+414    	; 0xc28 <USB_Device_ProcessControlRequest+0x24e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a8a:	88 23       	and	r24, r24
     a8c:	19 f0       	breq	.+6      	; 0xa94 <USB_Device_ProcessControlRequest+0xba>
     a8e:	82 30       	cpi	r24, 0x02	; 2
     a90:	09 f0       	breq	.+2      	; 0xa94 <USB_Device_ProcessControlRequest+0xba>
     a92:	ec c0       	rjmp	.+472    	; 0xc6c <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	8f 71       	andi	r24, 0x1F	; 31
     a98:	90 70       	andi	r25, 0x00	; 0
     a9a:	00 97       	sbiw	r24, 0x00	; 0
     a9c:	29 f0       	breq	.+10     	; 0xaa8 <USB_Device_ProcessControlRequest+0xce>
     a9e:	82 30       	cpi	r24, 0x02	; 2
     aa0:	91 05       	cpc	r25, r1
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <USB_Device_ProcessControlRequest+0xcc>
     aa4:	e3 c0       	rjmp	.+454    	; 0xc6c <USB_Device_ProcessControlRequest+0x292>
     aa6:	0b c0       	rjmp	.+22     	; 0xabe <USB_Device_ProcessControlRequest+0xe4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     aa8:	80 91 18 01 	lds	r24, 0x0118
     aac:	81 30       	cpi	r24, 0x01	; 1
     aae:	09 f0       	breq	.+2      	; 0xab2 <USB_Device_ProcessControlRequest+0xd8>
     ab0:	dd c0       	rjmp	.+442    	; 0xc6c <USB_Device_ProcessControlRequest+0x292>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     ab2:	23 30       	cpi	r18, 0x03	; 3
     ab4:	09 f0       	breq	.+2      	; 0xab8 <USB_Device_ProcessControlRequest+0xde>
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	80 93 14 01 	sts	0x0114, r24
     abc:	2c c0       	rjmp	.+88     	; 0xb16 <USB_Device_ProcessControlRequest+0x13c>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     abe:	80 91 18 01 	lds	r24, 0x0118
     ac2:	88 23       	and	r24, r24
     ac4:	41 f5       	brne	.+80     	; 0xb16 <USB_Device_ProcessControlRequest+0x13c>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     ac6:	20 91 1a 01 	lds	r18, 0x011A
     aca:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     acc:	09 f4       	brne	.+2      	; 0xad0 <USB_Device_ProcessControlRequest+0xf6>
     ace:	ce c0       	rjmp	.+412    	; 0xc6c <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ad0:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     ad4:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     ad8:	80 ff       	sbrs	r24, 0
     ada:	1d c0       	rjmp	.+58     	; 0xb16 <USB_Device_ProcessControlRequest+0x13c>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     adc:	80 91 17 01 	lds	r24, 0x0117
     ae0:	83 30       	cpi	r24, 0x03	; 3
     ae2:	21 f4       	brne	.+8      	; 0xaec <USB_Device_ProcessControlRequest+0x112>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     ae4:	80 91 eb 00 	lds	r24, 0x00EB
     ae8:	80 62       	ori	r24, 0x20	; 32
     aea:	13 c0       	rjmp	.+38     	; 0xb12 <USB_Device_ProcessControlRequest+0x138>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     aec:	80 91 eb 00 	lds	r24, 0x00EB
     af0:	80 61       	ori	r24, 0x10	; 16
     af2:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <USB_Device_ProcessControlRequest+0x126>
     afc:	88 0f       	add	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	2a 95       	dec	r18
     b02:	e2 f7       	brpl	.-8      	; 0xafc <USB_Device_ProcessControlRequest+0x122>
     b04:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     b08:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b0c:	80 91 eb 00 	lds	r24, 0x00EB
     b10:	88 60       	ori	r24, 0x08	; 8
     b12:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b16:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b1a:	80 91 e8 00 	lds	r24, 0x00E8
     b1e:	87 7f       	andi	r24, 0xF7	; 247
     b20:	86 c0       	rjmp	.+268    	; 0xc2e <USB_Device_ProcessControlRequest+0x254>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b22:	88 23       	and	r24, r24
     b24:	09 f0       	breq	.+2      	; 0xb28 <USB_Device_ProcessControlRequest+0x14e>
     b26:	a2 c0       	rjmp	.+324    	; 0xc6c <USB_Device_ProcessControlRequest+0x292>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     b28:	10 91 18 01 	lds	r17, 0x0118
     b2c:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b2e:	80 91 e3 00 	lds	r24, 0x00E3
     b32:	80 78       	andi	r24, 0x80	; 128
     b34:	81 2b       	or	r24, r17
     b36:	80 93 e3 00 	sts	0x00E3, r24
     b3a:	80 91 e8 00 	lds	r24, 0x00E8
     b3e:	87 7f       	andi	r24, 0xF7	; 247
     b40:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     b44:	d6 dd       	rcall	.-1108   	; 0x6f2 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b46:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     b4a:	80 ff       	sbrs	r24, 0
     b4c:	fc cf       	rjmp	.-8      	; 0xb46 <USB_Device_ProcessControlRequest+0x16c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     b4e:	80 91 e3 00 	lds	r24, 0x00E3
     b52:	80 68       	ori	r24, 0x80	; 128
     b54:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b58:	11 23       	and	r17, r17
     b5a:	11 f0       	breq	.+4      	; 0xb60 <USB_Device_ProcessControlRequest+0x186>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	01 c0       	rjmp	.+2      	; 0xb62 <USB_Device_ProcessControlRequest+0x188>
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	8e bb       	out	0x1e, r24	; 30
     b64:	83 c0       	rjmp	.+262    	; 0xc6c <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b66:	80 58       	subi	r24, 0x80	; 128
     b68:	82 30       	cpi	r24, 0x02	; 2
     b6a:	08 f0       	brcs	.+2      	; 0xb6e <USB_Device_ProcessControlRequest+0x194>
     b6c:	7f c0       	rjmp	.+254    	; 0xc6c <USB_Device_ProcessControlRequest+0x292>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     b6e:	80 91 18 01 	lds	r24, 0x0118
     b72:	90 91 19 01 	lds	r25, 0x0119
     b76:	23 e0       	ldi	r18, 0x03	; 3
     b78:	8c 3d       	cpi	r24, 0xDC	; 220
     b7a:	92 07       	cpc	r25, r18
     b7c:	91 f5       	brne	.+100    	; 0xbe2 <USB_Device_ProcessControlRequest+0x208>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     b82:	8a e2       	ldi	r24, 0x2A	; 42
     b84:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b86:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b88:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     b8a:	de 01       	movw	r26, r28
     b8c:	15 96       	adiw	r26, 0x05	; 5
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     b92:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b94:	61 e2       	ldi	r22, 0x21	; 33
     b96:	e4 2f       	mov	r30, r20
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	60 93 57 00 	sts	0x0057, r22
     b9e:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
     ba0:	80 ff       	sbrs	r24, 0
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <USB_Device_ProcessControlRequest+0x1d0>
					{
						SerialByte >>= 4;
     ba4:	e2 95       	swap	r30
     ba6:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     ba8:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     baa:	ef 70       	andi	r30, 0x0F	; 15
     bac:	2e 2f       	mov	r18, r30
     bae:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     bb0:	ea 30       	cpi	r30, 0x0A	; 10
     bb2:	18 f0       	brcs	.+6      	; 0xbba <USB_Device_ProcessControlRequest+0x1e0>
     bb4:	29 5c       	subi	r18, 0xC9	; 201
     bb6:	3f 4f       	sbci	r19, 0xFF	; 255
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <USB_Device_ProcessControlRequest+0x1e4>
     bba:	20 5d       	subi	r18, 0xD0	; 208
     bbc:	3f 4f       	sbci	r19, 0xFF	; 255
     bbe:	2d 93       	st	X+, r18
     bc0:	3d 93       	st	X+, r19
     bc2:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     bc4:	84 31       	cpi	r24, 0x14	; 20
     bc6:	91 05       	cpc	r25, r1
     bc8:	31 f7       	brne	.-52     	; 0xb96 <USB_Device_ProcessControlRequest+0x1bc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     bca:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bcc:	80 91 e8 00 	lds	r24, 0x00E8
     bd0:	87 7f       	andi	r24, 0xF7	; 247
     bd2:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     bd6:	ce 01       	movw	r24, r28
     bd8:	03 96       	adiw	r24, 0x03	; 3
     bda:	6a e2       	ldi	r22, 0x2A	; 42
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	18 dc       	rcall	.-2000   	; 0x410 <Endpoint_Write_Control_Stream_LE>
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <USB_Device_ProcessControlRequest+0x22c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     be2:	60 91 1a 01 	lds	r22, 0x011A
     be6:	ae 01       	movw	r20, r28
     be8:	4f 5f       	subi	r20, 0xFF	; 255
     bea:	5f 4f       	sbci	r21, 0xFF	; 255
     bec:	75 db       	rcall	.-2326   	; 0x2d8 <CALLBACK_USB_GetDescriptor>
     bee:	bc 01       	movw	r22, r24
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <USB_Device_ProcessControlRequest+0x21c>
     bf4:	3b c0       	rjmp	.+118    	; 0xc6c <USB_Device_ProcessControlRequest+0x292>
     bf6:	80 91 e8 00 	lds	r24, 0x00E8
     bfa:	87 7f       	andi	r24, 0xF7	; 247
     bfc:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	9a 81       	ldd	r25, Y+2	; 0x02
     c04:	9f dc       	rcall	.-1730   	; 0x544 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c06:	80 91 e8 00 	lds	r24, 0x00E8
     c0a:	8b 77       	andi	r24, 0x7B	; 123
     c0c:	80 93 e8 00 	sts	0x00E8, r24
     c10:	2d c0       	rjmp	.+90     	; 0xc6c <USB_Device_ProcessControlRequest+0x292>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c12:	80 38       	cpi	r24, 0x80	; 128
     c14:	59 f5       	brne	.+86     	; 0xc6c <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c16:	80 91 e8 00 	lds	r24, 0x00E8
     c1a:	87 7f       	andi	r24, 0xF7	; 247
     c1c:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     c20:	80 91 12 01 	lds	r24, 0x0112
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c24:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c28:	80 91 e8 00 	lds	r24, 0x00E8
     c2c:	8e 77       	andi	r24, 0x7E	; 126
     c2e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     c32:	5f dd       	rcall	.-1346   	; 0x6f2 <Endpoint_ClearStatusStage>
     c34:	1b c0       	rjmp	.+54     	; 0xc6c <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c36:	88 23       	and	r24, r24
     c38:	c9 f4       	brne	.+50     	; 0xc6c <USB_Device_ProcessControlRequest+0x292>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     c3a:	90 91 18 01 	lds	r25, 0x0118
     c3e:	92 30       	cpi	r25, 0x02	; 2
     c40:	a8 f4       	brcc	.+42     	; 0xc6c <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c42:	80 91 e8 00 	lds	r24, 0x00E8
     c46:	87 7f       	andi	r24, 0xF7	; 247
     c48:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c4c:	90 93 12 01 	sts	0x0112, r25

	Endpoint_ClearStatusStage();
     c50:	50 dd       	rcall	.-1376   	; 0x6f2 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     c52:	80 91 12 01 	lds	r24, 0x0112
     c56:	88 23       	and	r24, r24
     c58:	21 f4       	brne	.+8      	; 0xc62 <USB_Device_ProcessControlRequest+0x288>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c5a:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c5e:	87 ff       	sbrs	r24, 7
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <USB_Device_ProcessControlRequest+0x28c>
     c62:	84 e0       	ldi	r24, 0x04	; 4
     c64:	01 c0       	rjmp	.+2      	; 0xc68 <USB_Device_ProcessControlRequest+0x28e>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
     c6a:	c5 da       	rcall	.-2678   	; 0x1f6 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c6c:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     c70:	83 ff       	sbrs	r24, 3
     c72:	0a c0       	rjmp	.+20     	; 0xc88 <USB_Device_ProcessControlRequest+0x2ae>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c74:	80 91 e8 00 	lds	r24, 0x00E8
     c78:	87 7f       	andi	r24, 0xF7	; 247
     c7a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c7e:	80 91 eb 00 	lds	r24, 0x00EB
     c82:	80 62       	ori	r24, 0x20	; 32
     c84:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     c88:	ac 96       	adiw	r28, 0x2c	; 44
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	1f 91       	pop	r17
     c9a:	08 95       	ret

00000c9c <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     c9c:	08 95       	ret

00000c9e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     c9e:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     ca0:	8e b3       	in	r24, 0x1e	; 30
     ca2:	88 23       	and	r24, r24
     ca4:	a9 f0       	breq	.+42     	; 0xcd0 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     ca6:	80 91 e9 00 	lds	r24, 0x00E9
     caa:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     cac:	90 91 ec 00 	lds	r25, 0x00EC
     cb0:	90 ff       	sbrs	r25, 0
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <USB_USBTask+0x1a>
     cb4:	10 e8       	ldi	r17, 0x80	; 128
     cb6:	01 c0       	rjmp	.+2      	; 0xcba <USB_USBTask+0x1c>
     cb8:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     cba:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cbc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cc0:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     cc4:	83 ff       	sbrs	r24, 3
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
     cc8:	88 de       	rcall	.-752    	; 0x9da <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cca:	1f 70       	andi	r17, 0x0F	; 15
     ccc:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     cd0:	1f 91       	pop	r17
     cd2:	08 95       	ret

00000cd4 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     cd4:	6f 92       	push	r6
     cd6:	7f 92       	push	r7
     cd8:	8f 92       	push	r8
     cda:	9f 92       	push	r9
     cdc:	af 92       	push	r10
     cde:	bf 92       	push	r11
     ce0:	cf 92       	push	r12
     ce2:	df 92       	push	r13
     ce4:	ef 92       	push	r14
     ce6:	ff 92       	push	r15
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	00 d0       	rcall	.+0      	; 0xcf2 <HID_Device_ProcessControlRequest+0x1e>
     cf2:	0f 92       	push	r0
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     cfa:	6d b6       	in	r6, 0x3d	; 61
     cfc:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cfe:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     d02:	83 ff       	sbrs	r24, 3
     d04:	0d c1       	rjmp	.+538    	; 0xf20 <HID_Device_ProcessControlRequest+0x24c>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     d06:	f7 01       	movw	r30, r14
     d08:	80 81       	ld	r24, Z
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	20 91 1a 01 	lds	r18, 0x011A
     d10:	30 91 1b 01 	lds	r19, 0x011B
     d14:	28 17       	cp	r18, r24
     d16:	39 07       	cpc	r19, r25
     d18:	09 f0       	breq	.+2      	; 0xd1c <HID_Device_ProcessControlRequest+0x48>
     d1a:	02 c1       	rjmp	.+516    	; 0xf20 <HID_Device_ProcessControlRequest+0x24c>
	  return;

	switch (USB_ControlRequest.bRequest)
     d1c:	80 91 17 01 	lds	r24, 0x0117
     d20:	83 30       	cpi	r24, 0x03	; 3
     d22:	09 f4       	brne	.+2      	; 0xd26 <HID_Device_ProcessControlRequest+0x52>
     d24:	a4 c0       	rjmp	.+328    	; 0xe6e <HID_Device_ProcessControlRequest+0x19a>
     d26:	84 30       	cpi	r24, 0x04	; 4
     d28:	30 f4       	brcc	.+12     	; 0xd36 <HID_Device_ProcessControlRequest+0x62>
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	71 f0       	breq	.+28     	; 0xd4a <HID_Device_ProcessControlRequest+0x76>
     d2e:	82 30       	cpi	r24, 0x02	; 2
     d30:	09 f0       	breq	.+2      	; 0xd34 <HID_Device_ProcessControlRequest+0x60>
     d32:	f6 c0       	rjmp	.+492    	; 0xf20 <HID_Device_ProcessControlRequest+0x24c>
     d34:	d9 c0       	rjmp	.+434    	; 0xee8 <HID_Device_ProcessControlRequest+0x214>
     d36:	8a 30       	cpi	r24, 0x0A	; 10
     d38:	09 f4       	brne	.+2      	; 0xd3c <HID_Device_ProcessControlRequest+0x68>
     d3a:	be c0       	rjmp	.+380    	; 0xeb8 <HID_Device_ProcessControlRequest+0x1e4>
     d3c:	8b 30       	cpi	r24, 0x0B	; 11
     d3e:	09 f4       	brne	.+2      	; 0xd42 <HID_Device_ProcessControlRequest+0x6e>
     d40:	a7 c0       	rjmp	.+334    	; 0xe90 <HID_Device_ProcessControlRequest+0x1bc>
     d42:	89 30       	cpi	r24, 0x09	; 9
     d44:	09 f0       	breq	.+2      	; 0xd48 <HID_Device_ProcessControlRequest+0x74>
     d46:	ec c0       	rjmp	.+472    	; 0xf20 <HID_Device_ProcessControlRequest+0x24c>
     d48:	4c c0       	rjmp	.+152    	; 0xde2 <HID_Device_ProcessControlRequest+0x10e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     d4a:	80 91 16 01 	lds	r24, 0x0116
     d4e:	81 3a       	cpi	r24, 0xA1	; 161
     d50:	09 f0       	breq	.+2      	; 0xd54 <HID_Device_ProcessControlRequest+0x80>
     d52:	e6 c0       	rjmp	.+460    	; 0xf20 <HID_Device_ProcessControlRequest+0x24c>
     d54:	cd b6       	in	r12, 0x3d	; 61
     d56:	de b6       	in	r13, 0x3e	; 62
     d58:	9d b6       	in	r9, 0x3d	; 61
     d5a:	8d 2c       	mov	r8, r13
			{
				uint16_t ReportSize = 0;
     d5c:	1b 82       	std	Y+3, r1	; 0x03
     d5e:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     d60:	80 91 18 01 	lds	r24, 0x0118
     d64:	00 91 19 01 	lds	r16, 0x0119
     d68:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     d6a:	f7 01       	movw	r30, r14
     d6c:	40 85       	ldd	r20, Z+8	; 0x08
     d6e:	c4 1a       	sub	r12, r20
     d70:	d1 08       	sbc	r13, r1
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de be       	out	0x3e, r13	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd be       	out	0x3d, r12	; 61
     d7c:	08 94       	sec
     d7e:	c1 1c       	adc	r12, r1
     d80:	d1 1c       	adc	r13, r1
     d82:	bc 2c       	mov	r11, r12
     d84:	ad 2c       	mov	r10, r13

				memset(ReportData, 0, sizeof(ReportData));
     d86:	c6 01       	movw	r24, r12
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	d9 d1       	rcall	.+946    	; 0x1142 <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     d90:	40 2f       	mov	r20, r16
     d92:	41 50       	subi	r20, 0x01	; 1
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     d94:	c7 01       	movw	r24, r14
     d96:	be 01       	movw	r22, r28
     d98:	6f 5f       	subi	r22, 0xFF	; 255
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	96 01       	movw	r18, r12
     d9e:	8e 01       	movw	r16, r28
     da0:	0e 5f       	subi	r16, 0xFE	; 254
     da2:	1f 4f       	sbci	r17, 0xFF	; 255
     da4:	45 da       	rcall	.-2934   	; 0x230 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     da6:	f7 01       	movw	r30, r14
     da8:	26 81       	ldd	r18, Z+6	; 0x06
     daa:	37 81       	ldd	r19, Z+7	; 0x07
     dac:	21 15       	cp	r18, r1
     dae:	31 05       	cpc	r19, r1
     db0:	29 f0       	breq	.+10     	; 0xdbc <HID_Device_ProcessControlRequest+0xe8>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     db2:	40 85       	ldd	r20, Z+8	; 0x08
     db4:	c9 01       	movw	r24, r18
     db6:	b6 01       	movw	r22, r12
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	ba d1       	rcall	.+884    	; 0x1130 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dbc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dc0:	80 91 e8 00 	lds	r24, 0x00E8
     dc4:	87 7f       	andi	r24, 0xF7	; 247
     dc6:	80 93 e8 00 	sts	0x00E8, r24
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     dca:	6a 81       	ldd	r22, Y+2	; 0x02
     dcc:	7b 81       	ldd	r23, Y+3	; 0x03
     dce:	8b 2d       	mov	r24, r11
     dd0:	9a 2d       	mov	r25, r10
     dd2:	1e db       	rcall	.-2500   	; 0x410 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dd4:	80 91 e8 00 	lds	r24, 0x00E8
     dd8:	8b 77       	andi	r24, 0x7B	; 123
     dda:	80 93 e8 00 	sts	0x00E8, r24
     dde:	94 01       	movw	r18, r8
     de0:	3e c0       	rjmp	.+124    	; 0xe5e <HID_Device_ProcessControlRequest+0x18a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     de2:	80 91 16 01 	lds	r24, 0x0116
     de6:	81 32       	cpi	r24, 0x21	; 33
     de8:	09 f0       	breq	.+2      	; 0xdec <HID_Device_ProcessControlRequest+0x118>
     dea:	9a c0       	rjmp	.+308    	; 0xf20 <HID_Device_ProcessControlRequest+0x24c>
     dec:	cd b6       	in	r12, 0x3d	; 61
     dee:	de b6       	in	r13, 0x3e	; 62
     df0:	bd b6       	in	r11, 0x3d	; 61
     df2:	9d 2c       	mov	r9, r13
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     df4:	00 91 1c 01 	lds	r16, 0x011C
     df8:	10 91 1d 01 	lds	r17, 0x011D
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     dfc:	a0 90 18 01 	lds	r10, 0x0118
     e00:	80 90 19 01 	lds	r8, 0x0119
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     e04:	8d b7       	in	r24, 0x3d	; 61
     e06:	9e b7       	in	r25, 0x3e	; 62
     e08:	80 1b       	sub	r24, r16
     e0a:	91 0b       	sbc	r25, r17
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	9e bf       	out	0x3e, r25	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	8d bf       	out	0x3d, r24	; 61
     e16:	cd b6       	in	r12, 0x3d	; 61
     e18:	de b6       	in	r13, 0x3e	; 62
     e1a:	08 94       	sec
     e1c:	c1 1c       	adc	r12, r1
     e1e:	d1 1c       	adc	r13, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e20:	80 91 e8 00 	lds	r24, 0x00E8
     e24:	87 7f       	andi	r24, 0xF7	; 247
     e26:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     e2a:	c6 01       	movw	r24, r12
     e2c:	b8 01       	movw	r22, r16
     e2e:	4b db       	rcall	.-2410   	; 0x4c6 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e30:	80 91 e8 00 	lds	r24, 0x00E8
     e34:	8e 77       	andi	r24, 0x7E	; 126
     e36:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	aa 20       	and	r10, r10
     e40:	11 f4       	brne	.+4      	; 0xe46 <HID_Device_ProcessControlRequest+0x172>
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     e46:	48 2d       	mov	r20, r8
     e48:	41 50       	subi	r20, 0x01	; 1

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     e4a:	96 01       	movw	r18, r12
     e4c:	28 0f       	add	r18, r24
     e4e:	39 1f       	adc	r19, r25
     e50:	08 1b       	sub	r16, r24
     e52:	19 0b       	sbc	r17, r25
     e54:	c7 01       	movw	r24, r14
     e56:	6a 2d       	mov	r22, r10
     e58:	3e da       	rcall	.-2948   	; 0x2d6 <CALLBACK_HID_Device_ProcessHIDReport>
     e5a:	3b 2d       	mov	r19, r11
     e5c:	29 2d       	mov	r18, r9
     e5e:	83 2f       	mov	r24, r19
     e60:	92 2f       	mov	r25, r18
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	9e bf       	out	0x3e, r25	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	8d bf       	out	0x3d, r24	; 61
     e6c:	59 c0       	rjmp	.+178    	; 0xf20 <HID_Device_ProcessControlRequest+0x24c>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e6e:	80 91 16 01 	lds	r24, 0x0116
     e72:	81 3a       	cpi	r24, 0xA1	; 161
     e74:	09 f0       	breq	.+2      	; 0xe78 <HID_Device_ProcessControlRequest+0x1a4>
     e76:	54 c0       	rjmp	.+168    	; 0xf20 <HID_Device_ProcessControlRequest+0x24c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e78:	80 91 e8 00 	lds	r24, 0x00E8
     e7c:	87 7f       	andi	r24, 0xF7	; 247
     e7e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e82:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     e86:	80 ff       	sbrs	r24, 0
     e88:	fc cf       	rjmp	.-8      	; 0xe82 <HID_Device_ProcessControlRequest+0x1ae>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     e8a:	f7 01       	movw	r30, r14
     e8c:	81 85       	ldd	r24, Z+9	; 0x09
     e8e:	40 c0       	rjmp	.+128    	; 0xf10 <HID_Device_ProcessControlRequest+0x23c>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e90:	80 91 16 01 	lds	r24, 0x0116
     e94:	81 32       	cpi	r24, 0x21	; 33
     e96:	09 f0       	breq	.+2      	; 0xe9a <HID_Device_ProcessControlRequest+0x1c6>
     e98:	43 c0       	rjmp	.+134    	; 0xf20 <HID_Device_ProcessControlRequest+0x24c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e9a:	80 91 e8 00 	lds	r24, 0x00E8
     e9e:	87 7f       	andi	r24, 0xF7	; 247
     ea0:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     ea4:	26 dc       	rcall	.-1972   	; 0x6f2 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     ea6:	90 91 18 01 	lds	r25, 0x0118
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	99 23       	and	r25, r25
     eae:	09 f4       	brne	.+2      	; 0xeb2 <HID_Device_ProcessControlRequest+0x1de>
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	f7 01       	movw	r30, r14
     eb4:	81 87       	std	Z+9, r24	; 0x09
     eb6:	34 c0       	rjmp	.+104    	; 0xf20 <HID_Device_ProcessControlRequest+0x24c>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     eb8:	80 91 16 01 	lds	r24, 0x0116
     ebc:	81 32       	cpi	r24, 0x21	; 33
     ebe:	81 f5       	brne	.+96     	; 0xf20 <HID_Device_ProcessControlRequest+0x24c>
     ec0:	80 91 e8 00 	lds	r24, 0x00E8
     ec4:	87 7f       	andi	r24, 0xF7	; 247
     ec6:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     eca:	13 dc       	rcall	.-2010   	; 0x6f2 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     ecc:	80 91 18 01 	lds	r24, 0x0118
     ed0:	90 91 19 01 	lds	r25, 0x0119
     ed4:	80 70       	andi	r24, 0x00	; 0
     ed6:	36 e0       	ldi	r19, 0x06	; 6
     ed8:	96 95       	lsr	r25
     eda:	87 95       	ror	r24
     edc:	3a 95       	dec	r19
     ede:	e1 f7       	brne	.-8      	; 0xed8 <HID_Device_ProcessControlRequest+0x204>
     ee0:	f7 01       	movw	r30, r14
     ee2:	95 87       	std	Z+13, r25	; 0x0d
     ee4:	84 87       	std	Z+12, r24	; 0x0c
     ee6:	1c c0       	rjmp	.+56     	; 0xf20 <HID_Device_ProcessControlRequest+0x24c>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     ee8:	80 91 16 01 	lds	r24, 0x0116
     eec:	81 3a       	cpi	r24, 0xA1	; 161
     eee:	c1 f4       	brne	.+48     	; 0xf20 <HID_Device_ProcessControlRequest+0x24c>
     ef0:	80 91 e8 00 	lds	r24, 0x00E8
     ef4:	87 7f       	andi	r24, 0xF7	; 247
     ef6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     efa:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     efe:	80 ff       	sbrs	r24, 0
     f00:	fc cf       	rjmp	.-8      	; 0xefa <HID_Device_ProcessControlRequest+0x226>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     f02:	f7 01       	movw	r30, r14
     f04:	84 85       	ldd	r24, Z+12	; 0x0c
     f06:	95 85       	ldd	r25, Z+13	; 0x0d
     f08:	96 95       	lsr	r25
     f0a:	87 95       	ror	r24
     f0c:	96 95       	lsr	r25
     f0e:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f10:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f14:	80 91 e8 00 	lds	r24, 0x00E8
     f18:	8e 77       	andi	r24, 0x7E	; 126
     f1a:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     f1e:	e9 db       	rcall	.-2094   	; 0x6f2 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	7e be       	out	0x3e, r7	; 62
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	6d be       	out	0x3d, r6	; 61
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	df 90       	pop	r13
     f3e:	cf 90       	pop	r12
     f40:	bf 90       	pop	r11
     f42:	af 90       	pop	r10
     f44:	9f 90       	pop	r9
     f46:	8f 90       	pop	r8
     f48:	7f 90       	pop	r7
     f4a:	6f 90       	pop	r6
     f4c:	08 95       	ret

00000f4e <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     f54:	09 96       	adiw	r24, 0x09	; 9
     f56:	dc 01       	movw	r26, r24
     f58:	87 e0       	ldi	r24, 0x07	; 7
     f5a:	ed 01       	movw	r28, r26
     f5c:	19 92       	st	Y+, r1
     f5e:	8a 95       	dec	r24
     f60:	e9 f7       	brne	.-6      	; 0xf5c <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     f66:	84 ef       	ldi	r24, 0xF4	; 244
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	95 87       	std	Z+13, r25	; 0x0d
     f6c:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     f6e:	83 e0       	ldi	r24, 0x03	; 3
     f70:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     f72:	cf 01       	movw	r24, r30
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	61 e0       	ldi	r22, 0x01	; 1
     f78:	78 db       	rcall	.-2320   	; 0x66a <Endpoint_ConfigureEndpointTable>
	  return false;	
	
	return true;
}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     f80:	5f 92       	push	r5
     f82:	6f 92       	push	r6
     f84:	7f 92       	push	r7
     f86:	8f 92       	push	r8
     f88:	9f 92       	push	r9
     f8a:	af 92       	push	r10
     f8c:	bf 92       	push	r11
     f8e:	cf 92       	push	r12
     f90:	df 92       	push	r13
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <HID_Device_USBTask+0x20>
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <HID_Device_USBTask+0x22>
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     fa8:	6d b6       	in	r6, 0x3d	; 61
     faa:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     fac:	8e b3       	in	r24, 0x1e	; 30
     fae:	84 30       	cpi	r24, 0x04	; 4
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <HID_Device_USBTask+0x34>
     fb2:	98 c0       	rjmp	.+304    	; 0x10e4 <HID_Device_USBTask+0x164>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     fb4:	80 91 e4 00 	lds	r24, 0x00E4
     fb8:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     fbc:	f7 01       	movw	r30, r14
     fbe:	22 85       	ldd	r18, Z+10	; 0x0a
     fc0:	33 85       	ldd	r19, Z+11	; 0x0b
     fc2:	28 17       	cp	r18, r24
     fc4:	39 07       	cpc	r19, r25
     fc6:	09 f4       	brne	.+2      	; 0xfca <HID_Device_USBTask+0x4a>
     fc8:	8d c0       	rjmp	.+282    	; 0x10e4 <HID_Device_USBTask+0x164>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fca:	81 81       	ldd	r24, Z+1	; 0x01
     fcc:	8f 70       	andi	r24, 0x0F	; 15
     fce:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     fd2:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     fd6:	85 ff       	sbrs	r24, 5
     fd8:	85 c0       	rjmp	.+266    	; 0x10e4 <HID_Device_USBTask+0x164>
     fda:	8d b6       	in	r8, 0x3d	; 61
     fdc:	57 2c       	mov	r5, r7
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     fde:	40 85       	ldd	r20, Z+8	; 0x08
     fe0:	cd b6       	in	r12, 0x3d	; 61
     fe2:	de b6       	in	r13, 0x3e	; 62
     fe4:	c4 1a       	sub	r12, r20
     fe6:	d1 08       	sbc	r13, r1
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de be       	out	0x3e, r13	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd be       	out	0x3d, r12	; 61
     ff2:	0d b7       	in	r16, 0x3d	; 61
     ff4:	1e b7       	in	r17, 0x3e	; 62
     ff6:	0f 5f       	subi	r16, 0xFF	; 255
     ff8:	1f 4f       	sbci	r17, 0xFF	; 255
     ffa:	b0 2e       	mov	r11, r16
     ffc:	a1 2e       	mov	r10, r17
		uint8_t  ReportID     = 0;
     ffe:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    1000:	1b 82       	std	Y+3, r1	; 0x03
    1002:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    1004:	c8 01       	movw	r24, r16
    1006:	60 e0       	ldi	r22, 0x00	; 0
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	9a d0       	rcall	.+308    	; 0x1142 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    100e:	c7 01       	movw	r24, r14
    1010:	be 01       	movw	r22, r28
    1012:	6f 5f       	subi	r22, 0xFF	; 255
    1014:	7f 4f       	sbci	r23, 0xFF	; 255
    1016:	40 e0       	ldi	r20, 0x00	; 0
    1018:	98 01       	movw	r18, r16
    101a:	8e 01       	movw	r16, r28
    101c:	0e 5f       	subi	r16, 0xFE	; 254
    101e:	1f 4f       	sbci	r17, 0xFF	; 255
    1020:	07 d9       	rcall	.-3570   	; 0x230 <CALLBACK_HID_Device_CreateHIDReport>
    1022:	98 2e       	mov	r9, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1024:	f7 01       	movw	r30, r14
    1026:	84 85       	ldd	r24, Z+12	; 0x0c
    1028:	95 85       	ldd	r25, Z+13	; 0x0d
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	59 f0       	breq	.+22     	; 0x1044 <HID_Device_USBTask+0xc4>
	  return false;	
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	26 85       	ldd	r18, Z+14	; 0x0e
    1034:	37 85       	ldd	r19, Z+15	; 0x0f
    1036:	21 15       	cp	r18, r1
    1038:	31 05       	cpc	r19, r1
    103a:	11 f0       	breq	.+4      	; 0x1040 <HID_Device_USBTask+0xc0>
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	90 e0       	ldi	r25, 0x00	; 0
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1040:	6c 01       	movw	r12, r24
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <HID_Device_USBTask+0xc8>
    1044:	cc 24       	eor	r12, r12
    1046:	dd 24       	eor	r13, r13

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1048:	f7 01       	movw	r30, r14
    104a:	06 81       	ldd	r16, Z+6	; 0x06
    104c:	17 81       	ldd	r17, Z+7	; 0x07
    104e:	01 15       	cp	r16, r1
    1050:	11 05       	cpc	r17, r1
    1052:	a1 f0       	breq	.+40     	; 0x107c <HID_Device_USBTask+0xfc>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1054:	4a 81       	ldd	r20, Y+2	; 0x02
    1056:	5b 81       	ldd	r21, Y+3	; 0x03
    1058:	8b 2d       	mov	r24, r11
    105a:	9a 2d       	mov	r25, r10
    105c:	b8 01       	movw	r22, r16
    105e:	5b d0       	rcall	.+182    	; 0x1116 <memcmp>
    1060:	21 e0       	ldi	r18, 0x01	; 1
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	09 f4       	brne	.+2      	; 0x1068 <HID_Device_USBTask+0xe8>
    1066:	20 e0       	ldi	r18, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1068:	f7 01       	movw	r30, r14
    106a:	40 85       	ldd	r20, Z+8	; 0x08
    106c:	c8 01       	movw	r24, r16
    106e:	6b 2d       	mov	r22, r11
    1070:	7a 2d       	mov	r23, r10
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	2c 83       	std	Y+4, r18	; 0x04
    1076:	5c d0       	rcall	.+184    	; 0x1130 <memcpy>
    1078:	2c 81       	ldd	r18, Y+4	; 0x04
    107a:	01 c0       	rjmp	.+2      	; 0x107e <HID_Device_USBTask+0xfe>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    107c:	20 e0       	ldi	r18, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	9b 81       	ldd	r25, Y+3	; 0x03
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	09 f1       	breq	.+66     	; 0x10c8 <HID_Device_USBTask+0x148>
    1086:	99 20       	and	r9, r9
    1088:	29 f4       	brne	.+10     	; 0x1094 <HID_Device_USBTask+0x114>
    108a:	22 23       	and	r18, r18
    108c:	19 f4       	brne	.+6      	; 0x1094 <HID_Device_USBTask+0x114>
    108e:	c1 14       	cp	r12, r1
    1090:	d1 04       	cpc	r13, r1
    1092:	d1 f0       	breq	.+52     	; 0x10c8 <HID_Device_USBTask+0x148>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1094:	f7 01       	movw	r30, r14
    1096:	84 85       	ldd	r24, Z+12	; 0x0c
    1098:	95 85       	ldd	r25, Z+13	; 0x0d
    109a:	97 87       	std	Z+15, r25	; 0x0f
    109c:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    109e:	81 81       	ldd	r24, Z+1	; 0x01
    10a0:	8f 70       	andi	r24, 0x0F	; 15
    10a2:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	88 23       	and	r24, r24
    10aa:	11 f0       	breq	.+4      	; 0x10b0 <HID_Device_USBTask+0x130>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10ac:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    10b0:	6a 81       	ldd	r22, Y+2	; 0x02
    10b2:	7b 81       	ldd	r23, Y+3	; 0x03
    10b4:	8b 2d       	mov	r24, r11
    10b6:	9a 2d       	mov	r25, r10
    10b8:	40 e0       	ldi	r20, 0x00	; 0
    10ba:	50 e0       	ldi	r21, 0x00	; 0
    10bc:	4b d9       	rcall	.-3434   	; 0x354 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10be:	80 91 e8 00 	lds	r24, 0x00E8
    10c2:	8e 77       	andi	r24, 0x7E	; 126
    10c4:	80 93 e8 00 	sts	0x00E8, r24
    10c8:	80 91 e4 00 	lds	r24, 0x00E4
    10cc:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    10d0:	f7 01       	movw	r30, r14
    10d2:	93 87       	std	Z+11, r25	; 0x0b
    10d4:	82 87       	std	Z+10, r24	; 0x0a
    10d6:	88 2d       	mov	r24, r8
    10d8:	95 2d       	mov	r25, r5
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	9e bf       	out	0x3e, r25	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	8d bf       	out	0x3d, r24	; 61
	}
}
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	7e be       	out	0x3e, r7	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	6d be       	out	0x3d, r6	; 61
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	df 90       	pop	r13
    1104:	cf 90       	pop	r12
    1106:	bf 90       	pop	r11
    1108:	af 90       	pop	r10
    110a:	9f 90       	pop	r9
    110c:	8f 90       	pop	r8
    110e:	7f 90       	pop	r7
    1110:	6f 90       	pop	r6
    1112:	5f 90       	pop	r5
    1114:	08 95       	ret

00001116 <memcmp>:
    1116:	fb 01       	movw	r30, r22
    1118:	dc 01       	movw	r26, r24
    111a:	04 c0       	rjmp	.+8      	; 0x1124 <memcmp+0xe>
    111c:	8d 91       	ld	r24, X+
    111e:	01 90       	ld	r0, Z+
    1120:	80 19       	sub	r24, r0
    1122:	21 f4       	brne	.+8      	; 0x112c <memcmp+0x16>
    1124:	41 50       	subi	r20, 0x01	; 1
    1126:	50 40       	sbci	r21, 0x00	; 0
    1128:	c8 f7       	brcc	.-14     	; 0x111c <memcmp+0x6>
    112a:	88 1b       	sub	r24, r24
    112c:	99 0b       	sbc	r25, r25
    112e:	08 95       	ret

00001130 <memcpy>:
    1130:	fb 01       	movw	r30, r22
    1132:	dc 01       	movw	r26, r24
    1134:	02 c0       	rjmp	.+4      	; 0x113a <memcpy+0xa>
    1136:	01 90       	ld	r0, Z+
    1138:	0d 92       	st	X+, r0
    113a:	41 50       	subi	r20, 0x01	; 1
    113c:	50 40       	sbci	r21, 0x00	; 0
    113e:	d8 f7       	brcc	.-10     	; 0x1136 <memcpy+0x6>
    1140:	08 95       	ret

00001142 <memset>:
    1142:	dc 01       	movw	r26, r24
    1144:	01 c0       	rjmp	.+2      	; 0x1148 <memset+0x6>
    1146:	6d 93       	st	X+, r22
    1148:	41 50       	subi	r20, 0x01	; 1
    114a:	50 40       	sbci	r21, 0x00	; 0
    114c:	e0 f7       	brcc	.-8      	; 0x1146 <memset+0x4>
    114e:	08 95       	ret

00001150 <_exit>:
    1150:	f8 94       	cli

00001152 <__stop_program>:
    1152:	ff cf       	rjmp	.-2      	; 0x1152 <__stop_program>
