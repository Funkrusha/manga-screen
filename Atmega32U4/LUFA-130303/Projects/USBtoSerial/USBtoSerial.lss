
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00001068  000010fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001068  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000124  0080011e  0080011e  0000111a  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  0000111c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004a8  00000000  00000000  00001d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000cac  00000000  00000000  000021cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000894c  00000000  00000000  00002e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000208f  00000000  00000000  0000b7c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006f5b  00000000  00000000  0000d852  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000710  00000000  00000000  000147b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003a9a  00000000  00000000  00014ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000436b  00000000  00000000  0001895a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000010f6  00000000  00000000  0001ccc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000700  00000000  00000000  0001ddbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
       0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
       4:	b5 c0       	rjmp	.+362    	; 0x170 <__bad_interrupt>
       6:	00 00       	nop
       8:	b3 c0       	rjmp	.+358    	; 0x170 <__bad_interrupt>
       a:	00 00       	nop
       c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
       e:	00 00       	nop
      10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
      12:	00 00       	nop
      14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
      16:	00 00       	nop
      18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
      22:	00 00       	nop
      24:	a5 c0       	rjmp	.+330    	; 0x170 <__bad_interrupt>
      26:	00 00       	nop
      28:	02 c4       	rjmp	.+2052   	; 0x82e <__vector_10>
      2a:	00 00       	nop
      2c:	c8 c4       	rjmp	.+2448   	; 0x9be <__vector_11>
      2e:	00 00       	nop
      30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
      32:	00 00       	nop
      34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
      36:	00 00       	nop
      38:	9b c0       	rjmp	.+310    	; 0x170 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	99 c0       	rjmp	.+306    	; 0x170 <__bad_interrupt>
      3e:	00 00       	nop
      40:	97 c0       	rjmp	.+302    	; 0x170 <__bad_interrupt>
      42:	00 00       	nop
      44:	95 c0       	rjmp	.+298    	; 0x170 <__bad_interrupt>
      46:	00 00       	nop
      48:	93 c0       	rjmp	.+294    	; 0x170 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
      52:	00 00       	nop
      54:	8d c0       	rjmp	.+282    	; 0x170 <__bad_interrupt>
      56:	00 00       	nop
      58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	89 c0       	rjmp	.+274    	; 0x170 <__bad_interrupt>
      5e:	00 00       	nop
      60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
      62:	00 00       	nop
      64:	65 c1       	rjmp	.+714    	; 0x330 <__vector_25>
      66:	00 00       	nop
      68:	83 c0       	rjmp	.+262    	; 0x170 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
      72:	00 00       	nop
      74:	7d c0       	rjmp	.+250    	; 0x170 <__bad_interrupt>
      76:	00 00       	nop
      78:	7b c0       	rjmp	.+246    	; 0x170 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	79 c0       	rjmp	.+242    	; 0x170 <__bad_interrupt>
      7e:	00 00       	nop
      80:	77 c0       	rjmp	.+238    	; 0x170 <__bad_interrupt>
      82:	00 00       	nop
      84:	75 c0       	rjmp	.+234    	; 0x170 <__bad_interrupt>
      86:	00 00       	nop
      88:	73 c0       	rjmp	.+230    	; 0x170 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	71 c0       	rjmp	.+226    	; 0x170 <__bad_interrupt>
      8e:	00 00       	nop
      90:	6f c0       	rjmp	.+222    	; 0x170 <__bad_interrupt>
      92:	00 00       	nop
      94:	6d c0       	rjmp	.+218    	; 0x170 <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      ba:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      da:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000e8 <LanguageString>:
      e8:	04 03 09 04                                         ....

000000ec <ManufacturerString>:
      ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <ProductString>:
     106:	2e 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     ..L.U.F.A. .U.S.
     116:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
     126:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d0 e2       	ldi	r29, 0x20	; 32
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
     142:	11 e0       	ldi	r17, 0x01	; 1
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	e8 e6       	ldi	r30, 0x68	; 104
     14a:	f0 e1       	ldi	r31, 0x10	; 16
     14c:	00 e0       	ldi	r16, 0x00	; 0
     14e:	0b bf       	out	0x3b, r16	; 59
     150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x14>
     152:	07 90       	elpm	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	ae 31       	cpi	r26, 0x1E	; 30
     158:	b1 07       	cpc	r27, r17
     15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0x10>

0000015c <__do_clear_bss>:
     15c:	12 e0       	ldi	r17, 0x02	; 2
     15e:	ae e1       	ldi	r26, 0x1E	; 30
     160:	b1 e0       	ldi	r27, 0x01	; 1
     162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
     164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
     166:	a2 34       	cpi	r26, 0x42	; 66
     168:	b1 07       	cpc	r27, r17
     16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>
     16c:	6b d0       	rcall	.+214    	; 0x244 <main>
     16e:	7a c7       	rjmp	.+3828   	; 0x1064 <_exit>

00000170 <__bad_interrupt>:
     170:	47 cf       	rjmp	.-370    	; 0x0 <__vectors>

00000172 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     172:	9b b1       	in	r25, 0x0b	; 11
     174:	9f 70       	andi	r25, 0x0F	; 15
     176:	98 2b       	or	r25, r24
     178:	9b b9       	out	0x0b, r25	; 11
			}
     17a:	08 95       	ret

0000017c <RingBuffer_Insert>:
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     17c:	fc 01       	movw	r30, r24

			*Buffer->In = Data;
     17e:	a0 81       	ld	r26, Z
     180:	b1 81       	ldd	r27, Z+1	; 0x01
     182:	6c 93       	st	X, r22

			if (++Buffer->In == Buffer->End)
     184:	80 81       	ld	r24, Z
     186:	91 81       	ldd	r25, Z+1	; 0x01
     188:	01 96       	adiw	r24, 0x01	; 1
     18a:	91 83       	std	Z+1, r25	; 0x01
     18c:	80 83       	st	Z, r24
     18e:	26 81       	ldd	r18, Z+6	; 0x06
     190:	37 81       	ldd	r19, Z+7	; 0x07
     192:	82 17       	cp	r24, r18
     194:	93 07       	cpc	r25, r19
     196:	21 f4       	brne	.+8      	; 0x1a0 <RingBuffer_Insert+0x24>
			  Buffer->In = Buffer->Start;
     198:	84 81       	ldd	r24, Z+4	; 0x04
     19a:	95 81       	ldd	r25, Z+5	; 0x05
     19c:	91 83       	std	Z+1, r25	; 0x01
     19e:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1a0:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1a2:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     1a4:	82 85       	ldd	r24, Z+10	; 0x0a
     1a6:	93 85       	ldd	r25, Z+11	; 0x0b
     1a8:	01 96       	adiw	r24, 0x01	; 1
     1aa:	93 87       	std	Z+11, r25	; 0x0b
     1ac:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1ae:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);
		}
     1b0:	08 95       	ret

000001b2 <RingBuffer_Remove>:
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1b2:	fc 01       	movw	r30, r24

			uint8_t Data = *Buffer->Out;
     1b4:	a2 81       	ldd	r26, Z+2	; 0x02
     1b6:	b3 81       	ldd	r27, Z+3	; 0x03
     1b8:	8d 91       	ld	r24, X+

			if (++Buffer->Out == Buffer->End)
     1ba:	b3 83       	std	Z+3, r27	; 0x03
     1bc:	a2 83       	std	Z+2, r26	; 0x02
     1be:	26 81       	ldd	r18, Z+6	; 0x06
     1c0:	37 81       	ldd	r19, Z+7	; 0x07
     1c2:	a2 17       	cp	r26, r18
     1c4:	b3 07       	cpc	r27, r19
     1c6:	21 f4       	brne	.+8      	; 0x1d0 <RingBuffer_Remove+0x1e>
			  Buffer->Out = Buffer->Start;
     1c8:	24 81       	ldd	r18, Z+4	; 0x04
     1ca:	35 81       	ldd	r19, Z+5	; 0x05
     1cc:	33 83       	std	Z+3, r19	; 0x03
     1ce:	22 83       	std	Z+2, r18	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1d0:	9f b7       	in	r25, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1d2:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     1d4:	22 85       	ldd	r18, Z+10	; 0x0a
     1d6:	33 85       	ldd	r19, Z+11	; 0x0b
     1d8:	21 50       	subi	r18, 0x01	; 1
     1da:	30 40       	sbci	r19, 0x00	; 0
     1dc:	33 87       	std	Z+11, r19	; 0x0b
     1de:	22 87       	std	Z+10, r18	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1e0:	9f bf       	out	0x3f, r25	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);

			return Data;
		}
     1e2:	08 95       	ret

000001e4 <RingBuffer_InitBuffer.clone.0>:
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1e4:	fc 01       	movw	r30, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1e6:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1e8:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     1ea:	71 83       	std	Z+1, r23	; 0x01
     1ec:	60 83       	st	Z, r22
			Buffer->Out    = DataPtr;
     1ee:	73 83       	std	Z+3, r23	; 0x03
     1f0:	62 83       	std	Z+2, r22	; 0x02
			Buffer->Start  = &DataPtr[0];
     1f2:	75 83       	std	Z+5, r23	; 0x05
     1f4:	64 83       	std	Z+4, r22	; 0x04
			Buffer->End    = &DataPtr[Size];
     1f6:	60 58       	subi	r22, 0x80	; 128
     1f8:	7f 4f       	sbci	r23, 0xFF	; 255
     1fa:	77 83       	std	Z+7, r23	; 0x07
     1fc:	66 83       	std	Z+6, r22	; 0x06
			Buffer->Size   = Size;
     1fe:	80 e8       	ldi	r24, 0x80	; 128
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	91 87       	std	Z+9, r25	; 0x09
     204:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     206:	13 86       	std	Z+11, r1	; 0x0b
     208:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     20a:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);
		}
     20c:	08 95       	ret

0000020e <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     20e:	84 b7       	in	r24, 0x34	; 52
     210:	87 7f       	andi	r24, 0xF7	; 247
     212:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     214:	88 e1       	ldi	r24, 0x18	; 24
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	f8 94       	cli
     21a:	80 93 60 00 	sts	0x0060, r24
     21e:	10 92 60 00 	sts	0x0060, r1
     222:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	80 e8       	ldi	r24, 0x80	; 128
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	f8 94       	cli
     22c:	80 93 61 00 	sts	0x0061, r24
     230:	90 93 61 00 	sts	0x0061, r25
     234:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     236:	8a b1       	in	r24, 0x0a	; 10
     238:	80 6f       	ori	r24, 0xF0	; 240
     23a:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     23c:	8b b1       	in	r24, 0x0b	; 11
     23e:	8f 70       	andi	r24, 0x0F	; 15
     240:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
}
     242:	da c2       	rjmp	.+1460   	; 0x7f8 <USB_Init>

00000244 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     244:	1f 93       	push	r17
	SetupHardware();
     246:	e3 df       	rcall	.-58     	; 0x20e <SetupHardware>

	RingBuffer_InitBuffer(&USBtoUSART_Buffer, USBtoUSART_Buffer_Data, sizeof(USBtoUSART_Buffer_Data));
     248:	8a e2       	ldi	r24, 0x2A	; 42
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	66 e3       	ldi	r22, 0x36	; 54
     24e:	71 e0       	ldi	r23, 0x01	; 1
     250:	c9 df       	rcall	.-110    	; 0x1e4 <RingBuffer_InitBuffer.clone.0>
	RingBuffer_InitBuffer(&USARTtoUSB_Buffer, USARTtoUSB_Buffer_Data, sizeof(USARTtoUSB_Buffer_Data));
     252:	8e e1       	ldi	r24, 0x1E	; 30
     254:	91 e0       	ldi	r25, 0x01	; 1
     256:	66 eb       	ldi	r22, 0xB6	; 182
     258:	71 e0       	ldi	r23, 0x01	; 1
     25a:	c4 df       	rcall	.-120    	; 0x1e4 <RingBuffer_InitBuffer.clone.0>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     25c:	80 e1       	ldi	r24, 0x10	; 16
     25e:	89 df       	rcall	.-238    	; 0x172 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     260:	78 94       	sei
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     262:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     264:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     266:	20 91 34 01 	lds	r18, 0x0134
     26a:	30 91 35 01 	lds	r19, 0x0135
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     26e:	8f bf       	out	0x3f, r24	; 63
	GlobalInterruptEnable();

	for (;;)
	{
		/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
     270:	80 91 32 01 	lds	r24, 0x0132
     274:	90 91 33 01 	lds	r25, 0x0133
     278:	28 17       	cp	r18, r24
     27a:	39 07       	cpc	r19, r25
     27c:	49 f0       	breq	.+18     	; 0x290 <main+0x4c>
		{
			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	9c d6       	rcall	.+3384   	; 0xfbc <CDC_Device_ReceiveByte>
     284:	bc 01       	movw	r22, r24

			/* Read bytes from the USB OUT endpoint into the USART transmit buffer */
			if (!(ReceivedByte < 0))
     286:	97 fd       	sbrc	r25, 7
     288:	03 c0       	rjmp	.+6      	; 0x290 <main+0x4c>
			  RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
     28a:	8a e2       	ldi	r24, 0x2A	; 42
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	76 df       	rcall	.-276    	; 0x17c <RingBuffer_Insert>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     290:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     292:	f8 94       	cli
     294:	80 91 28 01 	lds	r24, 0x0128
     298:	90 91 29 01 	lds	r25, 0x0129
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     29c:	2f bf       	out	0x3f, r18	; 63
		}

		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
		if (BufferCount)
     29e:	00 97       	sbiw	r24, 0x00	; 0
     2a0:	01 f1       	breq	.+64     	; 0x2e2 <main+0x9e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2a2:	20 91 01 01 	lds	r18, 0x0101
     2a6:	2f 70       	andi	r18, 0x0F	; 15
     2a8:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     2ac:	20 91 e8 00 	lds	r18, 0x00E8
		{
			Endpoint_SelectEndpoint(VirtualSerial_CDC_Interface.Config.DataINEndpoint.Address);

			/* Check if a packet is already enqueued to the host - if so, we shouldn't try to send more data
			 * until it completes as there is a chance nothing is listening and a lengthy timeout could occur */
			if (Endpoint_IsINReady())
     2b0:	20 ff       	sbrs	r18, 0
     2b2:	17 c0       	rjmp	.+46     	; 0x2e2 <main+0x9e>
			{
				/* Never send more than one bank size less one byte to the host at a time, so that we don't block
				 * while a Zero Length Packet (ZLP) to terminate the transfer is sent if the host isn't listening */
				uint8_t BytesToSend = MIN(BufferCount, (CDC_TXRX_EPSIZE - 1));
     2b4:	80 31       	cpi	r24, 0x10	; 16
     2b6:	91 05       	cpc	r25, r1
     2b8:	10 f0       	brcs	.+4      	; 0x2be <main+0x7a>
     2ba:	8f e0       	ldi	r24, 0x0F	; 15
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	18 2f       	mov	r17, r24

				/* Read bytes from the USART receive buffer into the USB IN endpoint */
				while (BytesToSend--)
     2c0:	0e c0       	rjmp	.+28     	; 0x2de <main+0x9a>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer)
		{
			return *Buffer->Out;
     2c2:	e0 91 20 01 	lds	r30, 0x0120
     2c6:	f0 91 21 01 	lds	r31, 0x0121
				{
					/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
					if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	60 81       	ld	r22, Z
     2d0:	02 d6       	rcall	.+3076   	; 0xed6 <CDC_Device_SendByte>
     2d2:	11 50       	subi	r17, 0x01	; 1
     2d4:	88 23       	and	r24, r24
     2d6:	29 f4       	brne	.+10     	; 0x2e2 <main+0x9e>
					{
						break;
					}

					/* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
					RingBuffer_Remove(&USARTtoUSB_Buffer);
     2d8:	8e e1       	ldi	r24, 0x1E	; 30
     2da:	91 e0       	ldi	r25, 0x01	; 1
     2dc:	6a df       	rcall	.-300    	; 0x1b2 <RingBuffer_Remove>
				/* Never send more than one bank size less one byte to the host at a time, so that we don't block
				 * while a Zero Length Packet (ZLP) to terminate the transfer is sent if the host isn't listening */
				uint8_t BytesToSend = MIN(BufferCount, (CDC_TXRX_EPSIZE - 1));

				/* Read bytes from the USART receive buffer into the USB IN endpoint */
				while (BytesToSend--)
     2de:	11 23       	and	r17, r17
     2e0:	81 f7       	brne	.-32     	; 0x2c2 <main+0x7e>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     2e2:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     2e4:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     2e6:	80 91 34 01 	lds	r24, 0x0134
     2ea:	90 91 35 01 	lds	r25, 0x0135
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2ee:	2f bf       	out	0x3f, r18	; 63
				}
			}
		}

		/* Load the next byte from the USART transmit buffer into the USART */
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer)))
     2f0:	00 97       	sbiw	r24, 0x00	; 0
     2f2:	49 f0       	breq	.+18     	; 0x306 <main+0xc2>
		  Serial_SendByte(RingBuffer_Remove(&USBtoUSART_Buffer));
     2f4:	8a e2       	ldi	r24, 0x2A	; 42
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	5c df       	rcall	.-328    	; 0x1b2 <RingBuffer_Remove>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     2fa:	90 91 c8 00 	lds	r25, 0x00C8
     2fe:	95 ff       	sbrs	r25, 5
     300:	fc cf       	rjmp	.-8      	; 0x2fa <main+0xb6>
				UDR1 = DataByte;
     302:	80 93 ce 00 	sts	0x00CE, r24

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	41 d6       	rcall	.+3202   	; 0xf8e <CDC_Device_USBTask>
		USB_USBTask();
     30c:	f9 d4       	rcall	.+2546   	; 0xd00 <USB_USBTask>
	}
     30e:	a9 cf       	rjmp	.-174    	; 0x262 <main+0x1e>

00000310 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     310:	80 ea       	ldi	r24, 0xA0	; 160
}
     312:	2f cf       	rjmp	.-418    	; 0x172 <LEDs_SetAllLEDs>

00000314 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     314:	80 e1       	ldi	r24, 0x10	; 16
}
     316:	2d cf       	rjmp	.-422    	; 0x172 <LEDs_SetAllLEDs>

00000318 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	b8 d5       	rcall	.+2928   	; 0xe8e <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     31e:	80 ff       	sbrs	r24, 0
     320:	02 c0       	rjmp	.+4      	; 0x326 <EVENT_USB_Device_ConfigurationChanged+0xe>
     322:	80 e6       	ldi	r24, 0x60	; 96
     324:	01 c0       	rjmp	.+2      	; 0x328 <EVENT_USB_Device_ConfigurationChanged+0x10>
     326:	80 e9       	ldi	r24, 0x90	; 144
}
     328:	24 cf       	rjmp	.-440    	; 0x172 <LEDs_SetAllLEDs>

0000032a <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	91 e0       	ldi	r25, 0x01	; 1
}
     32e:	03 c5       	rjmp	.+2566   	; 0xd36 <CDC_Device_ProcessControlRequest>

00000330 <__vector_25>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     330:	1f 92       	push	r1
     332:	0f 92       	push	r0
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	0f 92       	push	r0
     338:	0b b6       	in	r0, 0x3b	; 59
     33a:	0f 92       	push	r0
     33c:	11 24       	eor	r1, r1
     33e:	2f 93       	push	r18
     340:	3f 93       	push	r19
     342:	4f 93       	push	r20
     344:	5f 93       	push	r21
     346:	6f 93       	push	r22
     348:	7f 93       	push	r23
     34a:	8f 93       	push	r24
     34c:	9f 93       	push	r25
     34e:	af 93       	push	r26
     350:	bf 93       	push	r27
     352:	ef 93       	push	r30
     354:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
     356:	60 91 ce 00 	lds	r22, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
     35a:	8e b3       	in	r24, 0x1e	; 30
     35c:	84 30       	cpi	r24, 0x04	; 4
     35e:	19 f4       	brne	.+6      	; 0x366 <__vector_25+0x36>
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
     360:	8e e1       	ldi	r24, 0x1E	; 30
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	0b df       	rcall	.-490    	; 0x17c <RingBuffer_Insert>
}
     366:	ff 91       	pop	r31
     368:	ef 91       	pop	r30
     36a:	bf 91       	pop	r27
     36c:	af 91       	pop	r26
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	7f 91       	pop	r23
     374:	6f 91       	pop	r22
     376:	5f 91       	pop	r21
     378:	4f 91       	pop	r20
     37a:	3f 91       	pop	r19
     37c:	2f 91       	pop	r18
     37e:	0f 90       	pop	r0
     380:	0b be       	out	0x3b, r0	; 59
     382:	0f 90       	pop	r0
     384:	0f be       	out	0x3f, r0	; 63
     386:	0f 90       	pop	r0
     388:	1f 90       	pop	r1
     38a:	18 95       	reti

0000038c <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     38c:	1f 93       	push	r17
     38e:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     390:	a1 8d       	ldd	r26, Z+25	; 0x19
     392:	a1 50       	subi	r26, 0x01	; 1
     394:	a2 30       	cpi	r26, 0x02	; 2
     396:	28 f4       	brcc	.+10     	; 0x3a2 <EVENT_CDC_Device_LineEncodingChanged+0x16>
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	a5 5e       	subi	r26, 0xE5	; 229
     39c:	be 4f       	sbci	r27, 0xFE	; 254
     39e:	1c 91       	ld	r17, X
     3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <EVENT_CDC_Device_LineEncodingChanged+0x18>
     3a2:	10 e0       	ldi	r17, 0x00	; 0
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     3a4:	80 8d       	ldd	r24, Z+24	; 0x18
     3a6:	82 30       	cpi	r24, 0x02	; 2
     3a8:	09 f4       	brne	.+2      	; 0x3ac <EVENT_CDC_Device_LineEncodingChanged+0x20>
	  ConfigMask |= (1 << USBS1);
     3aa:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     3ac:	82 8d       	ldd	r24, Z+26	; 0x1a
     3ae:	87 30       	cpi	r24, 0x07	; 7
     3b0:	31 f0       	breq	.+12     	; 0x3be <EVENT_CDC_Device_LineEncodingChanged+0x32>
     3b2:	88 30       	cpi	r24, 0x08	; 8
     3b4:	31 f0       	breq	.+12     	; 0x3c2 <EVENT_CDC_Device_LineEncodingChanged+0x36>
     3b6:	86 30       	cpi	r24, 0x06	; 6
     3b8:	29 f4       	brne	.+10     	; 0x3c4 <EVENT_CDC_Device_LineEncodingChanged+0x38>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
     3ba:	12 60       	ori	r17, 0x02	; 2
			break;
     3bc:	03 c0       	rjmp	.+6      	; 0x3c4 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 7:
			ConfigMask |= (1 << UCSZ11);
     3be:	14 60       	ori	r17, 0x04	; 4
			break;
     3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     3c2:	16 60       	ori	r17, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     3c4:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
     3c8:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
     3cc:	10 92 ca 00 	sts	0x00CA, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     3d0:	24 89       	ldd	r18, Z+20	; 0x14
     3d2:	35 89       	ldd	r19, Z+21	; 0x15
     3d4:	46 89       	ldd	r20, Z+22	; 0x16
     3d6:	57 89       	ldd	r21, Z+23	; 0x17
     3d8:	ca 01       	movw	r24, r20
     3da:	b9 01       	movw	r22, r18
     3dc:	96 95       	lsr	r25
     3de:	87 95       	ror	r24
     3e0:	77 95       	ror	r23
     3e2:	67 95       	ror	r22
     3e4:	60 5c       	subi	r22, 0xC0	; 192
     3e6:	7d 4b       	sbci	r23, 0xBD	; 189
     3e8:	80 4f       	sbci	r24, 0xF0	; 240
     3ea:	9f 4f       	sbci	r25, 0xFF	; 255
     3ec:	19 d6       	rcall	.+3122   	; 0x1020 <__udivmodsi4>
     3ee:	21 50       	subi	r18, 0x01	; 1
     3f0:	30 40       	sbci	r19, 0x00	; 0
     3f2:	30 93 cd 00 	sts	0x00CD, r19
     3f6:	20 93 cc 00 	sts	0x00CC, r18

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
     3fa:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (1 << U2X1);
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     404:	88 e9       	ldi	r24, 0x98	; 152
     406:	80 93 c9 00 	sts	0x00C9, r24
}
     40a:	1f 91       	pop	r17
     40c:	08 95       	ret

0000040e <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     40e:	92 30       	cpi	r25, 0x02	; 2
     410:	29 f0       	breq	.+10     	; 0x41c <CALLBACK_USB_GetDescriptor+0xe>
     412:	93 30       	cpi	r25, 0x03	; 3
     414:	41 f0       	breq	.+16     	; 0x426 <CALLBACK_USB_GetDescriptor+0x18>
     416:	91 30       	cpi	r25, 0x01	; 1
     418:	e9 f4       	brne	.+58     	; 0x454 <CALLBACK_USB_GetDescriptor+0x46>
     41a:	17 c0       	rjmp	.+46     	; 0x44a <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     41c:	2e e3       	ldi	r18, 0x3E	; 62
     41e:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     420:	ea ea       	ldi	r30, 0xAA	; 170
     422:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     424:	1b c0       	rjmp	.+54     	; 0x45c <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     426:	81 30       	cpi	r24, 0x01	; 1
     428:	41 f0       	breq	.+16     	; 0x43a <CALLBACK_USB_GetDescriptor+0x2c>
     42a:	81 30       	cpi	r24, 0x01	; 1
     42c:	18 f0       	brcs	.+6      	; 0x434 <CALLBACK_USB_GetDescriptor+0x26>
     42e:	82 30       	cpi	r24, 0x02	; 2
     430:	89 f4       	brne	.+34     	; 0x454 <CALLBACK_USB_GetDescriptor+0x46>
     432:	06 c0       	rjmp	.+12     	; 0x440 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     434:	e8 ee       	ldi	r30, 0xE8	; 232
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	05 c0       	rjmp	.+10     	; 0x444 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     43a:	ec ee       	ldi	r30, 0xEC	; 236
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	02 c0       	rjmp	.+4      	; 0x444 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     440:	e6 e0       	ldi	r30, 0x06	; 6
     442:	f1 e0       	ldi	r31, 0x01	; 1
     444:	24 91       	lpm	r18, Z+
     446:	30 e0       	ldi	r19, 0x00	; 0
					break;
     448:	09 c0       	rjmp	.+18     	; 0x45c <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     44a:	22 e1       	ldi	r18, 0x12	; 18
     44c:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     44e:	e8 e9       	ldi	r30, 0x98	; 152
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	04 c0       	rjmp	.+8      	; 0x45c <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     458:	e0 e0       	ldi	r30, 0x00	; 0
     45a:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     45c:	da 01       	movw	r26, r20
     45e:	11 96       	adiw	r26, 0x01	; 1
     460:	fc 93       	st	X, r31
     462:	ee 93       	st	-X, r30
	return Size;
}
     464:	c9 01       	movw	r24, r18
     466:	08 95       	ret

00000468 <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     468:	28 2f       	mov	r18, r24
     46a:	39 2f       	mov	r19, r25
     46c:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     46e:	80 91 40 02 	lds	r24, 0x0240
     472:	90 91 41 02 	lds	r25, 0x0241
     476:	86 17       	cp	r24, r22
     478:	97 07       	cpc	r25, r23
     47a:	18 f4       	brcc	.+6      	; 0x482 <Endpoint_Write_Control_Stream_LE+0x1a>
     47c:	bc 01       	movw	r22, r24
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	35 c0       	rjmp	.+106    	; 0x4ec <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     482:	61 15       	cp	r22, r1
     484:	71 05       	cpc	r23, r1
     486:	d9 f7       	brne	.-10     	; 0x47e <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     488:	80 91 e8 00 	lds	r24, 0x00E8
     48c:	8e 77       	andi	r24, 0x7E	; 126
     48e:	80 93 e8 00 	sts	0x00E8, r24
     492:	f5 cf       	rjmp	.-22     	; 0x47e <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     494:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     496:	88 23       	and	r24, r24
     498:	f1 f1       	breq	.+124    	; 0x516 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     49a:	85 30       	cpi	r24, 0x05	; 5
     49c:	c1 f1       	breq	.+112    	; 0x50e <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     49e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     4a2:	83 fd       	sbrc	r24, 3
     4a4:	36 c0       	rjmp	.+108    	; 0x512 <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4a6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     4aa:	82 fd       	sbrc	r24, 2
     4ac:	2a c0       	rjmp	.+84     	; 0x502 <Endpoint_Write_Control_Stream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     4ae:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     4b2:	80 ff       	sbrs	r24, 0
     4b4:	1b c0       	rjmp	.+54     	; 0x4ec <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     4b6:	80 91 f2 00 	lds	r24, 0x00F2
     4ba:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     4be:	06 c0       	rjmp	.+12     	; 0x4cc <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     4c0:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     4c2:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     4c6:	61 50       	subi	r22, 0x01	; 1
     4c8:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     4ca:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     4cc:	61 15       	cp	r22, r1
     4ce:	71 05       	cpc	r23, r1
     4d0:	19 f0       	breq	.+6      	; 0x4d8 <Endpoint_Write_Control_Stream_LE+0x70>
     4d2:	88 30       	cpi	r24, 0x08	; 8
     4d4:	91 05       	cpc	r25, r1
     4d6:	a0 f3       	brcs	.-24     	; 0x4c0 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     4d8:	21 e0       	ldi	r18, 0x01	; 1
     4da:	88 30       	cpi	r24, 0x08	; 8
     4dc:	91 05       	cpc	r25, r1
     4de:	09 f0       	breq	.+2      	; 0x4e2 <Endpoint_Write_Control_Stream_LE+0x7a>
     4e0:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4e2:	80 91 e8 00 	lds	r24, 0x00E8
     4e6:	8e 77       	andi	r24, 0x7E	; 126
     4e8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     4ec:	61 15       	cp	r22, r1
     4ee:	71 05       	cpc	r23, r1
     4f0:	89 f6       	brne	.-94     	; 0x494 <Endpoint_Write_Control_Stream_LE+0x2c>
     4f2:	22 23       	and	r18, r18
     4f4:	79 f6       	brne	.-98     	; 0x494 <Endpoint_Write_Control_Stream_LE+0x2c>
     4f6:	05 c0       	rjmp	.+10     	; 0x502 <Endpoint_Write_Control_Stream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4f8:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4fa:	88 23       	and	r24, r24
     4fc:	61 f0       	breq	.+24     	; 0x516 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4fe:	85 30       	cpi	r24, 0x05	; 5
     500:	61 f0       	breq	.+24     	; 0x51a <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     502:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     506:	82 ff       	sbrs	r24, 2
     508:	f7 cf       	rjmp	.-18     	; 0x4f8 <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     50e:	83 e0       	ldi	r24, 0x03	; 3
     510:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     516:	82 e0       	ldi	r24, 0x02	; 2
     518:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     51a:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     51c:	08 95       	ret

0000051e <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     51e:	e8 2f       	mov	r30, r24
     520:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     522:	80 91 40 02 	lds	r24, 0x0240
     526:	90 91 41 02 	lds	r25, 0x0241
     52a:	86 17       	cp	r24, r22
     52c:	97 07       	cpc	r25, r23
     52e:	18 f4       	brcc	.+6      	; 0x536 <Endpoint_Write_Control_PStream_LE+0x18>
     530:	bc 01       	movw	r22, r24
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	37 c0       	rjmp	.+110    	; 0x5a4 <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     536:	61 15       	cp	r22, r1
     538:	71 05       	cpc	r23, r1
     53a:	d9 f7       	brne	.-10     	; 0x532 <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     53c:	80 91 e8 00 	lds	r24, 0x00E8
     540:	8e 77       	andi	r24, 0x7E	; 126
     542:	80 93 e8 00 	sts	0x00E8, r24
     546:	f5 cf       	rjmp	.-22     	; 0x532 <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     548:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     54a:	88 23       	and	r24, r24
     54c:	09 f4       	brne	.+2      	; 0x550 <Endpoint_Write_Control_PStream_LE+0x32>
     54e:	3f c0       	rjmp	.+126    	; 0x5ce <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     550:	85 30       	cpi	r24, 0x05	; 5
     552:	c9 f1       	breq	.+114    	; 0x5c6 <Endpoint_Write_Control_PStream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     554:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     558:	83 fd       	sbrc	r24, 3
     55a:	37 c0       	rjmp	.+110    	; 0x5ca <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     55c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     560:	82 fd       	sbrc	r24, 2
     562:	2b c0       	rjmp	.+86     	; 0x5ba <Endpoint_Write_Control_PStream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     564:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     568:	80 ff       	sbrs	r24, 0
     56a:	1c c0       	rjmp	.+56     	; 0x5a4 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     56c:	80 91 f2 00 	lds	r24, 0x00F2
     570:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     574:	07 c0       	rjmp	.+14     	; 0x584 <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     576:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     578:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     57c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     57e:	61 50       	subi	r22, 0x01	; 1
     580:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     582:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     584:	61 15       	cp	r22, r1
     586:	71 05       	cpc	r23, r1
     588:	19 f0       	breq	.+6      	; 0x590 <Endpoint_Write_Control_PStream_LE+0x72>
     58a:	88 30       	cpi	r24, 0x08	; 8
     58c:	91 05       	cpc	r25, r1
     58e:	98 f3       	brcs	.-26     	; 0x576 <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	88 30       	cpi	r24, 0x08	; 8
     594:	91 05       	cpc	r25, r1
     596:	09 f0       	breq	.+2      	; 0x59a <Endpoint_Write_Control_PStream_LE+0x7c>
     598:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     59a:	80 91 e8 00 	lds	r24, 0x00E8
     59e:	8e 77       	andi	r24, 0x7E	; 126
     5a0:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     5a4:	61 15       	cp	r22, r1
     5a6:	71 05       	cpc	r23, r1
     5a8:	79 f6       	brne	.-98     	; 0x548 <Endpoint_Write_Control_PStream_LE+0x2a>
     5aa:	22 23       	and	r18, r18
     5ac:	69 f6       	brne	.-102    	; 0x548 <Endpoint_Write_Control_PStream_LE+0x2a>
     5ae:	05 c0       	rjmp	.+10     	; 0x5ba <Endpoint_Write_Control_PStream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5b0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5b2:	88 23       	and	r24, r24
     5b4:	61 f0       	breq	.+24     	; 0x5ce <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5b6:	85 30       	cpi	r24, 0x05	; 5
     5b8:	61 f0       	breq	.+24     	; 0x5d2 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5ba:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     5be:	82 ff       	sbrs	r24, 2
     5c0:	f7 cf       	rjmp	.-18     	; 0x5b0 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     5ce:	82 e0       	ldi	r24, 0x02	; 2
     5d0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5d2:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     5d4:	08 95       	ret

000005d6 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     5d6:	98 2f       	mov	r25, r24
     5d8:	2c c0       	rjmp	.+88     	; 0x632 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5da:	29 2f       	mov	r18, r25
     5dc:	2f 70       	andi	r18, 0x0F	; 15
     5de:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     5e2:	98 17       	cp	r25, r24
     5e4:	39 f0       	breq	.+14     	; 0x5f4 <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     5e6:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     5ea:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     5ee:	50 91 f0 00 	lds	r21, 0x00F0
     5f2:	03 c0       	rjmp	.+6      	; 0x5fa <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     5f4:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     5f6:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     5f8:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     5fa:	21 ff       	sbrs	r18, 1
     5fc:	19 c0       	rjmp	.+50     	; 0x630 <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     5fe:	30 91 eb 00 	lds	r19, 0x00EB
     602:	3e 7f       	andi	r19, 0xFE	; 254
     604:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     608:	30 91 ed 00 	lds	r19, 0x00ED
     60c:	3d 7f       	andi	r19, 0xFD	; 253
     60e:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     612:	30 91 eb 00 	lds	r19, 0x00EB
     616:	31 60       	ori	r19, 0x01	; 1
     618:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     61c:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     620:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     624:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     628:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     62c:	27 ff       	sbrs	r18, 7
     62e:	08 c0       	rjmp	.+16     	; 0x640 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     630:	9f 5f       	subi	r25, 0xFF	; 255
     632:	97 30       	cpi	r25, 0x07	; 7
     634:	90 f2       	brcs	.-92     	; 0x5da <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     636:	8f 70       	andi	r24, 0x0F	; 15
     638:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     640:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     642:	08 95       	ret

00000644 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     644:	ef 92       	push	r14
     646:	ff 92       	push	r15
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     652:	e8 2e       	mov	r14, r24
     654:	e7 01       	movw	r28, r14
     656:	7e 01       	movw	r14, r28
     658:	f9 2e       	mov	r15, r25
     65a:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     65c:	00 e0       	ldi	r16, 0x00	; 0
     65e:	2a c0       	rjmp	.+84     	; 0x6b4 <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
     660:	98 81       	ld	r25, Y
     662:	99 23       	and	r25, r25
     664:	29 f1       	breq	.+74     	; 0x6b0 <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     666:	6b 81       	ldd	r22, Y+3	; 0x03
     668:	e9 81       	ldd	r30, Y+1	; 0x01
     66a:	fa 81       	ldd	r31, Y+2	; 0x02
     66c:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     66e:	89 2f       	mov	r24, r25
     670:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     672:	87 30       	cpi	r24, 0x07	; 7
     674:	18 f5       	brcc	.+70     	; 0x6bc <Endpoint_ConfigureEndpointTable+0x78>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     676:	62 95       	swap	r22
     678:	66 0f       	add	r22, r22
     67a:	66 0f       	add	r22, r22
     67c:	60 7c       	andi	r22, 0xC0	; 192
     67e:	99 1f       	adc	r25, r25
     680:	99 27       	eor	r25, r25
     682:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     684:	69 2b       	or	r22, r25
     686:	22 30       	cpi	r18, 0x02	; 2
     688:	10 f0       	brcs	.+4      	; 0x68e <Endpoint_ConfigureEndpointTable+0x4a>
     68a:	96 e0       	ldi	r25, 0x06	; 6
     68c:	01 c0       	rjmp	.+2      	; 0x690 <Endpoint_ConfigureEndpointTable+0x4c>
     68e:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     690:	28 e0       	ldi	r18, 0x08	; 8
     692:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     694:	40 e0       	ldi	r20, 0x00	; 0
     696:	03 c0       	rjmp	.+6      	; 0x69e <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     698:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     69a:	22 0f       	add	r18, r18
     69c:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     69e:	2e 17       	cp	r18, r30
     6a0:	3f 07       	cpc	r19, r31
     6a2:	d0 f3       	brcs	.-12     	; 0x698 <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     6a4:	42 95       	swap	r20
     6a6:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     6a8:	49 2b       	or	r20, r25
     6aa:	95 df       	rcall	.-214    	; 0x5d6 <Endpoint_ConfigureEndpoint_Prv>
     6ac:	88 23       	and	r24, r24
     6ae:	31 f0       	breq	.+12     	; 0x6bc <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     6b0:	0f 5f       	subi	r16, 0xFF	; 255
     6b2:	25 96       	adiw	r28, 0x05	; 5
     6b4:	01 17       	cp	r16, r17
     6b6:	a0 f2       	brcs	.-88     	; 0x660 <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     6bc:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	08 95       	ret

000006cc <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     6cc:	80 91 3a 02 	lds	r24, 0x023A
     6d0:	87 ff       	sbrs	r24, 7
     6d2:	11 c0       	rjmp	.+34     	; 0x6f6 <Endpoint_ClearStatusStage+0x2a>
     6d4:	03 c0       	rjmp	.+6      	; 0x6dc <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6d6:	8e b3       	in	r24, 0x1e	; 30
     6d8:	88 23       	and	r24, r24
     6da:	b1 f0       	breq	.+44     	; 0x708 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6dc:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     6e0:	82 ff       	sbrs	r24, 2
     6e2:	f9 cf       	rjmp	.-14     	; 0x6d6 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     6e4:	80 91 e8 00 	lds	r24, 0x00E8
     6e8:	8b 77       	andi	r24, 0x7B	; 123
     6ea:	80 93 e8 00 	sts	0x00E8, r24
     6ee:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6f0:	8e b3       	in	r24, 0x1e	; 30
     6f2:	88 23       	and	r24, r24
     6f4:	49 f0       	breq	.+18     	; 0x708 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6f6:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     6fa:	80 ff       	sbrs	r24, 0
     6fc:	f9 cf       	rjmp	.-14     	; 0x6f0 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6fe:	80 91 e8 00 	lds	r24, 0x00E8
     702:	8e 77       	andi	r24, 0x7E	; 126
     704:	80 93 e8 00 	sts	0x00E8, r24
     708:	08 95       	ret

0000070a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     70a:	80 91 e4 00 	lds	r24, 0x00E4
     70e:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     712:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     714:	20 91 ec 00 	lds	r18, 0x00EC
     718:	20 ff       	sbrs	r18, 0
     71a:	25 c0       	rjmp	.+74     	; 0x766 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     71c:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     720:	20 fd       	sbrc	r18, 0
     722:	15 c0       	rjmp	.+42     	; 0x74e <Endpoint_WaitUntilReady+0x44>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     724:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     726:	22 23       	and	r18, r18
     728:	a1 f0       	breq	.+40     	; 0x752 <Endpoint_WaitUntilReady+0x48>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     72a:	25 30       	cpi	r18, 0x05	; 5
     72c:	a1 f0       	breq	.+40     	; 0x756 <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     72e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     732:	25 fd       	sbrc	r18, 5
     734:	12 c0       	rjmp	.+36     	; 0x75a <Endpoint_WaitUntilReady+0x50>
     736:	20 91 e4 00 	lds	r18, 0x00E4
     73a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     73e:	28 17       	cp	r18, r24
     740:	39 07       	cpc	r19, r25
     742:	41 f3       	breq	.-48     	; 0x714 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     744:	44 23       	and	r20, r20
     746:	59 f0       	breq	.+22     	; 0x75e <Endpoint_WaitUntilReady+0x54>
     748:	41 50       	subi	r20, 0x01	; 1
     74a:	c9 01       	movw	r24, r18
     74c:	e3 cf       	rjmp	.-58     	; 0x714 <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     752:	82 e0       	ldi	r24, 0x02	; 2
     754:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     756:	83 e0       	ldi	r24, 0x03	; 3
     758:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     75e:	84 e0       	ldi	r24, 0x04	; 4
     760:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     762:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     764:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     766:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     76a:	22 ff       	sbrs	r18, 2
     76c:	db cf       	rjmp	.-74     	; 0x724 <Endpoint_WaitUntilReady+0x1a>
     76e:	f9 cf       	rjmp	.-14     	; 0x762 <Endpoint_WaitUntilReady+0x58>

00000770 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     778:	4d d0       	rcall	.+154    	; 0x814 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     77a:	54 d0       	rcall	.+168    	; 0x824 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     77c:	c8 ed       	ldi	r28, 0xD8	; 216
     77e:	d0 e0       	ldi	r29, 0x00	; 0
     780:	88 81       	ld	r24, Y
     782:	8f 77       	andi	r24, 0x7F	; 127
     784:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     786:	88 81       	ld	r24, Y
     788:	80 68       	ori	r24, 0x80	; 128
     78a:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     78c:	88 81       	ld	r24, Y
     78e:	8f 7d       	andi	r24, 0xDF	; 223
     790:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     792:	e7 ed       	ldi	r30, 0xD7	; 215
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	80 81       	ld	r24, Z
     798:	80 68       	ori	r24, 0x80	; 128
     79a:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     79c:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     79e:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
     7a0:	10 92 36 02 	sts	0x0236, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     7a4:	10 92 38 02 	sts	0x0238, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     7a8:	10 92 37 02 	sts	0x0237, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     7ac:	00 ee       	ldi	r16, 0xE0	; 224
     7ae:	10 e0       	ldi	r17, 0x00	; 0
     7b0:	f8 01       	movw	r30, r16
     7b2:	80 81       	ld	r24, Z
     7b4:	8b 7f       	andi	r24, 0xFB	; 251
     7b6:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     7b8:	88 81       	ld	r24, Y
     7ba:	81 60       	ori	r24, 0x01	; 1
     7bc:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	42 e0       	ldi	r20, 0x02	; 2
     7c4:	08 df       	rcall	.-496    	; 0x5d6 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     7c6:	e1 ee       	ldi	r30, 0xE1	; 225
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	80 81       	ld	r24, Z
     7cc:	8e 7f       	andi	r24, 0xFE	; 254
     7ce:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     7d0:	e2 ee       	ldi	r30, 0xE2	; 226
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	80 81       	ld	r24, Z
     7d6:	81 60       	ori	r24, 0x01	; 1
     7d8:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     7da:	80 81       	ld	r24, Z
     7dc:	88 60       	ori	r24, 0x08	; 8
     7de:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     7e0:	f8 01       	movw	r30, r16
     7e2:	80 81       	ld	r24, Z
     7e4:	8e 7f       	andi	r24, 0xFE	; 254
     7e6:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     7e8:	88 81       	ld	r24, Y
     7ea:	80 61       	ori	r24, 0x10	; 16
     7ec:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	08 95       	ret

000007f8 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     7f8:	e8 ed       	ldi	r30, 0xD8	; 216
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	80 81       	ld	r24, Z
     7fe:	8f 7e       	andi	r24, 0xEF	; 239
     800:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     802:	e7 ed       	ldi	r30, 0xD7	; 215
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	80 81       	ld	r24, Z
     808:	81 60       	ori	r24, 0x01	; 1
     80a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	80 93 39 02 	sts	0x0239, r24

	USB_ResetInterface();
}
     812:	ae cf       	rjmp	.-164    	; 0x770 <USB_ResetInterface>

00000814 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     814:	e8 ed       	ldi	r30, 0xD8	; 216
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	80 81       	ld	r24, Z
     81a:	8c 7f       	andi	r24, 0xFC	; 252
     81c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     81e:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     822:	08 95       	ret

00000824 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     824:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     828:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     82c:	08 95       	ret

0000082e <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     82e:	1f 92       	push	r1
     830:	0f 92       	push	r0
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	0f 92       	push	r0
     836:	0b b6       	in	r0, 0x3b	; 59
     838:	0f 92       	push	r0
     83a:	11 24       	eor	r1, r1
     83c:	2f 93       	push	r18
     83e:	3f 93       	push	r19
     840:	4f 93       	push	r20
     842:	5f 93       	push	r21
     844:	6f 93       	push	r22
     846:	7f 93       	push	r23
     848:	8f 93       	push	r24
     84a:	9f 93       	push	r25
     84c:	af 93       	push	r26
     84e:	bf 93       	push	r27
     850:	ef 93       	push	r30
     852:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     854:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     858:	82 ff       	sbrs	r24, 2
     85a:	0a c0       	rjmp	.+20     	; 0x870 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     85c:	80 91 e2 00 	lds	r24, 0x00E2
     860:	82 ff       	sbrs	r24, 2
     862:	06 c0       	rjmp	.+12     	; 0x870 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     864:	80 91 e1 00 	lds	r24, 0x00E1
     868:	8b 7f       	andi	r24, 0xFB	; 251
     86a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     86e:	47 d2       	rcall	.+1166   	; 0xcfe <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     870:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     874:	80 ff       	sbrs	r24, 0
     876:	1b c0       	rjmp	.+54     	; 0x8ae <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     878:	80 91 d8 00 	lds	r24, 0x00D8
     87c:	80 ff       	sbrs	r24, 0
     87e:	17 c0       	rjmp	.+46     	; 0x8ae <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     880:	80 91 da 00 	lds	r24, 0x00DA
     884:	8e 7f       	andi	r24, 0xFE	; 254
     886:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     88a:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     88e:	80 ff       	sbrs	r24, 0
     890:	0b c0       	rjmp	.+22     	; 0x8a8 <__vector_10+0x7a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     892:	8c e0       	ldi	r24, 0x0C	; 12
     894:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     896:	8e e0       	ldi	r24, 0x0E	; 14
     898:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     89a:	09 b4       	in	r0, 0x29	; 41
     89c:	00 fe       	sbrs	r0, 0
     89e:	fd cf       	rjmp	.-6      	; 0x89a <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
     8a4:	35 dd       	rcall	.-1430   	; 0x310 <EVENT_USB_Device_Connect>
     8a6:	03 c0       	rjmp	.+6      	; 0x8ae <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8a8:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     8aa:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
     8ac:	33 dd       	rcall	.-1434   	; 0x314 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     8ae:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     8b2:	80 ff       	sbrs	r24, 0
     8b4:	17 c0       	rjmp	.+46     	; 0x8e4 <__vector_10+0xb6>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     8b6:	80 91 e2 00 	lds	r24, 0x00E2
     8ba:	80 ff       	sbrs	r24, 0
     8bc:	13 c0       	rjmp	.+38     	; 0x8e4 <__vector_10+0xb6>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8be:	80 91 e2 00 	lds	r24, 0x00E2
     8c2:	8e 7f       	andi	r24, 0xFE	; 254
     8c4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8c8:	80 91 e2 00 	lds	r24, 0x00E2
     8cc:	80 61       	ori	r24, 0x10	; 16
     8ce:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     8d2:	80 91 d8 00 	lds	r24, 0x00D8
     8d6:	80 62       	ori	r24, 0x20	; 32
     8d8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8dc:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     8de:	85 e0       	ldi	r24, 0x05	; 5
     8e0:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
     8e2:	0d d2       	rcall	.+1050   	; 0xcfe <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     8e4:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     8e8:	84 ff       	sbrs	r24, 4
     8ea:	2c c0       	rjmp	.+88     	; 0x944 <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     8ec:	80 91 e2 00 	lds	r24, 0x00E2
     8f0:	84 ff       	sbrs	r24, 4
     8f2:	28 c0       	rjmp	.+80     	; 0x944 <__vector_10+0x116>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8f4:	8c e0       	ldi	r24, 0x0C	; 12
     8f6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8f8:	8e e0       	ldi	r24, 0x0E	; 14
     8fa:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     8fc:	09 b4       	in	r0, 0x29	; 41
     8fe:	00 fe       	sbrs	r0, 0
     900:	fd cf       	rjmp	.-6      	; 0x8fc <__vector_10+0xce>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     902:	80 91 d8 00 	lds	r24, 0x00D8
     906:	8f 7d       	andi	r24, 0xDF	; 223
     908:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     90c:	80 91 e1 00 	lds	r24, 0x00E1
     910:	8f 7e       	andi	r24, 0xEF	; 239
     912:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     916:	80 91 e2 00 	lds	r24, 0x00E2
     91a:	8f 7e       	andi	r24, 0xEF	; 239
     91c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     920:	80 91 e2 00 	lds	r24, 0x00E2
     924:	81 60       	ori	r24, 0x01	; 1
     926:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     92a:	80 91 36 02 	lds	r24, 0x0236
     92e:	88 23       	and	r24, r24
     930:	21 f4       	brne	.+8      	; 0x93a <__vector_10+0x10c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     932:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     936:	87 ff       	sbrs	r24, 7
     938:	02 c0       	rjmp	.+4      	; 0x93e <__vector_10+0x110>
     93a:	84 e0       	ldi	r24, 0x04	; 4
     93c:	01 c0       	rjmp	.+2      	; 0x940 <__vector_10+0x112>
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     942:	dd d1       	rcall	.+954    	; 0xcfe <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     944:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     948:	83 ff       	sbrs	r24, 3
     94a:	26 c0       	rjmp	.+76     	; 0x998 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     94c:	80 91 e2 00 	lds	r24, 0x00E2
     950:	83 ff       	sbrs	r24, 3
     952:	22 c0       	rjmp	.+68     	; 0x998 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     954:	80 91 e1 00 	lds	r24, 0x00E1
     958:	87 7f       	andi	r24, 0xF7	; 247
     95a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     95e:	82 e0       	ldi	r24, 0x02	; 2
     960:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
     962:	10 92 36 02 	sts	0x0236, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     966:	80 91 e1 00 	lds	r24, 0x00E1
     96a:	8e 7f       	andi	r24, 0xFE	; 254
     96c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     970:	80 91 e2 00 	lds	r24, 0x00E2
     974:	8e 7f       	andi	r24, 0xFE	; 254
     976:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     97a:	80 91 e2 00 	lds	r24, 0x00E2
     97e:	80 61       	ori	r24, 0x10	; 16
     980:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	42 e0       	ldi	r20, 0x02	; 2
     98a:	25 de       	rcall	.-950    	; 0x5d6 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     98c:	80 91 f0 00 	lds	r24, 0x00F0
     990:	88 60       	ori	r24, 0x08	; 8
     992:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     996:	b3 d1       	rcall	.+870    	; 0xcfe <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     998:	ff 91       	pop	r31
     99a:	ef 91       	pop	r30
     99c:	bf 91       	pop	r27
     99e:	af 91       	pop	r26
     9a0:	9f 91       	pop	r25
     9a2:	8f 91       	pop	r24
     9a4:	7f 91       	pop	r23
     9a6:	6f 91       	pop	r22
     9a8:	5f 91       	pop	r21
     9aa:	4f 91       	pop	r20
     9ac:	3f 91       	pop	r19
     9ae:	2f 91       	pop	r18
     9b0:	0f 90       	pop	r0
     9b2:	0b be       	out	0x3b, r0	; 59
     9b4:	0f 90       	pop	r0
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	0f 90       	pop	r0
     9ba:	1f 90       	pop	r1
     9bc:	18 95       	reti

000009be <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     9be:	1f 92       	push	r1
     9c0:	0f 92       	push	r0
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	0f 92       	push	r0
     9c6:	0b b6       	in	r0, 0x3b	; 59
     9c8:	0f 92       	push	r0
     9ca:	11 24       	eor	r1, r1
     9cc:	1f 93       	push	r17
     9ce:	2f 93       	push	r18
     9d0:	3f 93       	push	r19
     9d2:	4f 93       	push	r20
     9d4:	5f 93       	push	r21
     9d6:	6f 93       	push	r22
     9d8:	7f 93       	push	r23
     9da:	8f 93       	push	r24
     9dc:	9f 93       	push	r25
     9de:	af 93       	push	r26
     9e0:	bf 93       	push	r27
     9e2:	ef 93       	push	r30
     9e4:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     9e6:	10 91 e9 00 	lds	r17, 0x00E9
     9ea:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     9ec:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9f0:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     9f4:	80 91 f0 00 	lds	r24, 0x00F0
     9f8:	87 7f       	andi	r24, 0xF7	; 247
     9fa:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     9fe:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     a00:	1d d0       	rcall	.+58     	; 0xa3c <USB_Device_ProcessControlRequest>
     a02:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a06:	80 91 f0 00 	lds	r24, 0x00F0
     a0a:	88 60       	ori	r24, 0x08	; 8
     a0c:	80 93 f0 00 	sts	0x00F0, r24
     a10:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     a14:	ff 91       	pop	r31
     a16:	ef 91       	pop	r30
     a18:	bf 91       	pop	r27
     a1a:	af 91       	pop	r26
     a1c:	9f 91       	pop	r25
     a1e:	8f 91       	pop	r24
     a20:	7f 91       	pop	r23
     a22:	6f 91       	pop	r22
     a24:	5f 91       	pop	r21
     a26:	4f 91       	pop	r20
     a28:	3f 91       	pop	r19
     a2a:	2f 91       	pop	r18
     a2c:	1f 91       	pop	r17
     a2e:	0f 90       	pop	r0
     a30:	0b be       	out	0x3b, r0	; 59
     a32:	0f 90       	pop	r0
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	0f 90       	pop	r0
     a38:	1f 90       	pop	r1
     a3a:	18 95       	reti

00000a3c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a3c:	1f 93       	push	r17
     a3e:	df 93       	push	r29
     a40:	cf 93       	push	r28
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
     a46:	ac 97       	sbiw	r28, 0x2c	; 44
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     a52:	ea e3       	ldi	r30, 0x3A	; 58
     a54:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     a56:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     a5a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a5c:	22 e0       	ldi	r18, 0x02	; 2
     a5e:	e2 34       	cpi	r30, 0x42	; 66
     a60:	f2 07       	cpc	r31, r18
     a62:	c9 f7       	brne	.-14     	; 0xa56 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     a64:	62 dc       	rcall	.-1852   	; 0x32a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a66:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     a6a:	83 ff       	sbrs	r24, 3
     a6c:	30 c1       	rjmp	.+608    	; 0xcce <USB_Device_ProcessControlRequest+0x292>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a6e:	80 91 3a 02 	lds	r24, 0x023A

		switch (USB_ControlRequest.bRequest)
     a72:	20 91 3b 02 	lds	r18, 0x023B
     a76:	25 30       	cpi	r18, 0x05	; 5
     a78:	09 f4       	brne	.+2      	; 0xa7c <USB_Device_ProcessControlRequest+0x40>
     a7a:	84 c0       	rjmp	.+264    	; 0xb84 <USB_Device_ProcessControlRequest+0x148>
     a7c:	26 30       	cpi	r18, 0x06	; 6
     a7e:	40 f4       	brcc	.+16     	; 0xa90 <USB_Device_ProcessControlRequest+0x54>
     a80:	21 30       	cpi	r18, 0x01	; 1
     a82:	a1 f1       	breq	.+104    	; 0xaec <USB_Device_ProcessControlRequest+0xb0>
     a84:	21 30       	cpi	r18, 0x01	; 1
     a86:	70 f0       	brcs	.+28     	; 0xaa4 <USB_Device_ProcessControlRequest+0x68>
     a88:	23 30       	cpi	r18, 0x03	; 3
     a8a:	09 f0       	breq	.+2      	; 0xa8e <USB_Device_ProcessControlRequest+0x52>
     a8c:	20 c1       	rjmp	.+576    	; 0xcce <USB_Device_ProcessControlRequest+0x292>
     a8e:	2e c0       	rjmp	.+92     	; 0xaec <USB_Device_ProcessControlRequest+0xb0>
     a90:	28 30       	cpi	r18, 0x08	; 8
     a92:	09 f4       	brne	.+2      	; 0xa96 <USB_Device_ProcessControlRequest+0x5a>
     a94:	ef c0       	rjmp	.+478    	; 0xc74 <USB_Device_ProcessControlRequest+0x238>
     a96:	29 30       	cpi	r18, 0x09	; 9
     a98:	09 f4       	brne	.+2      	; 0xa9c <USB_Device_ProcessControlRequest+0x60>
     a9a:	fe c0       	rjmp	.+508    	; 0xc98 <USB_Device_ProcessControlRequest+0x25c>
     a9c:	26 30       	cpi	r18, 0x06	; 6
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <USB_Device_ProcessControlRequest+0x66>
     aa0:	16 c1       	rjmp	.+556    	; 0xcce <USB_Device_ProcessControlRequest+0x292>
     aa2:	92 c0       	rjmp	.+292    	; 0xbc8 <USB_Device_ProcessControlRequest+0x18c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     aa4:	80 38       	cpi	r24, 0x80	; 128
     aa6:	21 f0       	breq	.+8      	; 0xab0 <USB_Device_ProcessControlRequest+0x74>
     aa8:	82 38       	cpi	r24, 0x82	; 130
     aaa:	09 f0       	breq	.+2      	; 0xaae <USB_Device_ProcessControlRequest+0x72>
     aac:	10 c1       	rjmp	.+544    	; 0xcce <USB_Device_ProcessControlRequest+0x292>
     aae:	08 c0       	rjmp	.+16     	; 0xac0 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     ab0:	80 91 37 02 	lds	r24, 0x0237
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     ab4:	90 91 38 02 	lds	r25, 0x0238
     ab8:	99 23       	and	r25, r25
     aba:	71 f0       	breq	.+28     	; 0xad8 <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     abc:	82 60       	ori	r24, 0x02	; 2
     abe:	0c c0       	rjmp	.+24     	; 0xad8 <USB_Device_ProcessControlRequest+0x9c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ac0:	80 91 3e 02 	lds	r24, 0x023E
     ac4:	8f 70       	andi	r24, 0x0F	; 15
     ac6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     aca:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	95 ff       	sbrs	r25, 5
     ad2:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ad4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ad8:	90 91 e8 00 	lds	r25, 0x00E8
     adc:	97 7f       	andi	r25, 0xF7	; 247
     ade:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     ae2:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     ae6:	10 92 f1 00 	sts	0x00F1, r1
     aea:	cf c0       	rjmp	.+414    	; 0xc8a <USB_Device_ProcessControlRequest+0x24e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     aec:	88 23       	and	r24, r24
     aee:	19 f0       	breq	.+6      	; 0xaf6 <USB_Device_ProcessControlRequest+0xba>
     af0:	82 30       	cpi	r24, 0x02	; 2
     af2:	09 f0       	breq	.+2      	; 0xaf6 <USB_Device_ProcessControlRequest+0xba>
     af4:	ec c0       	rjmp	.+472    	; 0xcce <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	8f 71       	andi	r24, 0x1F	; 31
     afa:	90 70       	andi	r25, 0x00	; 0
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	29 f0       	breq	.+10     	; 0xb0a <USB_Device_ProcessControlRequest+0xce>
     b00:	82 30       	cpi	r24, 0x02	; 2
     b02:	91 05       	cpc	r25, r1
     b04:	09 f0       	breq	.+2      	; 0xb08 <USB_Device_ProcessControlRequest+0xcc>
     b06:	e3 c0       	rjmp	.+454    	; 0xcce <USB_Device_ProcessControlRequest+0x292>
     b08:	0b c0       	rjmp	.+22     	; 0xb20 <USB_Device_ProcessControlRequest+0xe4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b0a:	80 91 3c 02 	lds	r24, 0x023C
     b0e:	81 30       	cpi	r24, 0x01	; 1
     b10:	09 f0       	breq	.+2      	; 0xb14 <USB_Device_ProcessControlRequest+0xd8>
     b12:	dd c0       	rjmp	.+442    	; 0xcce <USB_Device_ProcessControlRequest+0x292>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b14:	23 30       	cpi	r18, 0x03	; 3
     b16:	09 f0       	breq	.+2      	; 0xb1a <USB_Device_ProcessControlRequest+0xde>
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	80 93 38 02 	sts	0x0238, r24
     b1e:	2c c0       	rjmp	.+88     	; 0xb78 <USB_Device_ProcessControlRequest+0x13c>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     b20:	80 91 3c 02 	lds	r24, 0x023C
     b24:	88 23       	and	r24, r24
     b26:	41 f5       	brne	.+80     	; 0xb78 <USB_Device_ProcessControlRequest+0x13c>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b28:	20 91 3e 02 	lds	r18, 0x023E
     b2c:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b2e:	09 f4       	brne	.+2      	; 0xb32 <USB_Device_ProcessControlRequest+0xf6>
     b30:	ce c0       	rjmp	.+412    	; 0xcce <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b32:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b36:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     b3a:	80 ff       	sbrs	r24, 0
     b3c:	1d c0       	rjmp	.+58     	; 0xb78 <USB_Device_ProcessControlRequest+0x13c>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b3e:	80 91 3b 02 	lds	r24, 0x023B
     b42:	83 30       	cpi	r24, 0x03	; 3
     b44:	21 f4       	brne	.+8      	; 0xb4e <USB_Device_ProcessControlRequest+0x112>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b46:	80 91 eb 00 	lds	r24, 0x00EB
     b4a:	80 62       	ori	r24, 0x20	; 32
     b4c:	13 c0       	rjmp	.+38     	; 0xb74 <USB_Device_ProcessControlRequest+0x138>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b4e:	80 91 eb 00 	lds	r24, 0x00EB
     b52:	80 61       	ori	r24, 0x10	; 16
     b54:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <USB_Device_ProcessControlRequest+0x126>
     b5e:	88 0f       	add	r24, r24
     b60:	99 1f       	adc	r25, r25
     b62:	2a 95       	dec	r18
     b64:	e2 f7       	brpl	.-8      	; 0xb5e <USB_Device_ProcessControlRequest+0x122>
     b66:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     b6a:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b6e:	80 91 eb 00 	lds	r24, 0x00EB
     b72:	88 60       	ori	r24, 0x08	; 8
     b74:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b78:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b7c:	80 91 e8 00 	lds	r24, 0x00E8
     b80:	87 7f       	andi	r24, 0xF7	; 247
     b82:	86 c0       	rjmp	.+268    	; 0xc90 <USB_Device_ProcessControlRequest+0x254>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b84:	88 23       	and	r24, r24
     b86:	09 f0       	breq	.+2      	; 0xb8a <USB_Device_ProcessControlRequest+0x14e>
     b88:	a2 c0       	rjmp	.+324    	; 0xcce <USB_Device_ProcessControlRequest+0x292>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     b8a:	10 91 3c 02 	lds	r17, 0x023C
     b8e:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b90:	80 91 e3 00 	lds	r24, 0x00E3
     b94:	80 78       	andi	r24, 0x80	; 128
     b96:	81 2b       	or	r24, r17
     b98:	80 93 e3 00 	sts	0x00E3, r24
     b9c:	80 91 e8 00 	lds	r24, 0x00E8
     ba0:	87 7f       	andi	r24, 0xF7	; 247
     ba2:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     ba6:	92 dd       	rcall	.-1244   	; 0x6cc <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ba8:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     bac:	80 ff       	sbrs	r24, 0
     bae:	fc cf       	rjmp	.-8      	; 0xba8 <USB_Device_ProcessControlRequest+0x16c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     bb0:	80 91 e3 00 	lds	r24, 0x00E3
     bb4:	80 68       	ori	r24, 0x80	; 128
     bb6:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     bba:	11 23       	and	r17, r17
     bbc:	11 f0       	breq	.+4      	; 0xbc2 <USB_Device_ProcessControlRequest+0x186>
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <USB_Device_ProcessControlRequest+0x188>
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	8e bb       	out	0x1e, r24	; 30
     bc6:	83 c0       	rjmp	.+262    	; 0xcce <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bc8:	80 58       	subi	r24, 0x80	; 128
     bca:	82 30       	cpi	r24, 0x02	; 2
     bcc:	08 f0       	brcs	.+2      	; 0xbd0 <USB_Device_ProcessControlRequest+0x194>
     bce:	7f c0       	rjmp	.+254    	; 0xcce <USB_Device_ProcessControlRequest+0x292>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     bd0:	80 91 3c 02 	lds	r24, 0x023C
     bd4:	90 91 3d 02 	lds	r25, 0x023D
     bd8:	23 e0       	ldi	r18, 0x03	; 3
     bda:	8c 3d       	cpi	r24, 0xDC	; 220
     bdc:	92 07       	cpc	r25, r18
     bde:	91 f5       	brne	.+100    	; 0xc44 <USB_Device_ProcessControlRequest+0x208>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     be0:	83 e0       	ldi	r24, 0x03	; 3
     be2:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     be4:	8a e2       	ldi	r24, 0x2A	; 42
     be6:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     be8:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     bea:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     bec:	de 01       	movw	r26, r28
     bee:	15 96       	adiw	r26, 0x05	; 5
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     bf4:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     bf6:	61 e2       	ldi	r22, 0x21	; 33
     bf8:	e4 2f       	mov	r30, r20
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	60 93 57 00 	sts	0x0057, r22
     c00:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
     c02:	80 ff       	sbrs	r24, 0
     c04:	03 c0       	rjmp	.+6      	; 0xc0c <USB_Device_ProcessControlRequest+0x1d0>
					{
						SerialByte >>= 4;
     c06:	e2 95       	swap	r30
     c08:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     c0a:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     c0c:	ef 70       	andi	r30, 0x0F	; 15
     c0e:	2e 2f       	mov	r18, r30
     c10:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     c12:	ea 30       	cpi	r30, 0x0A	; 10
     c14:	18 f0       	brcs	.+6      	; 0xc1c <USB_Device_ProcessControlRequest+0x1e0>
     c16:	29 5c       	subi	r18, 0xC9	; 201
     c18:	3f 4f       	sbci	r19, 0xFF	; 255
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <USB_Device_ProcessControlRequest+0x1e4>
     c1c:	20 5d       	subi	r18, 0xD0	; 208
     c1e:	3f 4f       	sbci	r19, 0xFF	; 255
     c20:	2d 93       	st	X+, r18
     c22:	3d 93       	st	X+, r19
     c24:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c26:	84 31       	cpi	r24, 0x14	; 20
     c28:	91 05       	cpc	r25, r1
     c2a:	31 f7       	brne	.-52     	; 0xbf8 <USB_Device_ProcessControlRequest+0x1bc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     c2c:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c2e:	80 91 e8 00 	lds	r24, 0x00E8
     c32:	87 7f       	andi	r24, 0xF7	; 247
     c34:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c38:	ce 01       	movw	r24, r28
     c3a:	03 96       	adiw	r24, 0x03	; 3
     c3c:	6a e2       	ldi	r22, 0x2A	; 42
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	13 dc       	rcall	.-2010   	; 0x468 <Endpoint_Write_Control_Stream_LE>
     c42:	12 c0       	rjmp	.+36     	; 0xc68 <USB_Device_ProcessControlRequest+0x22c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c44:	60 91 3e 02 	lds	r22, 0x023E
     c48:	ae 01       	movw	r20, r28
     c4a:	4f 5f       	subi	r20, 0xFF	; 255
     c4c:	5f 4f       	sbci	r21, 0xFF	; 255
     c4e:	df db       	rcall	.-2114   	; 0x40e <CALLBACK_USB_GetDescriptor>
     c50:	bc 01       	movw	r22, r24
     c52:	00 97       	sbiw	r24, 0x00	; 0
     c54:	09 f4       	brne	.+2      	; 0xc58 <USB_Device_ProcessControlRequest+0x21c>
     c56:	3b c0       	rjmp	.+118    	; 0xcce <USB_Device_ProcessControlRequest+0x292>
     c58:	80 91 e8 00 	lds	r24, 0x00E8
     c5c:	87 7f       	andi	r24, 0xF7	; 247
     c5e:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	9a 81       	ldd	r25, Y+2	; 0x02
     c66:	5b dc       	rcall	.-1866   	; 0x51e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c68:	80 91 e8 00 	lds	r24, 0x00E8
     c6c:	8b 77       	andi	r24, 0x7B	; 123
     c6e:	80 93 e8 00 	sts	0x00E8, r24
     c72:	2d c0       	rjmp	.+90     	; 0xcce <USB_Device_ProcessControlRequest+0x292>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c74:	80 38       	cpi	r24, 0x80	; 128
     c76:	59 f5       	brne	.+86     	; 0xcce <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c78:	80 91 e8 00 	lds	r24, 0x00E8
     c7c:	87 7f       	andi	r24, 0xF7	; 247
     c7e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     c82:	80 91 36 02 	lds	r24, 0x0236
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c86:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c8a:	80 91 e8 00 	lds	r24, 0x00E8
     c8e:	8e 77       	andi	r24, 0x7E	; 126
     c90:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     c94:	1b dd       	rcall	.-1482   	; 0x6cc <Endpoint_ClearStatusStage>
     c96:	1b c0       	rjmp	.+54     	; 0xcce <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c98:	88 23       	and	r24, r24
     c9a:	c9 f4       	brne	.+50     	; 0xcce <USB_Device_ProcessControlRequest+0x292>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     c9c:	90 91 3c 02 	lds	r25, 0x023C
     ca0:	92 30       	cpi	r25, 0x02	; 2
     ca2:	a8 f4       	brcc	.+42     	; 0xcce <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ca4:	80 91 e8 00 	lds	r24, 0x00E8
     ca8:	87 7f       	andi	r24, 0xF7	; 247
     caa:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     cae:	90 93 36 02 	sts	0x0236, r25

	Endpoint_ClearStatusStage();
     cb2:	0c dd       	rcall	.-1512   	; 0x6cc <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     cb4:	80 91 36 02 	lds	r24, 0x0236
     cb8:	88 23       	and	r24, r24
     cba:	21 f4       	brne	.+8      	; 0xcc4 <USB_Device_ProcessControlRequest+0x288>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     cbc:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     cc0:	87 ff       	sbrs	r24, 7
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <USB_Device_ProcessControlRequest+0x28c>
     cc4:	84 e0       	ldi	r24, 0x04	; 4
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <USB_Device_ProcessControlRequest+0x28e>
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
     ccc:	25 db       	rcall	.-2486   	; 0x318 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cce:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     cd2:	83 ff       	sbrs	r24, 3
     cd4:	0a c0       	rjmp	.+20     	; 0xcea <USB_Device_ProcessControlRequest+0x2ae>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cd6:	80 91 e8 00 	lds	r24, 0x00E8
     cda:	87 7f       	andi	r24, 0xF7	; 247
     cdc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     ce0:	80 91 eb 00 	lds	r24, 0x00EB
     ce4:	80 62       	ori	r24, 0x20	; 32
     ce6:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     cea:	ac 96       	adiw	r28, 0x2c	; 44
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	cf 91       	pop	r28
     cf8:	df 91       	pop	r29
     cfa:	1f 91       	pop	r17
     cfc:	08 95       	ret

00000cfe <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     cfe:	08 95       	ret

00000d00 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     d00:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     d02:	8e b3       	in	r24, 0x1e	; 30
     d04:	88 23       	and	r24, r24
     d06:	a9 f0       	breq	.+42     	; 0xd32 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d08:	80 91 e9 00 	lds	r24, 0x00E9
     d0c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d0e:	90 91 ec 00 	lds	r25, 0x00EC
     d12:	90 ff       	sbrs	r25, 0
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <USB_USBTask+0x1a>
     d16:	10 e8       	ldi	r17, 0x80	; 128
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <USB_USBTask+0x1c>
     d1a:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d1c:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d1e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d22:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     d26:	83 ff       	sbrs	r24, 3
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
     d2a:	88 de       	rcall	.-752    	; 0xa3c <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d2c:	1f 70       	andi	r17, 0x0F	; 15
     d2e:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     d32:	1f 91       	pop	r17
     d34:	08 95       	ret

00000d36 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d3c:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     d40:	83 ff       	sbrs	r24, 3
     d42:	a2 c0       	rjmp	.+324    	; 0xe88 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     d44:	88 81       	ld	r24, Y
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	20 91 3e 02 	lds	r18, 0x023E
     d4c:	30 91 3f 02 	lds	r19, 0x023F
     d50:	28 17       	cp	r18, r24
     d52:	39 07       	cpc	r19, r25
     d54:	09 f0       	breq	.+2      	; 0xd58 <CDC_Device_ProcessControlRequest+0x22>
     d56:	98 c0       	rjmp	.+304    	; 0xe88 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	switch (USB_ControlRequest.bRequest)
     d58:	80 91 3b 02 	lds	r24, 0x023B
     d5c:	81 32       	cpi	r24, 0x21	; 33
     d5e:	69 f0       	breq	.+26     	; 0xd7a <CDC_Device_ProcessControlRequest+0x44>
     d60:	82 32       	cpi	r24, 0x22	; 34
     d62:	20 f4       	brcc	.+8      	; 0xd6c <CDC_Device_ProcessControlRequest+0x36>
     d64:	80 32       	cpi	r24, 0x20	; 32
     d66:	09 f0       	breq	.+2      	; 0xd6a <CDC_Device_ProcessControlRequest+0x34>
     d68:	8f c0       	rjmp	.+286    	; 0xe88 <CDC_Device_ProcessControlRequest+0x152>
     d6a:	3c c0       	rjmp	.+120    	; 0xde4 <CDC_Device_ProcessControlRequest+0xae>
     d6c:	82 32       	cpi	r24, 0x22	; 34
     d6e:	09 f4       	brne	.+2      	; 0xd72 <CDC_Device_ProcessControlRequest+0x3c>
     d70:	6a c0       	rjmp	.+212    	; 0xe46 <CDC_Device_ProcessControlRequest+0x110>
     d72:	83 32       	cpi	r24, 0x23	; 35
     d74:	09 f0       	breq	.+2      	; 0xd78 <CDC_Device_ProcessControlRequest+0x42>
     d76:	88 c0       	rjmp	.+272    	; 0xe88 <CDC_Device_ProcessControlRequest+0x152>
     d78:	79 c0       	rjmp	.+242    	; 0xe6c <CDC_Device_ProcessControlRequest+0x136>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     d7a:	80 91 3a 02 	lds	r24, 0x023A
     d7e:	81 3a       	cpi	r24, 0xA1	; 161
     d80:	09 f0       	breq	.+2      	; 0xd84 <CDC_Device_ProcessControlRequest+0x4e>
     d82:	82 c0       	rjmp	.+260    	; 0xe88 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d84:	80 91 e8 00 	lds	r24, 0x00E8
     d88:	87 7f       	andi	r24, 0xF7	; 247
     d8a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d8e:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     d92:	80 ff       	sbrs	r24, 0
     d94:	fc cf       	rjmp	.-8      	; 0xd8e <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     d96:	8c 89       	ldd	r24, Y+20	; 0x14
     d98:	9d 89       	ldd	r25, Y+21	; 0x15
     d9a:	ae 89       	ldd	r26, Y+22	; 0x16
     d9c:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     d9e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     da2:	29 2f       	mov	r18, r25
     da4:	3a 2f       	mov	r19, r26
     da6:	4b 2f       	mov	r20, r27
     da8:	55 27       	eor	r21, r21
     daa:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
     dae:	9d 01       	movw	r18, r26
     db0:	44 27       	eor	r20, r20
     db2:	55 27       	eor	r21, r21
     db4:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
     db8:	8b 2f       	mov	r24, r27
     dba:	99 27       	eor	r25, r25
     dbc:	aa 27       	eor	r26, r26
     dbe:	bb 27       	eor	r27, r27
     dc0:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     dc4:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     dc6:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     dca:	89 8d       	ldd	r24, Y+25	; 0x19
     dcc:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     dd0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     dd2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dd6:	80 91 e8 00 	lds	r24, 0x00E8
     dda:	8e 77       	andi	r24, 0x7E	; 126
     ddc:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     de0:	75 dc       	rcall	.-1814   	; 0x6cc <Endpoint_ClearStatusStage>
     de2:	52 c0       	rjmp	.+164    	; 0xe88 <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     de4:	80 91 3a 02 	lds	r24, 0x023A
     de8:	81 32       	cpi	r24, 0x21	; 33
     dea:	09 f0       	breq	.+2      	; 0xdee <CDC_Device_ProcessControlRequest+0xb8>
     dec:	4d c0       	rjmp	.+154    	; 0xe88 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dee:	80 91 e8 00 	lds	r24, 0x00E8
     df2:	87 7f       	andi	r24, 0xF7	; 247
     df4:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     df8:	04 c0       	rjmp	.+8      	; 0xe02 <CDC_Device_ProcessControlRequest+0xcc>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     dfa:	8e b3       	in	r24, 0x1e	; 30
     dfc:	88 23       	and	r24, r24
     dfe:	09 f4       	brne	.+2      	; 0xe02 <CDC_Device_ProcessControlRequest+0xcc>
     e00:	43 c0       	rjmp	.+134    	; 0xe88 <CDC_Device_ProcessControlRequest+0x152>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e02:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     e06:	82 ff       	sbrs	r24, 2
     e08:	f8 cf       	rjmp	.-16     	; 0xdfa <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     e0a:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
     e0e:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
     e12:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
     e16:	80 91 f1 00 	lds	r24, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     e1a:	3c 8b       	std	Y+20, r19	; 0x14
     e1c:	2d 8b       	std	Y+21, r18	; 0x15
     e1e:	9e 8b       	std	Y+22, r25	; 0x16
     e20:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     e22:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     e26:	88 8f       	std	Y+24, r24	; 0x18
     e28:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     e2c:	89 8f       	std	Y+25, r24	; 0x19
     e2e:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     e32:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e34:	80 91 e8 00 	lds	r24, 0x00E8
     e38:	8b 77       	andi	r24, 0x7B	; 123
     e3a:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     e3e:	46 dc       	rcall	.-1908   	; 0x6cc <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     e40:	ce 01       	movw	r24, r28
     e42:	a4 da       	rcall	.-2744   	; 0x38c <EVENT_CDC_Device_LineEncodingChanged>
     e44:	21 c0       	rjmp	.+66     	; 0xe88 <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e46:	80 91 3a 02 	lds	r24, 0x023A
     e4a:	81 32       	cpi	r24, 0x21	; 33
     e4c:	e9 f4       	brne	.+58     	; 0xe88 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e4e:	80 91 e8 00 	lds	r24, 0x00E8
     e52:	87 7f       	andi	r24, 0xF7	; 247
     e54:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e58:	39 dc       	rcall	.-1934   	; 0x6cc <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     e5a:	80 91 3c 02 	lds	r24, 0x023C
     e5e:	90 91 3d 02 	lds	r25, 0x023D
     e62:	99 8b       	std	Y+17, r25	; 0x11
     e64:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     e66:	ce 01       	movw	r24, r28
     e68:	da d0       	rcall	.+436    	; 0x101e <CDC_Device_Event_Stub>
     e6a:	0e c0       	rjmp	.+28     	; 0xe88 <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e6c:	80 91 3a 02 	lds	r24, 0x023A
     e70:	81 32       	cpi	r24, 0x21	; 33
     e72:	51 f4       	brne	.+20     	; 0xe88 <CDC_Device_ProcessControlRequest+0x152>
     e74:	80 91 e8 00 	lds	r24, 0x00E8
     e78:	87 7f       	andi	r24, 0xF7	; 247
     e7a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e7e:	26 dc       	rcall	.-1972   	; 0x6cc <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     e80:	ce 01       	movw	r24, r28
     e82:	60 91 3c 02 	lds	r22, 0x023C
     e86:	cb d0       	rcall	.+406    	; 0x101e <CDC_Device_Event_Stub>
			}

			break;
	}
}
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	08 95       	ret

00000e8e <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     e94:	40 96       	adiw	r24, 0x10	; 16
     e96:	fc 01       	movw	r30, r24
     e98:	8b e0       	ldi	r24, 0x0B	; 11
     e9a:	df 01       	movw	r26, r30
     e9c:	1d 92       	st	X+, r1
     e9e:	8a 95       	dec	r24
     ea0:	e9 f7       	brne	.-6      	; 0xe9c <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     ea2:	82 e0       	ldi	r24, 0x02	; 2
     ea4:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     ea6:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     ea8:	83 e0       	ldi	r24, 0x03	; 3
     eaa:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     eac:	ce 01       	movw	r24, r28
     eae:	01 96       	adiw	r24, 0x01	; 1
     eb0:	61 e0       	ldi	r22, 0x01	; 1
     eb2:	c8 db       	rcall	.-2160   	; 0x644 <Endpoint_ConfigureEndpointTable>
     eb4:	88 23       	and	r24, r24
     eb6:	59 f0       	breq	.+22     	; 0xece <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     eb8:	ce 01       	movw	r24, r28
     eba:	06 96       	adiw	r24, 0x06	; 6
     ebc:	61 e0       	ldi	r22, 0x01	; 1
     ebe:	c2 db       	rcall	.-2172   	; 0x644 <Endpoint_ConfigureEndpointTable>
     ec0:	88 23       	and	r24, r24
     ec2:	29 f0       	breq	.+10     	; 0xece <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     ec4:	ce 01       	movw	r24, r28
     ec6:	0b 96       	adiw	r24, 0x0b	; 11
     ec8:	61 e0       	ldi	r22, 0x01	; 1
     eca:	bc db       	rcall	.-2184   	; 0x644 <Endpoint_ConfigureEndpointTable>
     ecc:	01 c0       	rjmp	.+2      	; 0xed0 <CDC_Device_ConfigureEndpoints+0x42>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
     ece:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	08 95       	ret

00000ed6 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	0f 92       	push	r0
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     ee2:	8e b3       	in	r24, 0x1e	; 30
     ee4:	84 30       	cpi	r24, 0x04	; 4
     ee6:	f9 f4       	brne	.+62     	; 0xf26 <CDC_Device_SendByte+0x50>
     ee8:	24 89       	ldd	r18, Z+20	; 0x14
     eea:	35 89       	ldd	r19, Z+21	; 0x15
     eec:	46 89       	ldd	r20, Z+22	; 0x16
     eee:	57 89       	ldd	r21, Z+23	; 0x17
     ef0:	21 15       	cp	r18, r1
     ef2:	31 05       	cpc	r19, r1
     ef4:	41 05       	cpc	r20, r1
     ef6:	51 05       	cpc	r21, r1
     ef8:	b1 f0       	breq	.+44     	; 0xf26 <CDC_Device_SendByte+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     efa:	81 81       	ldd	r24, Z+1	; 0x01
     efc:	8f 70       	andi	r24, 0x0F	; 15
     efe:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f02:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     f06:	85 fd       	sbrc	r24, 5
     f08:	0a c0       	rjmp	.+20     	; 0xf1e <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f0a:	80 91 e8 00 	lds	r24, 0x00E8
     f0e:	8e 77       	andi	r24, 0x7E	; 126
     f10:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     f14:	69 83       	std	Y+1, r22	; 0x01
     f16:	f9 db       	rcall	.-2062   	; 0x70a <Endpoint_WaitUntilReady>
     f18:	69 81       	ldd	r22, Y+1	; 0x01
     f1a:	88 23       	and	r24, r24
     f1c:	29 f4       	brne	.+10     	; 0xf28 <CDC_Device_SendByte+0x52>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f1e:	60 93 f1 00 	sts	0x00F1, r22
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <CDC_Device_SendByte+0x52>

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     f26:	82 e0       	ldi	r24, 0x02	; 2
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
     f28:	0f 90       	pop	r0
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f30:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f32:	8e b3       	in	r24, 0x1e	; 30
     f34:	84 30       	cpi	r24, 0x04	; 4
     f36:	29 f5       	brne	.+74     	; 0xf82 <CDC_Device_Flush+0x52>
     f38:	24 89       	ldd	r18, Z+20	; 0x14
     f3a:	35 89       	ldd	r19, Z+21	; 0x15
     f3c:	46 89       	ldd	r20, Z+22	; 0x16
     f3e:	57 89       	ldd	r21, Z+23	; 0x17
     f40:	21 15       	cp	r18, r1
     f42:	31 05       	cpc	r19, r1
     f44:	41 05       	cpc	r20, r1
     f46:	51 05       	cpc	r21, r1
     f48:	e1 f0       	breq	.+56     	; 0xf82 <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f4a:	81 81       	ldd	r24, Z+1	; 0x01
     f4c:	8f 70       	andi	r24, 0x0F	; 15
     f4e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     f52:	80 91 f2 00 	lds	r24, 0x00F2
     f56:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	a1 f0       	breq	.+40     	; 0xf86 <CDC_Device_Flush+0x56>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f5e:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f62:	80 91 e8 00 	lds	r24, 0x00E8
     f66:	8e 77       	andi	r24, 0x7E	; 126
     f68:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     f6c:	95 fd       	sbrc	r25, 5
     f6e:	0d c0       	rjmp	.+26     	; 0xf8a <CDC_Device_Flush+0x5a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     f70:	cc db       	rcall	.-2152   	; 0x70a <Endpoint_WaitUntilReady>
     f72:	88 23       	and	r24, r24
     f74:	59 f4       	brne	.+22     	; 0xf8c <CDC_Device_Flush+0x5c>
     f76:	90 91 e8 00 	lds	r25, 0x00E8
     f7a:	9e 77       	andi	r25, 0x7E	; 126
     f7c:	90 93 e8 00 	sts	0x00E8, r25
     f80:	08 95       	ret
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	08 95       	ret
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	08 95       	ret
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
     f8a:	80 e0       	ldi	r24, 0x00	; 0
}
     f8c:	08 95       	ret

00000f8e <CDC_Device_USBTask>:
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f8e:	2e b3       	in	r18, 0x1e	; 30
     f90:	24 30       	cpi	r18, 0x04	; 4
     f92:	99 f4       	brne	.+38     	; 0xfba <CDC_Device_USBTask+0x2c>
     f94:	fc 01       	movw	r30, r24
     f96:	24 89       	ldd	r18, Z+20	; 0x14
     f98:	35 89       	ldd	r19, Z+21	; 0x15
     f9a:	46 89       	ldd	r20, Z+22	; 0x16
     f9c:	57 89       	ldd	r21, Z+23	; 0x17
     f9e:	21 15       	cp	r18, r1
     fa0:	31 05       	cpc	r19, r1
     fa2:	41 05       	cpc	r20, r1
     fa4:	51 05       	cpc	r21, r1
     fa6:	49 f0       	breq	.+18     	; 0xfba <CDC_Device_USBTask+0x2c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fa8:	21 81       	ldd	r18, Z+1	; 0x01
     faa:	2f 70       	andi	r18, 0x0F	; 15
     fac:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     fb0:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
     fb4:	20 ff       	sbrs	r18, 0
     fb6:	01 c0       	rjmp	.+2      	; 0xfba <CDC_Device_USBTask+0x2c>
	  CDC_Device_Flush(CDCInterfaceInfo);
     fb8:	bb cf       	rjmp	.-138    	; 0xf30 <CDC_Device_Flush>
     fba:	08 95       	ret

00000fbc <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     fbc:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     fbe:	8e b3       	in	r24, 0x1e	; 30
     fc0:	84 30       	cpi	r24, 0x04	; 4
     fc2:	49 f5       	brne	.+82     	; 0x1016 <CDC_Device_ReceiveByte+0x5a>
     fc4:	24 89       	ldd	r18, Z+20	; 0x14
     fc6:	35 89       	ldd	r19, Z+21	; 0x15
     fc8:	46 89       	ldd	r20, Z+22	; 0x16
     fca:	57 89       	ldd	r21, Z+23	; 0x17
     fcc:	21 15       	cp	r18, r1
     fce:	31 05       	cpc	r19, r1
     fd0:	41 05       	cpc	r20, r1
     fd2:	51 05       	cpc	r21, r1
     fd4:	01 f1       	breq	.+64     	; 0x1016 <CDC_Device_ReceiveByte+0x5a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fd6:	86 81       	ldd	r24, Z+6	; 0x06
     fd8:	8f 70       	andi	r24, 0x0F	; 15
     fda:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fde:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     fe2:	82 ff       	sbrs	r24, 2
     fe4:	18 c0       	rjmp	.+48     	; 0x1016 <CDC_Device_ReceiveByte+0x5a>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     fe6:	80 91 f2 00 	lds	r24, 0x00F2
     fea:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	21 f0       	breq	.+8      	; 0xffa <CDC_Device_ReceiveByte+0x3e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ff2:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <CDC_Device_ReceiveByte+0x42>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
     ffa:	2f ef       	ldi	r18, 0xFF	; 255
     ffc:	3f ef       	ldi	r19, 0xFF	; 255
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     ffe:	80 91 f2 00 	lds	r24, 0x00F2
    1002:	90 91 f3 00 	lds	r25, 0x00F3
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	41 f4       	brne	.+16     	; 0x101a <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    100a:	80 91 e8 00 	lds	r24, 0x00E8
    100e:	8b 77       	andi	r24, 0x7B	; 123
    1010:	80 93 e8 00 	sts	0x00E8, r24
    1014:	02 c0       	rjmp	.+4      	; 0x101a <CDC_Device_ReceiveByte+0x5e>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1016:	2f ef       	ldi	r18, 0xFF	; 255
    1018:	3f ef       	ldi	r19, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    101a:	c9 01       	movw	r24, r18
    101c:	08 95       	ret

0000101e <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    101e:	08 95       	ret

00001020 <__udivmodsi4>:
    1020:	a1 e2       	ldi	r26, 0x21	; 33
    1022:	1a 2e       	mov	r1, r26
    1024:	aa 1b       	sub	r26, r26
    1026:	bb 1b       	sub	r27, r27
    1028:	fd 01       	movw	r30, r26
    102a:	0d c0       	rjmp	.+26     	; 0x1046 <__udivmodsi4_ep>

0000102c <__udivmodsi4_loop>:
    102c:	aa 1f       	adc	r26, r26
    102e:	bb 1f       	adc	r27, r27
    1030:	ee 1f       	adc	r30, r30
    1032:	ff 1f       	adc	r31, r31
    1034:	a2 17       	cp	r26, r18
    1036:	b3 07       	cpc	r27, r19
    1038:	e4 07       	cpc	r30, r20
    103a:	f5 07       	cpc	r31, r21
    103c:	20 f0       	brcs	.+8      	; 0x1046 <__udivmodsi4_ep>
    103e:	a2 1b       	sub	r26, r18
    1040:	b3 0b       	sbc	r27, r19
    1042:	e4 0b       	sbc	r30, r20
    1044:	f5 0b       	sbc	r31, r21

00001046 <__udivmodsi4_ep>:
    1046:	66 1f       	adc	r22, r22
    1048:	77 1f       	adc	r23, r23
    104a:	88 1f       	adc	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	1a 94       	dec	r1
    1050:	69 f7       	brne	.-38     	; 0x102c <__udivmodsi4_loop>
    1052:	60 95       	com	r22
    1054:	70 95       	com	r23
    1056:	80 95       	com	r24
    1058:	90 95       	com	r25
    105a:	9b 01       	movw	r18, r22
    105c:	ac 01       	movw	r20, r24
    105e:	bd 01       	movw	r22, r26
    1060:	cf 01       	movw	r24, r30
    1062:	08 95       	ret

00001064 <_exit>:
    1064:	f8 94       	cli

00001066 <__stop_program>:
    1066:	ff cf       	rjmp	.-2      	; 0x1066 <__stop_program>
