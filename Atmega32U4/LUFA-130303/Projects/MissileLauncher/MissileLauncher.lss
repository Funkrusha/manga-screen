
MissileLauncher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00001010  000010a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001010  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  00800152  00800152  000010f6  2**0
                  ALLOC
  3 .stab         000009d8  00000000  00000000  000010f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000110  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000780  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000110c  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000cba1  00000000  00000000  0000346c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002bce  00000000  00000000  0001000d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000095e7  00000000  00000000  00012bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c60  00000000  00000000  0001c1c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004db6  00000000  00000000  0001ce24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000723c  00000000  00000000  00021bda  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001f4c  00000000  00000000  00028e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a48  00000000  00000000  0002ad62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
       6:	00 00       	nop
       8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
       a:	00 00       	nop
       c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
       e:	00 00       	nop
      10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
      12:	00 00       	nop
      14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
      16:	00 00       	nop
      18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
      22:	00 00       	nop
      24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
      26:	00 00       	nop
      28:	6c c5       	rjmp	.+2776   	; 0xb02 <__vector_10>
      2a:	00 00       	nop
      2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
      32:	00 00       	nop
      34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
      36:	00 00       	nop
      38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
      42:	00 00       	nop
      44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
      46:	00 00       	nop
      48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
      52:	00 00       	nop
      54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
      56:	00 00       	nop
      58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
      62:	00 00       	nop
      64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
      66:	00 00       	nop
      68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
      72:	00 00       	nop
      74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
      76:	00 00       	nop
      78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
      82:	00 00       	nop
      84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
      86:	00 00       	nop
      88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
      92:	00 00       	nop
      94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e0 e1       	ldi	r30, 0x10	; 16
      ac:	f0 e1       	ldi	r31, 0x10	; 16
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a2 35       	cpi	r26, 0x52	; 82
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	11 e0       	ldi	r17, 0x01	; 1
      c0:	a2 e5       	ldi	r26, 0x52	; 82
      c2:	b1 e0       	ldi	r27, 0x01	; 1
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a1 3a       	cpi	r26, 0xA1	; 161
      ca:	b1 07       	cpc	r27, r17
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	0b d1       	rcall	.+534    	; 0x2e6 <main>
      d0:	9d c7       	rjmp	.+3898   	; 0x100c <_exit>

000000d2 <__bad_interrupt>:
      d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
      d4:	9b b1       	in	r25, 0x0b	; 11
      d6:	9f 70       	andi	r25, 0x0F	; 15
      d8:	98 2b       	or	r25, r24
      da:	9b b9       	out	0x0b, r25	; 11
			}
      dc:	08 95       	ret

000000de <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
      de:	84 b7       	in	r24, 0x34	; 52
      e0:	87 7f       	andi	r24, 0xF7	; 247
      e2:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
      e4:	88 e1       	ldi	r24, 0x18	; 24
      e6:	0f b6       	in	r0, 0x3f	; 63
      e8:	f8 94       	cli
      ea:	80 93 60 00 	sts	0x0060, r24
      ee:	10 92 60 00 	sts	0x0060, r1
      f2:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	80 e8       	ldi	r24, 0x80	; 128
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	f8 94       	cli
      fc:	80 93 61 00 	sts	0x0061, r24
     100:	90 93 61 00 	sts	0x0061, r25
     104:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     106:	8a b1       	in	r24, 0x0a	; 10
     108:	80 6f       	ori	r24, 0xF0	; 240
     10a:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     10c:	8b b1       	in	r24, 0x0b	; 11
     10e:	8f 70       	andi	r24, 0x0F	; 15
     110:	8b b9       	out	0x0b, r24	; 11
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     112:	dc d4       	rcall	.+2488   	; 0xacc <USB_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     114:	84 b1       	in	r24, 0x04	; 4
     116:	8f 71       	andi	r24, 0x1F	; 31
     118:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     11a:	8d b1       	in	r24, 0x0d	; 13
     11c:	8f 7c       	andi	r24, 0xCF	; 207
     11e:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     120:	85 b1       	in	r24, 0x05	; 5
     122:	80 6e       	ori	r24, 0xE0	; 224
     124:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     126:	8e b1       	in	r24, 0x0e	; 14
     128:	80 63       	ori	r24, 0x30	; 48
     12a:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     12c:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     12e:	72 9a       	sbi	0x0e, 2	; 14
	Joystick_Init();
	Buttons_Init();
}
     130:	08 95       	ret

00000132 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     132:	80 ea       	ldi	r24, 0xA0	; 160
}
     134:	cf cf       	rjmp	.-98     	; 0xd4 <LEDs_SetAllLEDs>

00000136 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     136:	80 e1       	ldi	r24, 0x10	; 16
}
     138:	cd cf       	rjmp	.-102    	; 0xd4 <LEDs_SetAllLEDs>

0000013a <EVENT_USB_Host_DeviceEnumerationComplete>:
/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     13a:	80 ea       	ldi	r24, 0xA0	; 160
     13c:	cb df       	rcall	.-106    	; 0xd4 <LEDs_SetAllLEDs>

	/* Get and process the configuration descriptor data */
	if (ProcessConfigurationDescriptor() != SuccessfulConfigRead)
     13e:	f8 d0       	rcall	.+496    	; 0x330 <ProcessConfigurationDescriptor>
     140:	88 23       	and	r24, r24
     142:	21 f4       	brne	.+8      	; 0x14c <EVENT_USB_Host_DeviceEnumerationComplete+0x12>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	31 d7       	rcall	.+3682   	; 0xfaa <USB_Host_SetDeviceConfiguration>
     148:	88 23       	and	r24, r24
     14a:	11 f0       	breq	.+4      	; 0x150 <EVENT_USB_Host_DeviceEnumerationComplete+0x16>
	{
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     14c:	80 e9       	ldi	r24, 0x90	; 144
     14e:	01 c0       	rjmp	.+2      	; 0x152 <EVENT_USB_Host_DeviceEnumerationComplete+0x18>
		return;
	}

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     150:	80 e6       	ldi	r24, 0x60	; 96
     152:	c0 cf       	rjmp	.-128    	; 0xd4 <LEDs_SetAllLEDs>

00000154 <EVENT_USB_Host_HostError>:
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();
     154:	54 d4       	rcall	.+2216   	; 0x9fe <USB_Disable>

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     156:	80 e9       	ldi	r24, 0x90	; 144
     158:	bd df       	rcall	.-134    	; 0xd4 <LEDs_SetAllLEDs>
     15a:	ff cf       	rjmp	.-2      	; 0x15a <EVENT_USB_Host_HostError+0x6>

0000015c <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     15c:	80 e9       	ldi	r24, 0x90	; 144
}
     15e:	ba cf       	rjmp	.-140    	; 0xd4 <LEDs_SetAllLEDs>

00000160 <DiscardNextReport>:

/** Reads in and discards the next report from the attached device. */
void DiscardNextReport(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     160:	8e b3       	in	r24, 0x1e	; 30
     162:	8b 30       	cpi	r24, 0x0B	; 11
     164:	e1 f4       	brne	.+56     	; 0x19e <DiscardNextReport+0x3e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     16c:	80 91 a9 00 	lds	r24, 0x00A9
     170:	8f 7b       	andi	r24, 0xBF	; 191
     172:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     176:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select and unfreeze HID data IN pipe */
	Pipe_SelectPipe(HID_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (!(Pipe_IsINReceived()))
     17a:	80 fd       	sbrc	r24, 0
     17c:	06 c0       	rjmp	.+12     	; 0x18a <DiscardNextReport+0x2a>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     17e:	80 91 a9 00 	lds	r24, 0x00A9
     182:	80 64       	ori	r24, 0x40	; 64
     184:	80 93 a9 00 	sts	0x00A9, r24
	{
		/* Refreeze HID data IN pipe */
		Pipe_Freeze();

		return;
     188:	08 95       	ret
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     18a:	80 91 a6 00 	lds	r24, 0x00A6
     18e:	8e 77       	andi	r24, 0x7E	; 126
     190:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     194:	80 91 a9 00 	lds	r24, 0x00A9
     198:	80 64       	ori	r24, 0x40	; 64
     19a:	80 93 a9 00 	sts	0x00A9, r24
     19e:	08 95       	ret

000001a0 <WriteNextReport>:
 *  \param[in] ReportLength  Length of the report to send
 */
void WriteNextReport(uint8_t* const ReportOUTData,
                     const uint16_t ReportLength)
{
	if (USB_HostState != HOST_STATE_Configured)
     1a0:	2e b3       	in	r18, 0x1e	; 30
     1a2:	2b 30       	cpi	r18, 0x0B	; 11
     1a4:	b9 f5       	brne	.+110    	; 0x214 <WriteNextReport+0x74>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     1a6:	22 e0       	ldi	r18, 0x02	; 2
     1a8:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     1ac:	20 91 ac 00 	lds	r18, 0x00AC
	/* Select and unfreeze HID data OUT pipe */
	Pipe_SelectPipe(HID_DATA_OUT_PIPE);

	/* Not all HID devices have an OUT endpoint (some require OUT reports to be sent over the
	 * control endpoint instead) - check to see if the OUT endpoint has been initialized */
	if (Pipe_IsConfigured())
     1b0:	27 ff       	sbrs	r18, 7
     1b2:	17 c0       	rjmp	.+46     	; 0x1e2 <WriteNextReport+0x42>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     1b4:	20 91 a9 00 	lds	r18, 0x00A9
     1b8:	2f 7b       	andi	r18, 0xBF	; 191
     1ba:	20 93 a9 00 	sts	0x00A9, r18
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     1be:	20 91 a6 00 	lds	r18, 0x00A6
	{
		Pipe_Unfreeze();

		/* Ensure pipe is ready to be written to before continuing */
		if (!(Pipe_IsOUTReady()))
     1c2:	22 ff       	sbrs	r18, 2
     1c4:	08 c0       	rjmp	.+16     	; 0x1d6 <WriteNextReport+0x36>

			return;
		}

		/* Write out HID report data */
		Pipe_Write_Stream_LE(ReportOUTData, ReportLength, NULL);
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	0b d3       	rcall	.+1558   	; 0x7e2 <Pipe_Write_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     1cc:	80 91 a6 00 	lds	r24, 0x00A6
     1d0:	8b 77       	andi	r24, 0x7B	; 123
     1d2:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     1d6:	80 91 a9 00 	lds	r24, 0x00A9
     1da:	80 64       	ori	r24, 0x40	; 64
     1dc:	80 93 a9 00 	sts	0x00A9, r24
     1e0:	08 95       	ret
		Pipe_Freeze();
	}
	else
	{
		/* Class specific request to send a HID report to the device */
		USB_ControlRequest = (USB_Request_Header_t)
     1e2:	21 e2       	ldi	r18, 0x21	; 33
     1e4:	20 93 99 01 	sts	0x0199, r18
     1e8:	29 e0       	ldi	r18, 0x09	; 9
     1ea:	20 93 9a 01 	sts	0x019A, r18
     1ee:	22 e0       	ldi	r18, 0x02	; 2
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	30 93 9c 01 	sts	0x019C, r19
     1f6:	20 93 9b 01 	sts	0x019B, r18
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	30 93 9e 01 	sts	0x019E, r19
     202:	20 93 9d 01 	sts	0x019D, r18
     206:	70 93 a0 01 	sts	0x01A0, r23
     20a:	60 93 9f 01 	sts	0x019F, r22
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     20e:	10 92 a7 00 	sts	0x00A7, r1

		/* Select the control pipe for the request transfer */
		Pipe_SelectPipe(PIPE_CONTROLPIPE);

		/* Send the request to the device */
		USB_Host_SendControlRequest(ReportOUTData);
     212:	cc c5       	rjmp	.+2968   	; 0xdac <USB_Host_SendControlRequest>
     214:	08 95       	ret

00000216 <Send_Command_Report>:
 *  \param[in] ReportSize  Report length in bytes.
 */
void Send_Command_Report(const uint8_t* const Report,
                         const uint16_t ReportSize)
{
	memcpy(CmdBuffer, Report, 8);
     216:	e4 e5       	ldi	r30, 0x54	; 84
     218:	f1 e0       	ldi	r31, 0x01	; 1
     21a:	28 2f       	mov	r18, r24
     21c:	39 2f       	mov	r19, r25
     21e:	d9 01       	movw	r26, r18
     220:	88 e0       	ldi	r24, 0x08	; 8
     222:	0d 90       	ld	r0, X+
     224:	01 92       	st	Z+, r0
     226:	81 50       	subi	r24, 0x01	; 1
     228:	e1 f7       	brne	.-8      	; 0x222 <Send_Command_Report+0xc>
	WriteNextReport(CmdBuffer, ReportSize);
     22a:	84 e5       	ldi	r24, 0x54	; 84
     22c:	91 e0       	ldi	r25, 0x01	; 1
}
     22e:	b8 cf       	rjmp	.-144    	; 0x1a0 <WriteNextReport>

00000230 <Send_Command>:
/** Sends one of the \c CMD_* command constants to the attached device.
 *
 *  \param[in] Command  One of the command constants.
 */
void Send_Command(const uint8_t* const Command)
{
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	ec 01       	movw	r28, r24
	if ((CmdState == CMD_STOP && Command != CMD_STOP) ||
     236:	80 91 52 01 	lds	r24, 0x0152
     23a:	90 91 53 01 	lds	r25, 0x0153
     23e:	21 e0       	ldi	r18, 0x01	; 1
     240:	80 30       	cpi	r24, 0x00	; 0
     242:	92 07       	cpc	r25, r18
     244:	21 f4       	brne	.+8      	; 0x24e <Send_Command+0x1e>
     246:	c8 17       	cp	r28, r24
     248:	d9 07       	cpc	r29, r25
     24a:	29 f4       	brne	.+10     	; 0x256 <Send_Command+0x26>
     24c:	14 c0       	rjmp	.+40     	; 0x276 <Send_Command+0x46>
		(CmdState != CMD_STOP && Command == CMD_STOP))
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	c0 30       	cpi	r28, 0x00	; 0
     252:	d8 07       	cpc	r29, r24
     254:	81 f4       	brne	.+32     	; 0x276 <Send_Command+0x46>
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
     256:	80 e4       	ldi	r24, 0x40	; 64
     258:	89 b9       	out	0x09, r24	; 9
	{
		LEDs_ToggleLEDs(LEDS_LED4);

		Send_Command_Report(CMD_INITA, 8);
     25a:	88 e0       	ldi	r24, 0x08	; 8
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	68 e0       	ldi	r22, 0x08	; 8
     260:	70 e0       	ldi	r23, 0x00	; 0
     262:	d9 df       	rcall	.-78     	; 0x216 <Send_Command_Report>
		Send_Command_Report(CMD_INITB, 8);
     264:	80 e1       	ldi	r24, 0x10	; 16
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	68 e0       	ldi	r22, 0x08	; 8
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	d4 df       	rcall	.-88     	; 0x216 <Send_Command_Report>
		Send_Command_Report(Command, LAUNCHER_CMD_BUFFER_SIZE);
     26e:	ce 01       	movw	r24, r28
     270:	60 e4       	ldi	r22, 0x40	; 64
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	d0 df       	rcall	.-96     	; 0x216 <Send_Command_Report>
	}

	CmdState = Command;
     276:	d0 93 53 01 	sts	0x0153, r29
     27a:	c0 93 52 01 	sts	0x0152, r28
}
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	08 95       	ret

00000284 <Read_Joystick_Status>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     284:	23 b1       	in	r18, 0x03	; 3
     286:	8c b1       	in	r24, 0x0c	; 12
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     288:	9c b1       	in	r25, 0x0c	; 12
void Read_Joystick_Status(void)
{
	uint8_t JoyStatus_LCL = Joystick_GetStatus();
	uint8_t Buttons_LCL   = Buttons_GetStatus();

	if (Buttons_LCL & BUTTONS_BUTTON1)
     28a:	92 fd       	sbrc	r25, 2
     28c:	03 c0       	rjmp	.+6      	; 0x294 <Read_Joystick_Status+0x10>
	  Send_Command(CMD_FIRE);
     28e:	88 e1       	ldi	r24, 0x18	; 24
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	1c c0       	rjmp	.+56     	; 0x2cc <Read_Joystick_Status+0x48>
     294:	80 95       	com	r24
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	80 73       	andi	r24, 0x30	; 48
     29a:	90 70       	andi	r25, 0x00	; 0
     29c:	95 95       	asr	r25
     29e:	87 95       	ror	r24
     2a0:	20 95       	com	r18
     2a2:	20 7e       	andi	r18, 0xE0	; 224
     2a4:	28 2b       	or	r18, r24
	else if (JoyStatus_LCL & JOY_UP)
     2a6:	27 ff       	sbrs	r18, 7
     2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <Read_Joystick_Status+0x2c>
	  Send_Command(CMD_UP);
     2aa:	80 e2       	ldi	r24, 0x20	; 32
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	0e c0       	rjmp	.+28     	; 0x2cc <Read_Joystick_Status+0x48>
	else if (JoyStatus_LCL & JOY_DOWN)
     2b0:	24 ff       	sbrs	r18, 4
     2b2:	03 c0       	rjmp	.+6      	; 0x2ba <Read_Joystick_Status+0x36>
	  Send_Command(CMD_DOWN);
     2b4:	88 e2       	ldi	r24, 0x28	; 40
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	09 c0       	rjmp	.+18     	; 0x2cc <Read_Joystick_Status+0x48>
	else if (JoyStatus_LCL & JOY_LEFT)
     2ba:	26 ff       	sbrs	r18, 6
     2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <Read_Joystick_Status+0x40>
	  Send_Command(CMD_LEFT);
     2be:	80 e3       	ldi	r24, 0x30	; 48
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	04 c0       	rjmp	.+8      	; 0x2cc <Read_Joystick_Status+0x48>
	else if (JoyStatus_LCL & JOY_RIGHT)
     2c4:	23 ff       	sbrs	r18, 3
     2c6:	03 c0       	rjmp	.+6      	; 0x2ce <Read_Joystick_Status+0x4a>
	  Send_Command(CMD_RIGHT);
     2c8:	88 e3       	ldi	r24, 0x38	; 56
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	b1 cf       	rjmp	.-158    	; 0x230 <Send_Command>
	else if (CmdState != CMD_STOP)
     2ce:	80 91 52 01 	lds	r24, 0x0152
     2d2:	90 91 53 01 	lds	r25, 0x0153
     2d6:	21 e0       	ldi	r18, 0x01	; 1
     2d8:	80 30       	cpi	r24, 0x00	; 0
     2da:	92 07       	cpc	r25, r18
     2dc:	19 f0       	breq	.+6      	; 0x2e4 <Read_Joystick_Status+0x60>
	  Send_Command(CMD_STOP);
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	a6 cf       	rjmp	.-180    	; 0x230 <Send_Command>
     2e4:	08 95       	ret

000002e6 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     2e6:	fb de       	rcall	.-522    	; 0xde <SetupHardware>

	CmdState = CMD_STOP;
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	90 93 53 01 	sts	0x0153, r25
     2f0:	80 93 52 01 	sts	0x0152, r24

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2f4:	80 e1       	ldi	r24, 0x10	; 16
     2f6:	ee de       	rcall	.-548    	; 0xd4 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     2f8:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		Read_Joystick_Status();
     2fa:	c4 df       	rcall	.-120    	; 0x284 <Read_Joystick_Status>
		DiscardNextReport();
     2fc:	31 df       	rcall	.-414    	; 0x160 <DiscardNextReport>

		USB_USBTask();
     2fe:	79 d6       	rcall	.+3314   	; 0xff2 <USB_USBTask>
     300:	fc cf       	rjmp	.-8      	; 0x2fa <main+0x14>

00000302 <DComp_NextHIDInterface>:
 *  This comparator searches for the next Interface descriptor of the correct HID Class value.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextHIDInterface(void* CurrentDescriptor)
{
     302:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	/* Determine if the current descriptor is an interface descriptor */
	if (Header->Type == DTYPE_Interface)
     304:	81 81       	ldd	r24, Z+1	; 0x01
     306:	84 30       	cpi	r24, 0x04	; 4
     308:	19 f4       	brne	.+6      	; 0x310 <DComp_NextHIDInterface+0xe>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class and protocol, break out if correct class/protocol interface found */
		if (Interface->Class == HID_CLASS)
     30a:	85 81       	ldd	r24, Z+5	; 0x05
     30c:	83 30       	cpi	r24, 0x03	; 3
     30e:	11 f0       	breq	.+4      	; 0x314 <DComp_NextHIDInterface+0x12>
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	/* Current descriptor does not match what this comparator is looking for */
	return DESCRIPTOR_SEARCH_NotFound;
     310:	82 e0       	ldi	r24, 0x02	; 2
     312:	08 95       	ret

		/* Check the HID descriptor class and protocol, break out if correct class/protocol interface found */
		if (Interface->Class == HID_CLASS)
		{
			/* Indicate that the descriptor being searched for has been found */
			return DESCRIPTOR_SEARCH_Found;
     314:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	/* Current descriptor does not match what this comparator is looking for */
	return DESCRIPTOR_SEARCH_NotFound;
}
     316:	08 95       	ret

00000318 <DComp_NextHIDInterfaceDataEndpoint>:
uint8_t DComp_NextHIDInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	/* Determine the type of the current descriptor */
	if (Header->Type == DTYPE_Endpoint)
     318:	fc 01       	movw	r30, r24
     31a:	81 81       	ldd	r24, Z+1	; 0x01
     31c:	85 30       	cpi	r24, 0x05	; 5
     31e:	21 f0       	breq	.+8      	; 0x328 <DComp_NextHIDInterfaceDataEndpoint+0x10>
	{
		/* Indicate that the descriptor being searched for has been found */
		return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     320:	84 30       	cpi	r24, 0x04	; 4
     322:	21 f4       	brne	.+8      	; 0x32c <DComp_NextHIDInterfaceDataEndpoint+0x14>
	{
		/* Indicate that the search has failed prematurely and should be aborted */
		return DESCRIPTOR_SEARCH_Fail;
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	08 95       	ret

	/* Determine the type of the current descriptor */
	if (Header->Type == DTYPE_Endpoint)
	{
		/* Indicate that the descriptor being searched for has been found */
		return DESCRIPTOR_SEARCH_Found;
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	08 95       	ret
		return DESCRIPTOR_SEARCH_Fail;
	}
	else
	{
		/* Current descriptor does not match what this comparator is looking for */
		return DESCRIPTOR_SEARCH_NotFound;
     32c:	82 e0       	ldi	r24, 0x02	; 2
	}
}
     32e:	08 95       	ret

00000330 <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint.
 *
 *  \return An error code from the GenericHIDHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     330:	8f 92       	push	r8
     332:	9f 92       	push	r9
     334:	af 92       	push	r10
     336:	bf 92       	push	r11
     338:	cf 92       	push	r12
     33a:	df 92       	push	r13
     33c:	ef 92       	push	r14
     33e:	ff 92       	push	r15
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
     344:	df 93       	push	r29
     346:	cf 93       	push	r28
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
     34c:	c4 50       	subi	r28, 0x04	; 4
     34e:	d2 40       	sbci	r29, 0x02	; 2
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	f8 94       	cli
     354:	de bf       	out	0x3e, r29	; 62
     356:	0f be       	out	0x3f, r0	; 63
     358:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     35a:	ae 01       	movw	r20, r28
     35c:	4b 5f       	subi	r20, 0xFB	; 251
     35e:	5f 4f       	sbci	r21, 0xFF	; 255
     360:	5a 83       	std	Y+2, r21	; 0x02
     362:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     364:	8e 01       	movw	r16, r28
     366:	0d 5f       	subi	r16, 0xFD	; 253
     368:	1f 4f       	sbci	r17, 0xFF	; 255
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	b8 01       	movw	r22, r16
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	32 e0       	ldi	r19, 0x02	; 2
     372:	58 d4       	rcall	.+2224   	; 0xc24 <USB_Host_GetDeviceConfigDescriptor>
     374:	85 30       	cpi	r24, 0x05	; 5
     376:	09 f4       	brne	.+2      	; 0x37a <ProcessConfigurationDescriptor+0x4a>
     378:	51 c0       	rjmp	.+162    	; 0x41c <ProcessConfigurationDescriptor+0xec>
     37a:	86 30       	cpi	r24, 0x06	; 6
     37c:	69 f0       	breq	.+26     	; 0x398 <ProcessConfigurationDescriptor+0x68>
     37e:	88 23       	and	r24, r24
     380:	69 f4       	brne	.+26     	; 0x39c <ProcessConfigurationDescriptor+0x6c>
     382:	cc 24       	eor	r12, r12
     384:	dd 24       	eor	r13, r13
     386:	ee 24       	eor	r14, r14
     388:	ff 24       	eor	r15, r15
     38a:	88 24       	eor	r8, r8
     38c:	99 24       	eor	r9, r9

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     38e:	58 01       	movw	r10, r16
     390:	8e 01       	movw	r16, r28
     392:	0f 5f       	subi	r16, 0xFF	; 255
     394:	1f 4f       	sbci	r17, 0xFF	; 255
     396:	04 c0       	rjmp	.+8      	; 0x3a0 <ProcessConfigurationDescriptor+0x70>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     398:	83 e0       	ldi	r24, 0x03	; 3
     39a:	45 c0       	rjmp	.+138    	; 0x426 <ProcessConfigurationDescriptor+0xf6>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	43 c0       	rjmp	.+134    	; 0x426 <ProcessConfigurationDescriptor+0xf6>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     3a0:	81 14       	cp	r8, r1
     3a2:	91 04       	cpc	r9, r1
     3a4:	39 f0       	breq	.+14     	; 0x3b4 <ProcessConfigurationDescriptor+0x84>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     3a6:	c5 01       	movw	r24, r10
     3a8:	b8 01       	movw	r22, r16
     3aa:	4c e8       	ldi	r20, 0x8C	; 140
     3ac:	51 e0       	ldi	r21, 0x01	; 1
     3ae:	91 d4       	rcall	.+2338   	; 0xcd2 <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     3b0:	88 23       	and	r24, r24
     3b2:	79 f0       	breq	.+30     	; 0x3d2 <ProcessConfigurationDescriptor+0xa2>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextHIDInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Not all HID devices have an OUT endpoint - if we've reached the end of the HID descriptor
			 * but only found the mandatory IN endpoint, it's safe to continue with the device enumeration */
			if (DataINEndpoint)
     3b4:	e1 14       	cp	r14, r1
     3b6:	f1 04       	cpc	r15, r1
     3b8:	d1 f4       	brne	.+52     	; 0x3ee <ProcessConfigurationDescriptor+0xbe>
			  break;

			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     3ba:	c5 01       	movw	r24, r10
     3bc:	b8 01       	movw	r22, r16
     3be:	41 e8       	ldi	r20, 0x81	; 129
     3c0:	51 e0       	ldi	r21, 0x01	; 1
     3c2:	87 d4       	rcall	.+2318   	; 0xcd2 <USB_GetNextDescriptorComp>
     3c4:	88 23       	and	r24, r24
     3c6:	61 f5       	brne	.+88     	; 0x420 <ProcessConfigurationDescriptor+0xf0>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     3c8:	89 80       	ldd	r8, Y+1	; 0x01
     3ca:	9a 80       	ldd	r9, Y+2	; 0x02

			/* Clear any found endpoints */
			DataOUTEndpoint = NULL;
     3cc:	cc 24       	eor	r12, r12
     3ce:	dd 24       	eor	r13, r13
     3d0:	e7 cf       	rjmp	.-50     	; 0x3a0 <ProcessConfigurationDescriptor+0x70>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     3d2:	e9 81       	ldd	r30, Y+1	; 0x01
     3d4:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     3d6:	82 81       	ldd	r24, Z+2	; 0x02
     3d8:	87 ff       	sbrs	r24, 7
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <ProcessConfigurationDescriptor+0xb0>
		  DataINEndpoint  = EndpointData;
     3dc:	7f 01       	movw	r14, r30
     3de:	01 c0       	rjmp	.+2      	; 0x3e2 <ProcessConfigurationDescriptor+0xb2>
		else
		  DataOUTEndpoint = EndpointData;
     3e0:	6f 01       	movw	r12, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     3e2:	e1 14       	cp	r14, r1
     3e4:	f1 04       	cpc	r15, r1
     3e6:	e1 f2       	breq	.-72     	; 0x3a0 <ProcessConfigurationDescriptor+0x70>
     3e8:	c1 14       	cp	r12, r1
     3ea:	d1 04       	cpc	r13, r1
     3ec:	c9 f2       	breq	.-78     	; 0x3a0 <ProcessConfigurationDescriptor+0x70>
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(HID_DATA_IN_PIPE, EP_TYPE_INTERRUPT, DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, 1);
     3ee:	f7 01       	movw	r30, r14
     3f0:	24 81       	ldd	r18, Z+4	; 0x04
     3f2:	35 81       	ldd	r19, Z+5	; 0x05
     3f4:	81 e8       	ldi	r24, 0x81	; 129
     3f6:	63 e0       	ldi	r22, 0x03	; 3
     3f8:	42 81       	ldd	r20, Z+2	; 0x02
     3fa:	01 e0       	ldi	r16, 0x01	; 1
     3fc:	55 d2       	rcall	.+1194   	; 0x8a8 <Pipe_ConfigurePipe>
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     3fe:	f7 01       	movw	r30, r14
     400:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     402:	80 93 ad 00 	sts	0x00AD, r24

	/* Check if the HID interface contained an optional OUT data endpoint */
	if (DataOUTEndpoint)
     406:	c1 14       	cp	r12, r1
     408:	d1 04       	cpc	r13, r1
     40a:	61 f0       	breq	.+24     	; 0x424 <ProcessConfigurationDescriptor+0xf4>
	{
		/* Configure the HID data OUT pipe */
		Pipe_ConfigurePipe(HID_DATA_OUT_PIPE, EP_TYPE_INTERRUPT, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
     40c:	f6 01       	movw	r30, r12
     40e:	24 81       	ldd	r18, Z+4	; 0x04
     410:	35 81       	ldd	r19, Z+5	; 0x05
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	63 e0       	ldi	r22, 0x03	; 3
     416:	42 81       	ldd	r20, Z+2	; 0x02
     418:	47 d2       	rcall	.+1166   	; 0x8a8 <Pipe_ConfigurePipe>
     41a:	04 c0       	rjmp	.+8      	; 0x424 <ProcessConfigurationDescriptor+0xf4>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     41c:	82 e0       	ldi	r24, 0x02	; 2
     41e:	03 c0       	rjmp	.+6      	; 0x426 <ProcessConfigurationDescriptor+0xf6>
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     420:	84 e0       	ldi	r24, 0x04	; 4
     422:	01 c0       	rjmp	.+2      	; 0x426 <ProcessConfigurationDescriptor+0xf6>
		/* Configure the HID data OUT pipe */
		Pipe_ConfigurePipe(HID_DATA_OUT_PIPE, EP_TYPE_INTERRUPT, DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, 1);
	}

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     424:	80 e0       	ldi	r24, 0x00	; 0
}
     426:	cc 5f       	subi	r28, 0xFC	; 252
     428:	dd 4f       	sbci	r29, 0xFD	; 253
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
     434:	cf 91       	pop	r28
     436:	df 91       	pop	r29
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	ff 90       	pop	r15
     43e:	ef 90       	pop	r14
     440:	df 90       	pop	r13
     442:	cf 90       	pop	r12
     444:	bf 90       	pop	r11
     446:	af 90       	pop	r10
     448:	9f 90       	pop	r9
     44a:	8f 90       	pop	r8
     44c:	08 95       	ret

0000044e <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     44e:	80 91 9e 00 	lds	r24, 0x009E
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	81 70       	andi	r24, 0x01	; 1
     456:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     458:	20 91 a0 00 	lds	r18, 0x00A0
     45c:	2d 7f       	andi	r18, 0xFD	; 253
     45e:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     462:	20 91 9e 00 	lds	r18, 0x009E
     466:	22 60       	ori	r18, 0x02	; 2
     468:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     46c:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     470:	21 fd       	sbrc	r18, 1
     472:	fc cf       	rjmp	.-8      	; 0x46c <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     474:	20 91 9e 00 	lds	r18, 0x009E
     478:	21 60       	ori	r18, 0x01	; 1
     47a:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     47e:	10 92 97 01 	sts	0x0197, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     482:	20 91 a0 00 	lds	r18, 0x00A0
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	20 72       	andi	r18, 0x20	; 32
     48a:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     48c:	40 91 a0 00 	lds	r20, 0x00A0
     490:	4f 7d       	andi	r20, 0xDF	; 223
     492:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     496:	40 91 9f 00 	lds	r20, 0x009F
     49a:	4f 7d       	andi	r20, 0xDF	; 223
     49c:	40 93 9f 00 	sts	0x009F, r20
     4a0:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     4a2:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     4a6:	55 ff       	sbrs	r21, 5
     4a8:	0b c0       	rjmp	.+22     	; 0x4c0 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     4aa:	40 91 9f 00 	lds	r20, 0x009F
     4ae:	4f 7d       	andi	r20, 0xDF	; 223
     4b0:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     4b4:	40 91 9f 00 	lds	r20, 0x009F
     4b8:	4d 7f       	andi	r20, 0xFD	; 253
     4ba:	40 93 9f 00 	sts	0x009F, r20
     4be:	08 c0       	rjmp	.+16     	; 0x4d0 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c0:	ef ec       	ldi	r30, 0xCF	; 207
     4c2:	f7 e0       	ldi	r31, 0x07	; 7
     4c4:	31 97       	sbiw	r30, 0x01	; 1
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <USB_Host_ResetDevice+0x76>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <USB_Host_ResetDevice+0x7c>
     4ca:	00 00       	nop
     4cc:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     4ce:	49 f7       	brne	.-46     	; 0x4a2 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     4d0:	21 15       	cp	r18, r1
     4d2:	31 05       	cpc	r19, r1
     4d4:	29 f0       	breq	.+10     	; 0x4e0 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     4d6:	20 91 a0 00 	lds	r18, 0x00A0
     4da:	20 62       	ori	r18, 0x20	; 32
     4dc:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     4e0:	00 97       	sbiw	r24, 0x00	; 0
     4e2:	29 f4       	brne	.+10     	; 0x4ee <USB_Host_ResetDevice+0xa0>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     4e4:	80 91 9e 00 	lds	r24, 0x009E
     4e8:	8e 7f       	andi	r24, 0xFE	; 254
     4ea:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     4ee:	80 91 a0 00 	lds	r24, 0x00A0
     4f2:	82 60       	ori	r24, 0x02	; 2
     4f4:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     4f8:	08 95       	ret

000004fa <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     4fa:	40 91 9e 00 	lds	r20, 0x009E
     4fe:	50 e0       	ldi	r21, 0x00	; 0
     500:	41 70       	andi	r20, 0x01	; 1
     502:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     504:	20 91 a0 00 	lds	r18, 0x00A0
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	20 72       	andi	r18, 0x20	; 32
     50c:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     50e:	90 91 a0 00 	lds	r25, 0x00A0
     512:	9f 7d       	andi	r25, 0xDF	; 223
     514:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     518:	90 91 9f 00 	lds	r25, 0x009F
     51c:	9f 7d       	andi	r25, 0xDF	; 223
     51e:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     522:	90 91 9e 00 	lds	r25, 0x009E
     526:	91 60       	ori	r25, 0x01	; 1
     528:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     52c:	25 c0       	rjmp	.+74     	; 0x578 <USB_Host_WaitMS+0x7e>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     52e:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     532:	95 ff       	sbrs	r25, 5
     534:	06 c0       	rjmp	.+12     	; 0x542 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     536:	90 91 9f 00 	lds	r25, 0x009F
     53a:	9f 7d       	andi	r25, 0xDF	; 223
     53c:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     540:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     542:	9e b3       	in	r25, 0x1e	; 30
     544:	91 30       	cpi	r25, 0x01	; 1
     546:	d9 f0       	breq	.+54     	; 0x57e <USB_Host_WaitMS+0x84>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     548:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     54c:	94 ff       	sbrs	r25, 4
     54e:	09 c0       	rjmp	.+18     	; 0x562 <USB_Host_WaitMS+0x68>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     550:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     554:	80 91 a6 00 	lds	r24, 0x00A6
     558:	8f 7e       	andi	r24, 0xEF	; 239
     55a:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     55e:	82 e0       	ldi	r24, 0x02	; 2

			break;
     560:	0f c0       	rjmp	.+30     	; 0x580 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     562:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled())
     566:	91 ff       	sbrs	r25, 1
     568:	07 c0       	rjmp	.+14     	; 0x578 <USB_Host_WaitMS+0x7e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     56a:	80 91 a6 00 	lds	r24, 0x00A6
     56e:	8d 7f       	andi	r24, 0xFD	; 253
     570:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     574:	83 e0       	ldi	r24, 0x03	; 3

			break;
     576:	04 c0       	rjmp	.+8      	; 0x580 <USB_Host_WaitMS+0x86>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     578:	88 23       	and	r24, r24
     57a:	c9 f6       	brne	.-78     	; 0x52e <USB_Host_WaitMS+0x34>
     57c:	01 c0       	rjmp	.+2      	; 0x580 <USB_Host_WaitMS+0x86>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     57e:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     580:	41 15       	cp	r20, r1
     582:	51 05       	cpc	r21, r1
     584:	29 f4       	brne	.+10     	; 0x590 <USB_Host_WaitMS+0x96>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     586:	90 91 9e 00 	lds	r25, 0x009E
     58a:	9e 7f       	andi	r25, 0xFE	; 254
     58c:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     590:	21 15       	cp	r18, r1
     592:	31 05       	cpc	r19, r1
     594:	29 f0       	breq	.+10     	; 0x5a0 <USB_Host_WaitMS+0xa6>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     596:	90 91 a0 00 	lds	r25, 0x00A0
     59a:	90 62       	ori	r25, 0x20	; 32
     59c:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     5a0:	08 95       	ret

000005a2 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	df 93       	push	r29
     5a8:	cf 93       	push	r28
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	28 97       	sbiw	r28, 0x08	; 8
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     5ba:	8e b3       	in	r24, 0x1e	; 30
     5bc:	85 30       	cpi	r24, 0x05	; 5
     5be:	09 f4       	brne	.+2      	; 0x5c2 <USB_Host_ProcessNextHostState+0x20>
     5c0:	96 c0       	rjmp	.+300    	; 0x6ee <USB_Host_ProcessNextHostState+0x14c>
     5c2:	86 30       	cpi	r24, 0x06	; 6
     5c4:	68 f4       	brcc	.+26     	; 0x5e0 <USB_Host_ProcessNextHostState+0x3e>
     5c6:	82 30       	cpi	r24, 0x02	; 2
     5c8:	b9 f1       	breq	.+110    	; 0x638 <USB_Host_ProcessNextHostState+0x96>
     5ca:	83 30       	cpi	r24, 0x03	; 3
     5cc:	18 f4       	brcc	.+6      	; 0x5d4 <USB_Host_ProcessNextHostState+0x32>
     5ce:	88 23       	and	r24, r24
     5d0:	a1 f0       	breq	.+40     	; 0x5fa <USB_Host_ProcessNextHostState+0x58>
     5d2:	fc c0       	rjmp	.+504    	; 0x7cc <USB_Host_ProcessNextHostState+0x22a>
     5d4:	83 30       	cpi	r24, 0x03	; 3
     5d6:	c9 f1       	breq	.+114    	; 0x64a <USB_Host_ProcessNextHostState+0xa8>
     5d8:	84 30       	cpi	r24, 0x04	; 4
     5da:	09 f0       	breq	.+2      	; 0x5de <USB_Host_ProcessNextHostState+0x3c>
     5dc:	f7 c0       	rjmp	.+494    	; 0x7cc <USB_Host_ProcessNextHostState+0x22a>
     5de:	60 c0       	rjmp	.+192    	; 0x6a0 <USB_Host_ProcessNextHostState+0xfe>
     5e0:	87 30       	cpi	r24, 0x07	; 7
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <USB_Host_ProcessNextHostState+0x44>
     5e4:	9a c0       	rjmp	.+308    	; 0x71a <USB_Host_ProcessNextHostState+0x178>
     5e6:	87 30       	cpi	r24, 0x07	; 7
     5e8:	08 f4       	brcc	.+2      	; 0x5ec <USB_Host_ProcessNextHostState+0x4a>
     5ea:	8b c0       	rjmp	.+278    	; 0x702 <USB_Host_ProcessNextHostState+0x160>
     5ec:	88 30       	cpi	r24, 0x08	; 8
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <USB_Host_ProcessNextHostState+0x50>
     5f0:	b3 c0       	rjmp	.+358    	; 0x758 <USB_Host_ProcessNextHostState+0x1b6>
     5f2:	89 30       	cpi	r24, 0x09	; 9
     5f4:	09 f0       	breq	.+2      	; 0x5f8 <USB_Host_ProcessNextHostState+0x56>
     5f6:	ea c0       	rjmp	.+468    	; 0x7cc <USB_Host_ProcessNextHostState+0x22a>
     5f8:	d3 c0       	rjmp	.+422    	; 0x7a0 <USB_Host_ProcessNextHostState+0x1fe>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     5fa:	00 91 95 01 	lds	r16, 0x0195
     5fe:	10 91 96 01 	lds	r17, 0x0196
     602:	01 15       	cp	r16, r1
     604:	11 05       	cpc	r17, r1
     606:	09 f4       	brne	.+2      	; 0x60a <USB_Host_ProcessNextHostState+0x68>
     608:	e1 c0       	rjmp	.+450    	; 0x7cc <USB_Host_ProcessNextHostState+0x22a>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	76 df       	rcall	.-276    	; 0x4fa <USB_Host_WaitMS>
     60e:	68 2f       	mov	r22, r24
     610:	88 23       	and	r24, r24
     612:	29 f0       	breq	.+10     	; 0x61e <USB_Host_ProcessNextHostState+0x7c>
				{
					USB_HostState = PostWaitState;
     614:	80 91 94 01 	lds	r24, 0x0194
     618:	8e bb       	out	0x1e, r24	; 30
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     61a:	81 e0       	ldi	r24, 0x01	; 1
					break;
     61c:	cc c0       	rjmp	.+408    	; 0x7b6 <USB_Host_ProcessNextHostState+0x214>
				}

				if (!(--WaitMSRemaining))
     61e:	01 50       	subi	r16, 0x01	; 1
     620:	10 40       	sbci	r17, 0x00	; 0
     622:	10 93 96 01 	sts	0x0196, r17
     626:	00 93 95 01 	sts	0x0195, r16
     62a:	01 15       	cp	r16, r1
     62c:	11 05       	cpc	r17, r1
     62e:	09 f0       	breq	.+2      	; 0x632 <USB_Host_ProcessNextHostState+0x90>
     630:	cd c0       	rjmp	.+410    	; 0x7cc <USB_Host_ProcessNextHostState+0x22a>
				  USB_HostState = PostWaitState;
     632:	80 91 94 01 	lds	r24, 0x0194
     636:	07 c0       	rjmp	.+14     	; 0x646 <USB_Host_ProcessNextHostState+0xa4>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     638:	88 ee       	ldi	r24, 0xE8	; 232
     63a:	93 e0       	ldi	r25, 0x03	; 3
     63c:	90 93 96 01 	sts	0x0196, r25
     640:	80 93 95 01 	sts	0x0195, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     644:	83 e0       	ldi	r24, 0x03	; 3
     646:	8e bb       	out	0x1e, r24	; 30
			break;
     648:	c1 c0       	rjmp	.+386    	; 0x7cc <USB_Host_ProcessNextHostState+0x22a>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     64a:	80 91 95 01 	lds	r24, 0x0195
     64e:	90 91 96 01 	lds	r25, 0x0196
     652:	9c 01       	movw	r18, r24
     654:	21 50       	subi	r18, 0x01	; 1
     656:	30 40       	sbci	r19, 0x00	; 0
     658:	30 93 96 01 	sts	0x0196, r19
     65c:	20 93 95 01 	sts	0x0195, r18
     660:	00 97       	sbiw	r24, 0x00	; 0
     662:	39 f0       	breq	.+14     	; 0x672 <USB_Host_ProcessNextHostState+0xd0>
     664:	8f ec       	ldi	r24, 0xCF	; 207
     666:	97 e0       	ldi	r25, 0x07	; 7
     668:	01 97       	sbiw	r24, 0x01	; 1
     66a:	f1 f7       	brne	.-4      	; 0x668 <USB_Host_ProcessNextHostState+0xc6>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <USB_Host_ProcessNextHostState+0xcc>
     66e:	00 00       	nop
     670:	ad c0       	rjmp	.+346    	; 0x7cc <USB_Host_ProcessNextHostState+0x22a>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     672:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     674:	80 91 d8 00 	lds	r24, 0x00D8
     678:	80 61       	ori	r24, 0x10	; 16
     67a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     67e:	80 91 dd 00 	lds	r24, 0x00DD
     682:	8b 7f       	andi	r24, 0xFB	; 251
     684:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     688:	80 91 d7 00 	lds	r24, 0x00D7
     68c:	80 61       	ori	r24, 0x10	; 16
     68e:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     692:	80 91 dd 00 	lds	r24, 0x00DD
     696:	82 60       	ori	r24, 0x02	; 2
     698:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     69c:	84 e0       	ldi	r24, 0x04	; 4
     69e:	d3 cf       	rjmp	.-90     	; 0x646 <USB_Host_ProcessNextHostState+0xa4>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     6a0:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     6a4:	80 ff       	sbrs	r24, 0
     6a6:	92 c0       	rjmp	.+292    	; 0x7cc <USB_Host_ProcessNextHostState+0x22a>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     6a8:	80 91 9f 00 	lds	r24, 0x009F
     6ac:	8e 7f       	andi	r24, 0xFE	; 254
     6ae:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     6b2:	80 91 9f 00 	lds	r24, 0x009F
     6b6:	8d 7f       	andi	r24, 0xFD	; 253
     6b8:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     6bc:	80 91 df 00 	lds	r24, 0x00DF
     6c0:	8d 7f       	andi	r24, 0xFD	; 253
     6c2:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     6c6:	80 91 de 00 	lds	r24, 0x00DE
     6ca:	82 60       	ori	r24, 0x02	; 2
     6cc:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6d0:	80 91 9e 00 	lds	r24, 0x009E
     6d4:	81 60       	ori	r24, 0x01	; 1
     6d6:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     6da:	4d d1       	rcall	.+666    	; 0x976 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     6dc:	1e ba       	out	0x1e, r1	; 30
     6de:	84 e6       	ldi	r24, 0x64	; 100
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	90 93 96 01 	sts	0x0196, r25
     6e6:	80 93 95 01 	sts	0x0195, r24
     6ea:	85 e0       	ldi	r24, 0x05	; 5
     6ec:	56 c0       	rjmp	.+172    	; 0x79a <USB_Host_ProcessNextHostState+0x1f8>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     6ee:	af de       	rcall	.-674    	; 0x44e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     6f0:	1e ba       	out	0x1e, r1	; 30
     6f2:	88 ec       	ldi	r24, 0xC8	; 200
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	90 93 96 01 	sts	0x0196, r25
     6fa:	80 93 95 01 	sts	0x0195, r24
     6fe:	86 e0       	ldi	r24, 0x06	; 6
     700:	4c c0       	rjmp	.+152    	; 0x79a <USB_Host_ProcessNextHostState+0x1f8>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, PIPE_CONTROLPIPE_DEFAULT_SIZE, 1)))
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	20 e4       	ldi	r18, 0x40	; 64
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	01 e0       	ldi	r16, 0x01	; 1
     70e:	cc d0       	rcall	.+408    	; 0x8a8 <Pipe_ConfigurePipe>
     710:	88 23       	and	r24, r24
     712:	09 f4       	brne	.+2      	; 0x716 <USB_Host_ProcessNextHostState+0x174>
     714:	4c c0       	rjmp	.+152    	; 0x7ae <USB_Host_ProcessNextHostState+0x20c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     716:	87 e0       	ldi	r24, 0x07	; 7
     718:	96 cf       	rjmp	.-212    	; 0x646 <USB_Host_ProcessNextHostState+0xa4>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     71a:	a9 e9       	ldi	r26, 0x99	; 153
     71c:	b1 e0       	ldi	r27, 0x01	; 1
     71e:	e8 e4       	ldi	r30, 0x48	; 72
     720:	f1 e0       	ldi	r31, 0x01	; 1
     722:	88 e0       	ldi	r24, 0x08	; 8
     724:	01 90       	ld	r0, Z+
     726:	0d 92       	st	X+, r0
     728:	81 50       	subi	r24, 0x01	; 1
     72a:	e1 f7       	brne	.-8      	; 0x724 <USB_Host_ProcessNextHostState+0x182>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     72c:	10 92 a7 00 	sts	0x00A7, r1
				};

			uint8_t DataBuffer[8];

			Pipe_SelectPipe(PIPE_CONTROLPIPE);
			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     730:	ce 01       	movw	r24, r28
     732:	01 96       	adiw	r24, 0x01	; 1
     734:	3b d3       	rcall	.+1654   	; 0xdac <USB_Host_SendControlRequest>
     736:	68 2f       	mov	r22, r24
     738:	88 23       	and	r24, r24
     73a:	09 f0       	breq	.+2      	; 0x73e <USB_Host_ProcessNextHostState+0x19c>
     73c:	3b c0       	rjmp	.+118    	; 0x7b4 <USB_Host_ProcessNextHostState+0x212>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     73e:	88 85       	ldd	r24, Y+8	; 0x08
     740:	80 93 50 01 	sts	0x0150, r24

			USB_Host_ResetDevice();
     744:	84 de       	rcall	.-760    	; 0x44e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     746:	1e ba       	out	0x1e, r1	; 30
     748:	88 ec       	ldi	r24, 0xC8	; 200
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	90 93 96 01 	sts	0x0196, r25
     750:	80 93 95 01 	sts	0x0195, r24
     754:	88 e0       	ldi	r24, 0x08	; 8
     756:	21 c0       	rjmp	.+66     	; 0x79a <USB_Host_ProcessNextHostState+0x1f8>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
     758:	20 91 50 01 	lds	r18, 0x0150
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	40 e0       	ldi	r20, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	01 e0       	ldi	r16, 0x01	; 1
     766:	a0 d0       	rcall	.+320    	; 0x8a8 <Pipe_ConfigurePipe>
     768:	88 23       	and	r24, r24
     76a:	09 f1       	breq	.+66     	; 0x7ae <USB_Host_ProcessNextHostState+0x20c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     76c:	a9 e9       	ldi	r26, 0x99	; 153
     76e:	b1 e0       	ldi	r27, 0x01	; 1
     770:	e0 e4       	ldi	r30, 0x40	; 64
     772:	f1 e0       	ldi	r31, 0x01	; 1
     774:	88 e0       	ldi	r24, 0x08	; 8
     776:	01 90       	ld	r0, Z+
     778:	0d 92       	st	X+, r0
     77a:	81 50       	subi	r24, 0x01	; 1
     77c:	e1 f7       	brne	.-8      	; 0x776 <USB_Host_ProcessNextHostState+0x1d4>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	14 d3       	rcall	.+1576   	; 0xdac <USB_Host_SendControlRequest>
     784:	68 2f       	mov	r22, r24
     786:	88 23       	and	r24, r24
     788:	a9 f4       	brne	.+42     	; 0x7b4 <USB_Host_ProcessNextHostState+0x212>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     78a:	1e ba       	out	0x1e, r1	; 30
     78c:	84 e6       	ldi	r24, 0x64	; 100
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	90 93 96 01 	sts	0x0196, r25
     794:	80 93 95 01 	sts	0x0195, r24
     798:	89 e0       	ldi	r24, 0x09	; 9
     79a:	80 93 94 01 	sts	0x0194, r24
			break;
     79e:	16 c0       	rjmp	.+44     	; 0x7cc <USB_Host_ProcessNextHostState+0x22a>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     7a6:	8a e0       	ldi	r24, 0x0A	; 10
     7a8:	8e bb       	out	0x1e, r24	; 30

			EVENT_USB_Host_DeviceEnumerationComplete();
     7aa:	c7 dc       	rcall	.-1650   	; 0x13a <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     7ac:	0f c0       	rjmp	.+30     	; 0x7cc <USB_Host_ProcessNextHostState+0x22a>
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     7ae:	60 e0       	ldi	r22, 0x00	; 0
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			if (!(Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL, ENDPOINT_CONTROLEP, USB_Host_ControlPipeSize, 1)))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <USB_Host_ProcessNextHostState+0x214>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     7b4:	83 e0       	ldi	r24, 0x03	; 3

		default:
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     7b6:	9e b3       	in	r25, 0x1e	; 30
     7b8:	91 30       	cpi	r25, 0x01	; 1
     7ba:	41 f0       	breq	.+16     	; 0x7cc <USB_Host_ProcessNextHostState+0x22a>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     7bc:	cf dc       	rcall	.-1634   	; 0x15c <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     7be:	80 91 dd 00 	lds	r24, 0x00DD
     7c2:	81 60       	ori	r24, 0x01	; 1
     7c4:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     7c8:	b6 dc       	rcall	.-1684   	; 0x136 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     7ca:	31 d1       	rcall	.+610    	; 0xa2e <USB_ResetInterface>
	}
}
     7cc:	28 96       	adiw	r28, 0x08	; 8
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	f8 94       	cli
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	cd bf       	out	0x3d, r28	; 61
     7d8:	cf 91       	pop	r28
     7da:	df 91       	pop	r29
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	08 95       	ret

000007e2 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     7e2:	8f 92       	push	r8
     7e4:	9f 92       	push	r9
     7e6:	bf 92       	push	r11
     7e8:	cf 92       	push	r12
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	df 93       	push	r29
     7f6:	cf 93       	push	r28
     7f8:	0f 92       	push	r0
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
     7fe:	e8 2e       	mov	r14, r24
     800:	4b 01       	movw	r8, r22
     802:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     804:	80 91 aa 00 	lds	r24, 0x00AA
     808:	8f 7c       	andi	r24, 0xCF	; 207
     80a:	80 62       	ori	r24, 0x20	; 32
     80c:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     810:	99 83       	std	Y+1, r25	; 0x01
     812:	c7 d0       	rcall	.+398    	; 0x9a2 <Pipe_WaitUntilReady>
     814:	b8 2e       	mov	r11, r24
     816:	99 81       	ldd	r25, Y+1	; 0x01
     818:	88 23       	and	r24, r24
     81a:	c1 f5       	brne	.+112    	; 0x88c <Pipe_Write_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     81c:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     81e:	01 15       	cp	r16, r1
     820:	11 05       	cpc	r17, r1
     822:	39 f0       	breq	.+14     	; 0x832 <Pipe_Write_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     824:	f8 01       	movw	r30, r16
     826:	20 81       	ld	r18, Z
     828:	31 81       	ldd	r19, Z+1	; 0x01
     82a:	82 1a       	sub	r8, r18
     82c:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     82e:	e2 0e       	add	r14, r18
     830:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     832:	cc 24       	eor	r12, r12
     834:	dd 24       	eor	r13, r13
     836:	25 c0       	rjmp	.+74     	; 0x882 <Pipe_Write_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     838:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     83c:	85 fd       	sbrc	r24, 5
     83e:	16 c0       	rjmp	.+44     	; 0x86c <Pipe_Write_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     840:	80 91 a6 00 	lds	r24, 0x00A6
     844:	8b 77       	andi	r24, 0x7B	; 123
     846:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     84a:	01 15       	cp	r16, r1
     84c:	11 05       	cpc	r17, r1
     84e:	51 f0       	breq	.+20     	; 0x864 <Pipe_Write_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     850:	f8 01       	movw	r30, r16
     852:	80 81       	ld	r24, Z
     854:	91 81       	ldd	r25, Z+1	; 0x01
     856:	8c 0d       	add	r24, r12
     858:	9d 1d       	adc	r25, r13
     85a:	91 83       	std	Z+1, r25	; 0x01
     85c:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     85e:	24 e0       	ldi	r18, 0x04	; 4
     860:	b2 2e       	mov	r11, r18
     862:	14 c0       	rjmp	.+40     	; 0x88c <Pipe_Write_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     864:	9e d0       	rcall	.+316    	; 0x9a2 <Pipe_WaitUntilReady>
     866:	88 23       	and	r24, r24
     868:	61 f0       	breq	.+24     	; 0x882 <Pipe_Write_Stream_LE+0xa0>
     86a:	0f c0       	rjmp	.+30     	; 0x88a <Pipe_Write_Stream_LE+0xa8>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     86c:	f7 01       	movw	r30, r14
     86e:	81 91       	ld	r24, Z+
     870:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     872:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     876:	08 94       	sec
     878:	81 08       	sbc	r8, r1
     87a:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     87c:	08 94       	sec
     87e:	c1 1c       	adc	r12, r1
     880:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     882:	81 14       	cp	r8, r1
     884:	91 04       	cpc	r9, r1
     886:	c1 f6       	brne	.-80     	; 0x838 <Pipe_Write_Stream_LE+0x56>
     888:	01 c0       	rjmp	.+2      	; 0x88c <Pipe_Write_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     88a:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     88c:	8b 2d       	mov	r24, r11
     88e:	0f 90       	pop	r0
     890:	cf 91       	pop	r28
     892:	df 91       	pop	r29
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	ff 90       	pop	r15
     89a:	ef 90       	pop	r14
     89c:	df 90       	pop	r13
     89e:	cf 90       	pop	r12
     8a0:	bf 90       	pop	r11
     8a2:	9f 90       	pop	r9
     8a4:	8f 90       	pop	r8
     8a6:	08 95       	ret

000008a8 <Pipe_ConfigurePipe>:
bool Pipe_ConfigurePipe(const uint8_t Address,
                        const uint8_t Type,
                        const uint8_t EndpointAddress,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     8a8:	0f 93       	push	r16
	uint8_t Number = (Address & PIPE_EPNUM_MASK);
     8aa:	58 2f       	mov	r21, r24
     8ac:	5f 70       	andi	r21, 0x0F	; 15
	uint8_t Token  = (Address & PIPE_DIR_IN) ? PIPE_TOKEN_IN : PIPE_TOKEN_OUT;
     8ae:	87 ff       	sbrs	r24, 7
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <Pipe_ConfigurePipe+0xe>
     8b2:	80 e1       	ldi	r24, 0x10	; 16
     8b4:	01 c0       	rjmp	.+2      	; 0x8b8 <Pipe_ConfigurePipe+0x10>
     8b6:	80 e2       	ldi	r24, 0x20	; 32
	
	if (Number >= PIPE_TOTAL_PIPES)
     8b8:	57 30       	cpi	r21, 0x07	; 7
     8ba:	08 f0       	brcs	.+2      	; 0x8be <Pipe_ConfigurePipe+0x16>
     8bc:	59 c0       	rjmp	.+178    	; 0x970 <Pipe_ConfigurePipe+0xc8>
	  return false;

	if (Type == EP_TYPE_CONTROL)
     8be:	66 23       	and	r22, r22
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <Pipe_ConfigurePipe+0x1c>
	  Token = PIPE_TOKEN_SETUP;
     8c2:	80 e0       	ldi	r24, 0x00	; 0

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     8c4:	4f 70       	andi	r20, 0x0F	; 15
     8c6:	62 95       	swap	r22
     8c8:	66 0f       	add	r22, r22
     8ca:	66 0f       	add	r22, r22
     8cc:	60 7c       	andi	r22, 0xC0	; 192
     8ce:	64 2b       	or	r22, r20
     8d0:	68 2b       	or	r22, r24
     8d2:	45 2f       	mov	r20, r21
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     8d4:	02 60       	ori	r16, 0x02	; 2
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     8d6:	84 2f       	mov	r24, r20
     8d8:	8f 70       	andi	r24, 0x0F	; 15
     8da:	80 93 a7 00 	sts	0x00A7, r24
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     8de:	45 17       	cp	r20, r21
     8e0:	a1 f4       	brne	.+40     	; 0x90a <Pipe_ConfigurePipe+0x62>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	03 c0       	rjmp	.+6      	; 0x8f0 <Pipe_ConfigurePipe+0x48>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     8ea:	7f 5f       	subi	r23, 0xFF	; 255
					CheckBytes <<= 1;
     8ec:	88 0f       	add	r24, r24
     8ee:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     8f0:	82 17       	cp	r24, r18
     8f2:	93 07       	cpc	r25, r19
     8f4:	10 f4       	brcc	.+4      	; 0x8fa <Pipe_ConfigurePipe+0x52>
     8f6:	75 30       	cpi	r23, 0x05	; 5
     8f8:	c1 f7       	brne	.-16     	; 0x8ea <Pipe_ConfigurePipe+0x42>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     8fa:	87 2f       	mov	r24, r23
     8fc:	82 95       	swap	r24
     8fe:	80 7f       	andi	r24, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     900:	80 2b       	or	r24, r16

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
     902:	f6 2f       	mov	r31, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     904:	70 e0       	ldi	r23, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointAddress & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     906:	e0 e0       	ldi	r30, 0x00	; 0
     908:	08 c0       	rjmp	.+16     	; 0x91a <Pipe_ConfigurePipe+0x72>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     90a:	f0 91 aa 00 	lds	r31, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     90e:	80 91 ab 00 	lds	r24, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     912:	e0 91 ad 00 	lds	r30, 0x00AD
			UPIENXTemp  = UPIENX;
     916:	70 91 ae 00 	lds	r23, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     91a:	81 ff       	sbrs	r24, 1
     91c:	20 c0       	rjmp	.+64     	; 0x95e <Pipe_ConfigurePipe+0xb6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     91e:	90 91 a9 00 	lds	r25, 0x00A9
     922:	9e 7f       	andi	r25, 0xFE	; 254
     924:	90 93 a9 00 	sts	0x00A9, r25
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     928:	90 91 ab 00 	lds	r25, 0x00AB
     92c:	9d 7f       	andi	r25, 0xFD	; 253
     92e:	90 93 ab 00 	sts	0x00AB, r25
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     932:	90 91 a9 00 	lds	r25, 0x00A9
     936:	91 60       	ori	r25, 0x01	; 1
     938:	90 93 a9 00 	sts	0x00A9, r25

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     93c:	f0 93 aa 00 	sts	0x00AA, r31
		UPCFG1X = UPCFG1XTemp;
     940:	80 93 ab 00 	sts	0x00AB, r24
		UPCFG2X = UPCFG2XTemp;
     944:	e0 93 ad 00 	sts	0x00AD, r30
		UPIENX  = UPIENXTemp;
     948:	70 93 ae 00 	sts	0x00AE, r23

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     94c:	80 91 a9 00 	lds	r24, 0x00A9
     950:	80 62       	ori	r24, 0x20	; 32
     952:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     956:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     95a:	87 ff       	sbrs	r24, 7
     95c:	09 c0       	rjmp	.+18     	; 0x970 <Pipe_ConfigurePipe+0xc8>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     95e:	4f 5f       	subi	r20, 0xFF	; 255
     960:	47 30       	cpi	r20, 0x07	; 7
     962:	09 f0       	breq	.+2      	; 0x966 <Pipe_ConfigurePipe+0xbe>
     964:	b8 cf       	rjmp	.-144    	; 0x8d6 <Pipe_ConfigurePipe+0x2e>
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     966:	5f 70       	andi	r21, 0x0F	; 15
     968:	50 93 a7 00 	sts	0x00A7, r21
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	01 c0       	rjmp	.+2      	; 0x972 <Pipe_ConfigurePipe+0xca>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     970:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     972:	0f 91       	pop	r16
     974:	08 95       	ret

00000976 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     976:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	98 2f       	mov	r25, r24
     97e:	9f 70       	andi	r25, 0x0F	; 15
     980:	90 93 a7 00 	sts	0x00A7, r25
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     984:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     988:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     98c:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     990:	90 91 a9 00 	lds	r25, 0x00A9
     994:	9e 7f       	andi	r25, 0xFE	; 254
     996:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     99a:	8f 5f       	subi	r24, 0xFF	; 255
     99c:	87 30       	cpi	r24, 0x07	; 7
     99e:	71 f7       	brne	.-36     	; 0x97c <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     9a0:	08 95       	ret

000009a2 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     9a2:	80 91 a2 00 	lds	r24, 0x00A2
     9a6:	90 91 a3 00 	lds	r25, 0x00A3
}

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     9aa:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     9ac:	20 91 aa 00 	lds	r18, 0x00AA
     9b0:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     9b2:	20 31       	cpi	r18, 0x10	; 16
     9b4:	29 f4       	brne	.+10     	; 0x9c0 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     9b6:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     9ba:	20 ff       	sbrs	r18, 0
     9bc:	05 c0       	rjmp	.+10     	; 0x9c8 <Pipe_WaitUntilReady+0x26>
     9be:	17 c0       	rjmp	.+46     	; 0x9ee <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     9c0:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     9c4:	22 fd       	sbrc	r18, 2
     9c6:	13 c0       	rjmp	.+38     	; 0x9ee <Pipe_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     9c8:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     9cc:	21 fd       	sbrc	r18, 1
     9ce:	11 c0       	rjmp	.+34     	; 0x9f2 <Pipe_WaitUntilReady+0x50>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     9d0:	2e b3       	in	r18, 0x1e	; 30
     9d2:	21 30       	cpi	r18, 0x01	; 1
     9d4:	81 f0       	breq	.+32     	; 0x9f6 <Pipe_WaitUntilReady+0x54>
     9d6:	20 91 a2 00 	lds	r18, 0x00A2
     9da:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     9de:	28 17       	cp	r18, r24
     9e0:	39 07       	cpc	r19, r25
     9e2:	21 f3       	breq	.-56     	; 0x9ac <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     9e4:	44 23       	and	r20, r20
     9e6:	49 f0       	breq	.+18     	; 0x9fa <Pipe_WaitUntilReady+0x58>
     9e8:	41 50       	subi	r20, 0x01	; 1
     9ea:	c9 01       	movw	r24, r18
     9ec:	df cf       	rjmp	.-66     	; 0x9ac <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     9f6:	82 e0       	ldi	r24, 0x02	; 2
     9f8:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     9fa:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     9fc:	08 95       	ret

000009fe <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     9fe:	74 d0       	rcall	.+232    	; 0xae8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a00:	7b d0       	rcall	.+246    	; 0xaf8 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     a02:	e0 ee       	ldi	r30, 0xE0	; 224
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	80 81       	ld	r24, Z
     a08:	81 60       	ori	r24, 0x01	; 1
     a0a:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     a0c:	e8 ed       	ldi	r30, 0xD8	; 216
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	8f 77       	andi	r24, 0x7F	; 127
     a14:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a16:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     a18:	a7 ed       	ldi	r26, 0xD7	; 215
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	8c 91       	ld	r24, X
     a1e:	8e 7f       	andi	r24, 0xFE	; 254
     a20:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     a22:	80 81       	ld	r24, Z
     a24:	8f 7e       	andi	r24, 0xEF	; 239
     a26:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     a28:	10 92 98 01 	sts	0x0198, r1
}
     a2c:	08 95       	ret

00000a2e <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     a2e:	5c d0       	rcall	.+184    	; 0xae8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a30:	63 d0       	rcall	.+198    	; 0xaf8 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     a32:	80 91 d8 00 	lds	r24, 0x00D8
     a36:	8f 77       	andi	r24, 0x7F	; 127
     a38:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     a3c:	80 91 d8 00 	lds	r24, 0x00D8
     a40:	80 68       	ori	r24, 0x80	; 128
     a42:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     a46:	80 91 d8 00 	lds	r24, 0x00D8
     a4a:	8f 7d       	andi	r24, 0xDF	; 223
     a4c:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     a50:	80 91 d7 00 	lds	r24, 0x00D7
     a54:	8f 77       	andi	r24, 0x7F	; 127
     a56:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a5a:	8c e0       	ldi	r24, 0x0C	; 12
     a5c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a5e:	8e e0       	ldi	r24, 0x0E	; 14
     a60:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     a62:	09 b4       	in	r0, 0x29	; 41
     a64:	00 fe       	sbrs	r0, 0
     a66:	fd cf       	rjmp	.-6      	; 0xa62 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	8e bb       	out	0x1e, r24	; 30
	USB_Host_ConfigurationNumber = 0;
     a6c:	10 92 97 01 	sts	0x0197, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     a70:	80 e4       	ldi	r24, 0x40	; 64
     a72:	80 93 50 01 	sts	0x0150, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     a76:	80 91 d8 00 	lds	r24, 0x00D8
     a7a:	80 64       	ori	r24, 0x40	; 64
     a7c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a80:	80 91 dd 00 	lds	r24, 0x00DD
     a84:	81 60       	ori	r24, 0x01	; 1
     a86:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     a8a:	80 91 dd 00 	lds	r24, 0x00DD
     a8e:	84 60       	ori	r24, 0x04	; 4
     a90:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     a94:	80 91 d7 00 	lds	r24, 0x00D7
     a98:	8f 7e       	andi	r24, 0xEF	; 239
     a9a:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     a9e:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
     aa0:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
     aa2:	80 91 de 00 	lds	r24, 0x00DE
     aa6:	81 60       	ori	r24, 0x01	; 1
     aa8:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     aac:	80 91 de 00 	lds	r24, 0x00DE
     ab0:	84 60       	ori	r24, 0x04	; 4
     ab2:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     ab6:	80 91 e0 00 	lds	r24, 0x00E0
     aba:	8e 7f       	andi	r24, 0xFE	; 254
     abc:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     ac0:	80 91 d8 00 	lds	r24, 0x00D8
     ac4:	80 61       	ori	r24, 0x10	; 16
     ac6:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     aca:	08 95       	ret

00000acc <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     acc:	e8 ed       	ldi	r30, 0xD8	; 216
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	8f 7e       	andi	r24, 0xEF	; 239
     ad4:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     ad6:	e7 ed       	ldi	r30, 0xD7	; 215
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	81 60       	ori	r24, 0x01	; 1
     ade:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	80 93 98 01 	sts	0x0198, r24

	USB_ResetInterface();
}
     ae6:	a3 cf       	rjmp	.-186    	; 0xa2e <USB_ResetInterface>

00000ae8 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     ae8:	e8 ed       	ldi	r30, 0xD8	; 216
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	80 81       	ld	r24, Z
     aee:	8c 7f       	andi	r24, 0xFC	; 252
     af0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     af2:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     af6:	08 95       	ret

00000af8 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     af8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     afc:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     b00:	08 95       	ret

00000b02 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b02:	1f 92       	push	r1
     b04:	0f 92       	push	r0
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	0f 92       	push	r0
     b0a:	0b b6       	in	r0, 0x3b	; 59
     b0c:	0f 92       	push	r0
     b0e:	11 24       	eor	r1, r1
     b10:	2f 93       	push	r18
     b12:	3f 93       	push	r19
     b14:	4f 93       	push	r20
     b16:	5f 93       	push	r21
     b18:	6f 93       	push	r22
     b1a:	7f 93       	push	r23
     b1c:	8f 93       	push	r24
     b1e:	9f 93       	push	r25
     b20:	af 93       	push	r26
     b22:	bf 93       	push	r27
     b24:	ef 93       	push	r30
     b26:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     b28:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     b2c:	85 ff       	sbrs	r24, 5
     b2e:	0a c0       	rjmp	.+20     	; 0xb44 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     b30:	80 91 a0 00 	lds	r24, 0x00A0
     b34:	85 ff       	sbrs	r24, 5
     b36:	06 c0       	rjmp	.+12     	; 0xb44 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     b38:	80 91 9f 00 	lds	r24, 0x009F
     b3c:	8f 7d       	andi	r24, 0xDF	; 223
     b3e:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     b42:	0a d1       	rcall	.+532    	; 0xd58 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     b44:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     b48:	81 ff       	sbrs	r24, 1
     b4a:	15 c0       	rjmp	.+42     	; 0xb76 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     b4c:	80 91 a0 00 	lds	r24, 0x00A0
     b50:	81 ff       	sbrs	r24, 1
     b52:	11 c0       	rjmp	.+34     	; 0xb76 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     b54:	80 91 9f 00 	lds	r24, 0x009F
     b58:	8d 7f       	andi	r24, 0xFD	; 253
     b5a:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     b5e:	80 91 9f 00 	lds	r24, 0x009F
     b62:	8e 7f       	andi	r24, 0xFE	; 254
     b64:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     b68:	80 91 a0 00 	lds	r24, 0x00A0
     b6c:	8d 7f       	andi	r24, 0xFD	; 253
     b6e:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     b72:	e1 da       	rcall	.-2622   	; 0x136 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     b74:	5c df       	rcall	.-328    	; 0xa2e <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     b76:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     b7a:	81 ff       	sbrs	r24, 1
     b7c:	14 c0       	rjmp	.+40     	; 0xba6 <__vector_10+0xa4>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     b7e:	80 91 de 00 	lds	r24, 0x00DE
     b82:	81 ff       	sbrs	r24, 1
     b84:	10 c0       	rjmp	.+32     	; 0xba6 <__vector_10+0xa4>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     b86:	80 91 df 00 	lds	r24, 0x00DF
     b8a:	8d 7f       	andi	r24, 0xFD	; 253
     b8c:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     b90:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b92:	80 91 dd 00 	lds	r24, 0x00DD
     b96:	81 60       	ori	r24, 0x01	; 1
     b98:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	da da       	rcall	.-2636   	; 0x154 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     ba0:	ca da       	rcall	.-2668   	; 0x136 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	8e bb       	out	0x1e, r24	; 30
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     ba6:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     baa:	80 ff       	sbrs	r24, 0
     bac:	16 c0       	rjmp	.+44     	; 0xbda <__vector_10+0xd8>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     bae:	80 91 de 00 	lds	r24, 0x00DE
     bb2:	80 ff       	sbrs	r24, 0
     bb4:	12 c0       	rjmp	.+36     	; 0xbda <__vector_10+0xd8>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     bb6:	80 91 df 00 	lds	r24, 0x00DF
     bba:	8e 7f       	andi	r24, 0xFE	; 254
     bbc:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
     bc0:	80 91 de 00 	lds	r24, 0x00DE
     bc4:	8e 7f       	andi	r24, 0xFE	; 254
     bc6:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     bca:	b3 da       	rcall	.-2714   	; 0x132 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     bcc:	80 91 a0 00 	lds	r24, 0x00A0
     bd0:	82 60       	ori	r24, 0x02	; 2
     bd2:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	8e bb       	out	0x1e, r24	; 30
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     bda:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     bde:	82 ff       	sbrs	r24, 2
     be0:	0e c0       	rjmp	.+28     	; 0xbfe <__vector_10+0xfc>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     be2:	80 91 de 00 	lds	r24, 0x00DE
     be6:	82 ff       	sbrs	r24, 2
     be8:	0a c0       	rjmp	.+20     	; 0xbfe <__vector_10+0xfc>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     bea:	80 91 df 00 	lds	r24, 0x00DF
     bee:	8b 7f       	andi	r24, 0xFB	; 251
     bf0:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     bf4:	82 e0       	ldi	r24, 0x02	; 2
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	b1 da       	rcall	.-2718   	; 0x15c <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     bfa:	9d da       	rcall	.-2758   	; 0x136 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     bfc:	18 df       	rcall	.-464    	; 0xa2e <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     bfe:	ff 91       	pop	r31
     c00:	ef 91       	pop	r30
     c02:	bf 91       	pop	r27
     c04:	af 91       	pop	r26
     c06:	9f 91       	pop	r25
     c08:	8f 91       	pop	r24
     c0a:	7f 91       	pop	r23
     c0c:	6f 91       	pop	r22
     c0e:	5f 91       	pop	r21
     c10:	4f 91       	pop	r20
     c12:	3f 91       	pop	r19
     c14:	2f 91       	pop	r18
     c16:	0f 90       	pop	r0
     c18:	0b be       	out	0x3b, r0	; 59
     c1a:	0f 90       	pop	r0
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	0f 90       	pop	r0
     c20:	1f 90       	pop	r1
     c22:	18 95       	reti

00000c24 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     c24:	cf 92       	push	r12
     c26:	df 92       	push	r13
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	29 97       	sbiw	r28, 0x09	; 9
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	6b 01       	movw	r12, r22
     c46:	8a 01       	movw	r16, r20
     c48:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     c4a:	90 e8       	ldi	r25, 0x80	; 128
     c4c:	90 93 99 01 	sts	0x0199, r25
     c50:	96 e0       	ldi	r25, 0x06	; 6
     c52:	90 93 9a 01 	sts	0x019A, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     c5c:	90 93 9c 01 	sts	0x019C, r25
     c60:	80 93 9b 01 	sts	0x019B, r24
     c64:	10 92 9e 01 	sts	0x019E, r1
     c68:	10 92 9d 01 	sts	0x019D, r1
     c6c:	89 e0       	ldi	r24, 0x09	; 9
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	90 93 a0 01 	sts	0x01A0, r25
     c74:	80 93 9f 01 	sts	0x019F, r24
     c78:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     c7c:	ce 01       	movw	r24, r28
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	95 d0       	rcall	.+298    	; 0xdac <USB_Host_SendControlRequest>
     c82:	88 23       	and	r24, r24
     c84:	b9 f4       	brne	.+46     	; 0xcb4 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	f6 01       	movw	r30, r12
     c8c:	91 83       	std	Z+1, r25	; 0x01
     c8e:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     c90:	e8 16       	cp	r14, r24
     c92:	f9 06       	cpc	r15, r25
     c94:	70 f0       	brcs	.+28     	; 0xcb2 <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     c96:	90 93 a0 01 	sts	0x01A0, r25
     c9a:	80 93 9f 01 	sts	0x019F, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     c9e:	c8 01       	movw	r24, r16
     ca0:	85 d0       	rcall	.+266    	; 0xdac <USB_Host_SendControlRequest>
     ca2:	88 23       	and	r24, r24
     ca4:	39 f4       	brne	.+14     	; 0xcb4 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     ca6:	f8 01       	movw	r30, r16
     ca8:	91 81       	ldd	r25, Z+1	; 0x01
     caa:	92 30       	cpi	r25, 0x02	; 2
     cac:	19 f0       	breq	.+6      	; 0xcb4 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     cae:	86 e0       	ldi	r24, 0x06	; 6
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     cb2:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     cb4:	29 96       	adiw	r28, 0x09	; 9
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	ff 90       	pop	r15
     cca:	ef 90       	pop	r14
     ccc:	df 90       	pop	r13
     cce:	cf 90       	pop	r12
     cd0:	08 95       	ret

00000cd2 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     cd2:	af 92       	push	r10
     cd4:	bf 92       	push	r11
     cd6:	cf 92       	push	r12
     cd8:	df 92       	push	r13
     cda:	ef 92       	push	r14
     cdc:	ff 92       	push	r15
     cde:	0f 93       	push	r16
     ce0:	1f 93       	push	r17
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	8c 01       	movw	r16, r24
     ce8:	eb 01       	movw	r28, r22
     cea:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     cec:	23 c0       	rjmp	.+70     	; 0xd34 <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     cee:	e8 81       	ld	r30, Y
     cf0:	f9 81       	ldd	r31, Y+1	; 0x01
     cf2:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     cf4:	20 81       	ld	r18, Z
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	c7 01       	movw	r24, r14
     cfa:	2e 15       	cp	r18, r14
     cfc:	3f 05       	cpc	r19, r15
     cfe:	08 f4       	brcc	.+2      	; 0xd02 <USB_GetNextDescriptorComp+0x30>
     d00:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     d02:	e8 0f       	add	r30, r24
     d04:	f9 1f       	adc	r31, r25
     d06:	f9 83       	std	Y+1, r31	; 0x01
     d08:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     d0a:	f8 01       	movw	r30, r16
     d0c:	20 81       	ld	r18, Z
     d0e:	31 81       	ldd	r19, Z+1	; 0x01
     d10:	28 1b       	sub	r18, r24
     d12:	39 0b       	sbc	r19, r25
     d14:	31 83       	std	Z+1, r19	; 0x01
     d16:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     d18:	88 81       	ld	r24, Y
     d1a:	99 81       	ldd	r25, Y+1	; 0x01
     d1c:	f6 01       	movw	r30, r12
     d1e:	09 95       	icall
     d20:	82 30       	cpi	r24, 0x02	; 2
     d22:	41 f0       	breq	.+16     	; 0xd34 <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	69 f4       	brne	.+26     	; 0xd42 <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
     d28:	a8 82       	st	Y, r10
     d2a:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
     d2c:	f8 01       	movw	r30, r16
     d2e:	f1 82       	std	Z+1, r15	; 0x01
     d30:	e0 82       	st	Z, r14
     d32:	07 c0       	rjmp	.+14     	; 0xd42 <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     d34:	f8 01       	movw	r30, r16
     d36:	e0 80       	ld	r14, Z
     d38:	f1 80       	ldd	r15, Z+1	; 0x01
     d3a:	e1 14       	cp	r14, r1
     d3c:	f1 04       	cpc	r15, r1
     d3e:	b9 f6       	brne	.-82     	; 0xcee <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     d40:	82 e0       	ldi	r24, 0x02	; 2
}
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	df 90       	pop	r13
     d50:	cf 90       	pop	r12
     d52:	bf 90       	pop	r11
     d54:	af 90       	pop	r10
     d56:	08 95       	ret

00000d58 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     d58:	08 95       	ret

00000d5a <USB_Host_WaitForIOS>:
	
	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
     d62:	c8 ee       	ldi	r28, 0xE8	; 232
     d64:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     d66:	07 c0       	rjmp	.+14     	; 0xd76 <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	c7 db       	rcall	.-2162   	; 0x4fa <USB_Host_WaitMS>
     d6c:	88 23       	and	r24, r24
     d6e:	d1 f4       	brne	.+52     	; 0xda4 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     d70:	20 97       	sbiw	r28, 0x00	; 0
     d72:	b9 f0       	breq	.+46     	; 0xda2 <USB_Host_WaitForIOS+0x48>
     d74:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     d76:	11 23       	and	r17, r17
     d78:	29 f4       	brne	.+10     	; 0xd84 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     d7a:	80 91 a6 00 	lds	r24, 0x00A6
     d7e:	83 ff       	sbrs	r24, 3
     d80:	f3 cf       	rjmp	.-26     	; 0xd68 <USB_Host_WaitForIOS+0xe>
     d82:	0d c0       	rjmp	.+26     	; 0xd9e <USB_Host_WaitForIOS+0x44>
     d84:	11 30       	cpi	r17, 0x01	; 1
     d86:	29 f4       	brne	.+10     	; 0xd92 <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     d88:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     d8c:	80 ff       	sbrs	r24, 0
     d8e:	ec cf       	rjmp	.-40     	; 0xd68 <USB_Host_WaitForIOS+0xe>
     d90:	06 c0       	rjmp	.+12     	; 0xd9e <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     d92:	12 30       	cpi	r17, 0x02	; 2
     d94:	49 f7       	brne	.-46     	; 0xd68 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     d96:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     d9a:	82 ff       	sbrs	r24, 2
     d9c:	e5 cf       	rjmp	.-54     	; 0xd68 <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	01 c0       	rjmp	.+2      	; 0xda4 <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     da2:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	1f 91       	pop	r17
     daa:	08 95       	ret

00000dac <USB_Host_SendControlRequest>:

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     dba:	e0 90 9e 00 	lds	r14, 0x009E
     dbe:	ff 24       	eor	r15, r15
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	e8 22       	and	r14, r24
     dc4:	ff 24       	eor	r15, r15

static uint8_t USB_Host_SendControlRequest_PRV(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     dc6:	c0 91 9f 01 	lds	r28, 0x019F
     dca:	d0 91 a0 01 	lds	r29, 0x01A0
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     dce:	80 91 9e 00 	lds	r24, 0x009E
     dd2:	81 60       	ori	r24, 0x01	; 1
     dd4:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	8f db       	rcall	.-2274   	; 0x4fa <USB_Host_WaitMS>
     ddc:	88 23       	and	r24, r24
     dde:	09 f0       	breq	.+2      	; 0xde2 <USB_Host_SendControlRequest+0x36>
     de0:	cb c0       	rjmp	.+406    	; 0xf78 <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     de2:	80 91 aa 00 	lds	r24, 0x00AA
     de6:	8f 7c       	andi	r24, 0xCF	; 207
     de8:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     dec:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     df0:	80 91 a6 00 	lds	r24, 0x00A6
     df4:	8f 7e       	andi	r24, 0xEF	; 239
     df6:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     dfa:	80 91 a9 00 	lds	r24, 0x00A9
     dfe:	8f 7b       	andi	r24, 0xBF	; 191
     e00:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
     e04:	e9 e9       	ldi	r30, 0x99	; 153
     e06:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
     e08:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     e0a:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	e1 3a       	cpi	r30, 0xA1	; 161
     e12:	f8 07       	cpc	r31, r24
     e14:	c9 f7       	brne	.-14     	; 0xe08 <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     e16:	80 91 a6 00 	lds	r24, 0x00A6
     e1a:	87 77       	andi	r24, 0x77	; 119
     e1c:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	9b df       	rcall	.-202    	; 0xd5a <USB_Host_WaitForIOS>
     e24:	88 23       	and	r24, r24
     e26:	09 f0       	breq	.+2      	; 0xe2a <USB_Host_SendControlRequest+0x7e>
     e28:	a7 c0       	rjmp	.+334    	; 0xf78 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e2a:	80 91 a9 00 	lds	r24, 0x00A9
     e2e:	80 64       	ori	r24, 0x40	; 64
     e30:	80 93 a9 00 	sts	0x00A9, r24
	  return ReturnStatus;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	61 db       	rcall	.-2366   	; 0x4fa <USB_Host_WaitMS>
     e38:	88 23       	and	r24, r24
     e3a:	09 f0       	breq	.+2      	; 0xe3e <USB_Host_SendControlRequest+0x92>
     e3c:	9d c0       	rjmp	.+314    	; 0xf78 <USB_Host_SendControlRequest+0x1cc>
	  return ReturnStatus;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     e3e:	80 91 99 01 	lds	r24, 0x0199
     e42:	87 ff       	sbrs	r24, 7
     e44:	4f c0       	rjmp	.+158    	; 0xee4 <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e46:	80 91 aa 00 	lds	r24, 0x00AA
     e4a:	8f 7c       	andi	r24, 0xCF	; 207
     e4c:	80 61       	ori	r24, 0x10	; 16
     e4e:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     e52:	01 15       	cp	r16, r1
     e54:	11 05       	cpc	r17, r1
     e56:	61 f5       	brne	.+88     	; 0xeb0 <USB_Host_SendControlRequest+0x104>
     e58:	2d c0       	rjmp	.+90     	; 0xeb4 <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e5a:	80 91 a9 00 	lds	r24, 0x00A9
     e5e:	8f 7b       	andi	r24, 0xBF	; 191
     e60:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	79 df       	rcall	.-270    	; 0xd5a <USB_Host_WaitForIOS>
     e68:	88 23       	and	r24, r24
     e6a:	09 f0       	breq	.+2      	; 0xe6e <USB_Host_SendControlRequest+0xc2>
     e6c:	85 c0       	rjmp	.+266    	; 0xf78 <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     e6e:	80 91 f6 00 	lds	r24, 0x00F6
     e72:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	49 f4       	brne	.+18     	; 0xe8c <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
     e7a:	c0 e0       	ldi	r28, 0x00	; 0
     e7c:	d0 e0       	ldi	r29, 0x00	; 0
     e7e:	06 c0       	rjmp	.+12     	; 0xe8c <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     e80:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
     e84:	f8 01       	movw	r30, r16
     e86:	81 93       	st	Z+, r24
     e88:	8f 01       	movw	r16, r30
					DataLen--;
     e8a:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     e8c:	80 91 f6 00 	lds	r24, 0x00F6
     e90:	90 91 f7 00 	lds	r25, 0x00F7
				  return ReturnStatus;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	11 f0       	breq	.+4      	; 0xe9c <USB_Host_SendControlRequest+0xf0>
     e98:	20 97       	sbiw	r28, 0x00	; 0
     e9a:	91 f7       	brne	.-28     	; 0xe80 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e9c:	80 91 a9 00 	lds	r24, 0x00A9
     ea0:	80 64       	ori	r24, 0x40	; 64
     ea2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     ea6:	80 91 a6 00 	lds	r24, 0x00A6
     eaa:	8e 77       	andi	r24, 0x7E	; 126
     eac:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     eb0:	20 97       	sbiw	r28, 0x00	; 0
     eb2:	99 f6       	brne	.-90     	; 0xe5a <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     eb4:	80 91 aa 00 	lds	r24, 0x00AA
     eb8:	8f 7c       	andi	r24, 0xCF	; 207
     eba:	80 62       	ori	r24, 0x20	; 32
     ebc:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ec0:	80 91 a9 00 	lds	r24, 0x00A9
     ec4:	8f 7b       	andi	r24, 0xBF	; 191
     ec6:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	46 df       	rcall	.-372    	; 0xd5a <USB_Host_WaitForIOS>
     ece:	88 23       	and	r24, r24
     ed0:	09 f0       	breq	.+2      	; 0xed4 <USB_Host_SendControlRequest+0x128>
     ed2:	52 c0       	rjmp	.+164    	; 0xf78 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     ed4:	80 91 a6 00 	lds	r24, 0x00A6
     ed8:	8b 77       	andi	r24, 0x7B	; 123
     eda:	80 93 a6 00 	sts	0x00A6, r24
		  return ReturnStatus;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	3c df       	rcall	.-392    	; 0xd5a <USB_Host_WaitForIOS>
     ee2:	4a c0       	rjmp	.+148    	; 0xf78 <USB_Host_SendControlRequest+0x1cc>
		  return ReturnStatus;
	}
	else
	{
		if (DataStream != NULL)
     ee4:	01 15       	cp	r16, r1
     ee6:	11 05       	cpc	r17, r1
     ee8:	99 f1       	breq	.+102    	; 0xf50 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     eea:	80 91 aa 00 	lds	r24, 0x00AA
     eee:	8f 7c       	andi	r24, 0xCF	; 207
     ef0:	80 62       	ori	r24, 0x20	; 32
     ef2:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ef6:	80 91 a9 00 	lds	r24, 0x00A9
     efa:	8f 7b       	andi	r24, 0xBF	; 191
     efc:	80 93 a9 00 	sts	0x00A9, r24
     f00:	1c c0       	rjmp	.+56     	; 0xf3a <USB_Host_SendControlRequest+0x18e>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f02:	82 e0       	ldi	r24, 0x02	; 2
     f04:	2a df       	rcall	.-428    	; 0xd5a <USB_Host_WaitForIOS>
     f06:	88 23       	and	r24, r24
     f08:	b9 f5       	brne	.+110    	; 0xf78 <USB_Host_SendControlRequest+0x1cc>
     f0a:	f8 01       	movw	r30, r16
     f0c:	06 c0       	rjmp	.+12     	; 0xf1a <USB_Host_SendControlRequest+0x16e>
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
     f0e:	81 91       	ld	r24, Z+
     f10:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     f12:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
     f16:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  return ReturnStatus;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     f18:	59 f0       	breq	.+22     	; 0xf30 <USB_Host_SendControlRequest+0x184>
     f1a:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f1c:	20 91 f6 00 	lds	r18, 0x00F6
     f20:	30 91 f7 00 	lds	r19, 0x00F7
     f24:	80 91 50 01 	lds	r24, 0x0150
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	28 17       	cp	r18, r24
     f2c:	39 07       	cpc	r19, r25
     f2e:	78 f3       	brcs	.-34     	; 0xf0e <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     f30:	80 91 a6 00 	lds	r24, 0x00A6
     f34:	8b 77       	andi	r24, 0x7B	; 123
     f36:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
     f3a:	20 97       	sbiw	r28, 0x00	; 0
     f3c:	11 f7       	brne	.-60     	; 0xf02 <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f3e:	82 e0       	ldi	r24, 0x02	; 2
     f40:	0c df       	rcall	.-488    	; 0xd5a <USB_Host_WaitForIOS>
     f42:	88 23       	and	r24, r24
     f44:	c9 f4       	brne	.+50     	; 0xf78 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f46:	80 91 a9 00 	lds	r24, 0x00A9
     f4a:	80 64       	ori	r24, 0x40	; 64
     f4c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f50:	80 91 aa 00 	lds	r24, 0x00AA
     f54:	8f 7c       	andi	r24, 0xCF	; 207
     f56:	80 61       	ori	r24, 0x10	; 16
     f58:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f5c:	80 91 a9 00 	lds	r24, 0x00A9
     f60:	8f 7b       	andi	r24, 0xBF	; 191
     f62:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	f8 de       	rcall	.-528    	; 0xd5a <USB_Host_WaitForIOS>
     f6a:	88 23       	and	r24, r24
     f6c:	29 f4       	brne	.+10     	; 0xf78 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f6e:	90 91 a6 00 	lds	r25, 0x00A6
     f72:	9e 77       	andi	r25, 0x7E	; 126
     f74:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f78:	90 91 a9 00 	lds	r25, 0x00A9
     f7c:	90 64       	ori	r25, 0x40	; 64
     f7e:	90 93 a9 00 	sts	0x00A9, r25
	bool BusSuspended    = USB_Host_IsBusSuspended();
	uint8_t ReturnStatus = USB_Host_SendControlRequest_PRV(BufferPtr);

	Pipe_Freeze();

	if (BusSuspended)
     f82:	e1 14       	cp	r14, r1
     f84:	f1 04       	cpc	r15, r1
     f86:	29 f4       	brne	.+10     	; 0xf92 <USB_Host_SendControlRequest+0x1e6>
			 *             some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     f88:	90 91 9e 00 	lds	r25, 0x009E
     f8c:	9e 7f       	andi	r25, 0xFE	; 254
     f8e:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] Address  Address of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t Address)
			{
				UPRST = (1 << (Address & PIPE_PIPENUM_MASK));
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
     f98:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	ff 90       	pop	r15
     fa6:	ef 90       	pop	r14
     fa8:	08 95       	ret

00000faa <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
     faa:	1f 93       	push	r17
     fac:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
     fae:	10 92 99 01 	sts	0x0199, r1
     fb2:	89 e0       	ldi	r24, 0x09	; 9
     fb4:	80 93 9a 01 	sts	0x019A, r24
     fb8:	10 93 9b 01 	sts	0x019B, r17
     fbc:	10 92 9c 01 	sts	0x019C, r1
     fc0:	10 92 9e 01 	sts	0x019E, r1
     fc4:	10 92 9d 01 	sts	0x019D, r1
     fc8:	10 92 a0 01 	sts	0x01A0, r1
     fcc:	10 92 9f 01 	sts	0x019F, r1
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     fd0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	e9 de       	rcall	.-558    	; 0xdac <USB_Host_SendControlRequest>
     fda:	88 23       	and	r24, r24
     fdc:	41 f4       	brne	.+16     	; 0xfee <USB_Host_SetDeviceConfiguration+0x44>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
     fde:	10 93 97 01 	sts	0x0197, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
     fe2:	11 23       	and	r17, r17
     fe4:	11 f0       	breq	.+4      	; 0xfea <USB_Host_SetDeviceConfiguration+0x40>
     fe6:	9b e0       	ldi	r25, 0x0B	; 11
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <USB_Host_SetDeviceConfiguration+0x42>
     fea:	9a e0       	ldi	r25, 0x0A	; 10
     fec:	9e bb       	out	0x1e, r25	; 30
	}

	return ErrorCode;
}
     fee:	1f 91       	pop	r17
     ff0:	08 95       	ret

00000ff2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     ff2:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return ((UPNUM & PIPE_PIPENUM_MASK) | Pipe_GetPipeDirection());
     ff4:	10 91 a7 00 	lds	r17, 0x00A7
     ff8:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected pipe's direction, as a \c PIPE_DIR_* mask.
			 */
			static inline uint8_t Pipe_GetPipeDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeDirection(void)
			{
				return (UPCFG0X & (1 << EPDIR)) ? PIPE_DIR_IN : PIPE_DIR_OUT;
     ffa:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \param[in] Address  Address of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t Address)
			{
				UPNUM = (Address & PIPE_PIPENUM_MASK);
     ffe:	10 92 a7 00 	sts	0x00A7, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1002:	cf da       	rcall	.-2658   	; 0x5a2 <USB_Host_ProcessNextHostState>
    1004:	10 93 a7 00 	sts	0x00A7, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1008:	1f 91       	pop	r17
    100a:	08 95       	ret

0000100c <_exit>:
    100c:	f8 94       	cli

0000100e <__stop_program>:
    100e:	ff cf       	rjmp	.-2      	; 0x100e <__stop_program>
