
Magstripe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00001308  0000139c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001308  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c2d  00800118  00800118  000013b4  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  000013b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004b0  00000000  00000000  00001fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000d16  00000000  00000000  0000246b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008581  00000000  00000000  00003181  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002087  00000000  00000000  0000b702  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006c74  00000000  00000000  0000d789  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000700  00000000  00000000  00014400  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000037cb  00000000  00000000  00014b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004237  00000000  00000000  000182cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000010c9  00000000  00000000  0001c502  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000708  00000000  00000000  0001d5cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
       0:	bf c0       	rjmp	.+382    	; 0x180 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
       4:	db c0       	rjmp	.+438    	; 0x1bc <__bad_interrupt>
       6:	00 00       	nop
       8:	d9 c0       	rjmp	.+434    	; 0x1bc <__bad_interrupt>
       a:	00 00       	nop
       c:	d7 c0       	rjmp	.+430    	; 0x1bc <__bad_interrupt>
       e:	00 00       	nop
      10:	d5 c0       	rjmp	.+426    	; 0x1bc <__bad_interrupt>
      12:	00 00       	nop
      14:	d3 c0       	rjmp	.+422    	; 0x1bc <__bad_interrupt>
      16:	00 00       	nop
      18:	d1 c0       	rjmp	.+418    	; 0x1bc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cf c0       	rjmp	.+414    	; 0x1bc <__bad_interrupt>
      1e:	00 00       	nop
      20:	cd c0       	rjmp	.+410    	; 0x1bc <__bad_interrupt>
      22:	00 00       	nop
      24:	cb c0       	rjmp	.+406    	; 0x1bc <__bad_interrupt>
      26:	00 00       	nop
      28:	ef c4       	rjmp	.+2526   	; 0xa08 <__vector_10>
      2a:	00 00       	nop
      2c:	c7 c0       	rjmp	.+398    	; 0x1bc <__bad_interrupt>
      2e:	00 00       	nop
      30:	c5 c0       	rjmp	.+394    	; 0x1bc <__bad_interrupt>
      32:	00 00       	nop
      34:	c3 c0       	rjmp	.+390    	; 0x1bc <__bad_interrupt>
      36:	00 00       	nop
      38:	c1 c0       	rjmp	.+386    	; 0x1bc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bf c0       	rjmp	.+382    	; 0x1bc <__bad_interrupt>
      3e:	00 00       	nop
      40:	bd c0       	rjmp	.+378    	; 0x1bc <__bad_interrupt>
      42:	00 00       	nop
      44:	bb c0       	rjmp	.+374    	; 0x1bc <__bad_interrupt>
      46:	00 00       	nop
      48:	b9 c0       	rjmp	.+370    	; 0x1bc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b7 c0       	rjmp	.+366    	; 0x1bc <__bad_interrupt>
      4e:	00 00       	nop
      50:	b5 c0       	rjmp	.+362    	; 0x1bc <__bad_interrupt>
      52:	00 00       	nop
      54:	b3 c0       	rjmp	.+358    	; 0x1bc <__bad_interrupt>
      56:	00 00       	nop
      58:	b1 c0       	rjmp	.+354    	; 0x1bc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	af c0       	rjmp	.+350    	; 0x1bc <__bad_interrupt>
      5e:	00 00       	nop
      60:	ad c0       	rjmp	.+346    	; 0x1bc <__bad_interrupt>
      62:	00 00       	nop
      64:	ab c0       	rjmp	.+342    	; 0x1bc <__bad_interrupt>
      66:	00 00       	nop
      68:	a9 c0       	rjmp	.+338    	; 0x1bc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a7 c0       	rjmp	.+334    	; 0x1bc <__bad_interrupt>
      6e:	00 00       	nop
      70:	a5 c0       	rjmp	.+330    	; 0x1bc <__bad_interrupt>
      72:	00 00       	nop
      74:	a3 c0       	rjmp	.+326    	; 0x1bc <__bad_interrupt>
      76:	00 00       	nop
      78:	a1 c0       	rjmp	.+322    	; 0x1bc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9f c0       	rjmp	.+318    	; 0x1bc <__bad_interrupt>
      7e:	00 00       	nop
      80:	9d c0       	rjmp	.+314    	; 0x1bc <__bad_interrupt>
      82:	00 00       	nop
      84:	9b c0       	rjmp	.+310    	; 0x1bc <__bad_interrupt>
      86:	00 00       	nop
      88:	99 c0       	rjmp	.+306    	; 0x1bc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	97 c0       	rjmp	.+302    	; 0x1bc <__bad_interrupt>
      8e:	00 00       	nop
      90:	95 c0       	rjmp	.+298    	; 0x1bc <__bad_interrupt>
      92:	00 00       	nop
      94:	93 c0       	rjmp	.+294    	; 0x1bc <__bad_interrupt>
      96:	00 00       	nop

00000098 <KeyboardReport>:
      98:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
      a8:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
      b8:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
      c8:	25 ff 05 07 19 00 29 ff 95 06 75 08 81 00 c0        %.....)...u....

000000d7 <DeviceDescriptor>:
      d7:	12 01 10 01 00 00 00 08 eb 03 42 20 01 00 01 02     ..........B ....
      e7:	dc 01                                               ..

000000e9 <ConfigurationDescriptor>:
      e9:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
      f9:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     109:	00 05                                               ..

0000010b <LanguageString>:
     10b:	04 03 09 04                                         ....

0000010f <ManufacturerString>:
     10f:	42 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     B.D.e.a.n. .C.a.
     11f:	6d 00 65 00 72 00 61 00 20 00 61 00 6e 00 64 00     m.e.r.a. .a.n.d.
     12f:	20 00 44 00 65 00 6e 00 76 00 65 00 72 00 20 00      .D.e.n.v.e.r. .
     13f:	47 00 69 00 6e 00 67 00 65 00 72 00 69 00 63 00     G.i.n.g.e.r.i.c.
     14f:	68 00 00 00                                         h...

00000153 <ProductString>:
     153:	2a 03 4d 00 61 00 67 00 6e 00 65 00 74 00 69 00     *.M.a.g.n.e.t.i.
     163:	63 00 20 00 43 00 61 00 72 00 64 00 20 00 52 00     c. .C.a.r.d. .R.
     173:	65 00 61 00 64 00 65 00 72 00 00 00 00              e.a.d.e.r....

00000180 <__ctors_end>:
     180:	11 24       	eor	r1, r1
     182:	1f be       	out	0x3f, r1	; 63
     184:	cf ef       	ldi	r28, 0xFF	; 255
     186:	d0 e2       	ldi	r29, 0x20	; 32
     188:	de bf       	out	0x3e, r29	; 62
     18a:	cd bf       	out	0x3d, r28	; 61

0000018c <__do_copy_data>:
     18c:	11 e0       	ldi	r17, 0x01	; 1
     18e:	a0 e0       	ldi	r26, 0x00	; 0
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	e8 e0       	ldi	r30, 0x08	; 8
     194:	f3 e1       	ldi	r31, 0x13	; 19
     196:	00 e0       	ldi	r16, 0x00	; 0
     198:	0b bf       	out	0x3b, r16	; 59
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <__do_copy_data+0x14>
     19c:	07 90       	elpm	r0, Z+
     19e:	0d 92       	st	X+, r0
     1a0:	a8 31       	cpi	r26, 0x18	; 24
     1a2:	b1 07       	cpc	r27, r17
     1a4:	d9 f7       	brne	.-10     	; 0x19c <__do_copy_data+0x10>

000001a6 <__do_clear_bss>:
     1a6:	1d e0       	ldi	r17, 0x0D	; 13
     1a8:	a8 e1       	ldi	r26, 0x18	; 24
     1aa:	b1 e0       	ldi	r27, 0x01	; 1
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <.do_clear_bss_start>

000001ae <.do_clear_bss_loop>:
     1ae:	1d 92       	st	X+, r1

000001b0 <.do_clear_bss_start>:
     1b0:	a5 34       	cpi	r26, 0x45	; 69
     1b2:	b1 07       	cpc	r27, r17
     1b4:	e1 f7       	brne	.-8      	; 0x1ae <.do_clear_bss_loop>
     1b6:	8d d0       	rcall	.+282    	; 0x2d2 <main>
     1b8:	0c 94 82 09 	jmp	0x1304	; 0x1304 <_exit>

000001bc <__bad_interrupt>:
     1bc:	21 cf       	rjmp	.-446    	; 0x0 <__vectors>

000001be <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1be:	84 b7       	in	r24, 0x34	; 52
     1c0:	87 7f       	andi	r24, 0xF7	; 247
     1c2:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1c4:	88 e1       	ldi	r24, 0x18	; 24
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	f8 94       	cli
     1ca:	80 93 60 00 	sts	0x0060, r24
     1ce:	10 92 60 00 	sts	0x0060, r1
     1d2:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	80 e8       	ldi	r24, 0x80	; 128
     1d8:	0f b6       	in	r0, 0x3f	; 63
     1da:	f8 94       	cli
     1dc:	80 93 61 00 	sts	0x0061, r24
     1e0:	90 93 61 00 	sts	0x0061, r25
     1e4:	0f be       	out	0x3f, r0	; 63
			 *  device can be controlled and read by the card reader driver. This must be called before
			 *  trying to read any of the card reader's status lines.
			 */
			static inline void Magstripe_Init(void)
			{
				MAG_DDR  &= ~MAG_MASK;
     1e6:	87 b1       	in	r24, 0x07	; 7
     1e8:	80 78       	andi	r24, 0x80	; 128
     1ea:	87 b9       	out	0x07, r24	; 7
				MAG_PORT |=  MAG_MASK;
     1ec:	88 b1       	in	r24, 0x08	; 8
     1ee:	8f 67       	ori	r24, 0x7F	; 127
     1f0:	88 b9       	out	0x08, r24	; 8
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Magstripe_Init();
	USB_Init();
}
     1f2:	ef c3       	rjmp	.+2014   	; 0x9d2 <USB_Init>

000001f4 <ReadMagstripeData>:

/** Determines if a card has been inserted, and if so reads in each track's contents into the bit buffers
 *  until they are read out to the host as a series of keyboard presses.
 */
void ReadMagstripeData(void)
{
     1f4:	9f 92       	push	r9
     1f6:	af 92       	push	r10
     1f8:	bf 92       	push	r11
     1fa:	cf 92       	push	r12
     1fc:	df 92       	push	r13
     1fe:	ef 92       	push	r14
     200:	ff 92       	push	r15
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
     206:	df 93       	push	r29
     208:	cf 93       	push	r28
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	27 97       	sbiw	r28, 0x07	; 7
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
	/* Arrays to hold the buffer pointers, clock and data bit masks for the separate card tracks */
	const struct
	{
		uint8_t ClockMask;
		uint8_t DataMask;
	} TrackInfo[] = {{MAG_T1_CLOCK, MAG_T1_DATA},
     21a:	de 01       	movw	r26, r28
     21c:	11 96       	adiw	r26, 0x01	; 1
     21e:	e2 e1       	ldi	r30, 0x12	; 18
     220:	f1 e0       	ldi	r31, 0x01	; 1
     222:	86 e0       	ldi	r24, 0x06	; 6
     224:	01 90       	ld	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	81 50       	subi	r24, 0x01	; 1
     22a:	e1 f7       	brne	.-8      	; 0x224 <ReadMagstripeData+0x30>
			 */
			static inline uint8_t Magstripe_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Magstripe_GetStatus(void)
			{
				/* Mag-stripe IOs are active low and must be inverted when read */
				return ((uint8_t)~MAG_PIN & MAG_MASK);
     22c:	26 b1       	in	r18, 0x06	; 6
     22e:	20 95       	com	r18
     230:	2f 77       	andi	r18, 0x7F	; 127
	                 {MAG_T2_CLOCK, MAG_T2_DATA},
	                 {MAG_T3_CLOCK, MAG_T3_DATA}};

	uint8_t Magstripe_Prev = 0;
     232:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t Magstripe_LCL  = Magstripe_GetStatus();

	while (Magstripe_LCL & MAG_CARDPRESENT)
     234:	6e 01       	movw	r12, r28
     236:	08 94       	sec
     238:	c1 1c       	adc	r12, r1
     23a:	d1 1c       	adc	r13, r1
			bool ClockPinLevel     = ((Magstripe_LCL & TrackInfo[Track].ClockMask) != 0);
			bool ClockLevelChanged = (((Magstripe_LCL ^ Magstripe_Prev) & TrackInfo[Track].ClockMask) != 0);

			/* Sample data on rising clock edges from the card reader */
			if (ClockPinLevel && ClockLevelChanged)
			  BitBuffer_StoreNextBit(&TrackDataBuffers[Track], DataPinLevel);
     23c:	88 e0       	ldi	r24, 0x08	; 8
     23e:	a8 2e       	mov	r10, r24
     240:	84 e0       	ldi	r24, 0x04	; 4
     242:	b8 2e       	mov	r11, r24
	                 {MAG_T3_CLOCK, MAG_T3_DATA}};

	uint8_t Magstripe_Prev = 0;
	uint8_t Magstripe_LCL  = Magstripe_GetStatus();

	while (Magstripe_LCL & MAG_CARDPRESENT)
     244:	26 c0       	rjmp	.+76     	; 0x292 <ReadMagstripeData+0x9e>
	{
		for (uint8_t Track = 0; Track < TOTAL_TRACKS; Track++)
		{
			bool DataPinLevel      = ((Magstripe_LCL & TrackInfo[Track].DataMask) != 0);
     246:	f8 01       	movw	r30, r16
     248:	31 81       	ldd	r19, Z+1	; 0x01
			bool ClockPinLevel     = ((Magstripe_LCL & TrackInfo[Track].ClockMask) != 0);
     24a:	80 81       	ld	r24, Z
     24c:	92 2f       	mov	r25, r18
     24e:	98 23       	and	r25, r24
			bool ClockLevelChanged = (((Magstripe_LCL ^ Magstripe_Prev) & TrackInfo[Track].ClockMask) != 0);

			/* Sample data on rising clock edges from the card reader */
			if (ClockPinLevel && ClockLevelChanged)
     250:	91 f0       	breq	.+36     	; 0x276 <ReadMagstripeData+0x82>
	{
		for (uint8_t Track = 0; Track < TOTAL_TRACKS; Track++)
		{
			bool DataPinLevel      = ((Magstripe_LCL & TrackInfo[Track].DataMask) != 0);
			bool ClockPinLevel     = ((Magstripe_LCL & TrackInfo[Track].ClockMask) != 0);
			bool ClockLevelChanged = (((Magstripe_LCL ^ Magstripe_Prev) & TrackInfo[Track].ClockMask) != 0);
     252:	89 21       	and	r24, r9

			/* Sample data on rising clock edges from the card reader */
			if (ClockPinLevel && ClockLevelChanged)
     254:	81 f0       	breq	.+32     	; 0x276 <ReadMagstripeData+0x82>
			  BitBuffer_StoreNextBit(&TrackDataBuffers[Track], DataPinLevel);
     256:	ea 9c       	mul	r14, r10
     258:	c0 01       	movw	r24, r0
     25a:	eb 9c       	mul	r14, r11
     25c:	90 0d       	add	r25, r0
     25e:	fa 9c       	mul	r15, r10
     260:	90 0d       	add	r25, r0
     262:	11 24       	eor	r1, r1
     264:	88 5e       	subi	r24, 0xE8	; 232
     266:	9e 4f       	sbci	r25, 0xFE	; 254

	while (Magstripe_LCL & MAG_CARDPRESENT)
	{
		for (uint8_t Track = 0; Track < TOTAL_TRACKS; Track++)
		{
			bool DataPinLevel      = ((Magstripe_LCL & TrackInfo[Track].DataMask) != 0);
     268:	32 23       	and	r19, r18
     26a:	61 e0       	ldi	r22, 0x01	; 1
     26c:	09 f4       	brne	.+2      	; 0x270 <ReadMagstripeData+0x7c>
     26e:	60 e0       	ldi	r22, 0x00	; 0
			bool ClockPinLevel     = ((Magstripe_LCL & TrackInfo[Track].ClockMask) != 0);
			bool ClockLevelChanged = (((Magstripe_LCL ^ Magstripe_Prev) & TrackInfo[Track].ClockMask) != 0);

			/* Sample data on rising clock edges from the card reader */
			if (ClockPinLevel && ClockLevelChanged)
			  BitBuffer_StoreNextBit(&TrackDataBuffers[Track], DataPinLevel);
     270:	2f 83       	std	Y+7, r18	; 0x07
     272:	f7 d0       	rcall	.+494    	; 0x462 <BitBuffer_StoreNextBit>
     274:	2f 81       	ldd	r18, Y+7	; 0x07
     276:	08 94       	sec
     278:	e1 1c       	adc	r14, r1
     27a:	f1 1c       	adc	r15, r1
     27c:	0e 5f       	subi	r16, 0xFE	; 254
     27e:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t Magstripe_Prev = 0;
	uint8_t Magstripe_LCL  = Magstripe_GetStatus();

	while (Magstripe_LCL & MAG_CARDPRESENT)
	{
		for (uint8_t Track = 0; Track < TOTAL_TRACKS; Track++)
     280:	f3 e0       	ldi	r31, 0x03	; 3
     282:	ef 16       	cp	r14, r31
     284:	f1 04       	cpc	r15, r1
     286:	f9 f6       	brne	.-66     	; 0x246 <ReadMagstripeData+0x52>
     288:	86 b1       	in	r24, 0x06	; 6
     28a:	80 95       	com	r24
     28c:	92 2f       	mov	r25, r18
			if (ClockPinLevel && ClockLevelChanged)
			  BitBuffer_StoreNextBit(&TrackDataBuffers[Track], DataPinLevel);
		}

		Magstripe_Prev = Magstripe_LCL;
		Magstripe_LCL  = Magstripe_GetStatus();
     28e:	28 2f       	mov	r18, r24
     290:	2f 77       	andi	r18, 0x7F	; 127
	                 {MAG_T3_CLOCK, MAG_T3_DATA}};

	uint8_t Magstripe_Prev = 0;
	uint8_t Magstripe_LCL  = Magstripe_GetStatus();

	while (Magstripe_LCL & MAG_CARDPRESENT)
     292:	26 ff       	sbrs	r18, 6
     294:	06 c0       	rjmp	.+12     	; 0x2a2 <ReadMagstripeData+0xae>
     296:	86 01       	movw	r16, r12
     298:	ee 24       	eor	r14, r14
     29a:	ff 24       	eor	r15, r15
	{
		for (uint8_t Track = 0; Track < TOTAL_TRACKS; Track++)
		{
			bool DataPinLevel      = ((Magstripe_LCL & TrackInfo[Track].DataMask) != 0);
			bool ClockPinLevel     = ((Magstripe_LCL & TrackInfo[Track].ClockMask) != 0);
			bool ClockLevelChanged = (((Magstripe_LCL ^ Magstripe_Prev) & TrackInfo[Track].ClockMask) != 0);
     29c:	92 2e       	mov	r9, r18
     29e:	99 26       	eor	r9, r25
     2a0:	d2 cf       	rjmp	.-92     	; 0x246 <ReadMagstripeData+0x52>

		Magstripe_Prev = Magstripe_LCL;
		Magstripe_LCL  = Magstripe_GetStatus();
	}

	CurrentTrackBuffer = &TrackDataBuffers[0];
     2a2:	88 e1       	ldi	r24, 0x18	; 24
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	90 93 11 01 	sts	0x0111, r25
     2aa:	80 93 10 01 	sts	0x0110, r24
}
     2ae:	27 96       	adiw	r28, 0x07	; 7
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	f8 94       	cli
     2b4:	de bf       	out	0x3e, r29	; 62
     2b6:	0f be       	out	0x3f, r0	; 63
     2b8:	cd bf       	out	0x3d, r28	; 61
     2ba:	cf 91       	pop	r28
     2bc:	df 91       	pop	r29
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	bf 90       	pop	r11
     2cc:	af 90       	pop	r10
     2ce:	9f 90       	pop	r9
     2d0:	08 95       	ret

000002d2 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     2d2:	75 df       	rcall	.-278    	; 0x1be <SetupHardware>

	for (uint8_t Buffer = 0; Buffer < TOTAL_TRACKS; Buffer++)
	  BitBuffer_Init(&TrackDataBuffers[Buffer]);
     2d4:	88 e1       	ldi	r24, 0x18	; 24
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	ab d0       	rcall	.+342    	; 0x430 <BitBuffer_Init>
     2da:	80 e2       	ldi	r24, 0x20	; 32
     2dc:	95 e0       	ldi	r25, 0x05	; 5
     2de:	a8 d0       	rcall	.+336    	; 0x430 <BitBuffer_Init>
     2e0:	88 e2       	ldi	r24, 0x28	; 40
     2e2:	99 e0       	ldi	r25, 0x09	; 9
     2e4:	a5 d0       	rcall	.+330    	; 0x430 <BitBuffer_Init>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     2e6:	78 94       	sei
     2e8:	86 b1       	in	r24, 0x06	; 6
     2ea:	80 95       	com	r24
     2ec:	8f 77       	andi	r24, 0x7F	; 127

	GlobalInterruptEnable();

	for (;;)
	{
		if (Magstripe_GetStatus() & MAG_CARDPRESENT)
     2ee:	86 ff       	sbrs	r24, 6
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <main+0x22>
		  ReadMagstripeData();
     2f2:	80 df       	rcall	.-256    	; 0x1f4 <ReadMagstripeData>

		HID_Device_USBTask(&Keyboard_HID_Interface);
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	1d d7       	rcall	.+3642   	; 0x1134 <HID_Device_USBTask>
		USB_USBTask();
     2fa:	ab d5       	rcall	.+2902   	; 0xe52 <USB_USBTask>
	}
     2fc:	f5 cf       	rjmp	.-22     	; 0x2e8 <main+0x16>

000002fe <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	ff d6       	rcall	.+3582   	; 0x1102 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     304:	e2 ee       	ldi	r30, 0xE2	; 226
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	80 81       	ld	r24, Z
     30a:	84 60       	ori	r24, 0x04	; 4
     30c:	80 83       	st	Z, r24

	USB_Device_EnableSOFEvents();
}
     30e:	08 95       	ret

00000310 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	91 e0       	ldi	r25, 0x01	; 1
}
     314:	b9 c5       	rjmp	.+2930   	; 0xe88 <HID_Device_ProcessControlRequest>

00000316 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     316:	80 91 0e 01 	lds	r24, 0x010E
     31a:	90 91 0f 01 	lds	r25, 0x010F
     31e:	00 97       	sbiw	r24, 0x00	; 0
     320:	29 f0       	breq	.+10     	; 0x32c <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	90 93 0f 01 	sts	0x010F, r25
     328:	80 93 0e 01 	sts	0x010E, r24
     32c:	08 95       	ret

0000032e <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
	USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;
     33a:	e2 2e       	mov	r14, r18
     33c:	e7 01       	movw	r28, r14
     33e:	7e 01       	movw	r14, r28
     340:	f3 2e       	mov	r15, r19
     342:	e7 01       	movw	r28, r14

	static bool IsKeyReleaseReport;

	/* Key reports must be interleaved with key release reports, or repeated keys will be ignored */
	IsKeyReleaseReport = !IsKeyReleaseReport;
     344:	80 91 30 0d 	lds	r24, 0x0D30
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	89 27       	eor	r24, r25
     34c:	80 93 30 0d 	sts	0x0D30, r24

	if ((IsKeyReleaseReport) || (CurrentTrackBuffer == &TrackDataBuffers[TOTAL_TRACKS]))
     350:	88 23       	and	r24, r24
     352:	41 f4       	brne	.+16     	; 0x364 <CALLBACK_HID_Device_CreateHIDReport+0x36>
     354:	80 91 10 01 	lds	r24, 0x0110
     358:	90 91 11 01 	lds	r25, 0x0111
     35c:	ed e0       	ldi	r30, 0x0D	; 13
     35e:	80 33       	cpi	r24, 0x30	; 48
     360:	9e 07       	cpc	r25, r30
     362:	11 f4       	brne	.+4      	; 0x368 <CALLBACK_HID_Device_CreateHIDReport+0x3a>
	{
		/* No more data to send, or key release report between key presses */
		KeyboardReport->KeyCode[0] = KEY_NONE;
     364:	1a 82       	std	Y+2, r1	; 0x02
     366:	18 c0       	rjmp	.+48     	; 0x398 <CALLBACK_HID_Device_CreateHIDReport+0x6a>
	}
	else if (!(CurrentTrackBuffer->Elements))
     368:	fc 01       	movw	r30, r24
     36a:	e0 50       	subi	r30, 0x00	; 0
     36c:	fc 4f       	sbci	r31, 0xFC	; 252
     36e:	20 81       	ld	r18, Z
     370:	31 81       	ldd	r19, Z+1	; 0x01
     372:	21 15       	cp	r18, r1
     374:	31 05       	cpc	r19, r1
     376:	49 f4       	brne	.+18     	; 0x38a <CALLBACK_HID_Device_CreateHIDReport+0x5c>
	{
		/* End of current track, send an enter press and change to the next track's buffer */
		KeyboardReport->KeyCode[0] = KEY_ENTER;
     378:	28 e2       	ldi	r18, 0x28	; 40
     37a:	2a 83       	std	Y+2, r18	; 0x02
		CurrentTrackBuffer++;
     37c:	88 5f       	subi	r24, 0xF8	; 248
     37e:	9b 4f       	sbci	r25, 0xFB	; 251
     380:	90 93 11 01 	sts	0x0111, r25
     384:	80 93 10 01 	sts	0x0110, r24
     388:	07 c0       	rjmp	.+14     	; 0x398 <CALLBACK_HID_Device_CreateHIDReport+0x6a>
	}
	else
	{
		/* Still data in the current track; convert next bit to a 1 or 0 keypress */
		KeyboardReport->KeyCode[0] = BitBuffer_GetNextBit(CurrentTrackBuffer) ? KEY_1 : KEY_0;
     38a:	a3 d0       	rcall	.+326    	; 0x4d2 <BitBuffer_GetNextBit>
     38c:	88 23       	and	r24, r24
     38e:	11 f0       	breq	.+4      	; 0x394 <CALLBACK_HID_Device_CreateHIDReport+0x66>
     390:	8e e1       	ldi	r24, 0x1E	; 30
     392:	01 c0       	rjmp	.+2      	; 0x396 <CALLBACK_HID_Device_CreateHIDReport+0x68>
     394:	87 e2       	ldi	r24, 0x27	; 39
     396:	8a 83       	std	Y+2, r24	; 0x02
	}

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     398:	88 e0       	ldi	r24, 0x08	; 8
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	f8 01       	movw	r30, r16
     39e:	91 83       	std	Z+1, r25	; 0x01
     3a0:	80 83       	st	Z, r24
	return false;
}
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	ff 90       	pop	r15
     3ae:	ef 90       	pop	r14
     3b0:	08 95       	ret

000003b2 <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	// Ignore keyboard LED reports from the host, but still need to declare the callback routine
}
     3b2:	08 95       	ret

000003b4 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     3b4:	93 30       	cpi	r25, 0x03	; 3
     3b6:	89 f0       	breq	.+34     	; 0x3da <CALLBACK_USB_GetDescriptor+0x26>
     3b8:	94 30       	cpi	r25, 0x04	; 4
     3ba:	28 f4       	brcc	.+10     	; 0x3c6 <CALLBACK_USB_GetDescriptor+0x12>
     3bc:	91 30       	cpi	r25, 0x01	; 1
     3be:	49 f1       	breq	.+82     	; 0x412 <CALLBACK_USB_GetDescriptor+0x5e>
     3c0:	92 30       	cpi	r25, 0x02	; 2
     3c2:	61 f5       	brne	.+88     	; 0x41c <CALLBACK_USB_GetDescriptor+0x68>
     3c4:	05 c0       	rjmp	.+10     	; 0x3d0 <CALLBACK_USB_GetDescriptor+0x1c>
     3c6:	91 32       	cpi	r25, 0x21	; 33
     3c8:	d1 f0       	breq	.+52     	; 0x3fe <CALLBACK_USB_GetDescriptor+0x4a>
     3ca:	92 32       	cpi	r25, 0x22	; 34
     3cc:	39 f5       	brne	.+78     	; 0x41c <CALLBACK_USB_GetDescriptor+0x68>
     3ce:	1c c0       	rjmp	.+56     	; 0x408 <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     3d0:	22 e2       	ldi	r18, 0x22	; 34
     3d2:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     3d4:	e9 ee       	ldi	r30, 0xE9	; 233
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     3d8:	25 c0       	rjmp	.+74     	; 0x424 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
     3da:	81 30       	cpi	r24, 0x01	; 1
     3dc:	41 f0       	breq	.+16     	; 0x3ee <CALLBACK_USB_GetDescriptor+0x3a>
     3de:	81 30       	cpi	r24, 0x01	; 1
     3e0:	18 f0       	brcs	.+6      	; 0x3e8 <CALLBACK_USB_GetDescriptor+0x34>
     3e2:	82 30       	cpi	r24, 0x02	; 2
     3e4:	d9 f4       	brne	.+54     	; 0x41c <CALLBACK_USB_GetDescriptor+0x68>
     3e6:	06 c0       	rjmp	.+12     	; 0x3f4 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3e8:	eb e0       	ldi	r30, 0x0B	; 11
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3ee:	ef e0       	ldi	r30, 0x0F	; 15
     3f0:	f1 e0       	ldi	r31, 0x01	; 1
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3f4:	e3 e5       	ldi	r30, 0x53	; 83
     3f6:	f1 e0       	ldi	r31, 0x01	; 1
     3f8:	24 91       	lpm	r18, Z+
     3fa:	30 e0       	ldi	r19, 0x00	; 0
					break;
     3fc:	13 c0       	rjmp	.+38     	; 0x424 <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     3fe:	29 e0       	ldi	r18, 0x09	; 9
     400:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
     402:	eb ef       	ldi	r30, 0xFB	; 251
     404:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     406:	0e c0       	rjmp	.+28     	; 0x424 <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
     408:	2f e3       	ldi	r18, 0x3F	; 63
     40a:	30 e0       	ldi	r19, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
     40c:	e8 e9       	ldi	r30, 0x98	; 152
     40e:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(KeyboardReport);
			break;
     410:	09 c0       	rjmp	.+18     	; 0x424 <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     412:	22 e1       	ldi	r18, 0x12	; 18
     414:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     416:	e7 ed       	ldi	r30, 0xD7	; 215
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	04 c0       	rjmp	.+8      	; 0x424 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     420:	e0 e0       	ldi	r30, 0x00	; 0
     422:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
     424:	da 01       	movw	r26, r20
     426:	11 96       	adiw	r26, 0x01	; 1
     428:	fc 93       	st	X, r31
     42a:	ee 93       	st	-X, r30
	return Size;
}
     42c:	c9 01       	movw	r24, r18
     42e:	08 95       	ret

00000430 <BitBuffer_Init>:

/** Function to initialize or reset a bit buffer, ready for data to be stored into it. */
void BitBuffer_Init(BitBuffer_t* const Buffer)
{
	/* Reset the number of stored bits in the buffer */
	Buffer->Elements        = 0;
     430:	fc 01       	movw	r30, r24
     432:	e0 50       	subi	r30, 0x00	; 0
     434:	fc 4f       	sbci	r31, 0xFC	; 252
     436:	11 82       	std	Z+1, r1	; 0x01
     438:	10 82       	st	Z, r1

	/* Reset the data in and out pointer structures in the buffer to the first buffer bit */
	Buffer->In.CurrentByte  = Buffer->Data;
     43a:	fc 01       	movw	r30, r24
     43c:	ee 5f       	subi	r30, 0xFE	; 254
     43e:	fb 4f       	sbci	r31, 0xFB	; 251
     440:	80 83       	st	Z, r24
     442:	91 83       	std	Z+1, r25	; 0x01
	Buffer->In.ByteMask     = (1 << 0);
     444:	fc 01       	movw	r30, r24
     446:	ec 5f       	subi	r30, 0xFC	; 252
     448:	fb 4f       	sbci	r31, 0xFB	; 251
     44a:	21 e0       	ldi	r18, 0x01	; 1
     44c:	20 83       	st	Z, r18
	Buffer->Out.CurrentByte = Buffer->Data;
     44e:	fc 01       	movw	r30, r24
     450:	eb 5f       	subi	r30, 0xFB	; 251
     452:	fb 4f       	sbci	r31, 0xFB	; 251
     454:	80 83       	st	Z, r24
     456:	91 83       	std	Z+1, r25	; 0x01
	Buffer->Out.ByteMask    = (1 << 0);
     458:	89 5f       	subi	r24, 0xF9	; 249
     45a:	9b 4f       	sbci	r25, 0xFB	; 251
     45c:	fc 01       	movw	r30, r24
     45e:	20 83       	st	Z, r18
}
     460:	08 95       	ret

00000462 <BitBuffer_StoreNextBit>:
/** Function to store the given bit into the given bit buffer. */
void BitBuffer_StoreNextBit(BitBuffer_t* const Buffer,
                            const bool Bit)
{
	/* If the bit to store is true, set the next bit in the buffer */
	if (Bit)
     462:	66 23       	and	r22, r22
     464:	69 f0       	breq	.+26     	; 0x480 <BitBuffer_StoreNextBit+0x1e>
	  *Buffer->In.CurrentByte |= Buffer->In.ByteMask;
     466:	fc 01       	movw	r30, r24
     468:	ee 5f       	subi	r30, 0xFE	; 254
     46a:	fb 4f       	sbci	r31, 0xFB	; 251
     46c:	01 90       	ld	r0, Z+
     46e:	f0 81       	ld	r31, Z
     470:	e0 2d       	mov	r30, r0
     472:	dc 01       	movw	r26, r24
     474:	ac 5f       	subi	r26, 0xFC	; 252
     476:	bb 4f       	sbci	r27, 0xFB	; 251
     478:	20 81       	ld	r18, Z
     47a:	3c 91       	ld	r19, X
     47c:	23 2b       	or	r18, r19
     47e:	20 83       	st	Z, r18

	/* Increment the number of stored bits in the buffer counter */
	Buffer->Elements++;
     480:	fc 01       	movw	r30, r24
     482:	e0 50       	subi	r30, 0x00	; 0
     484:	fc 4f       	sbci	r31, 0xFC	; 252
     486:	20 81       	ld	r18, Z
     488:	31 81       	ldd	r19, Z+1	; 0x01
     48a:	2f 5f       	subi	r18, 0xFF	; 255
     48c:	3f 4f       	sbci	r19, 0xFF	; 255
     48e:	31 83       	std	Z+1, r19	; 0x01
     490:	20 83       	st	Z, r18

	/* Check if the current buffer byte is full of stored bits */
	if (Buffer->In.ByteMask == (1 << 7))
     492:	fc 01       	movw	r30, r24
     494:	ec 5f       	subi	r30, 0xFC	; 252
     496:	fb 4f       	sbci	r31, 0xFB	; 251
     498:	20 81       	ld	r18, Z
     49a:	20 38       	cpi	r18, 0x80	; 128
     49c:	b9 f4       	brne	.+46     	; 0x4cc <BitBuffer_StoreNextBit+0x6a>
	{
		/* Check if the end of the buffer has been reached, if so reset to start of buffer, otherwise advance to next bit */
		if (Buffer->In.CurrentByte != &Buffer->Data[sizeof(Buffer->Data) - 1])
     49e:	fc 01       	movw	r30, r24
     4a0:	ee 5f       	subi	r30, 0xFE	; 254
     4a2:	fb 4f       	sbci	r31, 0xFB	; 251
     4a4:	20 81       	ld	r18, Z
     4a6:	31 81       	ldd	r19, Z+1	; 0x01
     4a8:	ac 01       	movw	r20, r24
     4aa:	41 50       	subi	r20, 0x01	; 1
     4ac:	5c 4f       	sbci	r21, 0xFC	; 252
     4ae:	24 17       	cp	r18, r20
     4b0:	35 07       	cpc	r19, r21
     4b2:	29 f0       	breq	.+10     	; 0x4be <BitBuffer_StoreNextBit+0x5c>
		  Buffer->In.CurrentByte++;
     4b4:	2f 5f       	subi	r18, 0xFF	; 255
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	31 83       	std	Z+1, r19	; 0x01
     4ba:	20 83       	st	Z, r18
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <BitBuffer_StoreNextBit+0x60>
		else
		  Buffer->In.CurrentByte = Buffer->Data;
     4be:	91 83       	std	Z+1, r25	; 0x01
     4c0:	80 83       	st	Z, r24

		/* Reset the storage bit mask in the current buffer byte to the first bit */
		Buffer->In.ByteMask = (1 << 0);
     4c2:	8c 5f       	subi	r24, 0xFC	; 252
     4c4:	9b 4f       	sbci	r25, 0xFB	; 251
     4c6:	21 e0       	ldi	r18, 0x01	; 1
     4c8:	fc 01       	movw	r30, r24
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <BitBuffer_StoreNextBit+0x6c>
	}
	else
	{
		/* Shift the current storage bit mask to the next bit in the current byte */
		Buffer->In.ByteMask <<= 1;
     4cc:	22 0f       	add	r18, r18
     4ce:	20 83       	st	Z, r18
     4d0:	08 95       	ret

000004d2 <BitBuffer_GetNextBit>:
	}
}

/** Function to retrieve the next bit stored in the given bit buffer. */
bool BitBuffer_GetNextBit(BitBuffer_t* const Buffer)
{
     4d2:	9c 01       	movw	r18, r24
	/* Retrieve the value of the next bit stored in the buffer */
	bool Bit = ((*Buffer->Out.CurrentByte & Buffer->Out.ByteMask) != 0);
     4d4:	fc 01       	movw	r30, r24
     4d6:	eb 5f       	subi	r30, 0xFB	; 251
     4d8:	fb 4f       	sbci	r31, 0xFB	; 251
     4da:	01 90       	ld	r0, Z+
     4dc:	f0 81       	ld	r31, Z
     4de:	e0 2d       	mov	r30, r0
     4e0:	40 81       	ld	r20, Z
     4e2:	dc 01       	movw	r26, r24
     4e4:	a9 5f       	subi	r26, 0xF9	; 249
     4e6:	bb 4f       	sbci	r27, 0xFB	; 251
     4e8:	9c 91       	ld	r25, X
     4ea:	54 2f       	mov	r21, r20
     4ec:	59 23       	and	r21, r25
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <BitBuffer_GetNextBit+0x22>
     4f2:	80 e0       	ldi	r24, 0x00	; 0

	/* Clear the buffer bit */
	*Buffer->Out.CurrentByte &= ~Buffer->Out.ByteMask;
     4f4:	90 95       	com	r25
     4f6:	94 23       	and	r25, r20
     4f8:	90 83       	st	Z, r25

	/* Decrement the number of stored bits in the buffer counter */
	Buffer->Elements--;
     4fa:	f9 01       	movw	r30, r18
     4fc:	e0 50       	subi	r30, 0x00	; 0
     4fe:	fc 4f       	sbci	r31, 0xFC	; 252
     500:	40 81       	ld	r20, Z
     502:	51 81       	ldd	r21, Z+1	; 0x01
     504:	41 50       	subi	r20, 0x01	; 1
     506:	50 40       	sbci	r21, 0x00	; 0
     508:	51 83       	std	Z+1, r21	; 0x01
     50a:	40 83       	st	Z, r20

	/* Check if the current buffer byte is empty of stored bits */
	if (Buffer->Out.ByteMask == (1 << 7))
     50c:	f9 01       	movw	r30, r18
     50e:	e9 5f       	subi	r30, 0xF9	; 249
     510:	fb 4f       	sbci	r31, 0xFB	; 251
     512:	90 81       	ld	r25, Z
     514:	90 38       	cpi	r25, 0x80	; 128
     516:	c1 f4       	brne	.+48     	; 0x548 <BitBuffer_GetNextBit+0x76>
	{
		/* Check if the end of the buffer has been reached, if so reset to start of buffer, otherwise advance to next bit */
		if (Buffer->Out.CurrentByte != &Buffer->Data[sizeof(Buffer->Data) - 1])
     518:	f9 01       	movw	r30, r18
     51a:	eb 5f       	subi	r30, 0xFB	; 251
     51c:	fb 4f       	sbci	r31, 0xFB	; 251
     51e:	40 81       	ld	r20, Z
     520:	51 81       	ldd	r21, Z+1	; 0x01
     522:	b9 01       	movw	r22, r18
     524:	61 50       	subi	r22, 0x01	; 1
     526:	7c 4f       	sbci	r23, 0xFC	; 252
     528:	46 17       	cp	r20, r22
     52a:	57 07       	cpc	r21, r23
     52c:	29 f0       	breq	.+10     	; 0x538 <BitBuffer_GetNextBit+0x66>
		  Buffer->Out.CurrentByte++;
     52e:	4f 5f       	subi	r20, 0xFF	; 255
     530:	5f 4f       	sbci	r21, 0xFF	; 255
     532:	51 83       	std	Z+1, r21	; 0x01
     534:	40 83       	st	Z, r20
     536:	02 c0       	rjmp	.+4      	; 0x53c <BitBuffer_GetNextBit+0x6a>
		else
		  Buffer->Out.CurrentByte = Buffer->Data;
     538:	31 83       	std	Z+1, r19	; 0x01
     53a:	20 83       	st	Z, r18

		/* Reset the retrieval bit mask in the current buffer byte to the first bit */
		Buffer->Out.ByteMask = (1 << 0);
     53c:	29 5f       	subi	r18, 0xF9	; 249
     53e:	3b 4f       	sbci	r19, 0xFB	; 251
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	f9 01       	movw	r30, r18
     544:	90 83       	st	Z, r25
     546:	08 95       	ret
	}
	else
	{
		/* Shift the current retrieval bit mask to the next bit in the current byte */
		Buffer->Out.ByteMask <<= 1;
     548:	99 0f       	add	r25, r25
     54a:	90 83       	st	Z, r25
	}

	/* Return the retrieved bit from the buffer */
	return Bit;
}
     54c:	08 95       	ret

0000054e <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     54e:	8f 92       	push	r8
     550:	9f 92       	push	r9
     552:	bf 92       	push	r11
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	df 93       	push	r29
     562:	cf 93       	push	r28
     564:	0f 92       	push	r0
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	e8 2e       	mov	r14, r24
     56c:	4b 01       	movw	r8, r22
     56e:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     570:	99 83       	std	Y+1, r25	; 0x01
     572:	b8 d1       	rcall	.+880    	; 0x8e4 <Endpoint_WaitUntilReady>
     574:	b8 2e       	mov	r11, r24
     576:	99 81       	ldd	r25, Y+1	; 0x01
     578:	88 23       	and	r24, r24
     57a:	c9 f5       	brne	.+114    	; 0x5ee <Endpoint_Write_Stream_LE+0xa0>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     57c:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     57e:	01 15       	cp	r16, r1
     580:	11 05       	cpc	r17, r1
     582:	39 f0       	breq	.+14     	; 0x592 <Endpoint_Write_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
     584:	f8 01       	movw	r30, r16
     586:	20 81       	ld	r18, Z
     588:	31 81       	ldd	r19, Z+1	; 0x01
     58a:	82 1a       	sub	r8, r18
     58c:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     58e:	e2 0e       	add	r14, r18
     590:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     592:	cc 24       	eor	r12, r12
     594:	dd 24       	eor	r13, r13
     596:	26 c0       	rjmp	.+76     	; 0x5e4 <Endpoint_Write_Stream_LE+0x96>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     598:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     59c:	85 fd       	sbrc	r24, 5
     59e:	17 c0       	rjmp	.+46     	; 0x5ce <Endpoint_Write_Stream_LE+0x80>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5a0:	80 91 e8 00 	lds	r24, 0x00E8
     5a4:	8e 77       	andi	r24, 0x7E	; 126
     5a6:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     5aa:	53 d4       	rcall	.+2214   	; 0xe52 <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
     5ac:	01 15       	cp	r16, r1
     5ae:	11 05       	cpc	r17, r1
     5b0:	51 f0       	breq	.+20     	; 0x5c6 <Endpoint_Write_Stream_LE+0x78>
			{
				*BytesProcessed += BytesInTransfer;
     5b2:	f8 01       	movw	r30, r16
     5b4:	80 81       	ld	r24, Z
     5b6:	91 81       	ldd	r25, Z+1	; 0x01
     5b8:	8c 0d       	add	r24, r12
     5ba:	9d 1d       	adc	r25, r13
     5bc:	91 83       	std	Z+1, r25	; 0x01
     5be:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     5c0:	25 e0       	ldi	r18, 0x05	; 5
     5c2:	b2 2e       	mov	r11, r18
     5c4:	14 c0       	rjmp	.+40     	; 0x5ee <Endpoint_Write_Stream_LE+0xa0>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     5c6:	8e d1       	rcall	.+796    	; 0x8e4 <Endpoint_WaitUntilReady>
     5c8:	88 23       	and	r24, r24
     5ca:	61 f0       	breq	.+24     	; 0x5e4 <Endpoint_Write_Stream_LE+0x96>
     5cc:	0f c0       	rjmp	.+30     	; 0x5ec <Endpoint_Write_Stream_LE+0x9e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     5ce:	f7 01       	movw	r30, r14
     5d0:	81 91       	ld	r24, Z+
     5d2:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     5d4:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     5d8:	08 94       	sec
     5da:	81 08       	sbc	r8, r1
     5dc:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     5de:	08 94       	sec
     5e0:	c1 1c       	adc	r12, r1
     5e2:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     5e4:	81 14       	cp	r8, r1
     5e6:	91 04       	cpc	r9, r1
     5e8:	b9 f6       	brne	.-82     	; 0x598 <Endpoint_Write_Stream_LE+0x4a>
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <Endpoint_Write_Stream_LE+0xa0>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     5ec:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     5ee:	8b 2d       	mov	r24, r11
     5f0:	0f 90       	pop	r0
     5f2:	cf 91       	pop	r28
     5f4:	df 91       	pop	r29
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	df 90       	pop	r13
     600:	cf 90       	pop	r12
     602:	bf 90       	pop	r11
     604:	9f 90       	pop	r9
     606:	8f 90       	pop	r8
     608:	08 95       	ret

0000060a <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     60a:	28 2f       	mov	r18, r24
     60c:	39 2f       	mov	r19, r25
     60e:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     610:	80 91 43 0d 	lds	r24, 0x0D43
     614:	90 91 44 0d 	lds	r25, 0x0D44
     618:	86 17       	cp	r24, r22
     61a:	97 07       	cpc	r25, r23
     61c:	18 f4       	brcc	.+6      	; 0x624 <Endpoint_Write_Control_Stream_LE+0x1a>
     61e:	bc 01       	movw	r22, r24
     620:	20 e0       	ldi	r18, 0x00	; 0
     622:	35 c0       	rjmp	.+106    	; 0x68e <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     624:	61 15       	cp	r22, r1
     626:	71 05       	cpc	r23, r1
     628:	d9 f7       	brne	.-10     	; 0x620 <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     62a:	80 91 e8 00 	lds	r24, 0x00E8
     62e:	8e 77       	andi	r24, 0x7E	; 126
     630:	80 93 e8 00 	sts	0x00E8, r24
     634:	f5 cf       	rjmp	.-22     	; 0x620 <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     636:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     638:	88 23       	and	r24, r24
     63a:	f1 f1       	breq	.+124    	; 0x6b8 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     63c:	85 30       	cpi	r24, 0x05	; 5
     63e:	c1 f1       	breq	.+112    	; 0x6b0 <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     640:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     644:	83 fd       	sbrc	r24, 3
     646:	36 c0       	rjmp	.+108    	; 0x6b4 <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     648:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     64c:	82 fd       	sbrc	r24, 2
     64e:	2a c0       	rjmp	.+84     	; 0x6a4 <Endpoint_Write_Control_Stream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     650:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     654:	80 ff       	sbrs	r24, 0
     656:	1b c0       	rjmp	.+54     	; 0x68e <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     658:	80 91 f2 00 	lds	r24, 0x00F2
     65c:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     660:	06 c0       	rjmp	.+12     	; 0x66e <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     662:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     664:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     668:	61 50       	subi	r22, 0x01	; 1
     66a:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     66c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     66e:	61 15       	cp	r22, r1
     670:	71 05       	cpc	r23, r1
     672:	19 f0       	breq	.+6      	; 0x67a <Endpoint_Write_Control_Stream_LE+0x70>
     674:	88 30       	cpi	r24, 0x08	; 8
     676:	91 05       	cpc	r25, r1
     678:	a0 f3       	brcs	.-24     	; 0x662 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     67a:	21 e0       	ldi	r18, 0x01	; 1
     67c:	88 30       	cpi	r24, 0x08	; 8
     67e:	91 05       	cpc	r25, r1
     680:	09 f0       	breq	.+2      	; 0x684 <Endpoint_Write_Control_Stream_LE+0x7a>
     682:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     684:	80 91 e8 00 	lds	r24, 0x00E8
     688:	8e 77       	andi	r24, 0x7E	; 126
     68a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     68e:	61 15       	cp	r22, r1
     690:	71 05       	cpc	r23, r1
     692:	89 f6       	brne	.-94     	; 0x636 <Endpoint_Write_Control_Stream_LE+0x2c>
     694:	22 23       	and	r18, r18
     696:	79 f6       	brne	.-98     	; 0x636 <Endpoint_Write_Control_Stream_LE+0x2c>
     698:	05 c0       	rjmp	.+10     	; 0x6a4 <Endpoint_Write_Control_Stream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     69a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     69c:	88 23       	and	r24, r24
     69e:	61 f0       	breq	.+24     	; 0x6b8 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     6a0:	85 30       	cpi	r24, 0x05	; 5
     6a2:	61 f0       	breq	.+24     	; 0x6bc <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6a4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     6a8:	82 ff       	sbrs	r24, 2
     6aa:	f7 cf       	rjmp	.-18     	; 0x69a <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     6b0:	83 e0       	ldi	r24, 0x03	; 3
     6b2:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     6bc:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     6be:	08 95       	ret

000006c0 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     6c0:	61 15       	cp	r22, r1
     6c2:	71 05       	cpc	r23, r1
     6c4:	29 f5       	brne	.+74     	; 0x710 <Endpoint_Read_Control_Stream_LE+0x50>
     6c6:	1f c0       	rjmp	.+62     	; 0x706 <Endpoint_Read_Control_Stream_LE+0x46>
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     6c8:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     6ca:	22 23       	and	r18, r18
     6cc:	a1 f1       	breq	.+104    	; 0x736 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     6ce:	25 30       	cpi	r18, 0x05	; 5
     6d0:	71 f1       	breq	.+92     	; 0x72e <Endpoint_Read_Control_Stream_LE+0x6e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     6d2:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     6d6:	23 fd       	sbrc	r18, 3
     6d8:	2c c0       	rjmp	.+88     	; 0x732 <Endpoint_Read_Control_Stream_LE+0x72>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6da:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     6de:	22 ff       	sbrs	r18, 2
     6e0:	f3 cf       	rjmp	.-26     	; 0x6c8 <Endpoint_Read_Control_Stream_LE+0x8>
     6e2:	e8 2f       	mov	r30, r24
     6e4:	f9 2f       	mov	r31, r25
     6e6:	07 c0       	rjmp	.+14     	; 0x6f6 <Endpoint_Read_Control_Stream_LE+0x36>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     6e8:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     6ec:	81 93       	st	Z+, r24
     6ee:	cf 01       	movw	r24, r30
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     6f0:	61 50       	subi	r22, 0x01	; 1
     6f2:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     6f4:	41 f0       	breq	.+16     	; 0x706 <Endpoint_Read_Control_Stream_LE+0x46>
     6f6:	cf 01       	movw	r24, r30
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     6f8:	20 91 f2 00 	lds	r18, 0x00F2
     6fc:	30 91 f3 00 	lds	r19, 0x00F3
     700:	21 15       	cp	r18, r1
     702:	31 05       	cpc	r19, r1
     704:	89 f7       	brne	.-30     	; 0x6e8 <Endpoint_Read_Control_Stream_LE+0x28>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     706:	20 91 e8 00 	lds	r18, 0x00E8
     70a:	2b 77       	andi	r18, 0x7B	; 123
     70c:	20 93 e8 00 	sts	0x00E8, r18
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     710:	61 15       	cp	r22, r1
     712:	71 05       	cpc	r23, r1
     714:	c9 f6       	brne	.-78     	; 0x6c8 <Endpoint_Read_Control_Stream_LE+0x8>
     716:	05 c0       	rjmp	.+10     	; 0x722 <Endpoint_Read_Control_Stream_LE+0x62>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     718:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     71a:	88 23       	and	r24, r24
     71c:	61 f0       	breq	.+24     	; 0x736 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     71e:	85 30       	cpi	r24, 0x05	; 5
     720:	61 f0       	breq	.+24     	; 0x73a <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     722:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     726:	80 ff       	sbrs	r24, 0
     728:	f7 cf       	rjmp	.-18     	; 0x718 <Endpoint_Read_Control_Stream_LE+0x58>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     72e:	83 e0       	ldi	r24, 0x03	; 3
     730:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     736:	82 e0       	ldi	r24, 0x02	; 2
     738:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     73a:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     73c:	08 95       	ret

0000073e <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     73e:	e8 2f       	mov	r30, r24
     740:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     742:	80 91 43 0d 	lds	r24, 0x0D43
     746:	90 91 44 0d 	lds	r25, 0x0D44
     74a:	86 17       	cp	r24, r22
     74c:	97 07       	cpc	r25, r23
     74e:	18 f4       	brcc	.+6      	; 0x756 <Endpoint_Write_Control_PStream_LE+0x18>
     750:	bc 01       	movw	r22, r24
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	37 c0       	rjmp	.+110    	; 0x7c4 <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     756:	61 15       	cp	r22, r1
     758:	71 05       	cpc	r23, r1
     75a:	d9 f7       	brne	.-10     	; 0x752 <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     75c:	80 91 e8 00 	lds	r24, 0x00E8
     760:	8e 77       	andi	r24, 0x7E	; 126
     762:	80 93 e8 00 	sts	0x00E8, r24
     766:	f5 cf       	rjmp	.-22     	; 0x752 <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     768:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     76a:	88 23       	and	r24, r24
     76c:	09 f4       	brne	.+2      	; 0x770 <Endpoint_Write_Control_PStream_LE+0x32>
     76e:	3f c0       	rjmp	.+126    	; 0x7ee <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     770:	85 30       	cpi	r24, 0x05	; 5
     772:	c9 f1       	breq	.+114    	; 0x7e6 <Endpoint_Write_Control_PStream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     774:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     778:	83 fd       	sbrc	r24, 3
     77a:	37 c0       	rjmp	.+110    	; 0x7ea <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     77c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     780:	82 fd       	sbrc	r24, 2
     782:	2b c0       	rjmp	.+86     	; 0x7da <Endpoint_Write_Control_PStream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     784:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     788:	80 ff       	sbrs	r24, 0
     78a:	1c c0       	rjmp	.+56     	; 0x7c4 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     78c:	80 91 f2 00 	lds	r24, 0x00F2
     790:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     794:	07 c0       	rjmp	.+14     	; 0x7a4 <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     796:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     798:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     79c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     79e:	61 50       	subi	r22, 0x01	; 1
     7a0:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     7a2:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     7a4:	61 15       	cp	r22, r1
     7a6:	71 05       	cpc	r23, r1
     7a8:	19 f0       	breq	.+6      	; 0x7b0 <Endpoint_Write_Control_PStream_LE+0x72>
     7aa:	88 30       	cpi	r24, 0x08	; 8
     7ac:	91 05       	cpc	r25, r1
     7ae:	98 f3       	brcs	.-26     	; 0x796 <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     7b0:	21 e0       	ldi	r18, 0x01	; 1
     7b2:	88 30       	cpi	r24, 0x08	; 8
     7b4:	91 05       	cpc	r25, r1
     7b6:	09 f0       	breq	.+2      	; 0x7ba <Endpoint_Write_Control_PStream_LE+0x7c>
     7b8:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7ba:	80 91 e8 00 	lds	r24, 0x00E8
     7be:	8e 77       	andi	r24, 0x7E	; 126
     7c0:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     7c4:	61 15       	cp	r22, r1
     7c6:	71 05       	cpc	r23, r1
     7c8:	79 f6       	brne	.-98     	; 0x768 <Endpoint_Write_Control_PStream_LE+0x2a>
     7ca:	22 23       	and	r18, r18
     7cc:	69 f6       	brne	.-102    	; 0x768 <Endpoint_Write_Control_PStream_LE+0x2a>
     7ce:	05 c0       	rjmp	.+10     	; 0x7da <Endpoint_Write_Control_PStream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7d0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7d2:	88 23       	and	r24, r24
     7d4:	61 f0       	breq	.+24     	; 0x7ee <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7d6:	85 30       	cpi	r24, 0x05	; 5
     7d8:	61 f0       	breq	.+24     	; 0x7f2 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7da:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     7de:	82 ff       	sbrs	r24, 2
     7e0:	f7 cf       	rjmp	.-18     	; 0x7d0 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     7e6:	83 e0       	ldi	r24, 0x03	; 3
     7e8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     7ee:	82 e0       	ldi	r24, 0x02	; 2
     7f0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     7f2:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     7f4:	08 95       	ret

000007f6 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7f6:	8f 70       	andi	r24, 0x0F	; 15
     7f8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     7fc:	eb ee       	ldi	r30, 0xEB	; 235
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	80 81       	ld	r24, Z
     802:	81 60       	ori	r24, 0x01	; 1
     804:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     806:	ed ee       	ldi	r30, 0xED	; 237
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
     80c:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
     810:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     812:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     816:	88 1f       	adc	r24, r24
     818:	88 27       	eor	r24, r24
     81a:	88 1f       	adc	r24, r24
     81c:	08 95       	ret

0000081e <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     81e:	ef 92       	push	r14
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     82c:	e8 2e       	mov	r14, r24
     82e:	e7 01       	movw	r28, r14
     830:	7e 01       	movw	r14, r28
     832:	f9 2e       	mov	r15, r25
     834:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     836:	00 e0       	ldi	r16, 0x00	; 0
     838:	2a c0       	rjmp	.+84     	; 0x88e <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
     83a:	98 81       	ld	r25, Y
     83c:	99 23       	and	r25, r25
     83e:	29 f1       	breq	.+74     	; 0x88a <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     840:	6b 81       	ldd	r22, Y+3	; 0x03
     842:	e9 81       	ldd	r30, Y+1	; 0x01
     844:	fa 81       	ldd	r31, Y+2	; 0x02
     846:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     848:	89 2f       	mov	r24, r25
     84a:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     84c:	87 30       	cpi	r24, 0x07	; 7
     84e:	18 f5       	brcc	.+70     	; 0x896 <Endpoint_ConfigureEndpointTable+0x78>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     850:	62 95       	swap	r22
     852:	66 0f       	add	r22, r22
     854:	66 0f       	add	r22, r22
     856:	60 7c       	andi	r22, 0xC0	; 192
     858:	99 1f       	adc	r25, r25
     85a:	99 27       	eor	r25, r25
     85c:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     85e:	69 2b       	or	r22, r25
     860:	22 30       	cpi	r18, 0x02	; 2
     862:	10 f0       	brcs	.+4      	; 0x868 <Endpoint_ConfigureEndpointTable+0x4a>
     864:	96 e0       	ldi	r25, 0x06	; 6
     866:	01 c0       	rjmp	.+2      	; 0x86a <Endpoint_ConfigureEndpointTable+0x4c>
     868:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     86a:	28 e0       	ldi	r18, 0x08	; 8
     86c:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	03 c0       	rjmp	.+6      	; 0x878 <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     872:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     874:	22 0f       	add	r18, r18
     876:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     878:	2e 17       	cp	r18, r30
     87a:	3f 07       	cpc	r19, r31
     87c:	d0 f3       	brcs	.-12     	; 0x872 <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     87e:	42 95       	swap	r20
     880:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     882:	49 2b       	or	r20, r25
     884:	b8 df       	rcall	.-144    	; 0x7f6 <Endpoint_ConfigureEndpoint_Prv>
     886:	88 23       	and	r24, r24
     888:	31 f0       	breq	.+12     	; 0x896 <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     88a:	0f 5f       	subi	r16, 0xFF	; 255
     88c:	25 96       	adiw	r28, 0x05	; 5
     88e:	01 17       	cp	r16, r17
     890:	a0 f2       	brcs	.-88     	; 0x83a <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	01 c0       	rjmp	.+2      	; 0x898 <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     896:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	ff 90       	pop	r15
     8a2:	ef 90       	pop	r14
     8a4:	08 95       	ret

000008a6 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     8a6:	80 91 3d 0d 	lds	r24, 0x0D3D
     8aa:	87 ff       	sbrs	r24, 7
     8ac:	11 c0       	rjmp	.+34     	; 0x8d0 <Endpoint_ClearStatusStage+0x2a>
     8ae:	03 c0       	rjmp	.+6      	; 0x8b6 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     8b0:	8e b3       	in	r24, 0x1e	; 30
     8b2:	88 23       	and	r24, r24
     8b4:	b1 f0       	breq	.+44     	; 0x8e2 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8b6:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     8ba:	82 ff       	sbrs	r24, 2
     8bc:	f9 cf       	rjmp	.-14     	; 0x8b0 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8be:	80 91 e8 00 	lds	r24, 0x00E8
     8c2:	8b 77       	andi	r24, 0x7B	; 123
     8c4:	80 93 e8 00 	sts	0x00E8, r24
     8c8:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     8ca:	8e b3       	in	r24, 0x1e	; 30
     8cc:	88 23       	and	r24, r24
     8ce:	49 f0       	breq	.+18     	; 0x8e2 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     8d0:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     8d4:	80 ff       	sbrs	r24, 0
     8d6:	f9 cf       	rjmp	.-14     	; 0x8ca <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8d8:	80 91 e8 00 	lds	r24, 0x00E8
     8dc:	8e 77       	andi	r24, 0x7E	; 126
     8de:	80 93 e8 00 	sts	0x00E8, r24
     8e2:	08 95       	ret

000008e4 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     8e4:	80 91 e4 00 	lds	r24, 0x00E4
     8e8:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     8ec:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     8ee:	20 91 ec 00 	lds	r18, 0x00EC
     8f2:	20 ff       	sbrs	r18, 0
     8f4:	25 c0       	rjmp	.+74     	; 0x940 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     8f6:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     8fa:	20 fd       	sbrc	r18, 0
     8fc:	15 c0       	rjmp	.+42     	; 0x928 <Endpoint_WaitUntilReady+0x44>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8fe:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     900:	22 23       	and	r18, r18
     902:	a1 f0       	breq	.+40     	; 0x92c <Endpoint_WaitUntilReady+0x48>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     904:	25 30       	cpi	r18, 0x05	; 5
     906:	a1 f0       	breq	.+40     	; 0x930 <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     908:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     90c:	25 fd       	sbrc	r18, 5
     90e:	12 c0       	rjmp	.+36     	; 0x934 <Endpoint_WaitUntilReady+0x50>
     910:	20 91 e4 00 	lds	r18, 0x00E4
     914:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     918:	28 17       	cp	r18, r24
     91a:	39 07       	cpc	r19, r25
     91c:	41 f3       	breq	.-48     	; 0x8ee <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     91e:	44 23       	and	r20, r20
     920:	59 f0       	breq	.+22     	; 0x938 <Endpoint_WaitUntilReady+0x54>
     922:	41 50       	subi	r20, 0x01	; 1
     924:	c9 01       	movw	r24, r18
     926:	e3 cf       	rjmp	.-58     	; 0x8ee <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     92c:	82 e0       	ldi	r24, 0x02	; 2
     92e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     930:	83 e0       	ldi	r24, 0x03	; 3
     932:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     938:	84 e0       	ldi	r24, 0x04	; 4
     93a:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     93c:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     93e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     940:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     944:	22 ff       	sbrs	r18, 2
     946:	db cf       	rjmp	.-74     	; 0x8fe <Endpoint_WaitUntilReady+0x1a>
     948:	f9 cf       	rjmp	.-14     	; 0x93c <Endpoint_WaitUntilReady+0x58>

0000094a <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     952:	4d d0       	rcall	.+154    	; 0x9ee <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     954:	54 d0       	rcall	.+168    	; 0x9fe <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     956:	c8 ed       	ldi	r28, 0xD8	; 216
     958:	d0 e0       	ldi	r29, 0x00	; 0
     95a:	88 81       	ld	r24, Y
     95c:	8f 77       	andi	r24, 0x7F	; 127
     95e:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     960:	88 81       	ld	r24, Y
     962:	80 68       	ori	r24, 0x80	; 128
     964:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     966:	88 81       	ld	r24, Y
     968:	8f 7d       	andi	r24, 0xDF	; 223
     96a:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     96c:	e7 ed       	ldi	r30, 0xD7	; 215
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	80 81       	ld	r24, Z
     972:	80 68       	ori	r24, 0x80	; 128
     974:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     976:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     978:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
     97a:	10 92 39 0d 	sts	0x0D39, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     97e:	10 92 3b 0d 	sts	0x0D3B, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     982:	10 92 3a 0d 	sts	0x0D3A, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     986:	00 ee       	ldi	r16, 0xE0	; 224
     988:	10 e0       	ldi	r17, 0x00	; 0
     98a:	f8 01       	movw	r30, r16
     98c:	80 81       	ld	r24, Z
     98e:	8b 7f       	andi	r24, 0xFB	; 251
     990:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     992:	88 81       	ld	r24, Y
     994:	81 60       	ori	r24, 0x01	; 1
     996:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	42 e0       	ldi	r20, 0x02	; 2
     99e:	2b df       	rcall	.-426    	; 0x7f6 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     9a0:	e1 ee       	ldi	r30, 0xE1	; 225
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	80 81       	ld	r24, Z
     9a6:	8e 7f       	andi	r24, 0xFE	; 254
     9a8:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     9aa:	e2 ee       	ldi	r30, 0xE2	; 226
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	80 81       	ld	r24, Z
     9b0:	81 60       	ori	r24, 0x01	; 1
     9b2:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     9b4:	80 81       	ld	r24, Z
     9b6:	88 60       	ori	r24, 0x08	; 8
     9b8:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     9ba:	f8 01       	movw	r30, r16
     9bc:	80 81       	ld	r24, Z
     9be:	8e 7f       	andi	r24, 0xFE	; 254
     9c0:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     9c2:	88 81       	ld	r24, Y
     9c4:	80 61       	ori	r24, 0x10	; 16
     9c6:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	08 95       	ret

000009d2 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     9d2:	e8 ed       	ldi	r30, 0xD8	; 216
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	80 81       	ld	r24, Z
     9d8:	8f 7e       	andi	r24, 0xEF	; 239
     9da:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     9dc:	e7 ed       	ldi	r30, 0xD7	; 215
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	80 81       	ld	r24, Z
     9e2:	81 60       	ori	r24, 0x01	; 1
     9e4:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	80 93 3c 0d 	sts	0x0D3C, r24

	USB_ResetInterface();
}
     9ec:	ae cf       	rjmp	.-164    	; 0x94a <USB_ResetInterface>

000009ee <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     9ee:	e8 ed       	ldi	r30, 0xD8	; 216
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	80 81       	ld	r24, Z
     9f4:	8c 7f       	andi	r24, 0xFC	; 252
     9f6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     9f8:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     9fc:	08 95       	ret

000009fe <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     9fe:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     a02:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     a06:	08 95       	ret

00000a08 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     a08:	1f 92       	push	r1
     a0a:	0f 92       	push	r0
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	0f 92       	push	r0
     a10:	0b b6       	in	r0, 0x3b	; 59
     a12:	0f 92       	push	r0
     a14:	11 24       	eor	r1, r1
     a16:	2f 93       	push	r18
     a18:	3f 93       	push	r19
     a1a:	4f 93       	push	r20
     a1c:	5f 93       	push	r21
     a1e:	6f 93       	push	r22
     a20:	7f 93       	push	r23
     a22:	8f 93       	push	r24
     a24:	9f 93       	push	r25
     a26:	af 93       	push	r26
     a28:	bf 93       	push	r27
     a2a:	ef 93       	push	r30
     a2c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     a2e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     a32:	82 ff       	sbrs	r24, 2
     a34:	0a c0       	rjmp	.+20     	; 0xa4a <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     a36:	80 91 e2 00 	lds	r24, 0x00E2
     a3a:	82 ff       	sbrs	r24, 2
     a3c:	06 c0       	rjmp	.+12     	; 0xa4a <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     a3e:	80 91 e1 00 	lds	r24, 0x00E1
     a42:	8b 7f       	andi	r24, 0xFB	; 251
     a44:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     a48:	66 dc       	rcall	.-1844   	; 0x316 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     a4a:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     a4e:	80 ff       	sbrs	r24, 0
     a50:	1b c0       	rjmp	.+54     	; 0xa88 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     a52:	80 91 d8 00 	lds	r24, 0x00D8
     a56:	80 ff       	sbrs	r24, 0
     a58:	17 c0       	rjmp	.+46     	; 0xa88 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     a5a:	80 91 da 00 	lds	r24, 0x00DA
     a5e:	8e 7f       	andi	r24, 0xFE	; 254
     a60:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     a64:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     a68:	80 ff       	sbrs	r24, 0
     a6a:	0b c0       	rjmp	.+22     	; 0xa82 <__vector_10+0x7a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a6c:	84 e1       	ldi	r24, 0x14	; 20
     a6e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a70:	86 e1       	ldi	r24, 0x16	; 22
     a72:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     a74:	09 b4       	in	r0, 0x29	; 41
     a76:	00 fe       	sbrs	r0, 0
     a78:	fd cf       	rjmp	.-6      	; 0xa74 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
     a7e:	e8 d1       	rcall	.+976    	; 0xe50 <USB_Event_Stub>
     a80:	03 c0       	rjmp	.+6      	; 0xa88 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a82:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     a84:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
     a86:	e4 d1       	rcall	.+968    	; 0xe50 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     a88:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     a8c:	80 ff       	sbrs	r24, 0
     a8e:	17 c0       	rjmp	.+46     	; 0xabe <__vector_10+0xb6>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     a90:	80 91 e2 00 	lds	r24, 0x00E2
     a94:	80 ff       	sbrs	r24, 0
     a96:	13 c0       	rjmp	.+38     	; 0xabe <__vector_10+0xb6>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     a98:	80 91 e2 00 	lds	r24, 0x00E2
     a9c:	8e 7f       	andi	r24, 0xFE	; 254
     a9e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     aa2:	80 91 e2 00 	lds	r24, 0x00E2
     aa6:	80 61       	ori	r24, 0x10	; 16
     aa8:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     aac:	80 91 d8 00 	lds	r24, 0x00D8
     ab0:	80 62       	ori	r24, 0x20	; 32
     ab2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ab6:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     ab8:	85 e0       	ldi	r24, 0x05	; 5
     aba:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
     abc:	c9 d1       	rcall	.+914    	; 0xe50 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     abe:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     ac2:	84 ff       	sbrs	r24, 4
     ac4:	2c c0       	rjmp	.+88     	; 0xb1e <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     ac6:	80 91 e2 00 	lds	r24, 0x00E2
     aca:	84 ff       	sbrs	r24, 4
     acc:	28 c0       	rjmp	.+80     	; 0xb1e <__vector_10+0x116>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ace:	84 e1       	ldi	r24, 0x14	; 20
     ad0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ad2:	86 e1       	ldi	r24, 0x16	; 22
     ad4:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     ad6:	09 b4       	in	r0, 0x29	; 41
     ad8:	00 fe       	sbrs	r0, 0
     ada:	fd cf       	rjmp	.-6      	; 0xad6 <__vector_10+0xce>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     adc:	80 91 d8 00 	lds	r24, 0x00D8
     ae0:	8f 7d       	andi	r24, 0xDF	; 223
     ae2:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     ae6:	80 91 e1 00 	lds	r24, 0x00E1
     aea:	8f 7e       	andi	r24, 0xEF	; 239
     aec:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     af0:	80 91 e2 00 	lds	r24, 0x00E2
     af4:	8f 7e       	andi	r24, 0xEF	; 239
     af6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     afa:	80 91 e2 00 	lds	r24, 0x00E2
     afe:	81 60       	ori	r24, 0x01	; 1
     b00:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     b04:	80 91 39 0d 	lds	r24, 0x0D39
     b08:	88 23       	and	r24, r24
     b0a:	21 f4       	brne	.+8      	; 0xb14 <__vector_10+0x10c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     b0c:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     b10:	87 ff       	sbrs	r24, 7
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <__vector_10+0x110>
     b14:	84 e0       	ldi	r24, 0x04	; 4
     b16:	01 c0       	rjmp	.+2      	; 0xb1a <__vector_10+0x112>
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     b1c:	99 d1       	rcall	.+818    	; 0xe50 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     b1e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     b22:	83 ff       	sbrs	r24, 3
     b24:	21 c0       	rjmp	.+66     	; 0xb68 <__vector_10+0x160>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     b26:	80 91 e2 00 	lds	r24, 0x00E2
     b2a:	83 ff       	sbrs	r24, 3
     b2c:	1d c0       	rjmp	.+58     	; 0xb68 <__vector_10+0x160>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     b2e:	80 91 e1 00 	lds	r24, 0x00E1
     b32:	87 7f       	andi	r24, 0xF7	; 247
     b34:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     b38:	82 e0       	ldi	r24, 0x02	; 2
     b3a:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
     b3c:	10 92 39 0d 	sts	0x0D39, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     b40:	80 91 e1 00 	lds	r24, 0x00E1
     b44:	8e 7f       	andi	r24, 0xFE	; 254
     b46:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     b4a:	80 91 e2 00 	lds	r24, 0x00E2
     b4e:	8e 7f       	andi	r24, 0xFE	; 254
     b50:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     b54:	80 91 e2 00 	lds	r24, 0x00E2
     b58:	80 61       	ori	r24, 0x10	; 16
     b5a:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	42 e0       	ldi	r20, 0x02	; 2
     b64:	48 de       	rcall	.-880    	; 0x7f6 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     b66:	74 d1       	rcall	.+744    	; 0xe50 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     b68:	ff 91       	pop	r31
     b6a:	ef 91       	pop	r30
     b6c:	bf 91       	pop	r27
     b6e:	af 91       	pop	r26
     b70:	9f 91       	pop	r25
     b72:	8f 91       	pop	r24
     b74:	7f 91       	pop	r23
     b76:	6f 91       	pop	r22
     b78:	5f 91       	pop	r21
     b7a:	4f 91       	pop	r20
     b7c:	3f 91       	pop	r19
     b7e:	2f 91       	pop	r18
     b80:	0f 90       	pop	r0
     b82:	0b be       	out	0x3b, r0	; 59
     b84:	0f 90       	pop	r0
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	0f 90       	pop	r0
     b8a:	1f 90       	pop	r1
     b8c:	18 95       	reti

00000b8e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     b8e:	1f 93       	push	r17
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	ac 97       	sbiw	r28, 0x2c	; 44
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     ba4:	ed e3       	ldi	r30, 0x3D	; 61
     ba6:	fd e0       	ldi	r31, 0x0D	; 13
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ba8:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     bac:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     bae:	2d e0       	ldi	r18, 0x0D	; 13
     bb0:	e5 34       	cpi	r30, 0x45	; 69
     bb2:	f2 07       	cpc	r31, r18
     bb4:	c9 f7       	brne	.-14     	; 0xba8 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     bb6:	ac db       	rcall	.-2216   	; 0x310 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bb8:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     bbc:	83 ff       	sbrs	r24, 3
     bbe:	30 c1       	rjmp	.+608    	; 0xe20 <USB_Device_ProcessControlRequest+0x292>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     bc0:	80 91 3d 0d 	lds	r24, 0x0D3D

		switch (USB_ControlRequest.bRequest)
     bc4:	20 91 3e 0d 	lds	r18, 0x0D3E
     bc8:	25 30       	cpi	r18, 0x05	; 5
     bca:	09 f4       	brne	.+2      	; 0xbce <USB_Device_ProcessControlRequest+0x40>
     bcc:	84 c0       	rjmp	.+264    	; 0xcd6 <USB_Device_ProcessControlRequest+0x148>
     bce:	26 30       	cpi	r18, 0x06	; 6
     bd0:	40 f4       	brcc	.+16     	; 0xbe2 <USB_Device_ProcessControlRequest+0x54>
     bd2:	21 30       	cpi	r18, 0x01	; 1
     bd4:	a1 f1       	breq	.+104    	; 0xc3e <USB_Device_ProcessControlRequest+0xb0>
     bd6:	21 30       	cpi	r18, 0x01	; 1
     bd8:	70 f0       	brcs	.+28     	; 0xbf6 <USB_Device_ProcessControlRequest+0x68>
     bda:	23 30       	cpi	r18, 0x03	; 3
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <USB_Device_ProcessControlRequest+0x52>
     bde:	20 c1       	rjmp	.+576    	; 0xe20 <USB_Device_ProcessControlRequest+0x292>
     be0:	2e c0       	rjmp	.+92     	; 0xc3e <USB_Device_ProcessControlRequest+0xb0>
     be2:	28 30       	cpi	r18, 0x08	; 8
     be4:	09 f4       	brne	.+2      	; 0xbe8 <USB_Device_ProcessControlRequest+0x5a>
     be6:	ef c0       	rjmp	.+478    	; 0xdc6 <USB_Device_ProcessControlRequest+0x238>
     be8:	29 30       	cpi	r18, 0x09	; 9
     bea:	09 f4       	brne	.+2      	; 0xbee <USB_Device_ProcessControlRequest+0x60>
     bec:	fe c0       	rjmp	.+508    	; 0xdea <USB_Device_ProcessControlRequest+0x25c>
     bee:	26 30       	cpi	r18, 0x06	; 6
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <USB_Device_ProcessControlRequest+0x66>
     bf2:	16 c1       	rjmp	.+556    	; 0xe20 <USB_Device_ProcessControlRequest+0x292>
     bf4:	92 c0       	rjmp	.+292    	; 0xd1a <USB_Device_ProcessControlRequest+0x18c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bf6:	80 38       	cpi	r24, 0x80	; 128
     bf8:	21 f0       	breq	.+8      	; 0xc02 <USB_Device_ProcessControlRequest+0x74>
     bfa:	82 38       	cpi	r24, 0x82	; 130
     bfc:	09 f0       	breq	.+2      	; 0xc00 <USB_Device_ProcessControlRequest+0x72>
     bfe:	10 c1       	rjmp	.+544    	; 0xe20 <USB_Device_ProcessControlRequest+0x292>
     c00:	08 c0       	rjmp	.+16     	; 0xc12 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     c02:	80 91 3a 0d 	lds	r24, 0x0D3A
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     c06:	90 91 3b 0d 	lds	r25, 0x0D3B
     c0a:	99 23       	and	r25, r25
     c0c:	71 f0       	breq	.+28     	; 0xc2a <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     c0e:	82 60       	ori	r24, 0x02	; 2
     c10:	0c c0       	rjmp	.+24     	; 0xc2a <USB_Device_ProcessControlRequest+0x9c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c12:	80 91 41 0d 	lds	r24, 0x0D41
     c16:	8f 70       	andi	r24, 0x0F	; 15
     c18:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c1c:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	95 ff       	sbrs	r25, 5
     c24:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c26:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c2a:	90 91 e8 00 	lds	r25, 0x00E8
     c2e:	97 7f       	andi	r25, 0xF7	; 247
     c30:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     c34:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     c38:	10 92 f1 00 	sts	0x00F1, r1
     c3c:	cf c0       	rjmp	.+414    	; 0xddc <USB_Device_ProcessControlRequest+0x24e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c3e:	88 23       	and	r24, r24
     c40:	19 f0       	breq	.+6      	; 0xc48 <USB_Device_ProcessControlRequest+0xba>
     c42:	82 30       	cpi	r24, 0x02	; 2
     c44:	09 f0       	breq	.+2      	; 0xc48 <USB_Device_ProcessControlRequest+0xba>
     c46:	ec c0       	rjmp	.+472    	; 0xe20 <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	8f 71       	andi	r24, 0x1F	; 31
     c4c:	90 70       	andi	r25, 0x00	; 0
     c4e:	00 97       	sbiw	r24, 0x00	; 0
     c50:	29 f0       	breq	.+10     	; 0xc5c <USB_Device_ProcessControlRequest+0xce>
     c52:	82 30       	cpi	r24, 0x02	; 2
     c54:	91 05       	cpc	r25, r1
     c56:	09 f0       	breq	.+2      	; 0xc5a <USB_Device_ProcessControlRequest+0xcc>
     c58:	e3 c0       	rjmp	.+454    	; 0xe20 <USB_Device_ProcessControlRequest+0x292>
     c5a:	0b c0       	rjmp	.+22     	; 0xc72 <USB_Device_ProcessControlRequest+0xe4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     c5c:	80 91 3f 0d 	lds	r24, 0x0D3F
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	09 f0       	breq	.+2      	; 0xc66 <USB_Device_ProcessControlRequest+0xd8>
     c64:	dd c0       	rjmp	.+442    	; 0xe20 <USB_Device_ProcessControlRequest+0x292>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     c66:	23 30       	cpi	r18, 0x03	; 3
     c68:	09 f0       	breq	.+2      	; 0xc6c <USB_Device_ProcessControlRequest+0xde>
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	80 93 3b 0d 	sts	0x0D3B, r24
     c70:	2c c0       	rjmp	.+88     	; 0xcca <USB_Device_ProcessControlRequest+0x13c>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     c72:	80 91 3f 0d 	lds	r24, 0x0D3F
     c76:	88 23       	and	r24, r24
     c78:	41 f5       	brne	.+80     	; 0xcca <USB_Device_ProcessControlRequest+0x13c>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c7a:	20 91 41 0d 	lds	r18, 0x0D41
     c7e:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     c80:	09 f4       	brne	.+2      	; 0xc84 <USB_Device_ProcessControlRequest+0xf6>
     c82:	ce c0       	rjmp	.+412    	; 0xe20 <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c84:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     c88:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     c8c:	80 ff       	sbrs	r24, 0
     c8e:	1d c0       	rjmp	.+58     	; 0xcca <USB_Device_ProcessControlRequest+0x13c>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     c90:	80 91 3e 0d 	lds	r24, 0x0D3E
     c94:	83 30       	cpi	r24, 0x03	; 3
     c96:	21 f4       	brne	.+8      	; 0xca0 <USB_Device_ProcessControlRequest+0x112>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c98:	80 91 eb 00 	lds	r24, 0x00EB
     c9c:	80 62       	ori	r24, 0x20	; 32
     c9e:	13 c0       	rjmp	.+38     	; 0xcc6 <USB_Device_ProcessControlRequest+0x138>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     ca0:	80 91 eb 00 	lds	r24, 0x00EB
     ca4:	80 61       	ori	r24, 0x10	; 16
     ca6:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <USB_Device_ProcessControlRequest+0x126>
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	2a 95       	dec	r18
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <USB_Device_ProcessControlRequest+0x122>
     cb8:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     cbc:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     cc0:	80 91 eb 00 	lds	r24, 0x00EB
     cc4:	88 60       	ori	r24, 0x08	; 8
     cc6:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cca:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cce:	80 91 e8 00 	lds	r24, 0x00E8
     cd2:	87 7f       	andi	r24, 0xF7	; 247
     cd4:	86 c0       	rjmp	.+268    	; 0xde2 <USB_Device_ProcessControlRequest+0x254>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     cd6:	88 23       	and	r24, r24
     cd8:	09 f0       	breq	.+2      	; 0xcdc <USB_Device_ProcessControlRequest+0x14e>
     cda:	a2 c0       	rjmp	.+324    	; 0xe20 <USB_Device_ProcessControlRequest+0x292>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     cdc:	10 91 3f 0d 	lds	r17, 0x0D3F
     ce0:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     ce2:	80 91 e3 00 	lds	r24, 0x00E3
     ce6:	80 78       	andi	r24, 0x80	; 128
     ce8:	81 2b       	or	r24, r17
     cea:	80 93 e3 00 	sts	0x00E3, r24
     cee:	80 91 e8 00 	lds	r24, 0x00E8
     cf2:	87 7f       	andi	r24, 0xF7	; 247
     cf4:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     cf8:	d6 dd       	rcall	.-1108   	; 0x8a6 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     cfa:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     cfe:	80 ff       	sbrs	r24, 0
     d00:	fc cf       	rjmp	.-8      	; 0xcfa <USB_Device_ProcessControlRequest+0x16c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     d02:	80 91 e3 00 	lds	r24, 0x00E3
     d06:	80 68       	ori	r24, 0x80	; 128
     d08:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     d0c:	11 23       	and	r17, r17
     d0e:	11 f0       	breq	.+4      	; 0xd14 <USB_Device_ProcessControlRequest+0x186>
     d10:	83 e0       	ldi	r24, 0x03	; 3
     d12:	01 c0       	rjmp	.+2      	; 0xd16 <USB_Device_ProcessControlRequest+0x188>
     d14:	82 e0       	ldi	r24, 0x02	; 2
     d16:	8e bb       	out	0x1e, r24	; 30
     d18:	83 c0       	rjmp	.+262    	; 0xe20 <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d1a:	80 58       	subi	r24, 0x80	; 128
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <USB_Device_ProcessControlRequest+0x194>
     d20:	7f c0       	rjmp	.+254    	; 0xe20 <USB_Device_ProcessControlRequest+0x292>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     d22:	80 91 3f 0d 	lds	r24, 0x0D3F
     d26:	90 91 40 0d 	lds	r25, 0x0D40
     d2a:	23 e0       	ldi	r18, 0x03	; 3
     d2c:	8c 3d       	cpi	r24, 0xDC	; 220
     d2e:	92 07       	cpc	r25, r18
     d30:	91 f5       	brne	.+100    	; 0xd96 <USB_Device_ProcessControlRequest+0x208>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     d32:	83 e0       	ldi	r24, 0x03	; 3
     d34:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     d36:	8a e2       	ldi	r24, 0x2A	; 42
     d38:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     d3a:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     d3c:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     d3e:	de 01       	movw	r26, r28
     d40:	15 96       	adiw	r26, 0x05	; 5
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     d46:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     d48:	61 e2       	ldi	r22, 0x21	; 33
     d4a:	e4 2f       	mov	r30, r20
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	60 93 57 00 	sts	0x0057, r22
     d52:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
     d54:	80 ff       	sbrs	r24, 0
     d56:	03 c0       	rjmp	.+6      	; 0xd5e <USB_Device_ProcessControlRequest+0x1d0>
					{
						SerialByte >>= 4;
     d58:	e2 95       	swap	r30
     d5a:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     d5c:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     d5e:	ef 70       	andi	r30, 0x0F	; 15
     d60:	2e 2f       	mov	r18, r30
     d62:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     d64:	ea 30       	cpi	r30, 0x0A	; 10
     d66:	18 f0       	brcs	.+6      	; 0xd6e <USB_Device_ProcessControlRequest+0x1e0>
     d68:	29 5c       	subi	r18, 0xC9	; 201
     d6a:	3f 4f       	sbci	r19, 0xFF	; 255
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <USB_Device_ProcessControlRequest+0x1e4>
     d6e:	20 5d       	subi	r18, 0xD0	; 208
     d70:	3f 4f       	sbci	r19, 0xFF	; 255
     d72:	2d 93       	st	X+, r18
     d74:	3d 93       	st	X+, r19
     d76:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d78:	84 31       	cpi	r24, 0x14	; 20
     d7a:	91 05       	cpc	r25, r1
     d7c:	31 f7       	brne	.-52     	; 0xd4a <USB_Device_ProcessControlRequest+0x1bc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d7e:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d80:	80 91 e8 00 	lds	r24, 0x00E8
     d84:	87 7f       	andi	r24, 0xF7	; 247
     d86:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     d8a:	ce 01       	movw	r24, r28
     d8c:	03 96       	adiw	r24, 0x03	; 3
     d8e:	6a e2       	ldi	r22, 0x2A	; 42
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	3b dc       	rcall	.-1930   	; 0x60a <Endpoint_Write_Control_Stream_LE>
     d94:	12 c0       	rjmp	.+36     	; 0xdba <USB_Device_ProcessControlRequest+0x22c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     d96:	60 91 41 0d 	lds	r22, 0x0D41
     d9a:	ae 01       	movw	r20, r28
     d9c:	4f 5f       	subi	r20, 0xFF	; 255
     d9e:	5f 4f       	sbci	r21, 0xFF	; 255
     da0:	09 db       	rcall	.-2542   	; 0x3b4 <CALLBACK_USB_GetDescriptor>
     da2:	bc 01       	movw	r22, r24
     da4:	00 97       	sbiw	r24, 0x00	; 0
     da6:	09 f4       	brne	.+2      	; 0xdaa <USB_Device_ProcessControlRequest+0x21c>
     da8:	3b c0       	rjmp	.+118    	; 0xe20 <USB_Device_ProcessControlRequest+0x292>
     daa:	80 91 e8 00 	lds	r24, 0x00E8
     dae:	87 7f       	andi	r24, 0xF7	; 247
     db0:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	9a 81       	ldd	r25, Y+2	; 0x02
     db8:	c2 dc       	rcall	.-1660   	; 0x73e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dba:	80 91 e8 00 	lds	r24, 0x00E8
     dbe:	8b 77       	andi	r24, 0x7B	; 123
     dc0:	80 93 e8 00 	sts	0x00E8, r24
     dc4:	2d c0       	rjmp	.+90     	; 0xe20 <USB_Device_ProcessControlRequest+0x292>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     dc6:	80 38       	cpi	r24, 0x80	; 128
     dc8:	59 f5       	brne	.+86     	; 0xe20 <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dca:	80 91 e8 00 	lds	r24, 0x00E8
     dce:	87 7f       	andi	r24, 0xF7	; 247
     dd0:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     dd4:	80 91 39 0d 	lds	r24, 0x0D39
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     dd8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ddc:	80 91 e8 00 	lds	r24, 0x00E8
     de0:	8e 77       	andi	r24, 0x7E	; 126
     de2:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     de6:	5f dd       	rcall	.-1346   	; 0x8a6 <Endpoint_ClearStatusStage>
     de8:	1b c0       	rjmp	.+54     	; 0xe20 <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     dea:	88 23       	and	r24, r24
     dec:	c9 f4       	brne	.+50     	; 0xe20 <USB_Device_ProcessControlRequest+0x292>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     dee:	90 91 3f 0d 	lds	r25, 0x0D3F
     df2:	92 30       	cpi	r25, 0x02	; 2
     df4:	a8 f4       	brcc	.+42     	; 0xe20 <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     df6:	80 91 e8 00 	lds	r24, 0x00E8
     dfa:	87 7f       	andi	r24, 0xF7	; 247
     dfc:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     e00:	90 93 39 0d 	sts	0x0D39, r25

	Endpoint_ClearStatusStage();
     e04:	50 dd       	rcall	.-1376   	; 0x8a6 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     e06:	80 91 39 0d 	lds	r24, 0x0D39
     e0a:	88 23       	and	r24, r24
     e0c:	21 f4       	brne	.+8      	; 0xe16 <USB_Device_ProcessControlRequest+0x288>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     e0e:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     e12:	87 ff       	sbrs	r24, 7
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <USB_Device_ProcessControlRequest+0x28c>
     e16:	84 e0       	ldi	r24, 0x04	; 4
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <USB_Device_ProcessControlRequest+0x28e>
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
     e1e:	6f da       	rcall	.-2850   	; 0x2fe <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e20:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     e24:	83 ff       	sbrs	r24, 3
     e26:	0a c0       	rjmp	.+20     	; 0xe3c <USB_Device_ProcessControlRequest+0x2ae>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e28:	80 91 e8 00 	lds	r24, 0x00E8
     e2c:	87 7f       	andi	r24, 0xF7	; 247
     e2e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e32:	80 91 eb 00 	lds	r24, 0x00EB
     e36:	80 62       	ori	r24, 0x20	; 32
     e38:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     e3c:	ac 96       	adiw	r28, 0x2c	; 44
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	1f 91       	pop	r17
     e4e:	08 95       	ret

00000e50 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     e50:	08 95       	ret

00000e52 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     e52:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     e54:	8e b3       	in	r24, 0x1e	; 30
     e56:	88 23       	and	r24, r24
     e58:	a9 f0       	breq	.+42     	; 0xe84 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e5a:	80 91 e9 00 	lds	r24, 0x00E9
     e5e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e60:	90 91 ec 00 	lds	r25, 0x00EC
     e64:	90 ff       	sbrs	r25, 0
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <USB_USBTask+0x1a>
     e68:	10 e8       	ldi	r17, 0x80	; 128
     e6a:	01 c0       	rjmp	.+2      	; 0xe6e <USB_USBTask+0x1c>
     e6c:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e6e:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e70:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e74:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     e78:	83 ff       	sbrs	r24, 3
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
     e7c:	88 de       	rcall	.-752    	; 0xb8e <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e7e:	1f 70       	andi	r17, 0x0F	; 15
     e80:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     e84:	1f 91       	pop	r17
     e86:	08 95       	ret

00000e88 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     e88:	6f 92       	push	r6
     e8a:	7f 92       	push	r7
     e8c:	8f 92       	push	r8
     e8e:	9f 92       	push	r9
     e90:	af 92       	push	r10
     e92:	bf 92       	push	r11
     e94:	cf 92       	push	r12
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <HID_Device_ProcessControlRequest+0x1e>
     ea6:	0f 92       	push	r0
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     eae:	6d b6       	in	r6, 0x3d	; 61
     eb0:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     eb2:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     eb6:	83 ff       	sbrs	r24, 3
     eb8:	0d c1       	rjmp	.+538    	; 0x10d4 <HID_Device_ProcessControlRequest+0x24c>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     eba:	f7 01       	movw	r30, r14
     ebc:	80 81       	ld	r24, Z
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	20 91 41 0d 	lds	r18, 0x0D41
     ec4:	30 91 42 0d 	lds	r19, 0x0D42
     ec8:	28 17       	cp	r18, r24
     eca:	39 07       	cpc	r19, r25
     ecc:	09 f0       	breq	.+2      	; 0xed0 <HID_Device_ProcessControlRequest+0x48>
     ece:	02 c1       	rjmp	.+516    	; 0x10d4 <HID_Device_ProcessControlRequest+0x24c>
	  return;

	switch (USB_ControlRequest.bRequest)
     ed0:	80 91 3e 0d 	lds	r24, 0x0D3E
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	09 f4       	brne	.+2      	; 0xeda <HID_Device_ProcessControlRequest+0x52>
     ed8:	a4 c0       	rjmp	.+328    	; 0x1022 <HID_Device_ProcessControlRequest+0x19a>
     eda:	84 30       	cpi	r24, 0x04	; 4
     edc:	30 f4       	brcc	.+12     	; 0xeea <HID_Device_ProcessControlRequest+0x62>
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	71 f0       	breq	.+28     	; 0xefe <HID_Device_ProcessControlRequest+0x76>
     ee2:	82 30       	cpi	r24, 0x02	; 2
     ee4:	09 f0       	breq	.+2      	; 0xee8 <HID_Device_ProcessControlRequest+0x60>
     ee6:	f6 c0       	rjmp	.+492    	; 0x10d4 <HID_Device_ProcessControlRequest+0x24c>
     ee8:	d9 c0       	rjmp	.+434    	; 0x109c <HID_Device_ProcessControlRequest+0x214>
     eea:	8a 30       	cpi	r24, 0x0A	; 10
     eec:	09 f4       	brne	.+2      	; 0xef0 <HID_Device_ProcessControlRequest+0x68>
     eee:	be c0       	rjmp	.+380    	; 0x106c <HID_Device_ProcessControlRequest+0x1e4>
     ef0:	8b 30       	cpi	r24, 0x0B	; 11
     ef2:	09 f4       	brne	.+2      	; 0xef6 <HID_Device_ProcessControlRequest+0x6e>
     ef4:	a7 c0       	rjmp	.+334    	; 0x1044 <HID_Device_ProcessControlRequest+0x1bc>
     ef6:	89 30       	cpi	r24, 0x09	; 9
     ef8:	09 f0       	breq	.+2      	; 0xefc <HID_Device_ProcessControlRequest+0x74>
     efa:	ec c0       	rjmp	.+472    	; 0x10d4 <HID_Device_ProcessControlRequest+0x24c>
     efc:	4c c0       	rjmp	.+152    	; 0xf96 <HID_Device_ProcessControlRequest+0x10e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     efe:	80 91 3d 0d 	lds	r24, 0x0D3D
     f02:	81 3a       	cpi	r24, 0xA1	; 161
     f04:	09 f0       	breq	.+2      	; 0xf08 <HID_Device_ProcessControlRequest+0x80>
     f06:	e6 c0       	rjmp	.+460    	; 0x10d4 <HID_Device_ProcessControlRequest+0x24c>
     f08:	cd b6       	in	r12, 0x3d	; 61
     f0a:	de b6       	in	r13, 0x3e	; 62
     f0c:	9d b6       	in	r9, 0x3d	; 61
     f0e:	8d 2c       	mov	r8, r13
			{
				uint16_t ReportSize = 0;
     f10:	1b 82       	std	Y+3, r1	; 0x03
     f12:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     f14:	80 91 3f 0d 	lds	r24, 0x0D3F
     f18:	00 91 40 0d 	lds	r16, 0x0D40
     f1c:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     f1e:	f7 01       	movw	r30, r14
     f20:	40 85       	ldd	r20, Z+8	; 0x08
     f22:	c4 1a       	sub	r12, r20
     f24:	d1 08       	sbc	r13, r1
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de be       	out	0x3e, r13	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd be       	out	0x3d, r12	; 61
     f30:	08 94       	sec
     f32:	c1 1c       	adc	r12, r1
     f34:	d1 1c       	adc	r13, r1
     f36:	bc 2c       	mov	r11, r12
     f38:	ad 2c       	mov	r10, r13

				memset(ReportData, 0, sizeof(ReportData));
     f3a:	c6 01       	movw	r24, r12
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	d9 d1       	rcall	.+946    	; 0x12f6 <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     f44:	40 2f       	mov	r20, r16
     f46:	41 50       	subi	r20, 0x01	; 1
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     f48:	c7 01       	movw	r24, r14
     f4a:	be 01       	movw	r22, r28
     f4c:	6f 5f       	subi	r22, 0xFF	; 255
     f4e:	7f 4f       	sbci	r23, 0xFF	; 255
     f50:	96 01       	movw	r18, r12
     f52:	8e 01       	movw	r16, r28
     f54:	0e 5f       	subi	r16, 0xFE	; 254
     f56:	1f 4f       	sbci	r17, 0xFF	; 255
     f58:	ea d9       	rcall	.-3116   	; 0x32e <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     f5a:	f7 01       	movw	r30, r14
     f5c:	26 81       	ldd	r18, Z+6	; 0x06
     f5e:	37 81       	ldd	r19, Z+7	; 0x07
     f60:	21 15       	cp	r18, r1
     f62:	31 05       	cpc	r19, r1
     f64:	29 f0       	breq	.+10     	; 0xf70 <HID_Device_ProcessControlRequest+0xe8>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     f66:	40 85       	ldd	r20, Z+8	; 0x08
     f68:	c9 01       	movw	r24, r18
     f6a:	b6 01       	movw	r22, r12
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	ba d1       	rcall	.+884    	; 0x12e4 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f70:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f74:	80 91 e8 00 	lds	r24, 0x00E8
     f78:	87 7f       	andi	r24, 0xF7	; 247
     f7a:	80 93 e8 00 	sts	0x00E8, r24
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     f7e:	6a 81       	ldd	r22, Y+2	; 0x02
     f80:	7b 81       	ldd	r23, Y+3	; 0x03
     f82:	8b 2d       	mov	r24, r11
     f84:	9a 2d       	mov	r25, r10
     f86:	41 db       	rcall	.-2430   	; 0x60a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f88:	80 91 e8 00 	lds	r24, 0x00E8
     f8c:	8b 77       	andi	r24, 0x7B	; 123
     f8e:	80 93 e8 00 	sts	0x00E8, r24
     f92:	94 01       	movw	r18, r8
     f94:	3e c0       	rjmp	.+124    	; 0x1012 <HID_Device_ProcessControlRequest+0x18a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f96:	80 91 3d 0d 	lds	r24, 0x0D3D
     f9a:	81 32       	cpi	r24, 0x21	; 33
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <HID_Device_ProcessControlRequest+0x118>
     f9e:	9a c0       	rjmp	.+308    	; 0x10d4 <HID_Device_ProcessControlRequest+0x24c>
     fa0:	cd b6       	in	r12, 0x3d	; 61
     fa2:	de b6       	in	r13, 0x3e	; 62
     fa4:	bd b6       	in	r11, 0x3d	; 61
     fa6:	9d 2c       	mov	r9, r13
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     fa8:	00 91 43 0d 	lds	r16, 0x0D43
     fac:	10 91 44 0d 	lds	r17, 0x0D44
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     fb0:	a0 90 3f 0d 	lds	r10, 0x0D3F
     fb4:	80 90 40 0d 	lds	r8, 0x0D40
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     fb8:	8d b7       	in	r24, 0x3d	; 61
     fba:	9e b7       	in	r25, 0x3e	; 62
     fbc:	80 1b       	sub	r24, r16
     fbe:	91 0b       	sbc	r25, r17
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	9e bf       	out	0x3e, r25	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	8d bf       	out	0x3d, r24	; 61
     fca:	cd b6       	in	r12, 0x3d	; 61
     fcc:	de b6       	in	r13, 0x3e	; 62
     fce:	08 94       	sec
     fd0:	c1 1c       	adc	r12, r1
     fd2:	d1 1c       	adc	r13, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fd4:	80 91 e8 00 	lds	r24, 0x00E8
     fd8:	87 7f       	andi	r24, 0xF7	; 247
     fda:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     fde:	c6 01       	movw	r24, r12
     fe0:	b8 01       	movw	r22, r16
     fe2:	6e db       	rcall	.-2340   	; 0x6c0 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fe4:	80 91 e8 00 	lds	r24, 0x00E8
     fe8:	8e 77       	andi	r24, 0x7E	; 126
     fea:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	aa 20       	and	r10, r10
     ff4:	11 f4       	brne	.+4      	; 0xffa <HID_Device_ProcessControlRequest+0x172>
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     ffa:	48 2d       	mov	r20, r8
     ffc:	41 50       	subi	r20, 0x01	; 1

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     ffe:	96 01       	movw	r18, r12
    1000:	28 0f       	add	r18, r24
    1002:	39 1f       	adc	r19, r25
    1004:	08 1b       	sub	r16, r24
    1006:	19 0b       	sbc	r17, r25
    1008:	c7 01       	movw	r24, r14
    100a:	6a 2d       	mov	r22, r10
    100c:	d2 d9       	rcall	.-3164   	; 0x3b2 <CALLBACK_HID_Device_ProcessHIDReport>
    100e:	3b 2d       	mov	r19, r11
    1010:	29 2d       	mov	r18, r9
    1012:	83 2f       	mov	r24, r19
    1014:	92 2f       	mov	r25, r18
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	9e bf       	out	0x3e, r25	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	8d bf       	out	0x3d, r24	; 61
    1020:	59 c0       	rjmp	.+178    	; 0x10d4 <HID_Device_ProcessControlRequest+0x24c>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1022:	80 91 3d 0d 	lds	r24, 0x0D3D
    1026:	81 3a       	cpi	r24, 0xA1	; 161
    1028:	09 f0       	breq	.+2      	; 0x102c <HID_Device_ProcessControlRequest+0x1a4>
    102a:	54 c0       	rjmp	.+168    	; 0x10d4 <HID_Device_ProcessControlRequest+0x24c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    102c:	80 91 e8 00 	lds	r24, 0x00E8
    1030:	87 7f       	andi	r24, 0xF7	; 247
    1032:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1036:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    103a:	80 ff       	sbrs	r24, 0
    103c:	fc cf       	rjmp	.-8      	; 0x1036 <HID_Device_ProcessControlRequest+0x1ae>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    103e:	f7 01       	movw	r30, r14
    1040:	81 85       	ldd	r24, Z+9	; 0x09
    1042:	40 c0       	rjmp	.+128    	; 0x10c4 <HID_Device_ProcessControlRequest+0x23c>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1044:	80 91 3d 0d 	lds	r24, 0x0D3D
    1048:	81 32       	cpi	r24, 0x21	; 33
    104a:	09 f0       	breq	.+2      	; 0x104e <HID_Device_ProcessControlRequest+0x1c6>
    104c:	43 c0       	rjmp	.+134    	; 0x10d4 <HID_Device_ProcessControlRequest+0x24c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    104e:	80 91 e8 00 	lds	r24, 0x00E8
    1052:	87 7f       	andi	r24, 0xF7	; 247
    1054:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1058:	26 dc       	rcall	.-1972   	; 0x8a6 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    105a:	90 91 3f 0d 	lds	r25, 0x0D3F
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	99 23       	and	r25, r25
    1062:	09 f4       	brne	.+2      	; 0x1066 <HID_Device_ProcessControlRequest+0x1de>
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	f7 01       	movw	r30, r14
    1068:	81 87       	std	Z+9, r24	; 0x09
    106a:	34 c0       	rjmp	.+104    	; 0x10d4 <HID_Device_ProcessControlRequest+0x24c>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    106c:	80 91 3d 0d 	lds	r24, 0x0D3D
    1070:	81 32       	cpi	r24, 0x21	; 33
    1072:	81 f5       	brne	.+96     	; 0x10d4 <HID_Device_ProcessControlRequest+0x24c>
    1074:	80 91 e8 00 	lds	r24, 0x00E8
    1078:	87 7f       	andi	r24, 0xF7	; 247
    107a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    107e:	13 dc       	rcall	.-2010   	; 0x8a6 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1080:	80 91 3f 0d 	lds	r24, 0x0D3F
    1084:	90 91 40 0d 	lds	r25, 0x0D40
    1088:	80 70       	andi	r24, 0x00	; 0
    108a:	36 e0       	ldi	r19, 0x06	; 6
    108c:	96 95       	lsr	r25
    108e:	87 95       	ror	r24
    1090:	3a 95       	dec	r19
    1092:	e1 f7       	brne	.-8      	; 0x108c <HID_Device_ProcessControlRequest+0x204>
    1094:	f7 01       	movw	r30, r14
    1096:	95 87       	std	Z+13, r25	; 0x0d
    1098:	84 87       	std	Z+12, r24	; 0x0c
    109a:	1c c0       	rjmp	.+56     	; 0x10d4 <HID_Device_ProcessControlRequest+0x24c>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    109c:	80 91 3d 0d 	lds	r24, 0x0D3D
    10a0:	81 3a       	cpi	r24, 0xA1	; 161
    10a2:	c1 f4       	brne	.+48     	; 0x10d4 <HID_Device_ProcessControlRequest+0x24c>
    10a4:	80 91 e8 00 	lds	r24, 0x00E8
    10a8:	87 7f       	andi	r24, 0xF7	; 247
    10aa:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10ae:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    10b2:	80 ff       	sbrs	r24, 0
    10b4:	fc cf       	rjmp	.-8      	; 0x10ae <HID_Device_ProcessControlRequest+0x226>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    10b6:	f7 01       	movw	r30, r14
    10b8:	84 85       	ldd	r24, Z+12	; 0x0c
    10ba:	95 85       	ldd	r25, Z+13	; 0x0d
    10bc:	96 95       	lsr	r25
    10be:	87 95       	ror	r24
    10c0:	96 95       	lsr	r25
    10c2:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10c4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10c8:	80 91 e8 00 	lds	r24, 0x00E8
    10cc:	8e 77       	andi	r24, 0x7E	; 126
    10ce:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    10d2:	e9 db       	rcall	.-2094   	; 0x8a6 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	7e be       	out	0x3e, r7	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	6d be       	out	0x3d, r6	; 61
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	ff 90       	pop	r15
    10ee:	ef 90       	pop	r14
    10f0:	df 90       	pop	r13
    10f2:	cf 90       	pop	r12
    10f4:	bf 90       	pop	r11
    10f6:	af 90       	pop	r10
    10f8:	9f 90       	pop	r9
    10fa:	8f 90       	pop	r8
    10fc:	7f 90       	pop	r7
    10fe:	6f 90       	pop	r6
    1100:	08 95       	ret

00001102 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1108:	09 96       	adiw	r24, 0x09	; 9
    110a:	dc 01       	movw	r26, r24
    110c:	87 e0       	ldi	r24, 0x07	; 7
    110e:	ed 01       	movw	r28, r26
    1110:	19 92       	st	Y+, r1
    1112:	8a 95       	dec	r24
    1114:	e9 f7       	brne	.-6      	; 0x1110 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    111a:	84 ef       	ldi	r24, 0xF4	; 244
    111c:	91 e0       	ldi	r25, 0x01	; 1
    111e:	95 87       	std	Z+13, r25	; 0x0d
    1120:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1122:	83 e0       	ldi	r24, 0x03	; 3
    1124:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1126:	cf 01       	movw	r24, r30
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	61 e0       	ldi	r22, 0x01	; 1
    112c:	78 db       	rcall	.-2320   	; 0x81e <Endpoint_ConfigureEndpointTable>
	  return false;	
	
	return true;
}
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	08 95       	ret

00001134 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1134:	5f 92       	push	r5
    1136:	6f 92       	push	r6
    1138:	7f 92       	push	r7
    113a:	8f 92       	push	r8
    113c:	9f 92       	push	r9
    113e:	af 92       	push	r10
    1140:	bf 92       	push	r11
    1142:	cf 92       	push	r12
    1144:	df 92       	push	r13
    1146:	ef 92       	push	r14
    1148:	ff 92       	push	r15
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <HID_Device_USBTask+0x20>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <HID_Device_USBTask+0x22>
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    115c:	6d b6       	in	r6, 0x3d	; 61
    115e:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1160:	8e b3       	in	r24, 0x1e	; 30
    1162:	84 30       	cpi	r24, 0x04	; 4
    1164:	09 f0       	breq	.+2      	; 0x1168 <HID_Device_USBTask+0x34>
    1166:	98 c0       	rjmp	.+304    	; 0x1298 <HID_Device_USBTask+0x164>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1168:	80 91 e4 00 	lds	r24, 0x00E4
    116c:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1170:	f7 01       	movw	r30, r14
    1172:	22 85       	ldd	r18, Z+10	; 0x0a
    1174:	33 85       	ldd	r19, Z+11	; 0x0b
    1176:	28 17       	cp	r18, r24
    1178:	39 07       	cpc	r19, r25
    117a:	09 f4       	brne	.+2      	; 0x117e <HID_Device_USBTask+0x4a>
    117c:	8d c0       	rjmp	.+282    	; 0x1298 <HID_Device_USBTask+0x164>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    117e:	81 81       	ldd	r24, Z+1	; 0x01
    1180:	8f 70       	andi	r24, 0x0F	; 15
    1182:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1186:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    118a:	85 ff       	sbrs	r24, 5
    118c:	85 c0       	rjmp	.+266    	; 0x1298 <HID_Device_USBTask+0x164>
    118e:	8d b6       	in	r8, 0x3d	; 61
    1190:	57 2c       	mov	r5, r7
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1192:	40 85       	ldd	r20, Z+8	; 0x08
    1194:	cd b6       	in	r12, 0x3d	; 61
    1196:	de b6       	in	r13, 0x3e	; 62
    1198:	c4 1a       	sub	r12, r20
    119a:	d1 08       	sbc	r13, r1
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de be       	out	0x3e, r13	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd be       	out	0x3d, r12	; 61
    11a6:	0d b7       	in	r16, 0x3d	; 61
    11a8:	1e b7       	in	r17, 0x3e	; 62
    11aa:	0f 5f       	subi	r16, 0xFF	; 255
    11ac:	1f 4f       	sbci	r17, 0xFF	; 255
    11ae:	b0 2e       	mov	r11, r16
    11b0:	a1 2e       	mov	r10, r17
		uint8_t  ReportID     = 0;
    11b2:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    11b4:	1b 82       	std	Y+3, r1	; 0x03
    11b6:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    11b8:	c8 01       	movw	r24, r16
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	9a d0       	rcall	.+308    	; 0x12f6 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    11c2:	c7 01       	movw	r24, r14
    11c4:	be 01       	movw	r22, r28
    11c6:	6f 5f       	subi	r22, 0xFF	; 255
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	40 e0       	ldi	r20, 0x00	; 0
    11cc:	98 01       	movw	r18, r16
    11ce:	8e 01       	movw	r16, r28
    11d0:	0e 5f       	subi	r16, 0xFE	; 254
    11d2:	1f 4f       	sbci	r17, 0xFF	; 255
    11d4:	ac d8       	rcall	.-3752   	; 0x32e <CALLBACK_HID_Device_CreateHIDReport>
    11d6:	98 2e       	mov	r9, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    11d8:	f7 01       	movw	r30, r14
    11da:	84 85       	ldd	r24, Z+12	; 0x0c
    11dc:	95 85       	ldd	r25, Z+13	; 0x0d
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	59 f0       	breq	.+22     	; 0x11f8 <HID_Device_USBTask+0xc4>
	  return false;	
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	26 85       	ldd	r18, Z+14	; 0x0e
    11e8:	37 85       	ldd	r19, Z+15	; 0x0f
    11ea:	21 15       	cp	r18, r1
    11ec:	31 05       	cpc	r19, r1
    11ee:	11 f0       	breq	.+4      	; 0x11f4 <HID_Device_USBTask+0xc0>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    11f4:	6c 01       	movw	r12, r24
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <HID_Device_USBTask+0xc8>
    11f8:	cc 24       	eor	r12, r12
    11fa:	dd 24       	eor	r13, r13

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    11fc:	f7 01       	movw	r30, r14
    11fe:	06 81       	ldd	r16, Z+6	; 0x06
    1200:	17 81       	ldd	r17, Z+7	; 0x07
    1202:	01 15       	cp	r16, r1
    1204:	11 05       	cpc	r17, r1
    1206:	a1 f0       	breq	.+40     	; 0x1230 <HID_Device_USBTask+0xfc>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1208:	4a 81       	ldd	r20, Y+2	; 0x02
    120a:	5b 81       	ldd	r21, Y+3	; 0x03
    120c:	8b 2d       	mov	r24, r11
    120e:	9a 2d       	mov	r25, r10
    1210:	b8 01       	movw	r22, r16
    1212:	5b d0       	rcall	.+182    	; 0x12ca <memcmp>
    1214:	21 e0       	ldi	r18, 0x01	; 1
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	09 f4       	brne	.+2      	; 0x121c <HID_Device_USBTask+0xe8>
    121a:	20 e0       	ldi	r18, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    121c:	f7 01       	movw	r30, r14
    121e:	40 85       	ldd	r20, Z+8	; 0x08
    1220:	c8 01       	movw	r24, r16
    1222:	6b 2d       	mov	r22, r11
    1224:	7a 2d       	mov	r23, r10
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	2c 83       	std	Y+4, r18	; 0x04
    122a:	5c d0       	rcall	.+184    	; 0x12e4 <memcpy>
    122c:	2c 81       	ldd	r18, Y+4	; 0x04
    122e:	01 c0       	rjmp	.+2      	; 0x1232 <HID_Device_USBTask+0xfe>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1230:	20 e0       	ldi	r18, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	9b 81       	ldd	r25, Y+3	; 0x03
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	09 f1       	breq	.+66     	; 0x127c <HID_Device_USBTask+0x148>
    123a:	99 20       	and	r9, r9
    123c:	29 f4       	brne	.+10     	; 0x1248 <HID_Device_USBTask+0x114>
    123e:	22 23       	and	r18, r18
    1240:	19 f4       	brne	.+6      	; 0x1248 <HID_Device_USBTask+0x114>
    1242:	c1 14       	cp	r12, r1
    1244:	d1 04       	cpc	r13, r1
    1246:	d1 f0       	breq	.+52     	; 0x127c <HID_Device_USBTask+0x148>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1248:	f7 01       	movw	r30, r14
    124a:	84 85       	ldd	r24, Z+12	; 0x0c
    124c:	95 85       	ldd	r25, Z+13	; 0x0d
    124e:	97 87       	std	Z+15, r25	; 0x0f
    1250:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1252:	81 81       	ldd	r24, Z+1	; 0x01
    1254:	8f 70       	andi	r24, 0x0F	; 15
    1256:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	88 23       	and	r24, r24
    125e:	11 f0       	breq	.+4      	; 0x1264 <HID_Device_USBTask+0x130>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1260:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1264:	6a 81       	ldd	r22, Y+2	; 0x02
    1266:	7b 81       	ldd	r23, Y+3	; 0x03
    1268:	8b 2d       	mov	r24, r11
    126a:	9a 2d       	mov	r25, r10
    126c:	40 e0       	ldi	r20, 0x00	; 0
    126e:	50 e0       	ldi	r21, 0x00	; 0
    1270:	6e d9       	rcall	.-3364   	; 0x54e <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1272:	80 91 e8 00 	lds	r24, 0x00E8
    1276:	8e 77       	andi	r24, 0x7E	; 126
    1278:	80 93 e8 00 	sts	0x00E8, r24
    127c:	80 91 e4 00 	lds	r24, 0x00E4
    1280:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1284:	f7 01       	movw	r30, r14
    1286:	93 87       	std	Z+11, r25	; 0x0b
    1288:	82 87       	std	Z+10, r24	; 0x0a
    128a:	88 2d       	mov	r24, r8
    128c:	95 2d       	mov	r25, r5
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	9e bf       	out	0x3e, r25	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	8d bf       	out	0x3d, r24	; 61
	}
}
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	7e be       	out	0x3e, r7	; 62
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	6d be       	out	0x3d, r6	; 61
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	ef 90       	pop	r14
    12b6:	df 90       	pop	r13
    12b8:	cf 90       	pop	r12
    12ba:	bf 90       	pop	r11
    12bc:	af 90       	pop	r10
    12be:	9f 90       	pop	r9
    12c0:	8f 90       	pop	r8
    12c2:	7f 90       	pop	r7
    12c4:	6f 90       	pop	r6
    12c6:	5f 90       	pop	r5
    12c8:	08 95       	ret

000012ca <memcmp>:
    12ca:	fb 01       	movw	r30, r22
    12cc:	dc 01       	movw	r26, r24
    12ce:	04 c0       	rjmp	.+8      	; 0x12d8 <memcmp+0xe>
    12d0:	8d 91       	ld	r24, X+
    12d2:	01 90       	ld	r0, Z+
    12d4:	80 19       	sub	r24, r0
    12d6:	21 f4       	brne	.+8      	; 0x12e0 <memcmp+0x16>
    12d8:	41 50       	subi	r20, 0x01	; 1
    12da:	50 40       	sbci	r21, 0x00	; 0
    12dc:	c8 f7       	brcc	.-14     	; 0x12d0 <memcmp+0x6>
    12de:	88 1b       	sub	r24, r24
    12e0:	99 0b       	sbc	r25, r25
    12e2:	08 95       	ret

000012e4 <memcpy>:
    12e4:	fb 01       	movw	r30, r22
    12e6:	dc 01       	movw	r26, r24
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <memcpy+0xa>
    12ea:	01 90       	ld	r0, Z+
    12ec:	0d 92       	st	X+, r0
    12ee:	41 50       	subi	r20, 0x01	; 1
    12f0:	50 40       	sbci	r21, 0x00	; 0
    12f2:	d8 f7       	brcc	.-10     	; 0x12ea <memcpy+0x6>
    12f4:	08 95       	ret

000012f6 <memset>:
    12f6:	dc 01       	movw	r26, r24
    12f8:	01 c0       	rjmp	.+2      	; 0x12fc <memset+0x6>
    12fa:	6d 93       	st	X+, r22
    12fc:	41 50       	subi	r20, 0x01	; 1
    12fe:	50 40       	sbci	r21, 0x00	; 0
    1300:	e0 f7       	brcc	.-8      	; 0x12fa <memset+0x4>
    1302:	08 95       	ret

00001304 <_exit>:
    1304:	f8 94       	cli

00001306 <__stop_program>:
    1306:	ff cf       	rjmp	.-2      	; 0x1306 <__stop_program>
