
AVRISP-MKII.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  000027c2  00002876  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027c2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  008001a2  008001a2  00002918  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00002918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000870  00000000  00000000  0000291c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000b3  00000000  00000000  0000318c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000005b0  00000000  00000000  0000323f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000f38  00000000  00000000  000037ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000786c  00000000  00000000  00004727  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001fa9  00000000  00000000  0000bf93  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006ce8  00000000  00000000  0000df3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000008e0  00000000  00000000  00014c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002f4f  00000000  00000000  00015504  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000042ab  00000000  00000000  00018453  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000090b  00000000  00000000  0001c6fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000838  00000000  00000000  0001d009  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
       0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
       4:	13 c1       	rjmp	.+550    	; 0x22c <__bad_interrupt>
       6:	00 00       	nop
       8:	11 c1       	rjmp	.+546    	; 0x22c <__bad_interrupt>
       a:	00 00       	nop
       c:	0f c1       	rjmp	.+542    	; 0x22c <__bad_interrupt>
       e:	00 00       	nop
      10:	0d c1       	rjmp	.+538    	; 0x22c <__bad_interrupt>
      12:	00 00       	nop
      14:	0b c1       	rjmp	.+534    	; 0x22c <__bad_interrupt>
      16:	00 00       	nop
      18:	09 c1       	rjmp	.+530    	; 0x22c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	07 c1       	rjmp	.+526    	; 0x22c <__bad_interrupt>
      1e:	00 00       	nop
      20:	05 c1       	rjmp	.+522    	; 0x22c <__bad_interrupt>
      22:	00 00       	nop
      24:	03 c1       	rjmp	.+518    	; 0x22c <__bad_interrupt>
      26:	00 00       	nop
      28:	01 c1       	rjmp	.+514    	; 0x22c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__vector_11>
      30:	fd c0       	rjmp	.+506    	; 0x22c <__bad_interrupt>
      32:	00 00       	nop
      34:	fb c0       	rjmp	.+502    	; 0x22c <__bad_interrupt>
      36:	00 00       	nop
      38:	f9 c0       	rjmp	.+498    	; 0x22c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	63 c7       	rjmp	.+3782   	; 0xf04 <__vector_15>
      3e:	00 00       	nop
      40:	f5 c0       	rjmp	.+490    	; 0x22c <__bad_interrupt>
      42:	00 00       	nop
      44:	f3 c0       	rjmp	.+486    	; 0x22c <__bad_interrupt>
      46:	00 00       	nop
      48:	f1 c0       	rjmp	.+482    	; 0x22c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	85 c1       	rjmp	.+778    	; 0x358 <__vector_19>
      4e:	00 00       	nop
      50:	ed c0       	rjmp	.+474    	; 0x22c <__bad_interrupt>
      52:	00 00       	nop
      54:	eb c0       	rjmp	.+470    	; 0x22c <__bad_interrupt>
      56:	00 00       	nop
      58:	e9 c0       	rjmp	.+466    	; 0x22c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e7 c0       	rjmp	.+462    	; 0x22c <__bad_interrupt>
      5e:	00 00       	nop
      60:	e5 c0       	rjmp	.+458    	; 0x22c <__bad_interrupt>
      62:	00 00       	nop
      64:	e3 c0       	rjmp	.+454    	; 0x22c <__bad_interrupt>
      66:	00 00       	nop
      68:	e1 c0       	rjmp	.+450    	; 0x22c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	df c0       	rjmp	.+446    	; 0x22c <__bad_interrupt>
      6e:	00 00       	nop
      70:	dd c0       	rjmp	.+442    	; 0x22c <__bad_interrupt>
      72:	00 00       	nop

00000074 <AVRISP_DeviceDescriptor>:
      74:	12 01 10 01 ff 00 00 10 eb 03 04 21 00 02 01 02     ...........!....
      84:	03 01                                               ..

00000086 <AVRISP_LanguageString>:
      86:	04 03 09 04                                         ....

0000008a <AVRISP_ManufacturerString>:
      8a:	0c 03 41 00 54 00 4d 00 45 00 4c 00 00 00           ..A.T.M.E.L...

00000098 <AVRISP_ProductString>:
      98:	18 03 41 00 56 00 52 00 49 00 53 00 50 00 20 00     ..A.V.R.I.S.P. .
      a8:	6d 00 6b 00 49 00 49 00 00 00                       m.k.I.I...

000000b2 <TimerCompareFromSCKDuration>:
      b2:	09 00 0a 00 0a 00 0b 00 0c 00 0d 00 0d 00 0e 00     ................
      c2:	0f 00 10 00 10 00 12 00 13 00 13 00 14 00 16 00     ................
      d2:	16 00 18 00 19 00 1a 00 1c 00 1d 00 1f 00 20 00     .............. .
      e2:	22 00 23 00 25 00 27 00 29 00 2b 00 2e 00 30 00     ".#.%.'.).+...0.
      f2:	32 00 34 00 37 00 3a 00 3d 00 40 00 43 00 46 00     2.4.7.:.=.@.C.F.
     102:	4a 00 4e 00 52 00 55 00 5a 00 5e 00 63 00 68 00     J.N.R.U.Z.^.c.h.
     112:	6d 00 73 00 78 00 7e 00 84 00 8b 00 91 00 99 00     m.s.x.~.........
     122:	a0 00 a9 00 b1 00 b9 00 c3 00 cc 00 d6 00 e1 00     ................
     132:	ec 00 f7 00 04 01 11 01 1e 01 2d 01 3b 01 4b 01     ..........-.;.K.
     142:	5b 01 6c 01 7d 01 91 01 a5 01 ba 01 cf 01 e6 01     [.l.}...........
     152:	fe 01 16 02 31 02 4c 02 6a 02 88 02 a8 02 ca 02     ....1.L.j.......
     162:	ed 02 11 03 38 03 60 03 8b 03 b8 03 e7 03 18 04     ....8.`.........
     172:	4b 04 81 04 b9 04 f5 04 34 05 75 05 b9 05 01 06     K.......4.u.....
     182:	4e 06 9d 06 ef 06 48 07 a3 07 04 08 65 08 d0 08     N.....H.....e...
     192:	40 09 b6 09 2b 0a ab 0a 30 0b c3 0b 51 0c ee 0c     @...+...0...Q...
     1a2:	8f 0d 40 0e f6 0e af 0f 68 10 47 11 14 12 f5 12     ..@.....h.G.....
     1b2:	ed 13 e2 14 f0 15 f9 16 1b 18 5c 19 91 1a e5 1b     ..........\.....
     1c2:	25 1d 83 1e 03 20 ab 21 30 23 32 25 0f 27 f1 28     %.... .!0#2%.'.(
     1d2:	f8 2a 1a 2d 49 2f a1 31 14 34 a1 36 45 39 17 3c     .*.-I/.1.4.6E9.<
     1e2:	1a 3f 34 42 60 45 df 48 70 4c                       .?4B`E.HpL

000001ec <SPIMaskFromSCKDuration>:
     1ec:	40 00 41 01 42 43 03 00                             @.A.BC..

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	d2 e0       	ldi	r29, 0x02	; 2
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	cd bf       	out	0x3d, r28	; 61

00000200 <__do_copy_data>:
     200:	11 e0       	ldi	r17, 0x01	; 1
     202:	a0 e0       	ldi	r26, 0x00	; 0
     204:	b1 e0       	ldi	r27, 0x01	; 1
     206:	e2 ec       	ldi	r30, 0xC2	; 194
     208:	f7 e2       	ldi	r31, 0x27	; 39
     20a:	02 c0       	rjmp	.+4      	; 0x210 <__do_copy_data+0x10>
     20c:	05 90       	lpm	r0, Z+
     20e:	0d 92       	st	X+, r0
     210:	a2 3a       	cpi	r26, 0xA2	; 162
     212:	b1 07       	cpc	r27, r17
     214:	d9 f7       	brne	.-10     	; 0x20c <__do_copy_data+0xc>

00000216 <__do_clear_bss>:
     216:	11 e0       	ldi	r17, 0x01	; 1
     218:	a2 ea       	ldi	r26, 0xA2	; 162
     21a:	b1 e0       	ldi	r27, 0x01	; 1
     21c:	01 c0       	rjmp	.+2      	; 0x220 <.do_clear_bss_start>

0000021e <.do_clear_bss_loop>:
     21e:	1d 92       	st	X+, r1

00000220 <.do_clear_bss_start>:
     220:	a5 3b       	cpi	r26, 0xB5	; 181
     222:	b1 07       	cpc	r27, r17
     224:	e1 f7       	brne	.-8      	; 0x21e <.do_clear_bss_loop>
     226:	44 d0       	rcall	.+136    	; 0x2b0 <main>
     228:	0c 94 df 13 	jmp	0x27be	; 0x27be <_exit>

0000022c <__bad_interrupt>:
     22c:	e9 ce       	rjmp	.-558    	; 0x0 <__vectors>

0000022e <LEDs_SetAllLEDs>:
				PORTB &= ~LedMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LedMask)
			{
				PORTB = ((PORTB & ~LEDS_ALL_LEDS) | LedMask);
     22e:	95 b1       	in	r25, 0x05	; 5
     230:	9f 71       	andi	r25, 0x1F	; 31
     232:	98 2b       	or	r25, r24
     234:	95 b9       	out	0x05, r25	; 5
			}
     236:	08 95       	ret

00000238 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     238:	84 b7       	in	r24, 0x34	; 52
     23a:	87 7f       	andi	r24, 0xF7	; 247
     23c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     23e:	88 e1       	ldi	r24, 0x18	; 24
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	80 93 60 00 	sts	0x0060, r24
     248:	10 92 60 00 	sts	0x0060, r1
     24c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	80 e8       	ldi	r24, 0x80	; 128
     252:	0f b6       	in	r0, 0x3f	; 63
     254:	f8 94       	cli
     256:	80 93 61 00 	sts	0x0061, r24
     25a:	90 93 61 00 	sts	0x0061, r25
     25e:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_ALL_LEDS;
     260:	84 b1       	in	r24, 0x04	; 4
     262:	80 6e       	ori	r24, 0xE0	; 224
     264:	84 b9       	out	0x04, r24	; 4
				PORTB &= ~LEDS_ALL_LEDS;
     266:	85 b1       	in	r24, 0x05	; 5
     268:	8f 71       	andi	r24, 0x1F	; 31
     26a:	85 b9       	out	0x05, r24	; 5
	#if defined(RESET_TOGGLES_LIBUSB_COMPAT)
	UpdateCurrentCompatibilityMode();
	#endif

	/* USB Stack Initialization */
	USB_Init();
     26c:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <USB_Init>

00000270 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     270:	80 ec       	ldi	r24, 0xC0	; 192
}
     272:	dd cf       	rjmp	.-70     	; 0x22e <LEDs_SetAllLEDs>

00000274 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     274:	80 e4       	ldi	r24, 0x40	; 64
}
     276:	db cf       	rjmp	.-74     	; 0x22e <LEDs_SetAllLEDs>

00000278 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     278:	82 e0       	ldi	r24, 0x02	; 2
     27a:	60 e8       	ldi	r22, 0x80	; 128
     27c:	42 e3       	ldi	r20, 0x32	; 50
     27e:	0e 94 51 11 	call	0x22a2	; 0x22a2 <Endpoint_ConfigureEndpoint_Prv>
	/* Setup AVRISP Data IN endpoint if it is using a physically different endpoint */
	if ((AVRISP_DATA_IN_EPADDR & ENDPOINT_EPNUM_MASK) != (AVRISP_DATA_OUT_EPADDR & ENDPOINT_EPNUM_MASK))
	  ConfigSuccess &= Endpoint_ConfigureEndpoint(AVRISP_DATA_IN_EPADDR, EP_TYPE_BULK, AVRISP_DATA_EPSIZE, 1);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     282:	80 ff       	sbrs	r24, 0
     284:	02 c0       	rjmp	.+4      	; 0x28a <EVENT_USB_Device_ConfigurationChanged+0x12>
     286:	80 e8       	ldi	r24, 0x80	; 128
     288:	01 c0       	rjmp	.+2      	; 0x28c <EVENT_USB_Device_ConfigurationChanged+0x14>
     28a:	80 e4       	ldi	r24, 0x40	; 64
}
     28c:	d0 cf       	rjmp	.-96     	; 0x22e <LEDs_SetAllLEDs>

0000028e <AVRISP_Task>:

/** Processes incoming V2 Protocol commands from the host, returning a response when required. */
void AVRISP_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     28e:	8e b3       	in	r24, 0x1e	; 30
     290:	84 30       	cpi	r24, 0x04	; 4
     292:	69 f4       	brne	.+26     	; 0x2ae <AVRISP_Task+0x20>
	  return;

	V2Params_UpdateParamValues();
     294:	c8 d1       	rcall	.+912    	; 0x626 <V2Params_UpdateParamValues>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     296:	82 e0       	ldi	r24, 0x02	; 2
     298:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     29c:	80 91 e8 00 	lds	r24, 0x00E8

	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPADDR);

	/* Check to see if a V2 Protocol command has been received */
	if (Endpoint_IsOUTReceived())
     2a0:	82 ff       	sbrs	r24, 2
     2a2:	05 c0       	rjmp	.+10     	; 0x2ae <AVRISP_Task+0x20>
	{
		LEDs_SetAllLEDs(LEDMASK_BUSY);
     2a4:	80 ec       	ldi	r24, 0xC0	; 192
     2a6:	c3 df       	rcall	.-122    	; 0x22e <LEDs_SetAllLEDs>

		/* Pass off processing of the V2 Protocol command to the V2 Protocol handler */
		V2Protocol_ProcessCommand();
     2a8:	74 d0       	rcall	.+232    	; 0x392 <V2Protocol_ProcessCommand>

		LEDs_SetAllLEDs(LEDMASK_USB_READY);
     2aa:	80 e8       	ldi	r24, 0x80	; 128
     2ac:	c0 cf       	rjmp	.-128    	; 0x22e <LEDs_SetAllLEDs>
     2ae:	08 95       	ret

000002b0 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     2b0:	c3 df       	rcall	.-122    	; 0x238 <SetupHardware>
	V2Protocol_Init();
     2b2:	67 d0       	rcall	.+206    	; 0x382 <V2Protocol_Init>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2b4:	80 e4       	ldi	r24, 0x40	; 64
     2b6:	bb df       	rcall	.-138    	; 0x22e <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     2b8:	78 94       	sei
	for (;;)
	{
		#if (BOARD == BOARD_USBTINYMKII)
		/* On the USBTINY-MKII target, there is a secondary LED which indicates the current selected power
		   mode - either VBUS, or sourced from the VTARGET pin of the programming connectors */
		LEDs_ChangeLEDs(LEDMASK_VBUSPOWER, (PIND & (1 << 0)) ? 0 : LEDMASK_VBUSPOWER);
     2ba:	48 9b       	sbis	0x09, 0	; 9
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <main+0x12>
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <main+0x14>
     2c2:	90 e2       	ldi	r25, 0x20	; 32
			}

			static inline void LEDs_ChangeLEDs(const uint8_t LedMask,
			                                   const uint8_t ActiveMask)
			{
				PORTB = ((PORTB & ~LedMask) | ActiveMask);
     2c4:	85 b1       	in	r24, 0x05	; 5
     2c6:	8f 7d       	andi	r24, 0xDF	; 223
     2c8:	89 2b       	or	r24, r25
     2ca:	85 b9       	out	0x05, r24	; 5
		#endif

		AVRISP_Task();
     2cc:	e0 df       	rcall	.-64     	; 0x28e <AVRISP_Task>
		USB_USBTask();
     2ce:	0e 94 aa 13 	call	0x2754	; 0x2754 <USB_USBTask>
	}
     2d2:	f3 cf       	rjmp	.-26     	; 0x2ba <main+0xa>

000002d4 <CALLBACK_USB_GetDescriptor>:
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress,
                                    uint8_t* DescriptorMemorySpace)
{
	return AVRISP_GetDescriptor(wValue, wIndex, DescriptorAddress, DescriptorMemorySpace);
     2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <AVRISP_GetDescriptor>
}
     2d6:	08 95       	ret

000002d8 <AVRISP_GetDescriptor>:
 */
uint16_t AVRISP_GetDescriptor(const uint16_t wValue,
                              const uint8_t wIndex,
                              const void** const DescriptorAddress,
                              uint8_t* DescriptorMemorySpace)
{
     2d8:	f9 01       	movw	r30, r18
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	*DescriptorMemorySpace = MEMSPACE_FLASH;
     2da:	10 82       	st	Z, r1
	
	switch (DescriptorType)
     2dc:	92 30       	cpi	r25, 0x02	; 2
     2de:	29 f0       	breq	.+10     	; 0x2ea <AVRISP_GetDescriptor+0x12>
     2e0:	93 30       	cpi	r25, 0x03	; 3
     2e2:	49 f0       	breq	.+18     	; 0x2f6 <AVRISP_GetDescriptor+0x1e>
     2e4:	91 30       	cpi	r25, 0x01	; 1
     2e6:	71 f5       	brne	.+92     	; 0x344 <__stack+0x45>
     2e8:	28 c0       	rjmp	.+80     	; 0x33a <__stack+0x3b>
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			*DescriptorMemorySpace = MEMSPACE_RAM;
     2ea:	90 83       	st	Z, r25
				/* Update the configuration descriptor with the current endpoint address */
				AVRISP_ConfigurationDescriptor.AVRISP_DataInEndpoint.EndpointAddress = AVRISP_CurrDataINEndpointAddress;
			#endif

			Address = &AVRISP_ConfigurationDescriptor;
			Size    = sizeof(AVRISP_USB_Descriptor_Configuration_t);
     2ec:	60 e2       	ldi	r22, 0x20	; 32
     2ee:	70 e0       	ldi	r23, 0x00	; 0
			#if defined(RESET_TOGGLES_LIBUSB_COMPAT)
				/* Update the configuration descriptor with the current endpoint address */
				AVRISP_ConfigurationDescriptor.AVRISP_DataInEndpoint.EndpointAddress = AVRISP_CurrDataINEndpointAddress;
			#endif

			Address = &AVRISP_ConfigurationDescriptor;
     2f0:	e0 e0       	ldi	r30, 0x00	; 0
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(AVRISP_USB_Descriptor_Configuration_t);
			break;
     2f4:	2b c0       	rjmp	.+86     	; 0x34c <__stack+0x4d>
		case DTYPE_String:
			switch (DescriptorNumber)
     2f6:	81 30       	cpi	r24, 0x01	; 1
     2f8:	51 f0       	breq	.+20     	; 0x30e <__stack+0xf>
     2fa:	81 30       	cpi	r24, 0x01	; 1
     2fc:	28 f0       	brcs	.+10     	; 0x308 <__stack+0x9>
     2fe:	82 30       	cpi	r24, 0x02	; 2
     300:	49 f0       	breq	.+18     	; 0x314 <__stack+0x15>
     302:	83 30       	cpi	r24, 0x03	; 3
     304:	f9 f4       	brne	.+62     	; 0x344 <__stack+0x45>
     306:	0b c0       	rjmp	.+22     	; 0x31e <__stack+0x1f>
			{
				case 0x00:
					Address = &AVRISP_LanguageString;
					Size    = pgm_read_byte(&AVRISP_LanguageString.Header.Size);
     308:	e6 e8       	ldi	r30, 0x86	; 134
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	05 c0       	rjmp	.+10     	; 0x318 <__stack+0x19>
					break;
				case 0x01:
					Address = &AVRISP_ManufacturerString;
					Size    = pgm_read_byte(&AVRISP_ManufacturerString.Header.Size);
     30e:	ea e8       	ldi	r30, 0x8A	; 138
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	02 c0       	rjmp	.+4      	; 0x318 <__stack+0x19>
					break;
				case 0x02:
					Address = &AVRISP_ProductString;
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
     314:	e8 e9       	ldi	r30, 0x98	; 152
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	64 91       	lpm	r22, Z+
     31a:	70 e0       	ldi	r23, 0x00	; 0
					break;
     31c:	17 c0       	rjmp	.+46     	; 0x34c <__stack+0x4d>
				case 0x03:
					Address = &AVRISP_SerialString;
					Size    = AVRISP_SerialString.Header.Size;
     31e:	60 91 20 01 	lds	r22, 0x0120
     322:	70 e0       	ldi	r23, 0x00	; 0
					
					/* Update serial number to have a different serial based on the current endpoint address */
					((uint16_t*)&AVRISP_SerialString.UnicodeString)[6] = cpu_to_le16('0' + (AVRISP_DATA_IN_EPADDR & ENDPOINT_EPNUM_MASK));
     324:	82 e3       	ldi	r24, 0x32	; 50
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	90 93 2f 01 	sts	0x012F, r25
     32c:	80 93 2e 01 	sts	0x012E, r24
					
					*DescriptorMemorySpace = MEMSPACE_RAM;
     330:	82 e0       	ldi	r24, 0x02	; 2
     332:	80 83       	st	Z, r24
				case 0x02:
					Address = &AVRISP_ProductString;
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
					break;
				case 0x03:
					Address = &AVRISP_SerialString;
     334:	e0 e2       	ldi	r30, 0x20	; 32
     336:	f1 e0       	ldi	r31, 0x01	; 1
					
					/* Update serial number to have a different serial based on the current endpoint address */
					((uint16_t*)&AVRISP_SerialString.UnicodeString)[6] = cpu_to_le16('0' + (AVRISP_DATA_IN_EPADDR & ENDPOINT_EPNUM_MASK));
					
					*DescriptorMemorySpace = MEMSPACE_RAM;
					break;
     338:	09 c0       	rjmp	.+18     	; 0x34c <__stack+0x4d>
	
	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     33a:	62 e1       	ldi	r22, 0x12	; 18
     33c:	70 e0       	ldi	r23, 0x00	; 0
	*DescriptorMemorySpace = MEMSPACE_FLASH;
	
	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
     33e:	e4 e7       	ldi	r30, 0x74	; 116
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	04 c0       	rjmp	.+8      	; 0x34c <__stack+0x4d>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	70 e0       	ldi	r23, 0x00	; 0
                              uint8_t* DescriptorMemorySpace)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     348:	e0 e0       	ldi	r30, 0x00	; 0
     34a:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     34c:	da 01       	movw	r26, r20
     34e:	11 96       	adiw	r26, 0x01	; 1
     350:	fc 93       	st	X, r31
     352:	ee 93       	st	-X, r30
	return Size;
}
     354:	cb 01       	movw	r24, r22
     356:	08 95       	ret

00000358 <__vector_19>:
bool MustLoadExtendedAddress;


/** ISR to manage timeouts whilst processing a V2Protocol command */
ISR(TIMER0_COMPA_vect, ISR_NOBLOCK)
{
     358:	78 94       	sei
     35a:	1f 92       	push	r1
     35c:	0f 92       	push	r0
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	0f 92       	push	r0
     362:	11 24       	eor	r1, r1
     364:	8f 93       	push	r24
	if (TimeoutTicksRemaining)
     366:	8a b5       	in	r24, 0x2a	; 42
     368:	88 23       	and	r24, r24
     36a:	21 f0       	breq	.+8      	; 0x374 <__vector_19+0x1c>
	  TimeoutTicksRemaining--;
     36c:	8a b5       	in	r24, 0x2a	; 42
     36e:	81 50       	subi	r24, 0x01	; 1
     370:	8a bd       	out	0x2a, r24	; 42
     372:	01 c0       	rjmp	.+2      	; 0x376 <__vector_19+0x1e>
	else
	  TCCR0B = 0;
     374:	15 bc       	out	0x25, r1	; 37
}
     376:	8f 91       	pop	r24
     378:	0f 90       	pop	r0
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	0f 90       	pop	r0
     37e:	1f 90       	pop	r1
     380:	18 95       	reti

00000382 <V2Protocol_Init>:
	ADC_SetupChannel(VTARGET_ADC_CHANNEL);
	ADC_StartReading(VTARGET_REF_MASK | ADC_RIGHT_ADJUSTED | VTARGET_ADC_CHANNEL_MASK);
	#endif

	/* Timeout timer initialization (~10ms period) */
	OCR0A  = (((F_CPU / 1024) / 100) - 1);
     382:	8b e9       	ldi	r24, 0x9B	; 155
     384:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);
     386:	82 e0       	ldi	r24, 0x02	; 2
     388:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1 << OCIE0A);
     38a:	80 93 6e 00 	sts	0x006E, r24

	V2Params_LoadNonVolatileParamValues();
     38e:	30 d1       	rcall	.+608    	; 0x5f0 <V2Params_LoadNonVolatileParamValues>

	#if defined(ENABLE_ISP_PROTOCOL)
	ISPTarget_ConfigureRescueClock();
	#endif
}
     390:	e9 c5       	rjmp	.+3026   	; 0xf64 <ISPTarget_ConfigureRescueClock>

00000392 <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
void V2Protocol_ProcessCommand(void)
{
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	df 93       	push	r29
     398:	cf 93       	push	r28
     39a:	0f 92       	push	r0
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     3a0:	10 91 f1 00 	lds	r17, 0x00F1
	uint8_t V2Command = Endpoint_Read_8();

	/* Reset timeout counter duration and start the timer */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
     3a4:	84 e6       	ldi	r24, 0x64	; 100
     3a6:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = ((1 << CS02) | (1 << CS00));	
     3a8:	85 e0       	ldi	r24, 0x05	; 5
     3aa:	85 bd       	out	0x25, r24	; 37

	switch (V2Command)
     3ac:	14 31       	cpi	r17, 0x14	; 20
     3ae:	09 f4       	brne	.+2      	; 0x3b2 <V2Protocol_ProcessCommand+0x20>
     3b0:	cc c0       	rjmp	.+408    	; 0x54a <V2Protocol_ProcessCommand+0x1b8>
     3b2:	15 31       	cpi	r17, 0x15	; 21
     3b4:	10 f5       	brcc	.+68     	; 0x3fa <V2Protocol_ProcessCommand+0x68>
     3b6:	1a 30       	cpi	r17, 0x0A	; 10
     3b8:	09 f4       	brne	.+2      	; 0x3bc <V2Protocol_ProcessCommand+0x2a>
     3ba:	ae c0       	rjmp	.+348    	; 0x518 <V2Protocol_ProcessCommand+0x186>
     3bc:	1b 30       	cpi	r17, 0x0B	; 11
     3be:	68 f4       	brcc	.+26     	; 0x3da <V2Protocol_ProcessCommand+0x48>
     3c0:	14 30       	cpi	r17, 0x04	; 4
     3c2:	38 f4       	brcc	.+14     	; 0x3d2 <V2Protocol_ProcessCommand+0x40>
     3c4:	12 30       	cpi	r17, 0x02	; 2
     3c6:	08 f0       	brcs	.+2      	; 0x3ca <V2Protocol_ProcessCommand+0x38>
     3c8:	54 c0       	rjmp	.+168    	; 0x472 <V2Protocol_ProcessCommand+0xe0>
     3ca:	11 30       	cpi	r17, 0x01	; 1
     3cc:	09 f0       	breq	.+2      	; 0x3d0 <V2Protocol_ProcessCommand+0x3e>
     3ce:	d5 c0       	rjmp	.+426    	; 0x57a <V2Protocol_ProcessCommand+0x1e8>
     3d0:	33 c0       	rjmp	.+102    	; 0x438 <V2Protocol_ProcessCommand+0xa6>
     3d2:	16 30       	cpi	r17, 0x06	; 6
     3d4:	09 f0       	breq	.+2      	; 0x3d8 <V2Protocol_ProcessCommand+0x46>
     3d6:	d1 c0       	rjmp	.+418    	; 0x57a <V2Protocol_ProcessCommand+0x1e8>
     3d8:	79 c0       	rjmp	.+242    	; 0x4cc <V2Protocol_ProcessCommand+0x13a>
     3da:	11 31       	cpi	r17, 0x11	; 17
     3dc:	09 f4       	brne	.+2      	; 0x3e0 <V2Protocol_ProcessCommand+0x4e>
     3de:	b0 c0       	rjmp	.+352    	; 0x540 <V2Protocol_ProcessCommand+0x1ae>
     3e0:	12 31       	cpi	r17, 0x12	; 18
     3e2:	20 f4       	brcc	.+8      	; 0x3ec <V2Protocol_ProcessCommand+0x5a>
     3e4:	10 31       	cpi	r17, 0x10	; 16
     3e6:	09 f0       	breq	.+2      	; 0x3ea <V2Protocol_ProcessCommand+0x58>
     3e8:	c8 c0       	rjmp	.+400    	; 0x57a <V2Protocol_ProcessCommand+0x1e8>
     3ea:	a8 c0       	rjmp	.+336    	; 0x53c <V2Protocol_ProcessCommand+0x1aa>
     3ec:	12 31       	cpi	r17, 0x12	; 18
     3ee:	09 f4       	brne	.+2      	; 0x3f2 <V2Protocol_ProcessCommand+0x60>
     3f0:	af c0       	rjmp	.+350    	; 0x550 <V2Protocol_ProcessCommand+0x1be>
     3f2:	13 31       	cpi	r17, 0x13	; 19
     3f4:	09 f0       	breq	.+2      	; 0x3f8 <V2Protocol_ProcessCommand+0x66>
     3f6:	c1 c0       	rjmp	.+386    	; 0x57a <V2Protocol_ProcessCommand+0x1e8>
     3f8:	a5 c0       	rjmp	.+330    	; 0x544 <V2Protocol_ProcessCommand+0x1b2>
     3fa:	19 31       	cpi	r17, 0x19	; 25
     3fc:	09 f4       	brne	.+2      	; 0x400 <V2Protocol_ProcessCommand+0x6e>
     3fe:	ad c0       	rjmp	.+346    	; 0x55a <V2Protocol_ProcessCommand+0x1c8>
     400:	1a 31       	cpi	r17, 0x1A	; 26
     402:	68 f4       	brcc	.+26     	; 0x41e <V2Protocol_ProcessCommand+0x8c>
     404:	16 31       	cpi	r17, 0x16	; 22
     406:	09 f4       	brne	.+2      	; 0x40a <V2Protocol_ProcessCommand+0x78>
     408:	a0 c0       	rjmp	.+320    	; 0x54a <V2Protocol_ProcessCommand+0x1b8>
     40a:	16 31       	cpi	r17, 0x16	; 22
     40c:	08 f4       	brcc	.+2      	; 0x410 <V2Protocol_ProcessCommand+0x7e>
     40e:	9a c0       	rjmp	.+308    	; 0x544 <V2Protocol_ProcessCommand+0x1b2>
     410:	17 31       	cpi	r17, 0x17	; 23
     412:	09 f4       	brne	.+2      	; 0x416 <V2Protocol_ProcessCommand+0x84>
     414:	a2 c0       	rjmp	.+324    	; 0x55a <V2Protocol_ProcessCommand+0x1c8>
     416:	18 31       	cpi	r17, 0x18	; 24
     418:	09 f0       	breq	.+2      	; 0x41c <V2Protocol_ProcessCommand+0x8a>
     41a:	af c0       	rjmp	.+350    	; 0x57a <V2Protocol_ProcessCommand+0x1e8>
     41c:	9b c0       	rjmp	.+310    	; 0x554 <V2Protocol_ProcessCommand+0x1c2>
     41e:	1d 31       	cpi	r17, 0x1D	; 29
     420:	09 f4       	brne	.+2      	; 0x424 <V2Protocol_ProcessCommand+0x92>
     422:	9e c0       	rjmp	.+316    	; 0x560 <V2Protocol_ProcessCommand+0x1ce>
     424:	1d 31       	cpi	r17, 0x1D	; 29
     426:	08 f4       	brcc	.+2      	; 0x42a <V2Protocol_ProcessCommand+0x98>
     428:	95 c0       	rjmp	.+298    	; 0x554 <V2Protocol_ProcessCommand+0x1c2>
     42a:	10 35       	cpi	r17, 0x50	; 80
     42c:	09 f4       	brne	.+2      	; 0x430 <V2Protocol_ProcessCommand+0x9e>
     42e:	9c c0       	rjmp	.+312    	; 0x568 <V2Protocol_ProcessCommand+0x1d6>
     430:	11 35       	cpi	r17, 0x51	; 81
     432:	09 f0       	breq	.+2      	; 0x436 <V2Protocol_ProcessCommand+0xa4>
     434:	a2 c0       	rjmp	.+324    	; 0x57a <V2Protocol_ProcessCommand+0x1e8>
     436:	96 c0       	rjmp	.+300    	; 0x564 <V2Protocol_ProcessCommand+0x1d2>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     438:	80 91 e8 00 	lds	r24, 0x00E8
     43c:	8b 77       	andi	r24, 0x7B	; 123
     43e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     442:	82 e0       	ldi	r24, 0x02	; 2
     444:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     448:	80 91 ec 00 	lds	r24, 0x00EC
     44c:	81 60       	ori	r24, 0x01	; 1
     44e:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     452:	10 93 f1 00 	sts	0x00F1, r17
     456:	10 92 f1 00 	sts	0x00F1, r1
     45a:	8a e0       	ldi	r24, 0x0A	; 10
     45c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(CMD_SIGN_ON);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(sizeof(PROGRAMMER_ID) - 1);
	Endpoint_Write_Stream_LE(PROGRAMMER_ID, (sizeof(PROGRAMMER_ID) - 1), NULL);
     460:	8e e3       	ldi	r24, 0x3E	; 62
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	6a e0       	ldi	r22, 0x0A	; 10
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	40 e0       	ldi	r20, 0x00	; 0
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <Endpoint_Write_Stream_LE>
     470:	9a c0       	rjmp	.+308    	; 0x5a6 <V2Protocol_ProcessCommand+0x214>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     472:	00 91 f1 00 	lds	r16, 0x00F1
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = Endpoint_Read_8();
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER)
     476:	12 30       	cpi	r17, 0x02	; 2
     478:	19 f4       	brne	.+6      	; 0x480 <V2Protocol_ProcessCommand+0xee>
     47a:	60 91 f1 00 	lds	r22, 0x00F1
     47e:	01 c0       	rjmp	.+2      	; 0x482 <V2Protocol_ProcessCommand+0xf0>
     480:	60 e0       	ldi	r22, 0x00	; 0
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     482:	80 91 e8 00 	lds	r24, 0x00E8
     486:	8b 77       	andi	r24, 0x7B	; 123
     488:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     48c:	82 e0       	ldi	r24, 0x02	; 2
     48e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     492:	80 91 ec 00 	lds	r24, 0x00EC
     496:	81 60       	ori	r24, 0x01	; 1
     498:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     49c:	10 93 f1 00 	sts	0x00F1, r17
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(V2Command);

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
     4a0:	80 2f       	mov	r24, r16
     4a2:	69 83       	std	Y+1, r22	; 0x01
     4a4:	c1 d0       	rcall	.+386    	; 0x628 <V2Params_GetParameterPrivileges>

	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
     4a6:	69 81       	ldd	r22, Y+1	; 0x01
     4a8:	12 30       	cpi	r17, 0x02	; 2
     4aa:	39 f4       	brne	.+14     	; 0x4ba <V2Protocol_ProcessCommand+0x128>
     4ac:	81 ff       	sbrs	r24, 1
     4ae:	0c c0       	rjmp	.+24     	; 0x4c8 <V2Protocol_ProcessCommand+0x136>
     4b0:	10 92 f1 00 	sts	0x00F1, r1
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		V2Params_SetParameterValue(ParamID, ParamValue);
     4b4:	80 2f       	mov	r24, r16
     4b6:	c8 d0       	rcall	.+400    	; 0x648 <V2Params_SetParameterValue>
     4b8:	76 c0       	rjmp	.+236    	; 0x5a6 <V2Protocol_ProcessCommand+0x214>
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
     4ba:	80 ff       	sbrs	r24, 0
     4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <V2Protocol_ProcessCommand+0x136>
     4be:	10 92 f1 00 	sts	0x00F1, r1
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		Endpoint_Write_8(V2Params_GetParameterValue(ParamID));
     4c2:	80 2f       	mov	r24, r16
     4c4:	b9 d0       	rcall	.+370    	; 0x638 <V2Params_GetParameterValue>
     4c6:	6d c0       	rjmp	.+218    	; 0x5a2 <V2Protocol_ProcessCommand+0x210>
     4c8:	80 ec       	ldi	r24, 0xC0	; 192
     4ca:	6b c0       	rjmp	.+214    	; 0x5a2 <V2Protocol_ProcessCommand+0x210>
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	Endpoint_Read_Stream_BE(&CurrentAddress, sizeof(CurrentAddress), NULL);
     4cc:	86 ea       	ldi	r24, 0xA6	; 166
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	64 e0       	ldi	r22, 0x04	; 4
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	40 e0       	ldi	r20, 0x00	; 0
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <Endpoint_Read_Stream_BE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     4dc:	80 91 e8 00 	lds	r24, 0x00E8
     4e0:	8b 77       	andi	r24, 0x7B	; 123
     4e2:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     4e6:	82 e0       	ldi	r24, 0x02	; 2
     4e8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     4ec:	80 91 ec 00 	lds	r24, 0x00EC
     4f0:	81 60       	ori	r24, 0x01	; 1
     4f2:	80 93 ec 00 	sts	0x00EC, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (CurrentAddress & (1UL << 31))
     4f6:	80 91 a6 01 	lds	r24, 0x01A6
     4fa:	90 91 a7 01 	lds	r25, 0x01A7
     4fe:	a0 91 a8 01 	lds	r26, 0x01A8
     502:	b0 91 a9 01 	lds	r27, 0x01A9
     506:	b7 ff       	sbrs	r27, 7
     508:	03 c0       	rjmp	.+6      	; 0x510 <V2Protocol_ProcessCommand+0x17e>
	  MustLoadExtendedAddress = true;
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	80 93 a5 01 	sts	0x01A5, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     510:	86 e0       	ldi	r24, 0x06	; 6
     512:	80 93 f1 00 	sts	0x00F1, r24
     516:	0f c0       	rjmp	.+30     	; 0x536 <V2Protocol_ProcessCommand+0x1a4>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     518:	80 91 e8 00 	lds	r24, 0x00E8
     51c:	8b 77       	andi	r24, 0x7B	; 123
     51e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     528:	80 91 ec 00 	lds	r24, 0x00EC
     52c:	81 60       	ori	r24, 0x01	; 1
     52e:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     532:	10 93 f1 00 	sts	0x00F1, r17
     536:	10 92 f1 00 	sts	0x00F1, r1
     53a:	35 c0       	rjmp	.+106    	; 0x5a6 <V2Protocol_ProcessCommand+0x214>
		case CMD_RESET_PROTECTION:
			V2Protocol_ResetProtection();
			break;
#if defined(ENABLE_ISP_PROTOCOL)
		case CMD_ENTER_PROGMODE_ISP:
			ISPProtocol_EnterISPMode();
     53c:	52 d4       	rcall	.+2212   	; 0xde2 <ISPProtocol_EnterISPMode>
			break;
     53e:	38 c0       	rjmp	.+112    	; 0x5b0 <V2Protocol_ProcessCommand+0x21e>
		case CMD_LEAVE_PROGMODE_ISP:
			ISPProtocol_LeaveISPMode();
     540:	1c d4       	rcall	.+2104   	; 0xd7a <ISPProtocol_LeaveISPMode>
			break;
     542:	36 c0       	rjmp	.+108    	; 0x5b0 <V2Protocol_ProcessCommand+0x21e>
		case CMD_PROGRAM_FLASH_ISP:
		case CMD_PROGRAM_EEPROM_ISP:
			ISPProtocol_ProgramMemory(V2Command);
     544:	81 2f       	mov	r24, r17
     546:	c3 d0       	rcall	.+390    	; 0x6ce <ISPProtocol_ProgramMemory>
			break;
     548:	33 c0       	rjmp	.+102    	; 0x5b0 <V2Protocol_ProcessCommand+0x21e>
		case CMD_READ_FLASH_ISP:
		case CMD_READ_EEPROM_ISP:
			ISPProtocol_ReadMemory(V2Command);
     54a:	81 2f       	mov	r24, r17
     54c:	ef d1       	rcall	.+990    	; 0x92c <ISPProtocol_ReadMemory>
			break;
     54e:	30 c0       	rjmp	.+96     	; 0x5b0 <V2Protocol_ProcessCommand+0x21e>
		case CMD_CHIP_ERASE_ISP:
			ISPProtocol_ChipErase();
     550:	c6 d3       	rcall	.+1932   	; 0xcde <ISPProtocol_ChipErase>
			break;
     552:	2e c0       	rjmp	.+92     	; 0x5b0 <V2Protocol_ProcessCommand+0x21e>
		case CMD_READ_FUSE_ISP:
		case CMD_READ_LOCK_ISP:
		case CMD_READ_SIGNATURE_ISP:
		case CMD_READ_OSCCAL_ISP:
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
     554:	81 2f       	mov	r24, r17
     556:	8a d2       	rcall	.+1300   	; 0xa6c <ISPProtocol_ReadFuseLockSigOSCCAL>
			break;
     558:	2b c0       	rjmp	.+86     	; 0x5b0 <V2Protocol_ProcessCommand+0x21e>
		case CMD_PROGRAM_FUSE_ISP:
		case CMD_PROGRAM_LOCK_ISP:
			ISPProtocol_WriteFuseLock(V2Command);
     55a:	81 2f       	mov	r24, r17
     55c:	e6 d2       	rcall	.+1484   	; 0xb2a <ISPProtocol_WriteFuseLock>
			break;
     55e:	28 c0       	rjmp	.+80     	; 0x5b0 <V2Protocol_ProcessCommand+0x21e>
		case CMD_SPI_MULTI:
			ISPProtocol_SPIMulti();
     560:	2a d3       	rcall	.+1620   	; 0xbb6 <ISPProtocol_SPIMulti>
			break;
     562:	26 c0       	rjmp	.+76     	; 0x5b0 <V2Protocol_ProcessCommand+0x21e>
#endif
#if defined(ENABLE_XPROG_PROTOCOL)
		case CMD_XPROG_SETMODE:
			XPROGProtocol_SetMode();
     564:	2b d7       	rcall	.+3670   	; 0x13bc <XPROGProtocol_SetMode>
			break;
     566:	24 c0       	rjmp	.+72     	; 0x5b0 <V2Protocol_ProcessCommand+0x21e>
		case CMD_XPROG:
			XPROGProtocol_Command();
     568:	59 d7       	rcall	.+3762   	; 0x141c <XPROGProtocol_Command>
			break;
     56a:	22 c0       	rjmp	.+68     	; 0x5b0 <V2Protocol_ProcessCommand+0x21e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     56c:	80 91 e8 00 	lds	r24, 0x00E8
     570:	8b 77       	andi	r24, 0x7B	; 123
     572:	80 93 e8 00 	sts	0x00E8, r24
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     576:	0e 94 84 11 	call	0x2308	; 0x2308 <Endpoint_WaitUntilReady>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     57a:	80 91 f2 00 	lds	r24, 0x00F2
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_UnknownCommand(const uint8_t V2Command)
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
     57e:	80 34       	cpi	r24, 0x40	; 64
     580:	a9 f3       	breq	.-22     	; 0x56c <V2Protocol_ProcessCommand+0x1da>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     582:	80 91 e8 00 	lds	r24, 0x00E8
     586:	8b 77       	andi	r24, 0x7B	; 123
     588:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     58c:	82 e0       	ldi	r24, 0x02	; 2
     58e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     592:	80 91 ec 00 	lds	r24, 0x00EC
     596:	81 60       	ori	r24, 0x01	; 1
     598:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     59c:	10 93 f1 00 	sts	0x00F1, r17
     5a0:	89 ec       	ldi	r24, 0xC9	; 201
     5a2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5a6:	80 91 e8 00 	lds	r24, 0x00E8
     5aa:	8e 77       	andi	r24, 0x7E	; 126
     5ac:	80 93 e8 00 	sts	0x00E8, r24
			V2Protocol_UnknownCommand(V2Command);
			break;
	}

	/* Disable the timeout management timer */
	TCCR0B = 0;
     5b0:	15 bc       	out	0x25, r1	; 37

	Endpoint_WaitUntilReady();
     5b2:	0e 94 84 11 	call	0x2308	; 0x2308 <Endpoint_WaitUntilReady>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5b6:	82 e0       	ldi	r24, 0x02	; 2
     5b8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     5bc:	80 91 ec 00 	lds	r24, 0x00EC
     5c0:	8e 7f       	andi	r24, 0xFE	; 254
     5c2:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_OUT);
}
     5c6:	0f 90       	pop	r0
     5c8:	cf 91       	pop	r28
     5ca:	df 91       	pop	r29
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	08 95       	ret

000005d2 <V2Params_GetParamFromTable>:
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;
     5d2:	e9 e4       	ldi	r30, 0x49	; 73
     5d4:	f1 e0       	ldi	r31, 0x01	; 1

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
     5d6:	90 81       	ld	r25, Z
     5d8:	89 17       	cp	r24, r25
     5da:	41 f0       	breq	.+16     	; 0x5ec <V2Params_GetParamFromTable+0x1a>
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	e4 36       	cpi	r30, 0x64	; 100
     5e0:	f9 07       	cpc	r31, r25
     5e2:	11 f0       	breq	.+4      	; 0x5e8 <V2Params_GetParamFromTable+0x16>
	{
		if (ParamID == CurrTableItem->ParamID)
		  return CurrTableItem;

		CurrTableItem++;
     5e4:	33 96       	adiw	r30, 0x03	; 3
     5e6:	f7 cf       	rjmp	.-18     	; 0x5d6 <V2Params_GetParamFromTable+0x4>
	}

	return NULL;
     5e8:	e0 e0       	ldi	r30, 0x00	; 0
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
}
     5ec:	cf 01       	movw	r24, r30
     5ee:	08 95       	ret

000005f0 <V2Params_LoadNonVolatileParamValues>:
	};


/** Loads saved non-volatile parameter values from the EEPROM into the parameter table, as needed. */
void V2Params_LoadNonVolatileParamValues(void)
{
     5f0:	0f 93       	push	r16
     5f2:	1f 93       	push	r17
	/* Read parameter values that are stored in non-volatile EEPROM */
	uint8_t ResetPolarity = eeprom_read_byte(&EEPROM_Reset_Polarity);
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 c5 13 	call	0x278a	; 0x278a <__eerd_byte_usb162>
     5fc:	08 2f       	mov	r16, r24
	uint8_t SCKDuration   = eeprom_read_byte(&EEPROM_SCK_Duration);
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	0e 94 c5 13 	call	0x278a	; 0x278a <__eerd_byte_usb162>
     606:	18 2f       	mov	r17, r24

	/* Update current parameter table if the EEPROM contents was not blank */
	if (ResetPolarity != 0xFF)
     608:	0f 3f       	cpi	r16, 0xFF	; 255
     60a:	21 f0       	breq	.+8      	; 0x614 <V2Params_LoadNonVolatileParamValues+0x24>
	  V2Params_GetParamFromTable(PARAM_RESET_POLARITY)->ParamValue = ResetPolarity;
     60c:	8e e9       	ldi	r24, 0x9E	; 158
     60e:	e1 df       	rcall	.-62     	; 0x5d2 <V2Params_GetParamFromTable>
     610:	fc 01       	movw	r30, r24
     612:	02 83       	std	Z+2, r16	; 0x02

	/* Update current parameter table if the EEPROM contents was not blank */
	if (SCKDuration != 0xFF)
     614:	1f 3f       	cpi	r17, 0xFF	; 255
     616:	21 f0       	breq	.+8      	; 0x620 <V2Params_LoadNonVolatileParamValues+0x30>
	  V2Params_GetParamFromTable(PARAM_SCK_DURATION)->ParamValue   = SCKDuration;
     618:	88 e9       	ldi	r24, 0x98	; 152
     61a:	db df       	rcall	.-74     	; 0x5d2 <V2Params_GetParamFromTable>
     61c:	fc 01       	movw	r30, r24
     61e:	12 83       	std	Z+2, r17	; 0x02
}
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	08 95       	ret

00000626 <V2Params_UpdateParamValues>:
{
	#if (defined(ADC) && !defined(NO_VTARGET_DETECT))
	/* Update VTARGET parameter with the latest ADC conversion of VTARGET on supported AVR models */
	V2Params_GetParamFromTable(PARAM_VTARGET)->ParamValue = (((uint16_t)(VTARGET_REF_VOLTS * 10 * VTARGET_SCALE_FACTOR) * ADC_GetResult()) / 1024);
	#endif
}
     626:	08 95       	ret

00000628 <V2Params_GetParameterPrivileges>:
 *
 *  \return Privileges for the requested parameter, as a mask of \c PARAM_PRIV_* masks
 */
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
     628:	d4 df       	rcall	.-88     	; 0x5d2 <V2Params_GetParamFromTable>

	if (ParamInfo == NULL)
     62a:	00 97       	sbiw	r24, 0x00	; 0
     62c:	19 f0       	breq	.+6      	; 0x634 <V2Params_GetParameterPrivileges+0xc>
	  return 0;

	return ParamInfo->ParamPrivileges;
     62e:	fc 01       	movw	r30, r24
     630:	81 81       	ldd	r24, Z+1	; 0x01
     632:	08 95       	ret
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);

	if (ParamInfo == NULL)
	  return 0;
     634:	80 e0       	ldi	r24, 0x00	; 0

	return ParamInfo->ParamPrivileges;
}
     636:	08 95       	ret

00000638 <V2Params_GetParameterValue>:
 *
 *  \return Current value of the parameter in the table, or 0 if not found
 */
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
     638:	cc df       	rcall	.-104    	; 0x5d2 <V2Params_GetParamFromTable>

	if (ParamInfo == NULL)
     63a:	00 97       	sbiw	r24, 0x00	; 0
     63c:	19 f0       	breq	.+6      	; 0x644 <V2Params_GetParameterValue+0xc>
	  return 0;

	return ParamInfo->ParamValue;
     63e:	fc 01       	movw	r30, r24
     640:	82 81       	ldd	r24, Z+2	; 0x02
     642:	08 95       	ret
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);

	if (ParamInfo == NULL)
	  return 0;
     644:	80 e0       	ldi	r24, 0x00	; 0

	return ParamInfo->ParamValue;
}
     646:	08 95       	ret

00000648 <V2Params_SetParameterValue>:
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
void V2Params_SetParameterValue(const uint8_t ParamID,
                                const uint8_t Value)
{
     648:	1f 93       	push	r17
     64a:	df 93       	push	r29
     64c:	cf 93       	push	r28
     64e:	0f 92       	push	r0
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
     654:	18 2f       	mov	r17, r24
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
     656:	69 83       	std	Y+1, r22	; 0x01
     658:	bc df       	rcall	.-136    	; 0x5d2 <V2Params_GetParamFromTable>
     65a:	fc 01       	movw	r30, r24

	if (ParamInfo == NULL)
     65c:	69 81       	ldd	r22, Y+1	; 0x01
     65e:	00 97       	sbiw	r24, 0x00	; 0
     660:	61 f0       	breq	.+24     	; 0x67a <V2Params_SetParameterValue+0x32>
	  return;

	ParamInfo->ParamValue = Value;
     662:	62 83       	std	Z+2, r22	; 0x02

	/* The target RESET line polarity is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_RESET_POLARITY)
     664:	1e 39       	cpi	r17, 0x9E	; 158
     666:	19 f4       	brne	.+6      	; 0x66e <V2Params_SetParameterValue+0x26>
	  eeprom_update_byte(&EEPROM_Reset_Polarity, Value);
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	04 c0       	rjmp	.+8      	; 0x676 <V2Params_SetParameterValue+0x2e>

	/* The target SCK line period is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_SCK_DURATION)
     66e:	18 39       	cpi	r17, 0x98	; 152
     670:	21 f4       	brne	.+8      	; 0x67a <V2Params_SetParameterValue+0x32>
	  eeprom_update_byte(&EEPROM_SCK_Duration, Value);
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 cd 13 	call	0x279a	; 0x279a <__eeupd_byte_usb162>
}
     67a:	0f 90       	pop	r0
     67c:	cf 91       	pop	r28
     67e:	df 91       	pop	r29
     680:	1f 91       	pop	r17
     682:	08 95       	ret

00000684 <SwapEndian_16>:
			 *
			 *  \return Input data with the individual bytes reversed.
			 */
			static inline uint16_t SwapEndian_16(const uint16_t Word) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
			static inline uint16_t SwapEndian_16(const uint16_t Word)
			{
     684:	28 2f       	mov	r18, r24
				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
			}
     686:	89 2f       	mov	r24, r25
     688:	92 2f       	mov	r25, r18
     68a:	08 95       	ret

0000068c <ISPTarget_SendByte>:
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
     68c:	90 91 67 01 	lds	r25, 0x0167
     690:	99 23       	and	r25, r25
     692:	29 f0       	breq	.+10     	; 0x69e <ISPTarget_SendByte+0x12>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     694:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     696:	0d b4       	in	r0, 0x2d	; 45
     698:	07 fe       	sbrs	r0, 7
     69a:	fd cf       	rjmp	.-6      	; 0x696 <ISPTarget_SendByte+0xa>
     69c:	08 95       	ret
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
     69e:	cb c4       	rjmp	.+2454   	; 0x1036 <ISPTarget_TransferSoftSPIByte>

000006a0 <ISPTarget_TransferByte>:
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
     6a0:	90 91 67 01 	lds	r25, 0x0167
     6a4:	99 23       	and	r25, r25
     6a6:	31 f0       	breq	.+12     	; 0x6b4 <ISPTarget_TransferByte+0x14>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6a8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6aa:	0d b4       	in	r0, 0x2d	; 45
     6ac:	07 fe       	sbrs	r0, 7
     6ae:	fd cf       	rjmp	.-6      	; 0x6aa <ISPTarget_TransferByte+0xa>
				return SPDR;
     6b0:	8e b5       	in	r24, 0x2e	; 46
     6b2:	08 95       	ret
			#if defined(INVERTED_ISP_MISO)
			return ~ReceivedByte;
			#else
			return  ReceivedByte;
			#endif
		}
     6b4:	c0 c4       	rjmp	.+2432   	; 0x1036 <ISPTarget_TransferSoftSPIByte>

000006b6 <ISPTarget_ReceiveByte>:
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
     6b6:	80 91 67 01 	lds	r24, 0x0167
     6ba:	88 23       	and	r24, r24
     6bc:	31 f0       	breq	.+12     	; 0x6ca <ISPTarget_ReceiveByte+0x14>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6be:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6c0:	0d b4       	in	r0, 0x2d	; 45
     6c2:	07 fe       	sbrs	r0, 7
     6c4:	fd cf       	rjmp	.-6      	; 0x6c0 <ISPTarget_ReceiveByte+0xa>
				return SPDR;
     6c6:	8e b5       	in	r24, 0x2e	; 46
     6c8:	08 95       	ret
			  ReceivedByte = SPI_ReceiveByte();
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(0x00);
     6ca:	80 e0       	ldi	r24, 0x00	; 0
			#if defined(INVERTED_ISP_MISO)
			return ~ReceivedByte;
			#else
			return  ReceivedByte;
			#endif
		}
     6cc:	b4 c4       	rjmp	.+2408   	; 0x1036 <ISPTarget_TransferSoftSPIByte>

000006ce <ISPProtocol_ProgramMemory>:
 *  words or pages of data to the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ProgramMemory(uint8_t V2Command)
{
     6ce:	4f 92       	push	r4
     6d0:	5f 92       	push	r5
     6d2:	6f 92       	push	r6
     6d4:	7f 92       	push	r7
     6d6:	8f 92       	push	r8
     6d8:	9f 92       	push	r9
     6da:	af 92       	push	r10
     6dc:	bf 92       	push	r11
     6de:	cf 92       	push	r12
     6e0:	df 92       	push	r13
     6e2:	ef 92       	push	r14
     6e4:	ff 92       	push	r15
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	df 93       	push	r29
     6ec:	cf 93       	push	r28
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	c9 50       	subi	r28, 0x09	; 9
     6f4:	d1 40       	sbci	r29, 0x01	; 1
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	de bf       	out	0x3e, r29	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	18 2f       	mov	r17, r24
		uint8_t  PollValue1;
		uint8_t  PollValue2;
		uint8_t  ProgData[256]; // Note, the Jungo driver has a very short ACK timeout period, need to buffer the
	} Write_Memory_Params;      // whole page and ACK the packet as fast as possible to prevent it from aborting

	Endpoint_Read_Stream_LE(&Write_Memory_Params, (sizeof(Write_Memory_Params) -
     702:	ce 01       	movw	r24, r28
     704:	01 96       	adiw	r24, 0x01	; 1
     706:	69 e0       	ldi	r22, 0x09	; 9
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	40 e0       	ldi	r20, 0x00	; 0
     70c:	50 e0       	ldi	r21, 0x00	; 0
     70e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <Endpoint_Read_Stream_LE>
	                                               sizeof(Write_Memory_Params.ProgData)), NULL);
	Write_Memory_Params.BytesToWrite = SwapEndian_16(Write_Memory_Params.BytesToWrite);
     712:	89 81       	ldd	r24, Y+1	; 0x01
     714:	9a 81       	ldd	r25, Y+2	; 0x02
     716:	b6 df       	rcall	.-148    	; 0x684 <SwapEndian_16>
     718:	bc 01       	movw	r22, r24
     71a:	9a 83       	std	Y+2, r25	; 0x02
     71c:	89 83       	std	Y+1, r24	; 0x01

	if (Write_Memory_Params.BytesToWrite > sizeof(Write_Memory_Params.ProgData))
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	61 30       	cpi	r22, 0x01	; 1
     722:	78 07       	cpc	r23, r24
     724:	88 f0       	brcs	.+34     	; 0x748 <ISPProtocol_ProgramMemory+0x7a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     726:	80 91 e8 00 	lds	r24, 0x00E8
     72a:	8b 77       	andi	r24, 0x7B	; 123
     72c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     736:	80 91 ec 00 	lds	r24, 0x00EC
     73a:	81 60       	ori	r24, 0x01	; 1
     73c:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     740:	10 93 f1 00 	sts	0x00F1, r17
     744:	80 ec       	ldi	r24, 0xC0	; 192
     746:	d3 c0       	rjmp	.+422    	; 0x8ee <ISPProtocol_ProgramMemory+0x220>
		Endpoint_Write_8(STATUS_CMD_FAILED);
		Endpoint_ClearIN();
		return;
	}

	Endpoint_Read_Stream_LE(&Write_Memory_Params.ProgData, Write_Memory_Params.BytesToWrite, NULL);
     748:	ce 01       	movw	r24, r28
     74a:	0a 96       	adiw	r24, 0x0a	; 10
     74c:	40 e0       	ldi	r20, 0x00	; 0
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <Endpoint_Read_Stream_LE>

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(Write_Memory_Params) - sizeof(Write_Memory_Params.ProgData)) +
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	9a 81       	ldd	r25, Y+2	; 0x02
     758:	0a 96       	adiw	r24, 0x0a	; 10
	    Write_Memory_Params.BytesToWrite) % AVRISP_DATA_EPSIZE == 0)
     75a:	8f 73       	andi	r24, 0x3F	; 63
     75c:	90 70       	andi	r25, 0x00	; 0

	Endpoint_Read_Stream_LE(&Write_Memory_Params.ProgData, Write_Memory_Params.BytesToWrite, NULL);

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(Write_Memory_Params) - sizeof(Write_Memory_Params.ProgData)) +
     75e:	00 97       	sbiw	r24, 0x00	; 0
     760:	39 f4       	brne	.+14     	; 0x770 <ISPProtocol_ProgramMemory+0xa2>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     762:	80 91 e8 00 	lds	r24, 0x00E8
     766:	8b 77       	andi	r24, 0x7B	; 123
     768:	80 93 e8 00 	sts	0x00E8, r24
	    Write_Memory_Params.BytesToWrite) % AVRISP_DATA_EPSIZE == 0)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     76c:	0e 94 84 11 	call	0x2308	; 0x2308 <Endpoint_WaitUntilReady>
     770:	80 91 e8 00 	lds	r24, 0x00E8
     774:	8b 77       	andi	r24, 0x7B	; 123
     776:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     77a:	82 e0       	ldi	r24, 0x02	; 2
     77c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     780:	80 91 ec 00 	lds	r24, 0x00EC
     784:	81 60       	ori	r24, 0x01	; 1
     786:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
     78a:	13 31       	cpi	r17, 0x13	; 19
     78c:	11 f4       	brne	.+4      	; 0x792 <ISPProtocol_ProgramMemory+0xc4>
     78e:	98 84       	ldd	r9, Y+8	; 0x08
     790:	01 c0       	rjmp	.+2      	; 0x794 <ISPProtocol_ProgramMemory+0xc6>
     792:	99 84       	ldd	r9, Y+9	; 0x09
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
     794:	50 90 a6 01 	lds	r5, 0x01A6
     798:	60 90 a7 01 	lds	r6, 0x01A7

	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
     79c:	9a e0       	ldi	r25, 0x0A	; 10
     79e:	a9 2e       	mov	r10, r25
     7a0:	b1 2c       	mov	r11, r1
     7a2:	ac 0e       	add	r10, r28
     7a4:	bd 1e       	adc	r11, r29
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
     7a6:	cc 24       	eor	r12, r12
     7a8:	dd 24       	eor	r13, r13
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
     7aa:	ee 24       	eor	r14, r14
     7ac:	ff 24       	eor	r15, r15
		ISPTarget_SendByte(ByteToWrite);

		/* AVR FLASH addressing requires us to modify the write command based on if we are writing a high
		 * or low byte at the current word address */
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
     7ae:	88 e0       	ldi	r24, 0x08	; 8
     7b0:	88 2e       	mov	r8, r24
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
		{
			CurrentAddress++;

			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
			  MustLoadExtendedAddress = true;
     7b2:	77 24       	eor	r7, r7
     7b4:	73 94       	inc	r7
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
     7b6:	64 c0       	rjmp	.+200    	; 0x880 <ISPProtocol_ProgramMemory+0x1b2>
	{
		uint8_t ByteToWrite     = *(NextWriteByte++);
     7b8:	f5 01       	movw	r30, r10
     7ba:	41 90       	ld	r4, Z+
     7bc:	5f 01       	movw	r10, r30
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
     7be:	0b 81       	ldd	r16, Y+3	; 0x03

		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
     7c0:	80 91 a5 01 	lds	r24, 0x01A5
     7c4:	88 23       	and	r24, r24
     7c6:	19 f0       	breq	.+6      	; 0x7ce <ISPProtocol_ProgramMemory+0x100>
		{
			ISPTarget_LoadExtendedAddress();
     7c8:	89 d4       	rcall	.+2322   	; 0x10dc <ISPTarget_LoadExtendedAddress>
			MustLoadExtendedAddress = false;
     7ca:	10 92 a5 01 	sts	0x01A5, r1
		}

		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
     7ce:	8d 81       	ldd	r24, Y+5	; 0x05
     7d0:	5d df       	rcall	.-326    	; 0x68c <ISPTarget_SendByte>
		ISPTarget_SendByte(CurrentAddress >> 8);
     7d2:	80 91 a7 01 	lds	r24, 0x01A7
     7d6:	5a df       	rcall	.-332    	; 0x68c <ISPTarget_SendByte>
		ISPTarget_SendByte(CurrentAddress & 0xFF);
     7d8:	80 91 a6 01 	lds	r24, 0x01A6
     7dc:	57 df       	rcall	.-338    	; 0x68c <ISPTarget_SendByte>
		ISPTarget_SendByte(ByteToWrite);
     7de:	84 2d       	mov	r24, r4
     7e0:	55 df       	rcall	.-342    	; 0x68c <ISPTarget_SendByte>

		/* AVR FLASH addressing requires us to modify the write command based on if we are writing a high
		 * or low byte at the current word address */
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
     7e2:	13 31       	cpi	r17, 0x13	; 19
     7e4:	19 f4       	brne	.+6      	; 0x7ec <ISPProtocol_ProgramMemory+0x11e>
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
     7e6:	8d 81       	ldd	r24, Y+5	; 0x05
     7e8:	88 25       	eor	r24, r8
     7ea:	8d 83       	std	Y+5, r24	; 0x05

		/* Check to see if we have a valid polling address */
		if (!(PollAddress) && (ByteToWrite != PollValue))
     7ec:	e1 14       	cp	r14, r1
     7ee:	f1 04       	cpc	r15, r1
     7f0:	81 f4       	brne	.+32     	; 0x812 <ISPProtocol_ProgramMemory+0x144>
     7f2:	49 14       	cp	r4, r9
     7f4:	71 f0       	breq	.+28     	; 0x812 <ISPProtocol_ProgramMemory+0x144>
		{
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
     7f6:	c0 fe       	sbrs	r12, 0
     7f8:	05 c0       	rjmp	.+10     	; 0x804 <ISPProtocol_ProgramMemory+0x136>
     7fa:	13 31       	cpi	r17, 0x13	; 19
     7fc:	19 f4       	brne	.+6      	; 0x804 <ISPProtocol_ProgramMemory+0x136>
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
     7fe:	8f 81       	ldd	r24, Y+7	; 0x07
     800:	88 60       	ori	r24, 0x08	; 8
     802:	02 c0       	rjmp	.+4      	; 0x808 <ISPProtocol_ProgramMemory+0x13a>
			else
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
     804:	8f 81       	ldd	r24, Y+7	; 0x07
     806:	87 7f       	andi	r24, 0xF7	; 247
     808:	8f 83       	std	Y+7, r24	; 0x07

			PollAddress = (CurrentAddress & 0xFFFF);
     80a:	e0 90 a6 01 	lds	r14, 0x01A6
     80e:	f0 90 a7 01 	lds	r15, 0x01A7
		}

		/* If in word programming mode, commit the byte to the target's memory */
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
     812:	00 fd       	sbrc	r16, 0
     814:	11 c0       	rjmp	.+34     	; 0x838 <ISPProtocol_ProgramMemory+0x16a>
		{
			/* If the current polling address is invalid, switch to timed delay write completion mode */
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
     816:	e1 14       	cp	r14, r1
     818:	f1 04       	cpc	r15, r1
     81a:	21 f4       	brne	.+8      	; 0x824 <ISPProtocol_ProgramMemory+0x156>
     81c:	03 fd       	sbrc	r16, 3
     81e:	02 c0       	rjmp	.+4      	; 0x824 <ISPProtocol_ProgramMemory+0x156>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
     820:	09 7f       	andi	r16, 0xF9	; 249
     822:	02 60       	ori	r16, 0x02	; 2

			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
     824:	80 2f       	mov	r24, r16
     826:	b7 01       	movw	r22, r14
     828:	49 2d       	mov	r20, r9
     82a:	2c 81       	ldd	r18, Y+4	; 0x04
     82c:	0f 81       	ldd	r16, Y+7	; 0x07
     82e:	5f d4       	rcall	.+2238   	; 0x10ee <ISPTarget_WaitForProgComplete>
			                                                  Write_Memory_Params.DelayMS,
			                                                  Write_Memory_Params.ProgrammingCommands[2]);

			/* Abort the programming loop early if the byte/word programming failed */
			if (ProgrammingStatus != STATUS_CMD_OK)
     830:	88 23       	and	r24, r24
     832:	69 f5       	brne	.+90     	; 0x88e <ISPProtocol_ProgramMemory+0x1c0>
			  break;

			/* Must reset the polling address afterwards, so it is not erroneously used for the next byte */
			PollAddress = 0;
     834:	ee 24       	eor	r14, r14
     836:	ff 24       	eor	r15, r15
		}

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed during FLASH memory programming */
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
     838:	c0 fc       	sbrc	r12, 0
     83a:	02 c0       	rjmp	.+4      	; 0x840 <ISPProtocol_ProgramMemory+0x172>
     83c:	15 31       	cpi	r17, 0x15	; 21
     83e:	e9 f4       	brne	.+58     	; 0x87a <ISPProtocol_ProgramMemory+0x1ac>
		{
			CurrentAddress++;
     840:	80 91 a6 01 	lds	r24, 0x01A6
     844:	90 91 a7 01 	lds	r25, 0x01A7
     848:	a0 91 a8 01 	lds	r26, 0x01A8
     84c:	b0 91 a9 01 	lds	r27, 0x01A9
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	a1 1d       	adc	r26, r1
     854:	b1 1d       	adc	r27, r1
     856:	80 93 a6 01 	sts	0x01A6, r24
     85a:	90 93 a7 01 	sts	0x01A7, r25
     85e:	a0 93 a8 01 	sts	0x01A8, r26
     862:	b0 93 a9 01 	sts	0x01A9, r27

			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
     866:	13 31       	cpi	r17, 0x13	; 19
     868:	41 f4       	brne	.+16     	; 0x87a <ISPProtocol_ProgramMemory+0x1ac>
     86a:	a0 70       	andi	r26, 0x00	; 0
     86c:	b0 70       	andi	r27, 0x00	; 0
     86e:	00 97       	sbiw	r24, 0x00	; 0
     870:	a1 05       	cpc	r26, r1
     872:	b1 05       	cpc	r27, r1
     874:	11 f4       	brne	.+4      	; 0x87a <ISPProtocol_ProgramMemory+0x1ac>
			  MustLoadExtendedAddress = true;
     876:	70 92 a5 01 	sts	0x01A5, r7
	                                                                    Write_Memory_Params.PollValue2;
	uint16_t PollAddress       = 0;
	uint8_t* NextWriteByte     = Write_Memory_Params.ProgData;
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);

	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
     87a:	08 94       	sec
     87c:	c1 1c       	adc	r12, r1
     87e:	d1 1c       	adc	r13, r1
     880:	89 81       	ldd	r24, Y+1	; 0x01
     882:	9a 81       	ldd	r25, Y+2	; 0x02
     884:	c8 16       	cp	r12, r24
     886:	d9 06       	cpc	r13, r25
     888:	08 f4       	brcc	.+2      	; 0x88c <ISPProtocol_ProgramMemory+0x1be>
     88a:	96 cf       	rjmp	.-212    	; 0x7b8 <ISPProtocol_ProgramMemory+0xea>
     88c:	80 e0       	ldi	r24, 0x00	; 0
			  MustLoadExtendedAddress = true;
		}
	}

	/* If the current page must be committed, send the PROGRAM PAGE command to the target */
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
     88e:	9b 81       	ldd	r25, Y+3	; 0x03
     890:	97 ff       	sbrs	r25, 7
     892:	2b c0       	rjmp	.+86     	; 0x8ea <ISPProtocol_ProgramMemory+0x21c>
	{
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[1]);
     894:	8e 81       	ldd	r24, Y+6	; 0x06
     896:	fa de       	rcall	.-524    	; 0x68c <ISPTarget_SendByte>
		ISPTarget_SendByte(PageStartAddress >> 8);
     898:	86 2d       	mov	r24, r6
     89a:	f8 de       	rcall	.-528    	; 0x68c <ISPTarget_SendByte>
		ISPTarget_SendByte(PageStartAddress & 0xFF);
     89c:	85 2d       	mov	r24, r5
     89e:	f6 de       	rcall	.-532    	; 0x68c <ISPTarget_SendByte>
		ISPTarget_SendByte(0x00);
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	f4 de       	rcall	.-536    	; 0x68c <ISPTarget_SendByte>

		/* Check if polling is enabled and possible, if not switch to timed delay mode */
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
     8a4:	8b 81       	ldd	r24, Y+3	; 0x03
     8a6:	85 ff       	sbrs	r24, 5
     8a8:	06 c0       	rjmp	.+12     	; 0x8b6 <ISPProtocol_ProgramMemory+0x1e8>
     8aa:	e1 14       	cp	r14, r1
     8ac:	f1 04       	cpc	r15, r1
     8ae:	19 f4       	brne	.+6      	; 0x8b6 <ISPProtocol_ProgramMemory+0x1e8>
		{
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
     8b0:	8f 7c       	andi	r24, 0xCF	; 207
     8b2:	80 61       	ori	r24, 0x10	; 16
     8b4:	8b 83       	std	Y+3, r24	; 0x03
												   PROG_MODE_PAGED_TIMEDELAY_MASK;
		}

		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
     8b6:	8b 81       	ldd	r24, Y+3	; 0x03
     8b8:	b7 01       	movw	r22, r14
     8ba:	49 2d       	mov	r20, r9
     8bc:	2c 81       	ldd	r18, Y+4	; 0x04
     8be:	0f 81       	ldd	r16, Y+7	; 0x07
     8c0:	16 d4       	rcall	.+2092   	; 0x10ee <ISPTarget_WaitForProgComplete>
		                                                  Write_Memory_Params.DelayMS,
		                                                  Write_Memory_Params.ProgrammingCommands[2]);

		/* Check to see if the FLASH address has crossed the extended address boundary */
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
     8c2:	13 31       	cpi	r17, 0x13	; 19
     8c4:	91 f4       	brne	.+36     	; 0x8ea <ISPProtocol_ProgramMemory+0x21c>
     8c6:	20 91 a6 01 	lds	r18, 0x01A6
     8ca:	30 91 a7 01 	lds	r19, 0x01A7
     8ce:	40 91 a8 01 	lds	r20, 0x01A8
     8d2:	50 91 a9 01 	lds	r21, 0x01A9
     8d6:	40 70       	andi	r20, 0x00	; 0
     8d8:	50 70       	andi	r21, 0x00	; 0
     8da:	21 15       	cp	r18, r1
     8dc:	31 05       	cpc	r19, r1
     8de:	41 05       	cpc	r20, r1
     8e0:	51 05       	cpc	r21, r1
     8e2:	19 f4       	brne	.+6      	; 0x8ea <ISPProtocol_ProgramMemory+0x21c>
		  MustLoadExtendedAddress = true;
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	90 93 a5 01 	sts	0x01A5, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8ea:	10 93 f1 00 	sts	0x00F1, r17
     8ee:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8f2:	80 91 e8 00 	lds	r24, 0x00E8
     8f6:	8e 77       	andi	r24, 0x7E	; 126
     8f8:	80 93 e8 00 	sts	0x00E8, r24
	}

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(ProgrammingStatus);
	Endpoint_ClearIN();
}
     8fc:	c7 5f       	subi	r28, 0xF7	; 247
     8fe:	de 4f       	sbci	r29, 0xFE	; 254
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	f8 94       	cli
     904:	de bf       	out	0x3e, r29	; 62
     906:	0f be       	out	0x3f, r0	; 63
     908:	cd bf       	out	0x3d, r28	; 61
     90a:	cf 91       	pop	r28
     90c:	df 91       	pop	r29
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	ff 90       	pop	r15
     914:	ef 90       	pop	r14
     916:	df 90       	pop	r13
     918:	cf 90       	pop	r12
     91a:	bf 90       	pop	r11
     91c:	af 90       	pop	r10
     91e:	9f 90       	pop	r9
     920:	8f 90       	pop	r8
     922:	7f 90       	pop	r7
     924:	6f 90       	pop	r6
     926:	5f 90       	pop	r5
     928:	4f 90       	pop	r4
     92a:	08 95       	ret

0000092c <ISPProtocol_ReadMemory>:
 *  words or pages of data from the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadMemory(uint8_t V2Command)
{
     92c:	df 92       	push	r13
     92e:	ef 92       	push	r14
     930:	ff 92       	push	r15
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	df 93       	push	r29
     938:	cf 93       	push	r28
     93a:	00 d0       	rcall	.+0      	; 0x93c <ISPProtocol_ReadMemory+0x10>
     93c:	0f 92       	push	r0
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	f8 2e       	mov	r15, r24
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;

	Endpoint_Read_Stream_LE(&Read_Memory_Params, sizeof(Read_Memory_Params), NULL);
     944:	ce 01       	movw	r24, r28
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	63 e0       	ldi	r22, 0x03	; 3
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <Endpoint_Read_Stream_LE>
	Read_Memory_Params.BytesToRead = SwapEndian_16(Read_Memory_Params.BytesToRead);
     954:	89 81       	ldd	r24, Y+1	; 0x01
     956:	9a 81       	ldd	r25, Y+2	; 0x02
     958:	95 de       	rcall	.-726    	; 0x684 <SwapEndian_16>
     95a:	9a 83       	std	Y+2, r25	; 0x02
     95c:	89 83       	std	Y+1, r24	; 0x01
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     95e:	80 91 e8 00 	lds	r24, 0x00E8
     962:	8b 77       	andi	r24, 0x7B	; 123
     964:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     96e:	80 91 ec 00 	lds	r24, 0x00EC
     972:	81 60       	ori	r24, 0x01	; 1
     974:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     978:	f0 92 f1 00 	sts	0x00F1, r15
     97c:	10 92 f1 00 	sts	0x00F1, r1

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
     980:	00 e0       	ldi	r16, 0x00	; 0
     982:	10 e0       	ldi	r17, 0x00	; 0
		}

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
     984:	28 e0       	ldi	r18, 0x08	; 8
     986:	d2 2e       	mov	r13, r18
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
		{
			CurrentAddress++;

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
			  MustLoadExtendedAddress = true;
     988:	ee 24       	eor	r14, r14
     98a:	e3 94       	inc	r14

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
     98c:	4a c0       	rjmp	.+148    	; 0xa22 <ISPProtocol_ReadMemory+0xf6>
	{
		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
     98e:	80 91 a5 01 	lds	r24, 0x01A5
     992:	88 23       	and	r24, r24
     994:	19 f0       	breq	.+6      	; 0x99c <ISPProtocol_ReadMemory+0x70>
		{
			ISPTarget_LoadExtendedAddress();
     996:	a2 d3       	rcall	.+1860   	; 0x10dc <ISPTarget_LoadExtendedAddress>
			MustLoadExtendedAddress = false;
     998:	10 92 a5 01 	sts	0x01A5, r1
		}

		/* Read the next byte from the desired memory space in the device */
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
     99c:	8b 81       	ldd	r24, Y+3	; 0x03
     99e:	76 de       	rcall	.-788    	; 0x68c <ISPTarget_SendByte>
		ISPTarget_SendByte(CurrentAddress >> 8);
     9a0:	80 91 a7 01 	lds	r24, 0x01A7
     9a4:	73 de       	rcall	.-794    	; 0x68c <ISPTarget_SendByte>
		ISPTarget_SendByte(CurrentAddress & 0xFF);
     9a6:	80 91 a6 01 	lds	r24, 0x01A6
     9aa:	70 de       	rcall	.-800    	; 0x68c <ISPTarget_SendByte>
		Endpoint_Write_8(ISPTarget_ReceiveByte());
     9ac:	84 de       	rcall	.-760    	; 0x6b6 <ISPTarget_ReceiveByte>
     9ae:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     9b2:	80 91 e8 00 	lds	r24, 0x00E8

		/* Check if the endpoint bank is currently full, if so send the packet */
		if (!(Endpoint_IsReadWriteAllowed()))
     9b6:	85 fd       	sbrc	r24, 5
     9b8:	07 c0       	rjmp	.+14     	; 0x9c8 <ISPProtocol_ReadMemory+0x9c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9ba:	80 91 e8 00 	lds	r24, 0x00E8
     9be:	8e 77       	andi	r24, 0x7E	; 126
     9c0:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();
			Endpoint_WaitUntilReady();
     9c4:	0e 94 84 11 	call	0x2308	; 0x2308 <Endpoint_WaitUntilReady>
		}

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
     9c8:	8f 2d       	mov	r24, r15
     9ca:	84 31       	cpi	r24, 0x14	; 20
     9cc:	19 f4       	brne	.+6      	; 0x9d4 <ISPProtocol_ReadMemory+0xa8>
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
     9ce:	8b 81       	ldd	r24, Y+3	; 0x03
     9d0:	8d 25       	eor	r24, r13
     9d2:	8b 83       	std	Y+3, r24	; 0x03

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
     9d4:	00 fd       	sbrc	r16, 0
     9d6:	03 c0       	rjmp	.+6      	; 0x9de <ISPProtocol_ReadMemory+0xb2>
     9d8:	8f 2d       	mov	r24, r15
     9da:	86 31       	cpi	r24, 0x16	; 22
     9dc:	01 f5       	brne	.+64     	; 0xa1e <ISPProtocol_ReadMemory+0xf2>
		{
			CurrentAddress++;
     9de:	20 91 a6 01 	lds	r18, 0x01A6
     9e2:	30 91 a7 01 	lds	r19, 0x01A7
     9e6:	40 91 a8 01 	lds	r20, 0x01A8
     9ea:	50 91 a9 01 	lds	r21, 0x01A9
     9ee:	2f 5f       	subi	r18, 0xFF	; 255
     9f0:	3f 4f       	sbci	r19, 0xFF	; 255
     9f2:	4f 4f       	sbci	r20, 0xFF	; 255
     9f4:	5f 4f       	sbci	r21, 0xFF	; 255
     9f6:	20 93 a6 01 	sts	0x01A6, r18
     9fa:	30 93 a7 01 	sts	0x01A7, r19
     9fe:	40 93 a8 01 	sts	0x01A8, r20
     a02:	50 93 a9 01 	sts	0x01A9, r21

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
     a06:	8f 2d       	mov	r24, r15
     a08:	86 31       	cpi	r24, 0x16	; 22
     a0a:	49 f0       	breq	.+18     	; 0xa1e <ISPProtocol_ReadMemory+0xf2>
     a0c:	40 70       	andi	r20, 0x00	; 0
     a0e:	50 70       	andi	r21, 0x00	; 0
     a10:	21 15       	cp	r18, r1
     a12:	31 05       	cpc	r19, r1
     a14:	41 05       	cpc	r20, r1
     a16:	51 05       	cpc	r21, r1
     a18:	11 f4       	brne	.+4      	; 0xa1e <ISPProtocol_ReadMemory+0xf2>
			  MustLoadExtendedAddress = true;
     a1a:	e0 92 a5 01 	sts	0x01A5, r14

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
     a1e:	0f 5f       	subi	r16, 0xFF	; 255
     a20:	1f 4f       	sbci	r17, 0xFF	; 255
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	9a 81       	ldd	r25, Y+2	; 0x02
     a26:	08 17       	cp	r16, r24
     a28:	19 07       	cpc	r17, r25
     a2a:	08 f4       	brcc	.+2      	; 0xa2e <ISPProtocol_ReadMemory+0x102>
     a2c:	b0 cf       	rjmp	.-160    	; 0x98e <ISPProtocol_ReadMemory+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a2e:	10 92 f1 00 	sts	0x00F1, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     a32:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a36:	80 91 e8 00 	lds	r24, 0x00E8
     a3a:	8e 77       	andi	r24, 0x7E	; 126
     a3c:	80 93 e8 00 	sts	0x00E8, r24

	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
	Endpoint_ClearIN();

	/* Ensure last packet is a short packet to terminate the transfer */
	if (IsEndpointFull)
     a40:	95 fd       	sbrc	r25, 5
     a42:	09 c0       	rjmp	.+18     	; 0xa56 <ISPProtocol_ReadMemory+0x12a>
	{
		Endpoint_WaitUntilReady();
     a44:	0e 94 84 11 	call	0x2308	; 0x2308 <Endpoint_WaitUntilReady>
     a48:	80 91 e8 00 	lds	r24, 0x00E8
     a4c:	8e 77       	andi	r24, 0x7E	; 126
     a4e:	80 93 e8 00 	sts	0x00E8, r24
		Endpoint_ClearIN();
		Endpoint_WaitUntilReady();
     a52:	0e 94 84 11 	call	0x2308	; 0x2308 <Endpoint_WaitUntilReady>
	}
}
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	cf 91       	pop	r28
     a5e:	df 91       	pop	r29
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	ff 90       	pop	r15
     a66:	ef 90       	pop	r14
     a68:	df 90       	pop	r13
     a6a:	08 95       	ret

00000a6c <ISPProtocol_ReadFuseLockSigOSCCAL>:
 *  reading the requested configuration byte from the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadFuseLockSigOSCCAL(uint8_t V2Command)
{
     a6c:	bf 92       	push	r11
     a6e:	cf 92       	push	r12
     a70:	df 92       	push	r13
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	df 93       	push	r29
     a7c:	cf 93       	push	r28
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	29 97       	sbiw	r28, 0x09	; 9
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
     a8e:	b8 2e       	mov	r11, r24
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	Endpoint_Read_Stream_LE(&Read_FuseLockSigOSCCAL_Params, sizeof(Read_FuseLockSigOSCCAL_Params), NULL);
     a90:	ce 01       	movw	r24, r28
     a92:	05 96       	adiw	r24, 0x05	; 5
     a94:	65 e0       	ldi	r22, 0x05	; 5
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	40 e0       	ldi	r20, 0x00	; 0
     a9a:	50 e0       	ldi	r21, 0x00	; 0
     a9c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     aa0:	80 91 e8 00 	lds	r24, 0x00E8
     aa4:	8b 77       	andi	r24, 0x7B	; 123
     aa6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     aaa:	82 e0       	ldi	r24, 0x02	; 2
     aac:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     ab0:	80 91 ec 00 	lds	r24, 0x00EC
     ab4:	81 60       	ori	r24, 0x01	; 1
     ab6:	80 93 ec 00 	sts	0x00EC, r24
     aba:	8e 01       	movw	r16, r28
     abc:	0a 5f       	subi	r16, 0xFA	; 250
     abe:	1f 4f       	sbci	r17, 0xFF	; 255
     ac0:	7e 01       	movw	r14, r28
     ac2:	08 94       	sec
     ac4:	e1 1c       	adc	r14, r1
     ac6:	f1 1c       	adc	r15, r1
/** Handler for the CMD_READ_FUSE_ISP, CMD_READ_LOCK_ISP, CMD_READ_SIGNATURE_ISP and CMD_READ_OSCCAL commands,
 *  reading the requested configuration byte from the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadFuseLockSigOSCCAL(uint8_t V2Command)
     ac8:	3a e0       	ldi	r19, 0x0A	; 10
     aca:	c3 2e       	mov	r12, r19
     acc:	d1 2c       	mov	r13, r1
     ace:	cc 0e       	add	r12, r28
     ad0:	dd 1e       	adc	r13, r29

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
     ad2:	f8 01       	movw	r30, r16
     ad4:	81 91       	ld	r24, Z+
     ad6:	8f 01       	movw	r16, r30
     ad8:	e3 dd       	rcall	.-1082   	; 0x6a0 <ISPTarget_TransferByte>
     ada:	f7 01       	movw	r30, r14
     adc:	81 93       	st	Z+, r24
     ade:	7f 01       	movw	r14, r30
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     ae0:	0c 15       	cp	r16, r12
     ae2:	1d 05       	cpc	r17, r13
     ae4:	b1 f7       	brne	.-20     	; 0xad2 <ISPProtocol_ReadFuseLockSigOSCCAL+0x66>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ae6:	b0 92 f1 00 	sts	0x00F1, r11
     aea:	10 92 f1 00 	sts	0x00F1, r1
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1]);
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	fe 01       	movw	r30, r28
     af2:	e8 0f       	add	r30, r24
     af4:	f1 1d       	adc	r31, r1
     af6:	80 81       	ld	r24, Z
     af8:	80 93 f1 00 	sts	0x00F1, r24
     afc:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b00:	80 91 e8 00 	lds	r24, 0x00E8
     b04:	8e 77       	andi	r24, 0x7E	; 126
     b06:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     b0a:	29 96       	adiw	r28, 0x09	; 9
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	f8 94       	cli
     b10:	de bf       	out	0x3e, r29	; 62
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	cd bf       	out	0x3d, r28	; 61
     b16:	cf 91       	pop	r28
     b18:	df 91       	pop	r29
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	ff 90       	pop	r15
     b20:	ef 90       	pop	r14
     b22:	df 90       	pop	r13
     b24:	cf 90       	pop	r12
     b26:	bf 90       	pop	r11
     b28:	08 95       	ret

00000b2a <ISPProtocol_WriteFuseLock>:
 *  byte to the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_WriteFuseLock(uint8_t V2Command)
{
     b2a:	df 92       	push	r13
     b2c:	ef 92       	push	r14
     b2e:	ff 92       	push	r15
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	df 93       	push	r29
     b36:	cf 93       	push	r28
     b38:	00 d0       	rcall	.+0      	; 0xb3a <ISPProtocol_WriteFuseLock+0x10>
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <ISPProtocol_WriteFuseLock+0x12>
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	d8 2e       	mov	r13, r24
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;

	Endpoint_Read_Stream_LE(&Write_FuseLockSig_Params, sizeof(Write_FuseLockSig_Params), NULL);
     b42:	8e 01       	movw	r16, r28
     b44:	0f 5f       	subi	r16, 0xFF	; 255
     b46:	1f 4f       	sbci	r17, 0xFF	; 255
     b48:	c8 01       	movw	r24, r16
     b4a:	64 e0       	ldi	r22, 0x04	; 4
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b56:	80 91 e8 00 	lds	r24, 0x00E8
     b5a:	8b 77       	andi	r24, 0x7B	; 123
     b5c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     b66:	80 91 ec 00 	lds	r24, 0x00EC
     b6a:	81 60       	ori	r24, 0x01	; 1
     b6c:	80 93 ec 00 	sts	0x00EC, r24
/** Handler for the CMD_WRITE_FUSE_ISP and CMD_WRITE_LOCK_ISP commands, writing the requested configuration
 *  byte to the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_WriteFuseLock(uint8_t V2Command)
     b70:	45 e0       	ldi	r20, 0x05	; 5
     b72:	e4 2e       	mov	r14, r20
     b74:	f1 2c       	mov	r15, r1
     b76:	ec 0e       	add	r14, r28
     b78:	fd 1e       	adc	r15, r29
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++)
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
     b7a:	f8 01       	movw	r30, r16
     b7c:	81 91       	ld	r24, Z+
     b7e:	8f 01       	movw	r16, r30
     b80:	85 dd       	rcall	.-1270   	; 0x68c <ISPTarget_SendByte>
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++)
     b82:	0e 15       	cp	r16, r14
     b84:	1f 05       	cpc	r17, r15
     b86:	c9 f7       	brne	.-14     	; 0xb7a <ISPProtocol_WriteFuseLock+0x50>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b88:	d0 92 f1 00 	sts	0x00F1, r13
     b8c:	10 92 f1 00 	sts	0x00F1, r1
     b90:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b94:	80 91 e8 00 	lds	r24, 0x00E8
     b98:	8e 77       	andi	r24, 0x7E	; 126
     b9a:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_Write_8(V2Command);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	cf 91       	pop	r28
     ba8:	df 91       	pop	r29
     baa:	1f 91       	pop	r17
     bac:	0f 91       	pop	r16
     bae:	ff 90       	pop	r15
     bb0:	ef 90       	pop	r14
     bb2:	df 90       	pop	r13
     bb4:	08 95       	ret

00000bb6 <ISPProtocol_SPIMulti>:

/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
     bb6:	ef 92       	push	r14
     bb8:	ff 92       	push	r15
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
     bc6:	c2 50       	subi	r28, 0x02	; 2
     bc8:	d1 40       	sbci	r29, 0x01	; 1
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
		uint8_t RxBytes;
		uint8_t RxStartAddr;
		uint8_t TxData[255];
	} SPI_Multi_Params;

	Endpoint_Read_Stream_LE(&SPI_Multi_Params, (sizeof(SPI_Multi_Params) - sizeof(SPI_Multi_Params.TxData)), NULL);
     bd4:	ce 01       	movw	r24, r28
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	63 e0       	ldi	r22, 0x03	; 3
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <Endpoint_Read_Stream_LE>
	Endpoint_Read_Stream_LE(&SPI_Multi_Params.TxData, SPI_Multi_Params.TxBytes, NULL);
     be4:	8e 01       	movw	r16, r28
     be6:	0c 5f       	subi	r16, 0xFC	; 252
     be8:	1f 4f       	sbci	r17, 0xFF	; 255
     bea:	69 81       	ldd	r22, Y+1	; 0x01
     bec:	c8 01       	movw	r24, r16
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bf8:	80 91 e8 00 	lds	r24, 0x00E8
     bfc:	8b 77       	andi	r24, 0x7B	; 123
     bfe:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c02:	82 e0       	ldi	r24, 0x02	; 2
     c04:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     c08:	80 91 ec 00 	lds	r24, 0x00EC
     c0c:	81 60       	ori	r24, 0x01	; 1
     c0e:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c12:	8d e1       	ldi	r24, 0x1D	; 29
     c14:	80 93 f1 00 	sts	0x00F1, r24
     c18:	10 92 f1 00 	sts	0x00F1, r1
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(CMD_SPI_MULTI);
	Endpoint_Write_8(STATUS_CMD_OK);

	uint8_t CurrTxPos = 0;
     c1c:	ff 24       	eor	r15, r15
	uint8_t CurrRxPos = 0;

	/* Write out bytes to transmit until the start of the bytes to receive is met */
	while (CurrTxPos < SPI_Multi_Params.RxStartAddr)
     c1e:	0b c0       	rjmp	.+22     	; 0xc36 <ISPProtocol_SPIMulti+0x80>
	{
		if (CurrTxPos < SPI_Multi_Params.TxBytes)
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	f8 16       	cp	r15, r24
     c24:	28 f4       	brcc	.+10     	; 0xc30 <ISPProtocol_SPIMulti+0x7a>
		  ISPTarget_SendByte(SPI_Multi_Params.TxData[CurrTxPos]);
     c26:	f8 01       	movw	r30, r16
     c28:	ef 0d       	add	r30, r15
     c2a:	f1 1d       	adc	r31, r1
     c2c:	80 81       	ld	r24, Z
     c2e:	01 c0       	rjmp	.+2      	; 0xc32 <ISPProtocol_SPIMulti+0x7c>
		else
		  ISPTarget_SendByte(0);
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	2c dd       	rcall	.-1448   	; 0x68c <ISPTarget_SendByte>

		CurrTxPos++;
     c34:	f3 94       	inc	r15

	uint8_t CurrTxPos = 0;
	uint8_t CurrRxPos = 0;

	/* Write out bytes to transmit until the start of the bytes to receive is met */
	while (CurrTxPos < SPI_Multi_Params.RxStartAddr)
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	f8 16       	cp	r15, r24
     c3a:	90 f3       	brcs	.-28     	; 0xc20 <ISPProtocol_SPIMulti+0x6a>
     c3c:	ee 24       	eor	r14, r14

	/* Transmit remaining bytes with padding as needed, read in response bytes */
	while (CurrRxPos < SPI_Multi_Params.RxBytes)
	{
		if (CurrTxPos < SPI_Multi_Params.TxBytes)
		  Endpoint_Write_8(ISPTarget_TransferByte(SPI_Multi_Params.TxData[CurrTxPos++]));
     c3e:	8e 01       	movw	r16, r28
     c40:	0c 5f       	subi	r16, 0xFC	; 252
     c42:	1f 4f       	sbci	r17, 0xFF	; 255
     c44:	19 c0       	rjmp	.+50     	; 0xc78 <ISPProtocol_SPIMulti+0xc2>
	}

	/* Transmit remaining bytes with padding as needed, read in response bytes */
	while (CurrRxPos < SPI_Multi_Params.RxBytes)
	{
		if (CurrTxPos < SPI_Multi_Params.TxBytes)
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	f8 16       	cp	r15, r24
     c4a:	38 f4       	brcc	.+14     	; 0xc5a <ISPProtocol_SPIMulti+0xa4>
		  Endpoint_Write_8(ISPTarget_TransferByte(SPI_Multi_Params.TxData[CurrTxPos++]));
     c4c:	f8 01       	movw	r30, r16
     c4e:	ef 0d       	add	r30, r15
     c50:	f1 1d       	adc	r31, r1
     c52:	f3 94       	inc	r15
     c54:	80 81       	ld	r24, Z
     c56:	24 dd       	rcall	.-1464   	; 0x6a0 <ISPTarget_TransferByte>
     c58:	01 c0       	rjmp	.+2      	; 0xc5c <ISPProtocol_SPIMulti+0xa6>
		else
		  Endpoint_Write_8(ISPTarget_ReceiveByte());
     c5a:	2d dd       	rcall	.-1446   	; 0x6b6 <ISPTarget_ReceiveByte>
     c5c:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c60:	80 91 e8 00 	lds	r24, 0x00E8

		/* Check to see if we have filled the endpoint bank and need to send the packet */
		if (!(Endpoint_IsReadWriteAllowed()))
     c64:	85 fd       	sbrc	r24, 5
     c66:	07 c0       	rjmp	.+14     	; 0xc76 <ISPProtocol_SPIMulti+0xc0>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c68:	80 91 e8 00 	lds	r24, 0x00E8
     c6c:	8e 77       	andi	r24, 0x7E	; 126
     c6e:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();
			Endpoint_WaitUntilReady();
     c72:	0e 94 84 11 	call	0x2308	; 0x2308 <Endpoint_WaitUntilReady>
		}

		CurrRxPos++;
     c76:	e3 94       	inc	r14

		CurrTxPos++;
	}

	/* Transmit remaining bytes with padding as needed, read in response bytes */
	while (CurrRxPos < SPI_Multi_Params.RxBytes)
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	e8 16       	cp	r14, r24
     c7c:	20 f3       	brcs	.-56     	; 0xc46 <ISPProtocol_SPIMulti+0x90>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c7e:	10 92 f1 00 	sts	0x00F1, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c82:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c86:	80 91 e8 00 	lds	r24, 0x00E8
     c8a:	8e 77       	andi	r24, 0x7E	; 126
     c8c:	80 93 e8 00 	sts	0x00E8, r24

	bool IsEndpointFull = !(Endpoint_IsReadWriteAllowed());
	Endpoint_ClearIN();

	/* Ensure last packet is a short packet to terminate the transfer */
	if (IsEndpointFull)
     c90:	95 fd       	sbrc	r25, 5
     c92:	09 c0       	rjmp	.+18     	; 0xca6 <ISPProtocol_SPIMulti+0xf0>
	{
		Endpoint_WaitUntilReady();
     c94:	0e 94 84 11 	call	0x2308	; 0x2308 <Endpoint_WaitUntilReady>
     c98:	80 91 e8 00 	lds	r24, 0x00E8
     c9c:	8e 77       	andi	r24, 0x7E	; 126
     c9e:	80 93 e8 00 	sts	0x00E8, r24
		Endpoint_ClearIN();
		Endpoint_WaitUntilReady();
     ca2:	0e 94 84 11 	call	0x2308	; 0x2308 <Endpoint_WaitUntilReady>
	}
}
     ca6:	ce 5f       	subi	r28, 0xFE	; 254
     ca8:	de 4f       	sbci	r29, 0xFE	; 254
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	08 95       	ret

00000cc2 <ISPProtocol_DelayMS>:
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	while (DelayMS-- && TimeoutTicksRemaining)
     cc2:	06 c0       	rjmp	.+12     	; 0xcd0 <ISPProtocol_DelayMS+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cc4:	ef e9       	ldi	r30, 0x9F	; 159
     cc6:	ff e0       	ldi	r31, 0x0F	; 15
     cc8:	31 97       	sbiw	r30, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <ISPProtocol_DelayMS+0x6>
     ccc:	00 c0       	rjmp	.+0      	; 0xcce <ISPProtocol_DelayMS+0xc>
     cce:	00 00       	nop
     cd0:	88 23       	and	r24, r24
     cd2:	21 f0       	breq	.+8      	; 0xcdc <ISPProtocol_DelayMS+0x1a>
     cd4:	9a b5       	in	r25, 0x2a	; 42
     cd6:	81 50       	subi	r24, 0x01	; 1
     cd8:	99 23       	and	r25, r25
     cda:	a1 f7       	brne	.-24     	; 0xcc4 <ISPProtocol_DelayMS+0x2>
     cdc:	08 95       	ret

00000cde <ISPProtocol_ChipErase>:
	}
}

/** Handler for the CMD_CHI_ERASE_ISP command, clearing the target's FLASH memory. */
void ISPProtocol_ChipErase(void)
{
     cde:	ef 92       	push	r14
     ce0:	ff 92       	push	r15
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	00 d0       	rcall	.+0      	; 0xcec <ISPProtocol_ChipErase+0xe>
     cec:	00 d0       	rcall	.+0      	; 0xcee <ISPProtocol_ChipErase+0x10>
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <ISPProtocol_ChipErase+0x12>
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
		uint8_t EraseDelayMS;
		uint8_t PollMethod;
		uint8_t EraseCommandBytes[4];
	} Erase_Chip_Params;

	Endpoint_Read_Stream_LE(&Erase_Chip_Params, sizeof(Erase_Chip_Params), NULL);
     cf4:	ce 01       	movw	r24, r28
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	66 e0       	ldi	r22, 0x06	; 6
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d04:	80 91 e8 00 	lds	r24, 0x00E8
     d08:	8b 77       	andi	r24, 0x7B	; 123
     d0a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d0e:	82 e0       	ldi	r24, 0x02	; 2
     d10:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     d14:	80 91 ec 00 	lds	r24, 0x00EC
     d18:	81 60       	ori	r24, 0x01	; 1
     d1a:	80 93 ec 00 	sts	0x00EC, r24
     d1e:	8e 01       	movw	r16, r28
     d20:	0d 5f       	subi	r16, 0xFD	; 253
     d22:	1f 4f       	sbci	r17, 0xFF	; 255
		Endpoint_WaitUntilReady();
	}
}

/** Handler for the CMD_CHI_ERASE_ISP command, clearing the target's FLASH memory. */
void ISPProtocol_ChipErase(void)
     d24:	57 e0       	ldi	r21, 0x07	; 7
     d26:	e5 2e       	mov	r14, r21
     d28:	f1 2c       	mov	r15, r1
     d2a:	ec 0e       	add	r14, r28
     d2c:	fd 1e       	adc	r15, r29

	uint8_t ResponseStatus = STATUS_CMD_OK;

	/* Send the chip erase commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++)
	  ISPTarget_SendByte(Erase_Chip_Params.EraseCommandBytes[SByte]);
     d2e:	f8 01       	movw	r30, r16
     d30:	81 91       	ld	r24, Z+
     d32:	8f 01       	movw	r16, r30
     d34:	ab dc       	rcall	.-1706   	; 0x68c <ISPTarget_SendByte>
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_OK;

	/* Send the chip erase commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++)
     d36:	0e 15       	cp	r16, r14
     d38:	1f 05       	cpc	r17, r15
     d3a:	c9 f7       	brne	.-14     	; 0xd2e <ISPProtocol_ChipErase+0x50>
	  ISPTarget_SendByte(Erase_Chip_Params.EraseCommandBytes[SByte]);

	/* Use appropriate command completion check as given by the host (delay or busy polling) */
	if (!(Erase_Chip_Params.PollMethod))
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	88 23       	and	r24, r24
     d40:	21 f4       	brne	.+8      	; 0xd4a <ISPProtocol_ChipErase+0x6c>
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	be df       	rcall	.-132    	; 0xcc2 <ISPProtocol_DelayMS>

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_OK;
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	01 c0       	rjmp	.+2      	; 0xd4c <ISPProtocol_ChipErase+0x6e>

	/* Use appropriate command completion check as given by the host (delay or busy polling) */
	if (!(Erase_Chip_Params.PollMethod))
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
	else
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
     d4a:	aa d1       	rcall	.+852    	; 0x10a0 <ISPTarget_WaitWhileTargetBusy>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d4c:	92 e1       	ldi	r25, 0x12	; 18
     d4e:	90 93 f1 00 	sts	0x00F1, r25
     d52:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d56:	80 91 e8 00 	lds	r24, 0x00E8
     d5a:	8e 77       	andi	r24, 0x7E	; 126
     d5c:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_Write_8(CMD_CHIP_ERASE_ISP);
	Endpoint_Write_8(ResponseStatus);
	Endpoint_ClearIN();
}
     d60:	26 96       	adiw	r28, 0x06	; 6
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	08 95       	ret

00000d7a <ISPProtocol_LeaveISPMode>:
	Endpoint_ClearIN();
}

/** Handler for the CMD_LEAVE_ISP command, which releases the target from programming mode. */
void ISPProtocol_LeaveISPMode(void)
{
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	00 d0       	rcall	.+0      	; 0xd84 <ISPProtocol_LeaveISPMode+0xa>
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
	{
		uint8_t PreDelayMS;
		uint8_t PostDelayMS;
	} Leave_ISP_Params;

	Endpoint_Read_Stream_LE(&Leave_ISP_Params, sizeof(Leave_ISP_Params), NULL);
     d88:	ce 01       	movw	r24, r28
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	62 e0       	ldi	r22, 0x02	; 2
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d98:	08 ee       	ldi	r16, 0xE8	; 232
     d9a:	10 e0       	ldi	r17, 0x00	; 0
     d9c:	f8 01       	movw	r30, r16
     d9e:	80 81       	ld	r24, Z
     da0:	8b 77       	andi	r24, 0x7B	; 123
     da2:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     daa:	ec ee       	ldi	r30, 0xEC	; 236
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	81 60       	ori	r24, 0x01	; 1
     db2:	80 83       	st	Z, r24
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	/* Perform pre-exit delay, release the target /RESET, disable the SPI bus and perform the post-exit delay */
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	85 df       	rcall	.-246    	; 0xcc2 <ISPProtocol_DelayMS>
	ISPTarget_ChangeTargetResetLine(false);
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	66 d1       	rcall	.+716    	; 0x1088 <ISPTarget_ChangeTargetResetLine>
	ISPTarget_DisableTargetISP();
     dbc:	e7 d0       	rcall	.+462    	; 0xf8c <ISPTarget_DisableTargetISP>
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	80 df       	rcall	.-256    	; 0xcc2 <ISPProtocol_DelayMS>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     dc2:	e1 ef       	ldi	r30, 0xF1	; 241
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	81 e1       	ldi	r24, 0x11	; 17
     dc8:	80 83       	st	Z, r24
     dca:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dcc:	f8 01       	movw	r30, r16
     dce:	80 81       	ld	r24, Z
     dd0:	8e 77       	andi	r24, 0x7E	; 126
     dd2:	80 83       	st	Z, r24

	Endpoint_Write_8(CMD_LEAVE_PROGMODE_ISP);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_ClearIN();
}
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <ISPProtocol_EnterISPMode>:

/** Handler for the CMD_ENTER_PROGMODE_ISP command, which attempts to enter programming mode on
 *  the attached device, returning success or failure back to the host.
 */
void ISPProtocol_EnterISPMode(void)
{
     de2:	8f 92       	push	r8
     de4:	9f 92       	push	r9
     de6:	af 92       	push	r10
     de8:	bf 92       	push	r11
     dea:	cf 92       	push	r12
     dec:	df 92       	push	r13
     dee:	ef 92       	push	r14
     df0:	ff 92       	push	r15
     df2:	0f 93       	push	r16
     df4:	1f 93       	push	r17
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	2f 97       	sbiw	r28, 0x0f	; 15
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
		uint8_t PollValue;
		uint8_t PollIndex;
		uint8_t EnterProgBytes[4];
	} Enter_ISP_Params;

	Endpoint_Read_Stream_LE(&Enter_ISP_Params, sizeof(Enter_ISP_Params), NULL);
     e0a:	ce 01       	movw	r24, r28
     e0c:	05 96       	adiw	r24, 0x05	; 5
     e0e:	6b e0       	ldi	r22, 0x0B	; 11
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	50 e0       	ldi	r21, 0x00	; 0
     e16:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e1a:	80 91 e8 00 	lds	r24, 0x00E8
     e1e:	8b 77       	andi	r24, 0x7B	; 123
     e20:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     e2a:	80 91 ec 00 	lds	r24, 0x00EC
     e2e:	81 60       	ori	r24, 0x01	; 1
     e30:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_FAILED;

	CurrentAddress = 0;
     e34:	10 92 a6 01 	sts	0x01A6, r1
     e38:	10 92 a7 01 	sts	0x01A7, r1
     e3c:	10 92 a8 01 	sts	0x01A8, r1
     e40:	10 92 a9 01 	sts	0x01A9, r1

	/* Perform execution delay, initialize SPI bus */
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
     e44:	8f 81       	ldd	r24, Y+7	; 0x07
     e46:	3d df       	rcall	.-390    	; 0xcc2 <ISPProtocol_DelayMS>
	ISPTarget_EnableTargetISP();
     e48:	cd d0       	rcall	.+410    	; 0xfe4 <ISPTarget_EnableTargetISP>

	ISPTarget_ChangeTargetResetLine(true);
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	1d d1       	rcall	.+570    	; 0x1088 <ISPTarget_ChangeTargetResetLine>
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     e4e:	8e 81       	ldd	r24, Y+6	; 0x06
     e50:	38 df       	rcall	.-400    	; 0xcc2 <ISPProtocol_DelayMS>

	/* Continuously attempt to synchronize with the target until either the number of attempts specified
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
     e52:	7c e0       	ldi	r23, 0x0C	; 12
     e54:	c7 2e       	mov	r12, r23
     e56:	d1 2c       	mov	r13, r1
     e58:	cc 0e       	add	r12, r28
     e5a:	dd 1e       	adc	r13, r29
     e5c:	5e 01       	movw	r10, r28
     e5e:	08 94       	sec
     e60:	a1 1c       	adc	r10, r1
     e62:	b1 1c       	adc	r11, r1
#if defined(ENABLE_ISP_PROTOCOL) || defined(__DOXYGEN__)

/** Handler for the CMD_ENTER_PROGMODE_ISP command, which attempts to enter programming mode on
 *  the attached device, returning success or failure back to the host.
 */
void ISPProtocol_EnterISPMode(void)
     e64:	60 e1       	ldi	r22, 0x10	; 16
     e66:	86 2e       	mov	r8, r22
     e68:	91 2c       	mov	r9, r1
     e6a:	8c 0e       	add	r8, r28
     e6c:	9d 1e       	adc	r9, r29
	ISPTarget_ChangeTargetResetLine(true);
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);

	/* Continuously attempt to synchronize with the target until either the number of attempts specified
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
     e6e:	1e c0       	rjmp	.+60     	; 0xeac <ISPProtocol_EnterISPMode+0xca>
	{
		uint8_t ResponseBytes[4];

		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
		{
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
     e70:	89 85       	ldd	r24, Y+9	; 0x09
     e72:	27 df       	rcall	.-434    	; 0xcc2 <ISPProtocol_DelayMS>
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
     e74:	f8 01       	movw	r30, r16
     e76:	81 91       	ld	r24, Z+
     e78:	8f 01       	movw	r16, r30
     e7a:	12 dc       	rcall	.-2012   	; 0x6a0 <ISPTarget_TransferByte>
     e7c:	f7 01       	movw	r30, r14
     e7e:	81 93       	st	Z+, r24
     e80:	7f 01       	movw	r14, r30
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
	{
		uint8_t ResponseBytes[4];

		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
     e82:	08 15       	cp	r16, r8
     e84:	19 05       	cpc	r17, r9
     e86:	a1 f7       	brne	.-24     	; 0xe70 <ISPProtocol_EnterISPMode+0x8e>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
		}

		/* Check if polling disabled, or if the polled value matches the expected value */
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
     e88:	8b 85       	ldd	r24, Y+11	; 0x0b
     e8a:	88 23       	and	r24, r24
     e8c:	d9 f0       	breq	.+54     	; 0xec4 <ISPProtocol_EnterISPMode+0xe2>
     e8e:	fe 01       	movw	r30, r28
     e90:	e8 0f       	add	r30, r24
     e92:	f1 1d       	adc	r31, r1
     e94:	90 81       	ld	r25, Z
     e96:	8a 85       	ldd	r24, Y+10	; 0x0a
     e98:	98 17       	cp	r25, r24
     e9a:	a1 f0       	breq	.+40     	; 0xec4 <ISPProtocol_EnterISPMode+0xe2>
			ResponseStatus = STATUS_CMD_OK;
			break;
		}
		else
		{
			ISPTarget_ChangeTargetResetLine(false);
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	f4 d0       	rcall	.+488    	; 0x1088 <ISPTarget_ChangeTargetResetLine>
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     ea0:	8e 81       	ldd	r24, Y+6	; 0x06
     ea2:	0f df       	rcall	.-482    	; 0xcc2 <ISPProtocol_DelayMS>
			ISPTarget_ChangeTargetResetLine(true);
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	f0 d0       	rcall	.+480    	; 0x1088 <ISPTarget_ChangeTargetResetLine>
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
     ea8:	8e 81       	ldd	r24, Y+6	; 0x06
     eaa:	0b df       	rcall	.-490    	; 0xcc2 <ISPProtocol_DelayMS>
	ISPTarget_ChangeTargetResetLine(true);
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);

	/* Continuously attempt to synchronize with the target until either the number of attempts specified
	 * by the host has exceeded, or the the device sends back the expected response values */
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
     eac:	88 85       	ldd	r24, Y+8	; 0x08
     eae:	98 2f       	mov	r25, r24
     eb0:	91 50       	subi	r25, 0x01	; 1
     eb2:	98 87       	std	Y+8, r25	; 0x08
     eb4:	88 23       	and	r24, r24
     eb6:	41 f0       	breq	.+16     	; 0xec8 <ISPProtocol_EnterISPMode+0xe6>
     eb8:	8a b5       	in	r24, 0x2a	; 42
     eba:	88 23       	and	r24, r24
     ebc:	29 f0       	breq	.+10     	; 0xec8 <ISPProtocol_EnterISPMode+0xe6>
     ebe:	86 01       	movw	r16, r12
     ec0:	75 01       	movw	r14, r10
     ec2:	d6 cf       	rjmp	.-84     	; 0xe70 <ISPProtocol_EnterISPMode+0x8e>
		}

		/* Check if polling disabled, or if the polled value matches the expected value */
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
		{
			ResponseStatus = STATUS_CMD_OK;
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	01 c0       	rjmp	.+2      	; 0xeca <ISPProtocol_EnterISPMode+0xe8>

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ResponseStatus = STATUS_CMD_FAILED;
     ec8:	80 ec       	ldi	r24, 0xC0	; 192
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     eca:	90 e1       	ldi	r25, 0x10	; 16
     ecc:	90 93 f1 00 	sts	0x00F1, r25
     ed0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ed4:	80 91 e8 00 	lds	r24, 0x00E8
     ed8:	8e 77       	andi	r24, 0x7E	; 126
     eda:	80 93 e8 00 	sts	0x00E8, r24
	}

	Endpoint_Write_8(CMD_ENTER_PROGMODE_ISP);
	Endpoint_Write_8(ResponseStatus);
	Endpoint_ClearIN();
}
     ede:	2f 96       	adiw	r28, 0x0f	; 15
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	ff 90       	pop	r15
     ef4:	ef 90       	pop	r14
     ef6:	df 90       	pop	r13
     ef8:	cf 90       	pop	r12
     efa:	bf 90       	pop	r11
     efc:	af 90       	pop	r10
     efe:	9f 90       	pop	r9
     f00:	8f 90       	pop	r8
     f02:	08 95       	ret

00000f04 <__vector_15>:
static volatile uint8_t SoftSPI_BitsRemaining;


/** ISR to handle software SPI transmission and reception */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
     f04:	1f 92       	push	r1
     f06:	0f 92       	push	r0
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	0f 92       	push	r0
     f0c:	11 24       	eor	r1, r1
     f0e:	8f 93       	push	r24
	/* Check if rising edge (output next bit) or falling edge (read in next bit) */
	if (!(PINB & (1 << 1)))
     f10:	19 99       	sbic	0x03, 1	; 3
     f12:	08 c0       	rjmp	.+16     	; 0xf24 <__vector_15+0x20>
	{
		if (SoftSPI_Data & (1 << 7))
     f14:	80 91 a2 01 	lds	r24, 0x01A2
     f18:	87 ff       	sbrs	r24, 7
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <__vector_15+0x1c>
		  PORTB |=  (1 << 2);
     f1c:	2a 9a       	sbi	0x05, 2	; 5
     f1e:	1b c0       	rjmp	.+54     	; 0xf56 <__vector_15+0x52>
		else
		  PORTB &= ~(1 << 2);
     f20:	2a 98       	cbi	0x05, 2	; 5
     f22:	19 c0       	rjmp	.+50     	; 0xf56 <__vector_15+0x52>
	}
	else
	{
		SoftSPI_Data <<= 1;
     f24:	80 91 a2 01 	lds	r24, 0x01A2
     f28:	88 0f       	add	r24, r24
     f2a:	80 93 a2 01 	sts	0x01A2, r24

		if (!(--SoftSPI_BitsRemaining))
     f2e:	80 91 a3 01 	lds	r24, 0x01A3
     f32:	81 50       	subi	r24, 0x01	; 1
     f34:	80 93 a3 01 	sts	0x01A3, r24
     f38:	80 91 a3 01 	lds	r24, 0x01A3
     f3c:	88 23       	and	r24, r24
     f3e:	21 f4       	brne	.+8      	; 0xf48 <__vector_15+0x44>
		{
			TCCR1B = 0;
     f40:	10 92 81 00 	sts	0x0081, r1
			TIFR1  = (1 << OCF1A);
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	86 bb       	out	0x16, r24	; 22
		}

		if (PINB & (1 << 3))
     f48:	1b 9b       	sbis	0x03, 3	; 3
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <__vector_15+0x52>
		  SoftSPI_Data |= (1 << 0);
     f4c:	80 91 a2 01 	lds	r24, 0x01A2
     f50:	81 60       	ori	r24, 0x01	; 1
     f52:	80 93 a2 01 	sts	0x01A2, r24
	}

	/* Fast toggle of PORTB.1 via the PIN register (see datasheet) */
	PINB |= (1 << 1);
     f56:	19 9a       	sbi	0x03, 1	; 3
}
     f58:	8f 91       	pop	r24
     f5a:	0f 90       	pop	r0
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	0f 90       	pop	r0
     f60:	1f 90       	pop	r1
     f62:	18 95       	reti

00000f64 <ISPTarget_ConfigureRescueClock>:
		UCSR1B = (1 << TXEN1);
		UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
	#else
		/* Configure OCR1A as an output for the specified AVR model */
		#if defined(USB_SERIES_2_AVR)
		DDRC |= (1 << 6);
     f64:	3e 9a       	sbi	0x07, 6	; 7
		#else
		DDRB |= (1 << 5);
		#endif

		/* Start Timer 1 to generate a 4MHz clock on the OCR1A pin */
		TIMSK1 = 0;
     f66:	10 92 6f 00 	sts	0x006F, r1
		TCNT1  = 0;
     f6a:	10 92 85 00 	sts	0x0085, r1
     f6e:	10 92 84 00 	sts	0x0084, r1
		OCR1A  = ((F_CPU / 2 / ISP_RESCUE_CLOCK_SPEED) - 1);
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	90 93 89 00 	sts	0x0089, r25
     f7a:	80 93 88 00 	sts	0x0088, r24
		TCCR1A = (1 << COM1A0);
     f7e:	80 e4       	ldi	r24, 0x40	; 64
     f80:	80 93 80 00 	sts	0x0080, r24
		TCCR1B = ((1 << WGM12) | (1 << CS10));
     f84:	89 e0       	ldi	r24, 0x09	; 9
     f86:	80 93 81 00 	sts	0x0081, r24
	#endif
}
     f8a:	08 95       	ret

00000f8c <ISPTarget_DisableTargetISP>:
/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
	if (HardwareSPIMode)
     f8c:	80 91 67 01 	lds	r24, 0x0167
     f90:	88 23       	and	r24, r24
     f92:	49 f0       	breq	.+18     	; 0xfa6 <ISPTarget_DisableTargetISP+0x1a>
			}

			/** Turns off the SPI driver, disabling and returning used hardware to their default configuration. */
			static inline void SPI_Disable(void)
			{
				DDRB  &= ~((1 << 1) | (1 << 2));
     f94:	84 b1       	in	r24, 0x04	; 4
     f96:	89 7f       	andi	r24, 0xF9	; 249
     f98:	84 b9       	out	0x04, r24	; 4
				PORTB &= ~((1 << 0) | (1 << 3));
     f9a:	85 b1       	in	r24, 0x05	; 5
     f9c:	86 7f       	andi	r24, 0xF6	; 246
     f9e:	85 b9       	out	0x05, r24	; 5

				SPCR   = 0;
     fa0:	1c bc       	out	0x2c, r1	; 44
				SPSR   = 0;
     fa2:	1d bc       	out	0x2d, r1	; 45
     fa4:	08 95       	ret
	{
		SPI_Disable();
	}
	else
	{
		DDRB  &= ~((1 << 1) | (1 << 2));
     fa6:	84 b1       	in	r24, 0x04	; 4
     fa8:	89 7f       	andi	r24, 0xF9	; 249
     faa:	84 b9       	out	0x04, r24	; 4
		PORTB &= ~((1 << 0) | (1 << 3));
     fac:	85 b1       	in	r24, 0x05	; 5
     fae:	86 7f       	andi	r24, 0xF6	; 246
     fb0:	85 b9       	out	0x05, r24	; 5

		/* Must re-enable rescue clock once software ISP has exited, as the timer for the rescue clock is
		 * re-purposed for software SPI */
		ISPTarget_ConfigureRescueClock();
     fb2:	d8 cf       	rjmp	.-80     	; 0xf64 <ISPTarget_ConfigureRescueClock>

00000fb4 <ISPTarget_ConfigureSoftwareSPI>:
 *  \param[in] SCKDuration  Duration of the desired software ISP SCK clock
 */
void ISPTarget_ConfigureSoftwareSPI(const uint8_t SCKDuration)
{
	/* Configure Timer 1 for software SPI using the specified SCK duration */
	TIMSK1 = (1 << OCIE1A);
     fb4:	92 e0       	ldi	r25, 0x02	; 2
     fb6:	90 93 6f 00 	sts	0x006F, r25
	TCNT1  = 0;
     fba:	10 92 85 00 	sts	0x0085, r1
     fbe:	10 92 84 00 	sts	0x0084, r1
	OCR1A  = pgm_read_word(&TimerCompareFromSCKDuration[SCKDuration - sizeof(SPIMaskFromSCKDuration)]);
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	8c 55       	subi	r24, 0x5C	; 92
     fca:	9f 4f       	sbci	r25, 0xFF	; 255
     fcc:	fc 01       	movw	r30, r24
     fce:	25 91       	lpm	r18, Z+
     fd0:	34 91       	lpm	r19, Z+
     fd2:	30 93 89 00 	sts	0x0089, r19
     fd6:	20 93 88 00 	sts	0x0088, r18
	TCCR1A = 0;
     fda:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;
     fde:	10 92 81 00 	sts	0x0081, r1
}
     fe2:	08 95       	ret

00000fe4 <ISPTarget_EnableTargetISP>:
/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
	uint8_t SCKDuration = V2Params_GetParameterValue(PARAM_SCK_DURATION);
     fe4:	88 e9       	ldi	r24, 0x98	; 152
     fe6:	28 db       	rcall	.-2480   	; 0x638 <V2Params_GetParameterValue>

	if (SCKDuration < sizeof(SPIMaskFromSCKDuration))
     fe8:	87 30       	cpi	r24, 0x07	; 7
     fea:	e0 f4       	brcc	.+56     	; 0x1024 <ISPTarget_EnableTargetISP+0x40>
	{
		HardwareSPIMode = true;
     fec:	91 e0       	ldi	r25, 0x01	; 1
     fee:	90 93 67 01 	sts	0x0167, r25

		SPI_Init(pgm_read_byte(&SPIMaskFromSCKDuration[SCKDuration]) | SPI_ORDER_MSB_FIRST |
     ff2:	e8 2f       	mov	r30, r24
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	e4 51       	subi	r30, 0x14	; 20
     ff8:	fe 4f       	sbci	r31, 0xFE	; 254
     ffa:	e4 91       	lpm	r30, Z+
     ffc:	e0 61       	ori	r30, 0x10	; 16
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     ffe:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
    1000:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
    1002:	84 b1       	in	r24, 0x04	; 4
    1004:	86 60       	ori	r24, 0x06	; 6
    1006:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
    1008:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
    100a:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
    100c:	e6 ff       	sbrs	r30, 6
    100e:	03 c0       	rjmp	.+6      	; 0x1016 <ISPTarget_EnableTargetISP+0x32>
				  SPSR |= (1 << SPI2X);
    1010:	8d b5       	in	r24, 0x2d	; 45
    1012:	81 60       	ori	r24, 0x01	; 1
    1014:	02 c0       	rjmp	.+4      	; 0x101a <ISPTarget_EnableTargetISP+0x36>
				else
				  SPSR &= ~(1 << SPI2X);
    1016:	8d b5       	in	r24, 0x2d	; 45
    1018:	8e 7f       	andi	r24, 0xFE	; 254
    101a:	8d bd       	out	0x2d, r24	; 45

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
    101c:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
    101e:	e0 64       	ori	r30, 0x40	; 64
    1020:	ec bd       	out	0x2c, r30	; 44
    1022:	08 95       	ret
		                       SPI_SCK_LEAD_RISING | SPI_SAMPLE_LEADING | SPI_MODE_MASTER);
	}
	else
	{
		HardwareSPIMode = false;
    1024:	10 92 67 01 	sts	0x0167, r1

		DDRB  |= ((1 << 1) | (1 << 2));
    1028:	94 b1       	in	r25, 0x04	; 4
    102a:	96 60       	ori	r25, 0x06	; 6
    102c:	94 b9       	out	0x04, r25	; 4
		PORTB |= ((1 << 0) | (1 << 3));
    102e:	95 b1       	in	r25, 0x05	; 5
    1030:	99 60       	ori	r25, 0x09	; 9
    1032:	95 b9       	out	0x05, r25	; 5

		ISPTarget_ConfigureSoftwareSPI(SCKDuration);
    1034:	bf cf       	rjmp	.-130    	; 0xfb4 <ISPTarget_ConfigureSoftwareSPI>

00001036 <ISPTarget_TransferSoftSPIByte>:
 *
 *  \return Received byte of data from the attached target
 */
uint8_t ISPTarget_TransferSoftSPIByte(const uint8_t Byte)
{
	SoftSPI_Data          = Byte;
    1036:	80 93 a2 01 	sts	0x01A2, r24
	SoftSPI_BitsRemaining = 8;
    103a:	88 e0       	ldi	r24, 0x08	; 8
    103c:	80 93 a3 01 	sts	0x01A3, r24

	/* Set initial MOSI pin state according to the byte to be transferred */
	if (SoftSPI_Data & (1 << 7))
    1040:	80 91 a2 01 	lds	r24, 0x01A2
    1044:	87 ff       	sbrs	r24, 7
    1046:	02 c0       	rjmp	.+4      	; 0x104c <ISPTarget_TransferSoftSPIByte+0x16>
	  PORTB |=  (1 << 2);
    1048:	2a 9a       	sbi	0x05, 2	; 5
    104a:	01 c0       	rjmp	.+2      	; 0x104e <ISPTarget_TransferSoftSPIByte+0x18>
	else
	  PORTB &= ~(1 << 2);
    104c:	2a 98       	cbi	0x05, 2	; 5

	TCNT1  = 0;
    104e:	10 92 85 00 	sts	0x0085, r1
    1052:	10 92 84 00 	sts	0x0084, r1
	TCCR1B = ((1 << WGM12) | (1 << CS11));
    1056:	8a e0       	ldi	r24, 0x0A	; 10
    1058:	80 93 81 00 	sts	0x0081, r24
	while (SoftSPI_BitsRemaining && TimeoutTicksRemaining);
    105c:	80 91 a3 01 	lds	r24, 0x01A3
    1060:	88 23       	and	r24, r24
    1062:	19 f0       	breq	.+6      	; 0x106a <ISPTarget_TransferSoftSPIByte+0x34>
    1064:	8a b5       	in	r24, 0x2a	; 42
    1066:	88 23       	and	r24, r24
    1068:	c9 f7       	brne	.-14     	; 0x105c <ISPTarget_TransferSoftSPIByte+0x26>
	TCCR1B = 0;
    106a:	10 92 81 00 	sts	0x0081, r1

	return SoftSPI_Data;
    106e:	80 91 a2 01 	lds	r24, 0x01A2
}
    1072:	08 95       	ret

00001074 <ISPTarget_SendByte>:
		 *
		 *  \param[in] Byte  Byte of data to send to the attached target
		 */
		static inline void ISPTarget_SendByte(const uint8_t Byte)
		{
			if (HardwareSPIMode)
    1074:	90 91 67 01 	lds	r25, 0x0167
    1078:	99 23       	and	r25, r25
    107a:	29 f0       	breq	.+10     	; 0x1086 <ISPTarget_SendByte+0x12>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    107c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    107e:	0d b4       	in	r0, 0x2d	; 45
    1080:	07 fe       	sbrs	r0, 7
    1082:	fd cf       	rjmp	.-6      	; 0x107e <ISPTarget_SendByte+0xa>
    1084:	08 95       	ret
			  SPI_SendByte(Byte);
			else
			  ISPTarget_TransferSoftSPIByte(Byte);
    1086:	d7 cf       	rjmp	.-82     	; 0x1036 <ISPTarget_TransferSoftSPIByte>

00001088 <ISPTarget_ChangeTargetResetLine>:
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{
	if (ResetTarget)
    1088:	88 23       	and	r24, r24
    108a:	39 f0       	breq	.+14     	; 0x109a <ISPTarget_ChangeTargetResetLine+0x12>
	{
		AUX_LINE_DDR |= AUX_LINE_MASK;
    108c:	24 9a       	sbi	0x04, 4	; 4

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY)))
    108e:	8e e9       	ldi	r24, 0x9E	; 158
    1090:	d3 da       	rcall	.-2650   	; 0x638 <V2Params_GetParameterValue>
    1092:	88 23       	and	r24, r24
    1094:	19 f4       	brne	.+6      	; 0x109c <ISPTarget_ChangeTargetResetLine+0x14>
		  AUX_LINE_PORT |=  AUX_LINE_MASK;
    1096:	2c 9a       	sbi	0x05, 4	; 5
    1098:	08 95       	ret
		else
		  AUX_LINE_PORT &= ~AUX_LINE_MASK;
	}
	else
	{
		AUX_LINE_DDR  &= ~AUX_LINE_MASK;
    109a:	24 98       	cbi	0x04, 4	; 4
		AUX_LINE_PORT &= ~AUX_LINE_MASK;
    109c:	2c 98       	cbi	0x05, 4	; 5
    109e:	08 95       	ret

000010a0 <ISPTarget_WaitWhileTargetBusy>:
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
	do
	{
		ISPTarget_SendByte(0xF0);
    10a0:	80 ef       	ldi	r24, 0xF0	; 240
    10a2:	e8 df       	rcall	.-48     	; 0x1074 <ISPTarget_SendByte>
		ISPTarget_SendByte(0x00);
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	e6 df       	rcall	.-52     	; 0x1074 <ISPTarget_SendByte>
		ISPTarget_SendByte(0x00);
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	e4 df       	rcall	.-56     	; 0x1074 <ISPTarget_SendByte>
		 */
		static inline uint8_t ISPTarget_ReceiveByte(void)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
    10ac:	80 91 67 01 	lds	r24, 0x0167
    10b0:	88 23       	and	r24, r24
    10b2:	31 f0       	breq	.+12     	; 0x10c0 <ISPTarget_WaitWhileTargetBusy+0x20>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    10b4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    10b6:	0d b4       	in	r0, 0x2d	; 45
    10b8:	07 fe       	sbrs	r0, 7
    10ba:	fd cf       	rjmp	.-6      	; 0x10b6 <ISPTarget_WaitWhileTargetBusy+0x16>
				return SPDR;
    10bc:	8e b5       	in	r24, 0x2e	; 46
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <ISPTarget_WaitWhileTargetBusy+0x24>
			  ReceivedByte = SPI_ReceiveByte();
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(0x00);
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	b9 df       	rcall	.-142    	; 0x1036 <ISPTarget_TransferSoftSPIByte>
	}
	while ((ISPTarget_ReceiveByte() & 0x01) && TimeoutTicksRemaining);
    10c4:	80 ff       	sbrs	r24, 0
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <ISPTarget_WaitWhileTargetBusy+0x2e>
    10c8:	8a b5       	in	r24, 0x2a	; 42
    10ca:	88 23       	and	r24, r24
    10cc:	49 f7       	brne	.-46     	; 0x10a0 <ISPTarget_WaitWhileTargetBusy>

	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
    10ce:	8a b5       	in	r24, 0x2a	; 42
    10d0:	88 23       	and	r24, r24
    10d2:	11 f0       	breq	.+4      	; 0x10d8 <ISPTarget_WaitWhileTargetBusy+0x38>
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	08 95       	ret
    10d8:	81 e8       	ldi	r24, 0x81	; 129
}
    10da:	08 95       	ret

000010dc <ISPTarget_LoadExtendedAddress>:
 *  64KB boundary. This sends the command with the correct address as indicated by the current address
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
	ISPTarget_SendByte(LOAD_EXTENDED_ADDRESS_CMD);
    10dc:	8d e4       	ldi	r24, 0x4D	; 77
    10de:	ca df       	rcall	.-108    	; 0x1074 <ISPTarget_SendByte>
	ISPTarget_SendByte(0x00);
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	c8 df       	rcall	.-112    	; 0x1074 <ISPTarget_SendByte>
	ISPTarget_SendByte(CurrentAddress >> 16);
    10e4:	80 91 a8 01 	lds	r24, 0x01A8
    10e8:	c5 df       	rcall	.-118    	; 0x1074 <ISPTarget_SendByte>
	ISPTarget_SendByte(0x00);
    10ea:	80 e0       	ldi	r24, 0x00	; 0
}
    10ec:	c3 cf       	rjmp	.-122    	; 0x1074 <ISPTarget_SendByte>

000010ee <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	16 2f       	mov	r17, r22
    10f8:	f7 2e       	mov	r15, r23
    10fa:	e4 2e       	mov	r14, r20
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
    10fc:	e8 2f       	mov	r30, r24
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	ee 77       	andi	r30, 0x7E	; 126
    1102:	e8 30       	cpi	r30, 0x08	; 8
    1104:	f1 05       	cpc	r31, r1
    1106:	89 f1       	breq	.+98     	; 0x116a <ISPTarget_WaitForProgComplete+0x7c>
    1108:	e9 30       	cpi	r30, 0x09	; 9
    110a:	f1 05       	cpc	r31, r1
    110c:	3c f4       	brge	.+14     	; 0x111c <ISPTarget_WaitForProgComplete+0x2e>
    110e:	e2 30       	cpi	r30, 0x02	; 2
    1110:	f1 05       	cpc	r31, r1
    1112:	69 f0       	breq	.+26     	; 0x112e <ISPTarget_WaitForProgComplete+0x40>
    1114:	e4 30       	cpi	r30, 0x04	; 4
    1116:	f1 05       	cpc	r31, r1
    1118:	51 f5       	brne	.+84     	; 0x116e <ISPTarget_WaitForProgComplete+0x80>
    111a:	0c c0       	rjmp	.+24     	; 0x1134 <ISPTarget_WaitForProgComplete+0x46>
    111c:	e0 32       	cpi	r30, 0x20	; 32
    111e:	f1 05       	cpc	r31, r1
    1120:	49 f0       	breq	.+18     	; 0x1134 <ISPTarget_WaitForProgComplete+0x46>
    1122:	e0 34       	cpi	r30, 0x40	; 64
    1124:	f1 05       	cpc	r31, r1
    1126:	09 f1       	breq	.+66     	; 0x116a <ISPTarget_WaitForProgComplete+0x7c>
    1128:	e0 31       	cpi	r30, 0x10	; 16
    112a:	f1 05       	cpc	r31, r1
    112c:	01 f5       	brne	.+64     	; 0x116e <ISPTarget_WaitForProgComplete+0x80>
	{
		case PROG_MODE_WORD_TIMEDELAY_MASK:
		case PROG_MODE_PAGED_TIMEDELAY_MASK:
			ISPProtocol_DelayMS(DelayMS);
    112e:	82 2f       	mov	r24, r18
    1130:	c8 dd       	rcall	.-1136   	; 0xcc2 <ISPProtocol_DelayMS>
    1132:	1d c0       	rjmp	.+58     	; 0x116e <ISPTarget_WaitForProgComplete+0x80>
			break;
		case PROG_MODE_WORD_VALUE_MASK:
		case PROG_MODE_PAGED_VALUE_MASK:
			do
			{
				ISPTarget_SendByte(ReadMemCommand);
    1134:	80 2f       	mov	r24, r16
    1136:	9e df       	rcall	.-196    	; 0x1074 <ISPTarget_SendByte>
				ISPTarget_SendByte(PollAddress >> 8);
    1138:	8f 2d       	mov	r24, r15
    113a:	9c df       	rcall	.-200    	; 0x1074 <ISPTarget_SendByte>
				ISPTarget_SendByte(PollAddress & 0xFF);
    113c:	81 2f       	mov	r24, r17
    113e:	9a df       	rcall	.-204    	; 0x1074 <ISPTarget_SendByte>
		 */
		static inline uint8_t ISPTarget_TransferByte(const uint8_t Byte)
		{
			uint8_t ReceivedByte;

			if (HardwareSPIMode)
    1140:	80 91 67 01 	lds	r24, 0x0167
    1144:	88 23       	and	r24, r24
    1146:	31 f0       	breq	.+12     	; 0x1154 <ISPTarget_WaitForProgComplete+0x66>
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1148:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    114a:	0d b4       	in	r0, 0x2d	; 45
    114c:	07 fe       	sbrs	r0, 7
    114e:	fd cf       	rjmp	.-6      	; 0x114a <ISPTarget_WaitForProgComplete+0x5c>
				return SPDR;
    1150:	8e b5       	in	r24, 0x2e	; 46
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <ISPTarget_WaitForProgComplete+0x6a>
			  ReceivedByte = SPI_TransferByte(Byte);
			else
			  ReceivedByte = ISPTarget_TransferSoftSPIByte(Byte);
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	6f df       	rcall	.-290    	; 0x1036 <ISPTarget_TransferSoftSPIByte>
			}
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
    1158:	8e 15       	cp	r24, r14
    115a:	19 f4       	brne	.+6      	; 0x1162 <ISPTarget_WaitForProgComplete+0x74>
    115c:	8a b5       	in	r24, 0x2a	; 42
    115e:	88 23       	and	r24, r24
    1160:	49 f7       	brne	.-46     	; 0x1134 <ISPTarget_WaitForProgComplete+0x46>

			if (!(TimeoutTicksRemaining))
    1162:	8a b5       	in	r24, 0x2a	; 42
    1164:	88 23       	and	r24, r24
    1166:	29 f0       	breq	.+10     	; 0x1172 <ISPTarget_WaitForProgComplete+0x84>
    1168:	02 c0       	rjmp	.+4      	; 0x116e <ISPTarget_WaitForProgComplete+0x80>
			  ProgrammingStatus = STATUS_CMD_TOUT;

			break;
		case PROG_MODE_WORD_READYBUSY_MASK:
		case PROG_MODE_PAGED_READYBUSY_MASK:
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
    116a:	9a df       	rcall	.-204    	; 0x10a0 <ISPTarget_WaitWhileTargetBusy>
			break;
    116c:	03 c0       	rjmp	.+6      	; 0x1174 <ISPTarget_WaitForProgComplete+0x86>
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <ISPTarget_WaitForProgComplete+0x86>
				ISPTarget_SendByte(PollAddress & 0xFF);
			}
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);

			if (!(TimeoutTicksRemaining))
			  ProgrammingStatus = STATUS_CMD_TOUT;
    1172:	80 e8       	ldi	r24, 0x80	; 128
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	/* Program complete - reset timeout */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
    1174:	94 e6       	ldi	r25, 0x64	; 100
    1176:	9a bd       	out	0x2a, r25	; 42

	return ProgrammingStatus;
}
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	08 95       	ret

00001182 <SwapEndian_32>:
			 *
			 *  \return Input data with the individual bytes reversed.
			 */
			static inline uint32_t SwapEndian_32(const uint32_t DWord) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
			static inline uint32_t SwapEndian_32(const uint32_t DWord)
			{
    1182:	9b 01       	movw	r18, r22
				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
			}
    1184:	69 2f       	mov	r22, r25
    1186:	78 2f       	mov	r23, r24
    1188:	83 2f       	mov	r24, r19
    118a:	92 2f       	mov	r25, r18
    118c:	08 95       	ret

0000118e <SwapEndian_16>:
			 *
			 *  \return Input data with the individual bytes reversed.
			 */
			static inline uint16_t SwapEndian_16(const uint16_t Word) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
			static inline uint16_t SwapEndian_16(const uint16_t Word)
			{
    118e:	28 2f       	mov	r18, r24
				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
			}
    1190:	89 2f       	mov	r24, r25
    1192:	92 2f       	mov	r25, r18
    1194:	08 95       	ret

00001196 <XPROGProtocol_WriteMemory>:
	Endpoint_ClearIN();
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
    1196:	af 92       	push	r10
    1198:	bf 92       	push	r11
    119a:	cf 92       	push	r12
    119c:	df 92       	push	r13
    119e:	ef 92       	push	r14
    11a0:	ff 92       	push	r15
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	c8 50       	subi	r28, 0x08	; 8
    11b0:	d1 40       	sbci	r29, 0x01	; 1
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
		uint32_t Address;
		uint16_t Length;
		uint8_t  ProgData[256];
	} WriteMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params, (sizeof(WriteMemory_XPROG_Params) -
    11bc:	ce 01       	movw	r24, r28
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	68 e0       	ldi	r22, 0x08	; 8
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	40 e0       	ldi	r20, 0x00	; 0
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	9e d6       	rcall	.+3388   	; 0x1f06 <Endpoint_Read_Stream_LE>
	                                                    sizeof(WriteMemory_XPROG_Params).ProgData), NULL);
	WriteMemory_XPROG_Params.Address = SwapEndian_32(WriteMemory_XPROG_Params.Address);
    11ca:	6b 81       	ldd	r22, Y+3	; 0x03
    11cc:	7c 81       	ldd	r23, Y+4	; 0x04
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	9e 81       	ldd	r25, Y+6	; 0x06
    11d2:	d7 df       	rcall	.-82     	; 0x1182 <SwapEndian_32>
    11d4:	6b 83       	std	Y+3, r22	; 0x03
    11d6:	7c 83       	std	Y+4, r23	; 0x04
    11d8:	8d 83       	std	Y+5, r24	; 0x05
    11da:	9e 83       	std	Y+6, r25	; 0x06
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
    11dc:	8f 81       	ldd	r24, Y+7	; 0x07
    11de:	98 85       	ldd	r25, Y+8	; 0x08
    11e0:	d6 df       	rcall	.-84     	; 0x118e <SwapEndian_16>
    11e2:	bc 01       	movw	r22, r24
    11e4:	98 87       	std	Y+8, r25	; 0x08
    11e6:	8f 83       	std	Y+7, r24	; 0x07
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NULL);
    11e8:	ce 01       	movw	r24, r28
    11ea:	09 96       	adiw	r24, 0x09	; 9
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	8a d6       	rcall	.+3348   	; 0x1f06 <Endpoint_Read_Stream_LE>

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(WriteMemory_XPROG_Params) - sizeof(WriteMemory_XPROG_Params.ProgData)) +
    11f2:	8f 81       	ldd	r24, Y+7	; 0x07
    11f4:	98 85       	ldd	r25, Y+8	; 0x08
    11f6:	09 96       	adiw	r24, 0x09	; 9
	    WriteMemory_XPROG_Params.Length) % AVRISP_DATA_EPSIZE == 0)
    11f8:	8f 73       	andi	r24, 0x3F	; 63
    11fa:	90 70       	andi	r25, 0x00	; 0
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NULL);

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(WriteMemory_XPROG_Params) - sizeof(WriteMemory_XPROG_Params.ProgData)) +
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	39 f4       	brne	.+14     	; 0x120e <XPROGProtocol_WriteMemory+0x78>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1200:	80 91 e8 00 	lds	r24, 0x00E8
    1204:	8b 77       	andi	r24, 0x7B	; 123
    1206:	80 93 e8 00 	sts	0x00E8, r24
	    WriteMemory_XPROG_Params.Length) % AVRISP_DATA_EPSIZE == 0)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
    120a:	0e 94 84 11 	call	0x2308	; 0x2308 <Endpoint_WaitUntilReady>
    120e:	80 91 e8 00 	lds	r24, 0x00E8
    1212:	8b 77       	andi	r24, 0x7B	; 123
    1214:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1218:	82 e0       	ldi	r24, 0x02	; 2
    121a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    121e:	80 91 ec 00 	lds	r24, 0x00EC
    1222:	81 60       	ori	r24, 0x01	; 1
    1224:	80 93 ec 00 	sts	0x00EC, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    1228:	80 91 a4 01 	lds	r24, 0x01A4
    122c:	88 23       	and	r24, r24
    122e:	a1 f5       	brne	.+104    	; 0x1298 <XPROGProtocol_WriteMemory+0x102>
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
		bool    PagedMemory      = true;

		switch (WriteMemory_XPROG_Params.MemoryType)
    1230:	29 81       	ldd	r18, Y+1	; 0x01
    1232:	21 50       	subi	r18, 0x01	; 1
    1234:	26 30       	cpi	r18, 0x06	; 6
    1236:	a0 f4       	brcc	.+40     	; 0x1260 <XPROGProtocol_WriteMemory+0xca>
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	f9 01       	movw	r30, r18
    123c:	e8 58       	subi	r30, 0x88	; 136
    123e:	fe 4f       	sbci	r31, 0xFE	; 254
    1240:	90 81       	ld	r25, Z
    1242:	f9 01       	movw	r30, r18
    1244:	e2 58       	subi	r30, 0x82	; 130
    1246:	fe 4f       	sbci	r31, 0xFE	; 254
    1248:	80 81       	ld	r24, Z
    124a:	f9 01       	movw	r30, r18
    124c:	ec 57       	subi	r30, 0x7C	; 124
    124e:	fe 4f       	sbci	r31, 0xFE	; 254
    1250:	60 81       	ld	r22, Z
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
    1252:	26 57       	subi	r18, 0x76	; 118
    1254:	3e 4f       	sbci	r19, 0xFE	; 254
    1256:	f9 01       	movw	r30, r18
    1258:	20 81       	ld	r18, Z
    125a:	22 23       	and	r18, r18
    125c:	99 f0       	breq	.+38     	; 0x1284 <XPROGProtocol_WriteMemory+0xee>
    125e:	03 c0       	rjmp	.+6      	; 0x1266 <XPROGProtocol_WriteMemory+0xd0>
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
		bool    PagedMemory      = true;

		switch (WriteMemory_XPROG_Params.MemoryType)
    1260:	66 e2       	ldi	r22, 0x26	; 38
    1262:	83 e2       	ldi	r24, 0x23	; 35
    1264:	9e e2       	ldi	r25, 0x2E	; 46
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
    1266:	eb 80       	ldd	r14, Y+3	; 0x03
    1268:	fc 80       	ldd	r15, Y+4	; 0x04
    126a:	0d 81       	ldd	r16, Y+5	; 0x05
    126c:	1e 81       	ldd	r17, Y+6	; 0x06
    126e:	af 80       	ldd	r10, Y+7	; 0x07
    1270:	b8 84       	ldd	r11, Y+8	; 0x08
    1272:	49 2f       	mov	r20, r25
    1274:	2a 81       	ldd	r18, Y+2	; 0x02
    1276:	99 e0       	ldi	r25, 0x09	; 9
    1278:	c9 2e       	mov	r12, r25
    127a:	d1 2c       	mov	r13, r1
    127c:	cc 0e       	add	r12, r28
    127e:	dd 1e       	adc	r13, r29
    1280:	03 d4       	rcall	.+2054   	; 0x1a88 <XMEGANVM_WritePageMemory>
    1282:	12 c0       	rjmp	.+36     	; 0x12a8 <XPROGProtocol_WriteMemory+0x112>
													   WriteMemory_XPROG_Params.PageMode, WriteMemory_XPROG_Params.Address,
													   WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length))) ||
		   (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, WriteMemory_XPROG_Params.Address,
    1284:	2b 81       	ldd	r18, Y+3	; 0x03
    1286:	3c 81       	ldd	r19, Y+4	; 0x04
    1288:	4d 81       	ldd	r20, Y+5	; 0x05
    128a:	5e 81       	ldd	r21, Y+6	; 0x06
    128c:	89 2f       	mov	r24, r25
    128e:	ba 01       	movw	r22, r20
    1290:	a9 01       	movw	r20, r18
    1292:	29 85       	ldd	r18, Y+9	; 0x09
    1294:	d5 d3       	rcall	.+1962   	; 0x1a40 <XMEGANVM_WriteByteMemory>
    1296:	08 c0       	rjmp	.+16     	; 0x12a8 <XPROGProtocol_WriteMemory+0x112>
		}
	}
	else
	{
		/* Send write command to the TPI device, indicate timeout if occurred */
		if (!(TINYNVM_WriteMemory(WriteMemory_XPROG_Params.Address, WriteMemory_XPROG_Params.ProgData,
    1298:	4f 81       	ldd	r20, Y+7	; 0x07
    129a:	58 85       	ldd	r21, Y+8	; 0x08
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	be 01       	movw	r22, r28
    12a2:	67 5f       	subi	r22, 0xF7	; 247
    12a4:	7f 4f       	sbci	r23, 0xFF	; 255
    12a6:	7b d5       	rcall	.+2806   	; 0x1d9e <TINYNVM_WriteMemory>
    12a8:	88 23       	and	r24, r24
    12aa:	11 f0       	breq	.+4      	; 0x12b0 <XPROGProtocol_WriteMemory+0x11a>
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <XPROGProtocol_WriteMemory+0x11c>
	{
		/* Send write command to the TPI device, indicate timeout if occurred */
		if (!(TINYNVM_WriteMemory(WriteMemory_XPROG_Params.Address, WriteMemory_XPROG_Params.ProgData,
		      WriteMemory_XPROG_Params.Length)))
		{
			ReturnStatus = XPRG_ERR_TIMEOUT;
    12b0:	83 e0       	ldi	r24, 0x03	; 3
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12b2:	90 e5       	ldi	r25, 0x50	; 80
    12b4:	90 93 f1 00 	sts	0x00F1, r25
    12b8:	94 e0       	ldi	r25, 0x04	; 4
    12ba:	90 93 f1 00 	sts	0x00F1, r25
    12be:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12c2:	80 91 e8 00 	lds	r24, 0x00E8
    12c6:	8e 77       	andi	r24, 0x7E	; 126
    12c8:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_WRITE_MEM);
	Endpoint_Write_8(ReturnStatus);
	Endpoint_ClearIN();
}
    12cc:	c8 5f       	subi	r28, 0xF8	; 248
    12ce:	de 4f       	sbci	r29, 0xFE	; 254
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	ff 90       	pop	r15
    12e4:	ef 90       	pop	r14
    12e6:	df 90       	pop	r13
    12e8:	cf 90       	pop	r12
    12ea:	bf 90       	pop	r11
    12ec:	af 90       	pop	r10
    12ee:	08 95       	ret

000012f0 <XPROGProtocol_ReadMemory>:

/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	c7 50       	subi	r28, 0x07	; 7
    12fa:	d1 40       	sbci	r29, 0x01	; 1
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
		uint8_t  MemoryType;
		uint32_t Address;
		uint16_t Length;
	} ReadMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadMemory_XPROG_Params, sizeof(ReadMemory_XPROG_Params), NULL);
    1306:	ce 01       	movw	r24, r28
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	67 e0       	ldi	r22, 0x07	; 7
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	f9 d5       	rcall	.+3058   	; 0x1f06 <Endpoint_Read_Stream_LE>
	ReadMemory_XPROG_Params.Address = SwapEndian_32(ReadMemory_XPROG_Params.Address);
    1314:	6a 81       	ldd	r22, Y+2	; 0x02
    1316:	7b 81       	ldd	r23, Y+3	; 0x03
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	9d 81       	ldd	r25, Y+5	; 0x05
    131c:	32 df       	rcall	.-412    	; 0x1182 <SwapEndian_32>
    131e:	6a 83       	std	Y+2, r22	; 0x02
    1320:	7b 83       	std	Y+3, r23	; 0x03
    1322:	8c 83       	std	Y+4, r24	; 0x04
    1324:	9d 83       	std	Y+5, r25	; 0x05
	ReadMemory_XPROG_Params.Length  = SwapEndian_16(ReadMemory_XPROG_Params.Length);
    1326:	8e 81       	ldd	r24, Y+6	; 0x06
    1328:	9f 81       	ldd	r25, Y+7	; 0x07
    132a:	31 df       	rcall	.-414    	; 0x118e <SwapEndian_16>
    132c:	9f 83       	std	Y+7, r25	; 0x07
    132e:	8e 83       	std	Y+6, r24	; 0x06
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1330:	80 91 e8 00 	lds	r24, 0x00E8
    1334:	8b 77       	andi	r24, 0x7B	; 123
    1336:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    133a:	82 e0       	ldi	r24, 0x02	; 2
    133c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1340:	80 91 ec 00 	lds	r24, 0x00EC
    1344:	81 60       	ori	r24, 0x01	; 1
    1346:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ReadBuffer[256];

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    134a:	80 91 a4 01 	lds	r24, 0x01A4
    134e:	2e 81       	ldd	r18, Y+6	; 0x06
    1350:	3f 81       	ldd	r19, Y+7	; 0x07
    1352:	ae 01       	movw	r20, r28
    1354:	48 5f       	subi	r20, 0xF8	; 248
    1356:	5f 4f       	sbci	r21, 0xFF	; 255
    1358:	88 23       	and	r24, r24
    135a:	31 f4       	brne	.+12     	; 0x1368 <XPROGProtocol_ReadMemory+0x78>
	{
		/* Read the PDI target's memory, indicate timeout if occurred */
		if (!(XMEGANVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
    135c:	6a 81       	ldd	r22, Y+2	; 0x02
    135e:	7b 81       	ldd	r23, Y+3	; 0x03
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	9d 81       	ldd	r25, Y+5	; 0x05
    1364:	32 d3       	rcall	.+1636   	; 0x19ca <XMEGANVM_ReadMemory>
    1366:	05 c0       	rjmp	.+10     	; 0x1372 <XPROGProtocol_ReadMemory+0x82>
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		/* Read the TPI target's memory, indicate timeout if occurred */
		if (!(TINYNVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	9b 81       	ldd	r25, Y+3	; 0x03
    136c:	ba 01       	movw	r22, r20
    136e:	a9 01       	movw	r20, r18
    1370:	e9 d4       	rcall	.+2514   	; 0x1d44 <TINYNVM_ReadMemory>
    1372:	88 23       	and	r24, r24
    1374:	11 f0       	breq	.+4      	; 0x137a <XPROGProtocol_ReadMemory+0x8a>
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	01 c0       	rjmp	.+2      	; 0x137c <XPROGProtocol_ReadMemory+0x8c>
	}
	else
	{
		/* Read the TPI target's memory, indicate timeout if occurred */
		if (!(TINYNVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
		  ReturnStatus = XPRG_ERR_TIMEOUT;
    137a:	83 e0       	ldi	r24, 0x03	; 3
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    137c:	90 e5       	ldi	r25, 0x50	; 80
    137e:	90 93 f1 00 	sts	0x00F1, r25
    1382:	95 e0       	ldi	r25, 0x05	; 5
    1384:	90 93 f1 00 	sts	0x00F1, r25
    1388:	80 93 f1 00 	sts	0x00F1, r24

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_READ_MEM);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
    138c:	88 23       	and	r24, r24
    138e:	39 f4       	brne	.+14     	; 0x139e <XPROGProtocol_ReadMemory+0xae>
	  Endpoint_Write_Stream_LE(ReadBuffer, ReadMemory_XPROG_Params.Length, NULL);
    1390:	6e 81       	ldd	r22, Y+6	; 0x06
    1392:	7f 81       	ldd	r23, Y+7	; 0x07
    1394:	ce 01       	movw	r24, r28
    1396:	08 96       	adiw	r24, 0x08	; 8
    1398:	40 e0       	ldi	r20, 0x00	; 0
    139a:	50 e0       	ldi	r21, 0x00	; 0
    139c:	56 d5       	rcall	.+2732   	; 0x1e4a <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    139e:	80 91 e8 00 	lds	r24, 0x00E8
    13a2:	8e 77       	andi	r24, 0x7E	; 126
    13a4:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearIN();
}
    13a8:	c9 5f       	subi	r28, 0xF9	; 249
    13aa:	de 4f       	sbci	r29, 0xFE	; 254
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <XPROGProtocol_SetMode>:

/** Handler for the CMD_XPROG_SETMODE command, which sets the programmer-to-target protocol used for PDI/TPI
 *  programming.
 */
void XPROGProtocol_SetMode(void)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	0f 92       	push	r0
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
	struct
	{
		uint8_t Protocol;
	} SetMode_XPROG_Params;

	Endpoint_Read_Stream_LE(&SetMode_XPROG_Params, sizeof(SetMode_XPROG_Params), NULL);
    13c6:	ce 01       	movw	r24, r28
    13c8:	01 96       	adiw	r24, 0x01	; 1
    13ca:	61 e0       	ldi	r22, 0x01	; 1
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	40 e0       	ldi	r20, 0x00	; 0
    13d0:	50 e0       	ldi	r21, 0x00	; 0
    13d2:	99 d5       	rcall	.+2866   	; 0x1f06 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13d4:	80 91 e8 00 	lds	r24, 0x00E8
    13d8:	8b 77       	andi	r24, 0x7B	; 123
    13da:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13de:	82 e0       	ldi	r24, 0x02	; 2
    13e0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    13e4:	80 91 ec 00 	lds	r24, 0x00EC
    13e8:	81 60       	ori	r24, 0x01	; 1
    13ea:	80 93 ec 00 	sts	0x00EC, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	XPROG_SelectedProtocol = SetMode_XPROG_Params.Protocol;
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	80 93 a4 01 	sts	0x01A4, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    13f4:	81 e5       	ldi	r24, 0x51	; 81
    13f6:	80 93 f1 00 	sts	0x00F1, r24

	Endpoint_Write_8(CMD_XPROG_SETMODE);
	Endpoint_Write_8((SetMode_XPROG_Params.Protocol != XPRG_PROTOCOL_JTAG) ? STATUS_CMD_OK : STATUS_CMD_FAILED);
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	11 f0       	breq	.+4      	; 0x1404 <XPROGProtocol_SetMode+0x48>
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <XPROGProtocol_SetMode+0x4a>
    1404:	80 ec       	ldi	r24, 0xC0	; 192
    1406:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    140a:	80 91 e8 00 	lds	r24, 0x00E8
    140e:	8e 77       	andi	r24, 0x7E	; 126
    1410:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();
}
    1414:	0f 90       	pop	r0
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <XPROGProtocol_Command>:

/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
void XPROGProtocol_Command(void)
{
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	29 97       	sbiw	r28, 0x09	; 9
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1430:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t XPROGCommand = Endpoint_Read_8();

	switch (XPROGCommand)
    1434:	84 30       	cpi	r24, 0x04	; 4
    1436:	09 f4       	brne	.+2      	; 0x143a <XPROGProtocol_Command+0x1e>
    1438:	94 c0       	rjmp	.+296    	; 0x1562 <XPROGProtocol_Command+0x146>
    143a:	85 30       	cpi	r24, 0x05	; 5
    143c:	48 f4       	brcc	.+18     	; 0x1450 <XPROGProtocol_Command+0x34>
    143e:	82 30       	cpi	r24, 0x02	; 2
    1440:	89 f1       	breq	.+98     	; 0x14a4 <XPROGProtocol_Command+0x88>
    1442:	83 30       	cpi	r24, 0x03	; 3
    1444:	08 f0       	brcs	.+2      	; 0x1448 <XPROGProtocol_Command+0x2c>
    1446:	4a c0       	rjmp	.+148    	; 0x14dc <XPROGProtocol_Command+0xc0>
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	09 f0       	breq	.+2      	; 0x144e <XPROGProtocol_Command+0x32>
    144c:	27 c1       	rjmp	.+590    	; 0x169c <XPROGProtocol_Command+0x280>
    144e:	0a c0       	rjmp	.+20     	; 0x1464 <XPROGProtocol_Command+0x48>
    1450:	86 30       	cpi	r24, 0x06	; 6
    1452:	09 f4       	brne	.+2      	; 0x1456 <XPROGProtocol_Command+0x3a>
    1454:	8a c0       	rjmp	.+276    	; 0x156a <XPROGProtocol_Command+0x14e>
    1456:	86 30       	cpi	r24, 0x06	; 6
    1458:	08 f4       	brcc	.+2      	; 0x145c <XPROGProtocol_Command+0x40>
    145a:	85 c0       	rjmp	.+266    	; 0x1566 <XPROGProtocol_Command+0x14a>
    145c:	87 30       	cpi	r24, 0x07	; 7
    145e:	09 f0       	breq	.+2      	; 0x1462 <XPROGProtocol_Command+0x46>
    1460:	1d c1       	rjmp	.+570    	; 0x169c <XPROGProtocol_Command+0x280>
    1462:	c7 c0       	rjmp	.+398    	; 0x15f2 <XPROGProtocol_Command+0x1d6>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1464:	80 91 e8 00 	lds	r24, 0x00E8
    1468:	8b 77       	andi	r24, 0x7B	; 123
    146a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1474:	80 91 ec 00 	lds	r24, 0x00EC
    1478:	81 60       	ori	r24, 0x01	; 1
    147a:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    147e:	80 91 a4 01 	lds	r24, 0x01A4
    1482:	88 23       	and	r24, r24
    1484:	11 f4       	brne	.+4      	; 0x148a <XPROGProtocol_Command+0x6e>
	  NVMBusEnabled = XMEGANVM_EnablePDI();
    1486:	1d d2       	rcall	.+1082   	; 0x18c2 <XMEGANVM_EnablePDI>
    1488:	05 c0       	rjmp	.+10     	; 0x1494 <XPROGProtocol_Command+0x78>
	else if (XPROG_SelectedProtocol == XPRG_PROTOCOL_TPI)
    148a:	82 30       	cpi	r24, 0x02	; 2
    148c:	11 f4       	brne	.+4      	; 0x1492 <XPROGProtocol_Command+0x76>
	  NVMBusEnabled = TINYNVM_EnableTPI();
    148e:	11 d4       	rcall	.+2082   	; 0x1cb2 <TINYNVM_EnableTPI>
    1490:	01 c0       	rjmp	.+2      	; 0x1494 <XPROGProtocol_Command+0x78>
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;
    1492:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1494:	90 e5       	ldi	r25, 0x50	; 80
    1496:	90 93 f1 00 	sts	0x00F1, r25
    149a:	91 e0       	ldi	r25, 0x01	; 1
    149c:	90 93 f1 00 	sts	0x00F1, r25
}

/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
void XPROGProtocol_Command(void)
    14a0:	89 27       	eor	r24, r25
    14a2:	f5 c0       	rjmp	.+490    	; 0x168e <XPROGProtocol_Command+0x272>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    14a4:	90 91 e8 00 	lds	r25, 0x00E8
    14a8:	9b 77       	andi	r25, 0x7B	; 123
    14aa:	90 93 e8 00 	sts	0x00E8, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14ae:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    14b2:	80 91 ec 00 	lds	r24, 0x00EC
    14b6:	81 60       	ori	r24, 0x01	; 1
    14b8:	80 93 ec 00 	sts	0x00EC, r24
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    14bc:	80 91 a4 01 	lds	r24, 0x01A4
    14c0:	88 23       	and	r24, r24
    14c2:	11 f4       	brne	.+4      	; 0x14c8 <XPROGProtocol_Command+0xac>
	  XMEGANVM_DisablePDI();
    14c4:	40 d2       	rcall	.+1152   	; 0x1946 <XMEGANVM_DisablePDI>
    14c6:	01 c0       	rjmp	.+2      	; 0x14ca <XPROGProtocol_Command+0xae>
	else
	  TINYNVM_DisableTPI();
    14c8:	32 d4       	rcall	.+2148   	; 0x1d2e <TINYNVM_DisableTPI>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14ca:	80 e5       	ldi	r24, 0x50	; 80
    14cc:	80 93 f1 00 	sts	0x00F1, r24
    14d0:	82 e0       	ldi	r24, 0x02	; 2
    14d2:	80 93 f1 00 	sts	0x00F1, r24
    14d6:	10 92 f1 00 	sts	0x00F1, r1
    14da:	db c0       	rjmp	.+438    	; 0x1692 <XPROGProtocol_Command+0x276>
	{
		uint8_t  MemoryType;
		uint32_t Address;
	} Erase_XPROG_Params;

	Endpoint_Read_Stream_LE(&Erase_XPROG_Params, sizeof(Erase_XPROG_Params), NULL);
    14dc:	ce 01       	movw	r24, r28
    14de:	05 96       	adiw	r24, 0x05	; 5
    14e0:	65 e0       	ldi	r22, 0x05	; 5
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	40 e0       	ldi	r20, 0x00	; 0
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	0e d5       	rcall	.+2588   	; 0x1f06 <Endpoint_Read_Stream_LE>
	Erase_XPROG_Params.Address = SwapEndian_32(Erase_XPROG_Params.Address);
    14ea:	6e 81       	ldd	r22, Y+6	; 0x06
    14ec:	7f 81       	ldd	r23, Y+7	; 0x07
    14ee:	88 85       	ldd	r24, Y+8	; 0x08
    14f0:	99 85       	ldd	r25, Y+9	; 0x09
    14f2:	47 de       	rcall	.-882    	; 0x1182 <SwapEndian_32>
    14f4:	6e 83       	std	Y+6, r22	; 0x06
    14f6:	7f 83       	std	Y+7, r23	; 0x07
    14f8:	88 87       	std	Y+8, r24	; 0x08
    14fa:	99 87       	std	Y+9, r25	; 0x09
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    14fc:	80 91 e8 00 	lds	r24, 0x00E8
    1500:	8b 77       	andi	r24, 0x7B	; 123
    1502:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1506:	82 e0       	ldi	r24, 0x02	; 2
    1508:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    150c:	80 91 ec 00 	lds	r24, 0x00EC
    1510:	81 60       	ori	r24, 0x01	; 1
    1512:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t EraseCommand;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    1516:	80 91 a4 01 	lds	r24, 0x01A4
    151a:	ed 81       	ldd	r30, Y+5	; 0x05
    151c:	88 23       	and	r24, r24
    151e:	79 f4       	brne	.+30     	; 0x153e <XPROGProtocol_Command+0x122>
	{
		/* Determine which NVM command to send to the device depending on the memory to erase */
		switch (Erase_XPROG_Params.MemoryType)
    1520:	e1 50       	subi	r30, 0x01	; 1
    1522:	e8 30       	cpi	r30, 0x08	; 8
    1524:	28 f4       	brcc	.+10     	; 0x1530 <XPROGProtocol_Command+0x114>
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	e0 59       	subi	r30, 0x90	; 144
    152a:	fe 4f       	sbci	r31, 0xFE	; 254
    152c:	80 81       	ld	r24, Z
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <XPROGProtocol_Command+0x116>
    1530:	80 e0       	ldi	r24, 0x00	; 0
				EraseCommand = XMEGA_NVM_CMD_NOOP;
				break;
		}

		/* Erase the target memory, indicate timeout if occurred */
		if (!(XMEGANVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
    1532:	4e 81       	ldd	r20, Y+6	; 0x06
    1534:	5f 81       	ldd	r21, Y+7	; 0x07
    1536:	68 85       	ldd	r22, Y+8	; 0x08
    1538:	79 85       	ldd	r23, Y+9	; 0x09
    153a:	0d d3       	rcall	.+1562   	; 0x1b56 <XMEGANVM_EraseMemory>
    153c:	08 c0       	rjmp	.+16     	; 0x154e <XPROGProtocol_Command+0x132>
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		if (Erase_XPROG_Params.MemoryType == XPRG_ERASE_CHIP)
    153e:	e1 30       	cpi	r30, 0x01	; 1
    1540:	11 f4       	brne	.+4      	; 0x1546 <XPROGProtocol_Command+0x12a>
		  EraseCommand = TINY_NVM_CMD_CHIPERASE;
    1542:	80 e1       	ldi	r24, 0x10	; 16
    1544:	01 c0       	rjmp	.+2      	; 0x1548 <XPROGProtocol_Command+0x12c>
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;
    1546:	84 e1       	ldi	r24, 0x14	; 20

		/* Erase the target memory, indicate timeout if occurred */
		if (!(TINYNVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
    1548:	6e 81       	ldd	r22, Y+6	; 0x06
    154a:	7f 81       	ldd	r23, Y+7	; 0x07
    154c:	63 d4       	rcall	.+2246   	; 0x1e14 <TINYNVM_EraseMemory>
    154e:	88 23       	and	r24, r24
    1550:	11 f0       	breq	.+4      	; 0x1556 <XPROGProtocol_Command+0x13a>
}

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	01 c0       	rjmp	.+2      	; 0x1558 <XPROGProtocol_Command+0x13c>
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;

		/* Erase the target memory, indicate timeout if occurred */
		if (!(TINYNVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
		  ReturnStatus = XPRG_ERR_TIMEOUT;
    1556:	83 e0       	ldi	r24, 0x03	; 3
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1558:	90 e5       	ldi	r25, 0x50	; 80
    155a:	90 93 f1 00 	sts	0x00F1, r25
    155e:	93 e0       	ldi	r25, 0x03	; 3
    1560:	94 c0       	rjmp	.+296    	; 0x168a <XPROGProtocol_Command+0x26e>
			break;
		case XPRG_CMD_ERASE:
			XPROGProtocol_Erase();
			break;
		case XPRG_CMD_WRITE_MEM:
			XPROGProtocol_WriteMemory();
    1562:	19 de       	rcall	.-974    	; 0x1196 <XPROGProtocol_WriteMemory>
			break;
    1564:	9b c0       	rjmp	.+310    	; 0x169c <XPROGProtocol_Command+0x280>
		case XPRG_CMD_READ_MEM:
			XPROGProtocol_ReadMemory();
    1566:	c4 de       	rcall	.-632    	; 0x12f0 <XPROGProtocol_ReadMemory>
			break;
    1568:	99 c0       	rjmp	.+306    	; 0x169c <XPROGProtocol_Command+0x280>
	struct
	{
		uint8_t CRCType;
	} ReadCRC_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadCRC_XPROG_Params, sizeof(ReadCRC_XPROG_Params), NULL);
    156a:	ce 01       	movw	r24, r28
    156c:	05 96       	adiw	r24, 0x05	; 5
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	50 e0       	ldi	r21, 0x00	; 0
    1576:	c7 d4       	rcall	.+2446   	; 0x1f06 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1578:	80 91 e8 00 	lds	r24, 0x00E8
    157c:	8b 77       	andi	r24, 0x7B	; 123
    157e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1582:	82 e0       	ldi	r24, 0x02	; 2
    1584:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1588:	80 91 ec 00 	lds	r24, 0x00EC
    158c:	81 60       	ori	r24, 0x01	; 1
    158e:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint32_t MemoryCRC;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
    1592:	80 91 a4 01 	lds	r24, 0x01A4
    1596:	88 23       	and	r24, r24
    1598:	91 f4       	brne	.+36     	; 0x15be <XPROGProtocol_Command+0x1a2>
	{
		uint8_t CRCCommand;

		/* Determine which NVM command to send to the device depending on the memory to CRC */
		switch (ReadCRC_XPROG_Params.CRCType)
    159a:	ed 81       	ldd	r30, Y+5	; 0x05
    159c:	e1 50       	subi	r30, 0x01	; 1
    159e:	e2 30       	cpi	r30, 0x02	; 2
    15a0:	28 f4       	brcc	.+10     	; 0x15ac <XPROGProtocol_Command+0x190>
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	e0 57       	subi	r30, 0x70	; 112
    15a6:	fe 4f       	sbci	r31, 0xFE	; 254
    15a8:	80 81       	ld	r24, Z
    15aa:	01 c0       	rjmp	.+2      	; 0x15ae <XPROGProtocol_Command+0x192>
    15ac:	88 e7       	ldi	r24, 0x78	; 120
				CRCCommand = XMEGA_NVM_CMD_FLASHCRC;
				break;
		}

		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
    15ae:	be 01       	movw	r22, r28
    15b0:	6f 5f       	subi	r22, 0xFF	; 255
    15b2:	7f 4f       	sbci	r23, 0xFF	; 255
    15b4:	d3 d1       	rcall	.+934    	; 0x195c <XMEGANVM_GetMemoryCRC>
    15b6:	88 23       	and	r24, r24
    15b8:	21 f0       	breq	.+8      	; 0x15c2 <XPROGProtocol_Command+0x1a6>
/** Handler for the XPROG CRC command to read a specific memory space's CRC value for comparison between the
 *  attached device's memory and a data set on the host.
 */
static void XPROGProtocol_ReadCRC(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	03 c0       	rjmp	.+6      	; 0x15c4 <XPROGProtocol_Command+0x1a8>
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		/* TPI does not support memory CRC */
		ReturnStatus = XPRG_ERR_FAILED;
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	01 c0       	rjmp	.+2      	; 0x15c4 <XPROGProtocol_Command+0x1a8>
				break;
		}

		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
		  ReturnStatus = XPRG_ERR_TIMEOUT;
    15c2:	83 e0       	ldi	r24, 0x03	; 3
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    15c4:	90 e5       	ldi	r25, 0x50	; 80
    15c6:	90 93 f1 00 	sts	0x00F1, r25
    15ca:	96 e0       	ldi	r25, 0x06	; 6
    15cc:	90 93 f1 00 	sts	0x00F1, r25
    15d0:	80 93 f1 00 	sts	0x00F1, r24

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_CRC);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
    15d4:	88 23       	and	r24, r24
    15d6:	09 f0       	breq	.+2      	; 0x15da <XPROGProtocol_Command+0x1be>
    15d8:	5c c0       	rjmp	.+184    	; 0x1692 <XPROGProtocol_Command+0x276>
	{
		Endpoint_Write_8(MemoryCRC >> 16);
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	9a 81       	ldd	r25, Y+2	; 0x02
    15de:	ab 81       	ldd	r26, Y+3	; 0x03
    15e0:	bc 81       	ldd	r27, Y+4	; 0x04
    15e2:	cd 01       	movw	r24, r26
    15e4:	aa 27       	eor	r26, r26
    15e6:	bb 27       	eor	r27, r27
    15e8:	80 93 f1 00 	sts	0x00F1, r24
		Endpoint_Write_16_LE(MemoryCRC & 0xFFFF);
    15ec:	99 81       	ldd	r25, Y+1	; 0x01
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	4c c0       	rjmp	.+152    	; 0x168a <XPROGProtocol_Command+0x26e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    15f2:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t ReturnStatus = XPRG_ERR_OK;

	uint8_t XPROGParam = Endpoint_Read_8();

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
    15f6:	83 30       	cpi	r24, 0x03	; 3
    15f8:	31 f1       	breq	.+76     	; 0x1646 <XPROGProtocol_Command+0x22a>
    15fa:	84 30       	cpi	r24, 0x04	; 4
    15fc:	28 f4       	brcc	.+10     	; 0x1608 <XPROGProtocol_Command+0x1ec>
    15fe:	81 30       	cpi	r24, 0x01	; 1
    1600:	41 f0       	breq	.+16     	; 0x1612 <XPROGProtocol_Command+0x1f6>
    1602:	82 30       	cpi	r24, 0x02	; 2
    1604:	81 f5       	brne	.+96     	; 0x1666 <XPROGProtocol_Command+0x24a>
    1606:	16 c0       	rjmp	.+44     	; 0x1634 <XPROGProtocol_Command+0x218>
    1608:	84 30       	cpi	r24, 0x04	; 4
    160a:	11 f1       	breq	.+68     	; 0x1650 <XPROGProtocol_Command+0x234>
    160c:	85 30       	cpi	r24, 0x05	; 5
    160e:	59 f5       	brne	.+86     	; 0x1666 <XPROGProtocol_Command+0x24a>
    1610:	24 c0       	rjmp	.+72     	; 0x165a <XPROGProtocol_Command+0x23e>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[3] = UEDATX;
    1612:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[2] = UEDATX;
    1616:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[1] = UEDATX;
    161a:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[0] = UEDATX;
    161e:	30 91 f1 00 	lds	r19, 0x00F1
	{
		case XPRG_PARAM_NVMBASE:
			XPROG_Param_NVMBase       = Endpoint_Read_32_BE();
    1622:	30 93 68 01 	sts	0x0168, r19
    1626:	20 93 69 01 	sts	0x0169, r18
    162a:	90 93 6a 01 	sts	0x016A, r25
    162e:	80 93 6b 01 	sts	0x016B, r24
    1632:	17 c0       	rjmp	.+46     	; 0x1662 <XPROGProtocol_Command+0x246>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[1] = UEDATX;
    1634:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[0] = UEDATX;
    1638:	90 91 f1 00 	lds	r25, 0x00F1
			break;
		case XPRG_PARAM_EEPPAGESIZE:
			XPROG_Param_EEPageSize    = Endpoint_Read_16_BE();
    163c:	90 93 6c 01 	sts	0x016C, r25
    1640:	80 93 6d 01 	sts	0x016D, r24
    1644:	0e c0       	rjmp	.+28     	; 0x1662 <XPROGProtocol_Command+0x246>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1646:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPRG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = Endpoint_Read_8();
    164a:	80 93 6e 01 	sts	0x016E, r24
    164e:	09 c0       	rjmp	.+18     	; 0x1662 <XPROGProtocol_Command+0x246>
    1650:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPRG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = Endpoint_Read_8();
    1654:	80 93 6f 01 	sts	0x016F, r24
    1658:	04 c0       	rjmp	.+8      	; 0x1662 <XPROGProtocol_Command+0x246>
			static inline void Endpoint_Discard_16(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_16(void)
			{
				uint8_t Dummy;

				Dummy = UEDATX;
    165a:	80 91 f1 00 	lds	r24, 0x00F1
				Dummy = UEDATX;
    165e:	80 91 f1 00 	lds	r24, 0x00F1
/** Handler for the XPROG SET_PARAM command to set a XPROG parameter for use when communicating with the
 *  attached device.
 */
static void XPROGProtocol_SetParam(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <XPROGProtocol_Command+0x24c>
			         the communication with AVRStudio 5.1 will fail.
			*/
			Endpoint_Discard_16();
			break;
		default:
			ReturnStatus = XPRG_ERR_FAILED;
    1666:	81 e0       	ldi	r24, 0x01	; 1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1668:	90 91 e8 00 	lds	r25, 0x00E8
    166c:	9b 77       	andi	r25, 0x7B	; 123
    166e:	90 93 e8 00 	sts	0x00E8, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1672:	92 e0       	ldi	r25, 0x02	; 2
    1674:	90 93 e9 00 	sts	0x00E9, r25
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
    1678:	90 91 ec 00 	lds	r25, 0x00EC
    167c:	91 60       	ori	r25, 0x01	; 1
    167e:	90 93 ec 00 	sts	0x00EC, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1682:	90 e5       	ldi	r25, 0x50	; 80
    1684:	90 93 f1 00 	sts	0x00F1, r25
    1688:	97 e0       	ldi	r25, 0x07	; 7
    168a:	90 93 f1 00 	sts	0x00F1, r25
    168e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1692:	80 91 e8 00 	lds	r24, 0x00E8
    1696:	8e 77       	andi	r24, 0x7E	; 126
    1698:	80 93 e8 00 	sts	0x00E8, r24
			break;
		case XPRG_CMD_SET_PARAM:
			XPROGProtocol_SetParam();
			break;
	}
}
    169c:	29 96       	adiw	r28, 0x09	; 9
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <XPROGTarget_SetTxMode>:
}

static void XPROGTarget_SetTxMode(void)
{
	/* Wait for a full cycle of the clock */
	while (PIND & (1 << 5));
    16ae:	4d 99       	sbic	0x09, 5	; 9
    16b0:	fe cf       	rjmp	.-4      	; 0x16ae <XPROGTarget_SetTxMode>
	while (!(PIND & (1 << 5)));
    16b2:	4d 9b       	sbis	0x09, 5	; 9
    16b4:	fe cf       	rjmp	.-4      	; 0x16b2 <XPROGTarget_SetTxMode+0x4>
	while (PIND & (1 << 5));
    16b6:	4d 99       	sbic	0x09, 5	; 9
    16b8:	fe cf       	rjmp	.-4      	; 0x16b6 <XPROGTarget_SetTxMode+0x8>

	PORTD  |=  (1 << 3);
    16ba:	5b 9a       	sbi	0x0b, 3	; 11
	DDRD   |=  (1 << 3);
    16bc:	53 9a       	sbi	0x0a, 3	; 10

	UCSR1B &= ~(1 << RXEN1);
    16be:	80 91 c9 00 	lds	r24, 0x00C9
    16c2:	8f 7e       	andi	r24, 0xEF	; 239
    16c4:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << TXEN1);
    16c8:	80 91 c9 00 	lds	r24, 0x00C9
    16cc:	88 60       	ori	r24, 0x08	; 8
    16ce:	80 93 c9 00 	sts	0x00C9, r24

	IsSending = true;
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	80 93 aa 01 	sts	0x01AA, r24
}
    16d8:	08 95       	ret

000016da <XPROGTarget_SetRxMode>:

static void XPROGTarget_SetRxMode(void)
{
	while (!(UCSR1A & (1 << TXC1)));
    16da:	80 91 c8 00 	lds	r24, 0x00C8
    16de:	86 ff       	sbrs	r24, 6
    16e0:	fc cf       	rjmp	.-8      	; 0x16da <XPROGTarget_SetRxMode>
	UCSR1A |=  (1 << TXC1);
    16e2:	80 91 c8 00 	lds	r24, 0x00C8
    16e6:	80 64       	ori	r24, 0x40	; 64
    16e8:	80 93 c8 00 	sts	0x00C8, r24

	UCSR1B &= ~(1 << TXEN1);
    16ec:	80 91 c9 00 	lds	r24, 0x00C9
    16f0:	87 7f       	andi	r24, 0xF7	; 247
    16f2:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << RXEN1);
    16f6:	80 91 c9 00 	lds	r24, 0x00C9
    16fa:	80 61       	ori	r24, 0x10	; 16
    16fc:	80 93 c9 00 	sts	0x00C9, r24

	DDRD   &= ~(1 << 3);
    1700:	53 98       	cbi	0x0a, 3	; 10
	PORTD  &= ~(1 << 3);
    1702:	5b 98       	cbi	0x0b, 3	; 11

	IsSending = false;
    1704:	10 92 aa 01 	sts	0x01AA, r1
}
    1708:	08 95       	ret

0000170a <XPROGTarget_DisableTargetPDI>:

/** Disables the target's PDI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetPDI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	if (IsSending)
    170a:	80 91 aa 01 	lds	r24, 0x01AA
    170e:	88 23       	and	r24, r24
    1710:	09 f0       	breq	.+2      	; 0x1714 <XPROGTarget_DisableTargetPDI+0xa>
	  XPROGTarget_SetRxMode();
    1712:	e3 df       	rcall	.-58     	; 0x16da <XPROGTarget_SetRxMode>

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A  = ((1 << TXC1) | (1 << RXC1));
    1714:	80 ec       	ldi	r24, 0xC0	; 192
    1716:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B  = 0;
    171a:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1C  = 0;
    171e:	10 92 ca 00 	sts	0x00CA, r1

	/* Tristate all pins */
	DDRD  &= ~((1 << 5) | (1 << 3));
    1722:	8a b1       	in	r24, 0x0a	; 10
    1724:	87 7d       	andi	r24, 0xD7	; 215
    1726:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
    1728:	8b b1       	in	r24, 0x0b	; 11
    172a:	83 7d       	andi	r24, 0xD3	; 211
    172c:	8b b9       	out	0x0b, r24	; 11
}
    172e:	08 95       	ret

00001730 <XPROGTarget_DisableTargetTPI>:

/** Disables the target's TPI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetTPI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	if (IsSending)
    1730:	80 91 aa 01 	lds	r24, 0x01AA
    1734:	88 23       	and	r24, r24
    1736:	09 f0       	breq	.+2      	; 0x173a <XPROGTarget_DisableTargetTPI+0xa>
	  XPROGTarget_SetRxMode();
    1738:	d0 df       	rcall	.-96     	; 0x16da <XPROGTarget_SetRxMode>

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A |= (1 << TXC1) | (1 << RXC1);
    173a:	80 91 c8 00 	lds	r24, 0x00C8
    173e:	80 6c       	ori	r24, 0xC0	; 192
    1740:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B  = 0;
    1744:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1C  = 0;
    1748:	10 92 ca 00 	sts	0x00CA, r1

	/* Set all USART lines as inputs, tristate */
	DDRD  &= ~((1 << 5) | (1 << 3));
    174c:	8a b1       	in	r24, 0x0a	; 10
    174e:	87 7d       	andi	r24, 0xD7	; 215
    1750:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
    1752:	8b b1       	in	r24, 0x0b	; 11
    1754:	83 7d       	andi	r24, 0xD3	; 211
    1756:	8b b9       	out	0x0b, r24	; 11

	/* Tristate target /RESET line */
	AUX_LINE_DDR  &= ~AUX_LINE_MASK;
    1758:	24 98       	cbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    175a:	2c 98       	cbi	0x05, 4	; 5
}
    175c:	08 95       	ret

0000175e <XPROGTarget_SendByte>:
/** Sends a byte via the USART.
 *
 *  \param[in] Byte  Byte to send through the USART
 */
void XPROGTarget_SendByte(const uint8_t Byte)
{
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	0f 92       	push	r0
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    1768:	90 91 aa 01 	lds	r25, 0x01AA
    176c:	99 23       	and	r25, r25
    176e:	19 f4       	brne	.+6      	; 0x1776 <XPROGTarget_SendByte+0x18>
	  XPROGTarget_SetTxMode();
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	9d df       	rcall	.-198    	; 0x16ae <XPROGTarget_SetTxMode>
    1774:	89 81       	ldd	r24, Y+1	; 0x01

	/* Wait until there is space in the hardware Tx buffer before writing */
	while (!(UCSR1A & (1 << UDRE1)));
    1776:	90 91 c8 00 	lds	r25, 0x00C8
    177a:	95 ff       	sbrs	r25, 5
    177c:	fc cf       	rjmp	.-8      	; 0x1776 <XPROGTarget_SendByte+0x18>
	UCSR1A |= (1 << TXC1);
    177e:	90 91 c8 00 	lds	r25, 0x00C8
    1782:	90 64       	ori	r25, 0x40	; 64
    1784:	90 93 c8 00 	sts	0x00C8, r25
	UDR1    = Byte;
    1788:	80 93 ce 00 	sts	0x00CE, r24
}
    178c:	0f 90       	pop	r0
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <XPROGTarget_ReceiveByte>:
 *  \return Received byte from the USART
 */
uint8_t XPROGTarget_ReceiveByte(void)
{
	/* Switch to Rx mode if currently in Tx mode */
	if (IsSending)
    1794:	80 91 aa 01 	lds	r24, 0x01AA
    1798:	88 23       	and	r24, r24
    179a:	09 f0       	breq	.+2      	; 0x179e <XPROGTarget_ReceiveByte+0xa>
	  XPROGTarget_SetRxMode();
    179c:	9e df       	rcall	.-196    	; 0x16da <XPROGTarget_SetRxMode>

	/* Wait until a byte has been received before reading */
	while (!(UCSR1A & (1 << RXC1)) && TimeoutTicksRemaining);
    179e:	80 91 c8 00 	lds	r24, 0x00C8
    17a2:	87 fd       	sbrc	r24, 7
    17a4:	03 c0       	rjmp	.+6      	; 0x17ac <XPROGTarget_ReceiveByte+0x18>
    17a6:	8a b5       	in	r24, 0x2a	; 42
    17a8:	88 23       	and	r24, r24
    17aa:	c9 f7       	brne	.-14     	; 0x179e <XPROGTarget_ReceiveByte+0xa>

	return UDR1;
    17ac:	80 91 ce 00 	lds	r24, 0x00CE
}
    17b0:	08 95       	ret

000017b2 <XPROGTarget_SendIdle>:

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
    17b2:	80 91 aa 01 	lds	r24, 0x01AA
    17b6:	88 23       	and	r24, r24
    17b8:	09 f4       	brne	.+2      	; 0x17bc <XPROGTarget_SendIdle+0xa>
	  XPROGTarget_SetTxMode();
    17ba:	79 df       	rcall	.-270    	; 0x16ae <XPROGTarget_SetTxMode>
	return UDR1;
}

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
    17bc:	8c e0       	ldi	r24, 0x0C	; 12

	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
	{
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
    17be:	4d 99       	sbic	0x09, 5	; 9
    17c0:	fe cf       	rjmp	.-4      	; 0x17be <XPROGTarget_SendIdle+0xc>
		while (!(PIND & (1 << 5)));
    17c2:	4d 9b       	sbis	0x09, 5	; 9
    17c4:	fe cf       	rjmp	.-4      	; 0x17c2 <XPROGTarget_SendIdle+0x10>
		while (PIND & (1 << 5));
    17c6:	4d 99       	sbic	0x09, 5	; 9
    17c8:	fe cf       	rjmp	.-4      	; 0x17c6 <XPROGTarget_SendIdle+0x14>
    17ca:	81 50       	subi	r24, 0x01	; 1
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
	  XPROGTarget_SetTxMode();

	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
    17cc:	c1 f7       	brne	.-16     	; 0x17be <XPROGTarget_SendIdle+0xc>
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
		while (!(PIND & (1 << 5)));
		while (PIND & (1 << 5));
	}
}
    17ce:	08 95       	ret

000017d0 <XPROGTarget_EnableTargetTPI>:
}

/** Enables the target's TPI interface, holding the target in reset until TPI mode is exited. */
void XPROGTarget_EnableTargetTPI(void)
{
	IsSending = false;
    17d0:	10 92 aa 01 	sts	0x01AA, r1

	/* Set /RESET line low for at least 400ns to enable TPI functionality */
	AUX_LINE_DDR  |=  AUX_LINE_MASK;
    17d4:	24 9a       	sbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    17d6:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17d8:	85 e0       	ldi	r24, 0x05	; 5
    17da:	8a 95       	dec	r24
    17dc:	f1 f7       	brne	.-4      	; 0x17da <XPROGTarget_EnableTargetTPI+0xa>
    17de:	00 00       	nop
	_delay_us(1);

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    17e0:	8a b1       	in	r24, 0x0a	; 10
    17e2:	88 62       	ori	r24, 0x28	; 40
    17e4:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    17e6:	52 98       	cbi	0x0a, 2	; 10

	/* Set up the synchronous USART for TPI communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    17e8:	8f e1       	ldi	r24, 0x1F	; 31
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	90 93 cd 00 	sts	0x00CD, r25
    17f0:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
    17f4:	88 e0       	ldi	r24, 0x08	; 8
    17f6:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    17fa:	8f e6       	ldi	r24, 0x6F	; 111
    17fc:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable TPI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    1800:	d8 df       	rcall	.-80     	; 0x17b2 <XPROGTarget_SendIdle>
	XPROGTarget_SendIdle();
}
    1802:	d7 cf       	rjmp	.-82     	; 0x17b2 <XPROGTarget_SendIdle>

00001804 <XPROGTarget_EnableTargetPDI>:
bool IsSending;

/** Enables the target's PDI interface, holding the target in reset until PDI mode is exited. */
void XPROGTarget_EnableTargetPDI(void)
{
	IsSending = false;
    1804:	10 92 aa 01 	sts	0x01AA, r1

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    1808:	8a b1       	in	r24, 0x0a	; 10
    180a:	88 62       	ori	r24, 0x28	; 40
    180c:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    180e:	52 98       	cbi	0x0a, 2	; 10

	/* Set DATA line high for at least 90ns to disable /RESET functionality */
	PORTD |= (1 << 3);
    1810:	5b 9a       	sbi	0x0b, 3	; 11
    1812:	85 e0       	ldi	r24, 0x05	; 5
    1814:	8a 95       	dec	r24
    1816:	f1 f7       	brne	.-4      	; 0x1814 <XPROGTarget_EnableTargetPDI+0x10>
    1818:	00 00       	nop
	_delay_us(1);

	/* Set up the synchronous USART for XMEGA communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    181a:	8f e1       	ldi	r24, 0x1F	; 31
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	90 93 cd 00 	sts	0x00CD, r25
    1822:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
    1826:	88 e0       	ldi	r24, 0x08	; 8
    1828:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    182c:	8f e6       	ldi	r24, 0x6F	; 111
    182e:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable PDI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    1832:	bf df       	rcall	.-130    	; 0x17b2 <XPROGTarget_SendIdle>
	XPROGTarget_SendIdle();
}
    1834:	be cf       	rjmp	.-132    	; 0x17b2 <XPROGTarget_SendIdle>

00001836 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
    1836:	1f 93       	push	r17
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	00 d0       	rcall	.+0      	; 0x183e <XMEGANVM_SendAddress+0x8>
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	18 2f       	mov	r17, r24
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
    1844:	86 2f       	mov	r24, r22
    1846:	79 83       	std	Y+1, r23	; 0x01
    1848:	9a 83       	std	Y+2, r25	; 0x02
    184a:	89 df       	rcall	.-238    	; 0x175e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    184c:	79 81       	ldd	r23, Y+1	; 0x01
    184e:	87 2f       	mov	r24, r23
    1850:	86 df       	rcall	.-244    	; 0x175e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
    1852:	81 2f       	mov	r24, r17
    1854:	84 df       	rcall	.-248    	; 0x175e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
    1856:	9a 81       	ldd	r25, Y+2	; 0x02
    1858:	89 2f       	mov	r24, r25
    185a:	81 df       	rcall	.-254    	; 0x175e <XPROGTarget_SendByte>
}
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	1f 91       	pop	r17
    1866:	08 95       	ret

00001868 <XMEGANVM_SendNVMRegAddress>:
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
    1868:	68 2f       	mov	r22, r24
    186a:	70 e0       	ldi	r23, 0x00	; 0
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	20 91 68 01 	lds	r18, 0x0168
    1874:	30 91 69 01 	lds	r19, 0x0169
    1878:	40 91 6a 01 	lds	r20, 0x016A
    187c:	50 91 6b 01 	lds	r21, 0x016B
    1880:	62 2b       	or	r22, r18
    1882:	73 2b       	or	r23, r19
    1884:	84 2b       	or	r24, r20
    1886:	95 2b       	or	r25, r21

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
}
    1888:	d6 cf       	rjmp	.-84     	; 0x1836 <XMEGANVM_SendAddress>

0000188a <XMEGANVM_WaitWhileNVMBusBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS | PDI_STATUS_REG);
    188a:	80 e8       	ldi	r24, 0x80	; 128
    188c:	68 df       	rcall	.-304    	; 0x175e <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    188e:	82 df       	rcall	.-252    	; 0x1794 <XPROGTarget_ReceiveByte>

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1890:	9a b5       	in	r25, 0x2a	; 42
    1892:	99 23       	and	r25, r25
    1894:	21 f0       	breq	.+8      	; 0x189e <XMEGANVM_WaitWhileNVMBusBusy+0x14>
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
    1896:	81 ff       	sbrs	r24, 1
    1898:	f8 cf       	rjmp	.-16     	; 0x188a <XMEGANVM_WaitWhileNVMBusBusy>
		  return true;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	08 95       	ret

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    189e:	80 e0       	ldi	r24, 0x00	; 0

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
		  return true;
	}
}
    18a0:	08 95       	ret

000018a2 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  \return Boolean true if the NVM controller became ready within the timeout period, false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    18a2:	8b e6       	ldi	r24, 0x6B	; 107
    18a4:	5c df       	rcall	.-328    	; 0x175e <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
    18a6:	8f e0       	ldi	r24, 0x0F	; 15
    18a8:	df df       	rcall	.-66     	; 0x1868 <XMEGANVM_SendNVMRegAddress>

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT << 2) | PDI_DATSIZE_1BYTE);
    18aa:	80 e2       	ldi	r24, 0x20	; 32
    18ac:	58 df       	rcall	.-336    	; 0x175e <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    18ae:	72 df       	rcall	.-284    	; 0x1794 <XPROGTarget_ReceiveByte>

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    18b0:	9a b5       	in	r25, 0x2a	; 42
    18b2:	99 23       	and	r25, r25
    18b4:	21 f0       	breq	.+8      	; 0x18be <XMEGANVM_WaitWhileNVMControllerBusy+0x1c>
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    18b6:	87 fd       	sbrc	r24, 7
    18b8:	f8 cf       	rjmp	.-16     	; 0x18aa <XMEGANVM_WaitWhileNVMControllerBusy+0x8>
		  return true;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	08 95       	ret

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    18be:	80 e0       	ldi	r24, 0x00	; 0

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
		  return true;
	}
}
    18c0:	08 95       	ret

000018c2 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the PDI interface was enabled successfully, false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
    18c2:	cf 92       	push	r12
    18c4:	df 92       	push	r13
    18c6:	ef 92       	push	r14
    18c8:	ff 92       	push	r15
    18ca:	0f 93       	push	r16
    18cc:	1f 93       	push	r17
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	28 97       	sbiw	r28, 0x08	; 8
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	de bf       	out	0x3e, r29	; 62
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	cd bf       	out	0x3d, r28	; 61
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
    18e2:	90 df       	rcall	.-224    	; 0x1804 <XPROGTarget_EnableTargetPDI>

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    18e4:	81 ec       	ldi	r24, 0xC1	; 193
    18e6:	3b df       	rcall	.-394    	; 0x175e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(PDI_RESET_KEY);
    18e8:	89 e5       	ldi	r24, 0x59	; 89
    18ea:	39 df       	rcall	.-398    	; 0x175e <XPROGTarget_SendByte>

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
    18ec:	82 ec       	ldi	r24, 0xC2	; 194
    18ee:	37 df       	rcall	.-402    	; 0x175e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x02);
    18f0:	82 e0       	ldi	r24, 0x02	; 2
    18f2:	35 df       	rcall	.-406    	; 0x175e <XPROGTarget_SendByte>

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
    18f4:	80 ee       	ldi	r24, 0xE0	; 224
    18f6:	33 df       	rcall	.-410    	; 0x175e <XPROGTarget_SendByte>
    18f8:	8e 01       	movw	r16, r28
    18fa:	07 5f       	subi	r16, 0xF7	; 247
    18fc:	1f 4f       	sbci	r17, 0xFF	; 255

/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the PDI interface was enabled successfully, false otherwise
 */
bool XMEGANVM_EnablePDI(void)
    18fe:	7e 01       	movw	r14, r28
    1900:	08 94       	sec
    1902:	e1 1c       	adc	r14, r1
    1904:	f1 1c       	adc	r15, r1
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
    1906:	67 01       	movw	r12, r14
    1908:	d6 01       	movw	r26, r12
    190a:	e2 e9       	ldi	r30, 0x92	; 146
    190c:	f1 e0       	ldi	r31, 0x01	; 1
    190e:	88 e0       	ldi	r24, 0x08	; 8
    1910:	01 90       	ld	r0, Z+
    1912:	0d 92       	st	X+, r0
    1914:	81 50       	subi	r24, 0x01	; 1
    1916:	e1 f7       	brne	.-8      	; 0x1910 <XMEGANVM_EnablePDI+0x4e>
    1918:	f8 01       	movw	r30, r16
    191a:	82 91       	ld	r24, -Z
    191c:	8f 01       	movw	r16, r30
    191e:	1f df       	rcall	.-450    	; 0x175e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
    1920:	0e 15       	cp	r16, r14
    1922:	1f 05       	cpc	r17, r15
    1924:	89 f7       	brne	.-30     	; 0x1908 <XMEGANVM_EnablePDI+0x46>
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
    1926:	b1 df       	rcall	.-158    	; 0x188a <XMEGANVM_WaitWhileNVMBusBusy>
}
    1928:	28 96       	adiw	r28, 0x08	; 8
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	de bf       	out	0x3e, r29	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	cd bf       	out	0x3d, r28	; 61
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
    193c:	ff 90       	pop	r15
    193e:	ef 90       	pop	r14
    1940:	df 90       	pop	r13
    1942:	cf 90       	pop	r12
    1944:	08 95       	ret

00001946 <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
	XMEGANVM_WaitWhileNVMBusBusy();
    1946:	a1 df       	rcall	.-190    	; 0x188a <XMEGANVM_WaitWhileNVMBusBusy>
	 * change takes effect, as in some cases it takes multiple writes (silicon bug?).
	 */
	do
	{
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    1948:	81 ec       	ldi	r24, 0xC1	; 193
    194a:	09 df       	rcall	.-494    	; 0x175e <XPROGTarget_SendByte>
		XPROGTarget_SendByte(0x00);
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	07 df       	rcall	.-498    	; 0x175e <XPROGTarget_SendByte>

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS | PDI_RESET_REG);
    1950:	81 e8       	ldi	r24, 0x81	; 129
    1952:	05 df       	rcall	.-502    	; 0x175e <XPROGTarget_SendByte>
	} while (XPROGTarget_ReceiveByte() != 0x00);
    1954:	1f df       	rcall	.-450    	; 0x1794 <XPROGTarget_ReceiveByte>
    1956:	88 23       	and	r24, r24
    1958:	b9 f7       	brne	.-18     	; 0x1948 <XMEGANVM_DisablePDI+0x2>

	XPROGTarget_DisableTargetPDI();
}
    195a:	d7 ce       	rjmp	.-594    	; 0x170a <XPROGTarget_DisableTargetPDI>

0000195c <XMEGANVM_GetMemoryCRC>:
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_GetMemoryCRC(const uint8_t CRCCommand,
                           uint32_t* const CRCDest)
{
    195c:	1f 93       	push	r17
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	18 2f       	mov	r17, r24
    1964:	eb 01       	movw	r28, r22
	*CRCDest = 0;
    1966:	18 82       	st	Y, r1
    1968:	19 82       	std	Y+1, r1	; 0x01
    196a:	1a 82       	std	Y+2, r1	; 0x02
    196c:	1b 82       	std	Y+3, r1	; 0x03

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    196e:	99 df       	rcall	.-206    	; 0x18a2 <XMEGANVM_WaitWhileNVMControllerBusy>
    1970:	88 23       	and	r24, r24
    1972:	31 f1       	breq	.+76     	; 0x19c0 <XMEGANVM_GetMemoryCRC+0x64>
	  return false;

	/* Set the NVM command to the correct CRC read command */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1974:	8c e4       	ldi	r24, 0x4C	; 76
    1976:	f3 de       	rcall	.-538    	; 0x175e <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1978:	8a e0       	ldi	r24, 0x0A	; 10
    197a:	76 df       	rcall	.-276    	; 0x1868 <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(CRCCommand);
    197c:	81 2f       	mov	r24, r17
    197e:	ef de       	rcall	.-546    	; 0x175e <XPROGTarget_SendByte>

	/* Set CMDEX bit in NVM CTRLA register to start the CRC generation */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1980:	8c e4       	ldi	r24, 0x4C	; 76
    1982:	ed de       	rcall	.-550    	; 0x175e <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1984:	8b e0       	ldi	r24, 0x0B	; 11
    1986:	70 df       	rcall	.-288    	; 0x1868 <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	e9 de       	rcall	.-558    	; 0x175e <XPROGTarget_SendByte>

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    198c:	7e df       	rcall	.-260    	; 0x188a <XMEGANVM_WaitWhileNVMBusBusy>
    198e:	88 23       	and	r24, r24
    1990:	b9 f0       	breq	.+46     	; 0x19c0 <XMEGANVM_GetMemoryCRC+0x64>
	  return false;

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1992:	87 df       	rcall	.-242    	; 0x18a2 <XMEGANVM_WaitWhileNVMControllerBusy>
    1994:	88 23       	and	r24, r24
    1996:	a1 f0       	breq	.+40     	; 0x19c0 <XMEGANVM_GetMemoryCRC+0x64>
	  return false;

	/* Load the PDI pointer register with the DAT0 register start address */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1998:	8b e6       	ldi	r24, 0x6B	; 107
    199a:	e1 de       	rcall	.-574    	; 0x175e <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_DAT0);
    199c:	84 e0       	ldi	r24, 0x04	; 4
    199e:	64 df       	rcall	.-312    	; 0x1868 <XMEGANVM_SendNVMRegAddress>

	/* Send the REPEAT command to grab the CRC bytes */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    19a0:	80 ea       	ldi	r24, 0xA0	; 160
    19a2:	dd de       	rcall	.-582    	; 0x175e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(XMEGA_CRC_LENGTH_BYTES - 1);
    19a4:	82 e0       	ldi	r24, 0x02	; 2
    19a6:	db de       	rcall	.-586    	; 0x175e <XPROGTarget_SendByte>

	/* Read in the CRC bytes from the target */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    19a8:	84 e2       	ldi	r24, 0x24	; 36
    19aa:	d9 de       	rcall	.-590    	; 0x175e <XPROGTarget_SendByte>
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH_BYTES; i++)
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();
    19ac:	f3 de       	rcall	.-538    	; 0x1794 <XPROGTarget_ReceiveByte>
    19ae:	88 83       	st	Y, r24
    19b0:	f1 de       	rcall	.-542    	; 0x1794 <XPROGTarget_ReceiveByte>
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	ef de       	rcall	.-546    	; 0x1794 <XPROGTarget_ReceiveByte>
    19b6:	8a 83       	std	Y+2, r24	; 0x02

	return (TimeoutTicksRemaining > 0);
    19b8:	9a b5       	in	r25, 0x2a	; 42
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	99 23       	and	r25, r25
    19be:	09 f4       	brne	.+2      	; 0x19c2 <XMEGANVM_GetMemoryCRC+0x66>
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
	  return false;

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;
    19c0:	80 e0       	ldi	r24, 0x00	; 0
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH_BYTES; i++)
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();

	return (TimeoutTicksRemaining > 0);
}
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	08 95       	ret

000019ca <XMEGANVM_ReadMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
    19ca:	cf 92       	push	r12
    19cc:	df 92       	push	r13
    19ce:	ef 92       	push	r14
    19d0:	ff 92       	push	r15
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	6b 01       	movw	r12, r22
    19dc:	7c 01       	movw	r14, r24
    19de:	8a 01       	movw	r16, r20
    19e0:	e9 01       	movw	r28, r18
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    19e2:	5f df       	rcall	.-322    	; 0x18a2 <XMEGANVM_WaitWhileNVMControllerBusy>
    19e4:	88 23       	and	r24, r24
    19e6:	11 f1       	breq	.+68     	; 0x1a2c <XMEGANVM_ReadMemory+0x62>
	  return false;

	/* Send the READNVM command to the NVM controller for reading of an arbitrary location */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    19e8:	8c e4       	ldi	r24, 0x4C	; 76
    19ea:	b9 de       	rcall	.-654    	; 0x175e <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    19ec:	8a e0       	ldi	r24, 0x0A	; 10
    19ee:	3c df       	rcall	.-392    	; 0x1868 <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
    19f0:	83 e4       	ldi	r24, 0x43	; 67
    19f2:	b5 de       	rcall	.-662    	; 0x175e <XPROGTarget_SendByte>

	/* Load the PDI pointer register with the start address we want to read from */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    19f4:	8b e6       	ldi	r24, 0x6B	; 107
    19f6:	b3 de       	rcall	.-666    	; 0x175e <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(ReadAddress);
    19f8:	c7 01       	movw	r24, r14
    19fa:	b6 01       	movw	r22, r12
    19fc:	1c df       	rcall	.-456    	; 0x1836 <XMEGANVM_SendAddress>

	/* Send the REPEAT command with the specified number of bytes to read */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    19fe:	80 ea       	ldi	r24, 0xA0	; 160
    1a00:	ae de       	rcall	.-676    	; 0x175e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(ReadSize - 1);
    1a02:	9e 01       	movw	r18, r28
    1a04:	21 50       	subi	r18, 0x01	; 1
    1a06:	82 2f       	mov	r24, r18
    1a08:	aa de       	rcall	.-684    	; 0x175e <XPROGTarget_SendByte>

	/* Send a LD command with indirect access and post-increment to read out the bytes */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1a0a:	84 e2       	ldi	r24, 0x24	; 36
    1a0c:	a8 de       	rcall	.-688    	; 0x175e <XPROGTarget_SendByte>
	while (ReadSize-- && TimeoutTicksRemaining)
    1a0e:	04 c0       	rjmp	.+8      	; 0x1a18 <XMEGANVM_ReadMemory+0x4e>
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1a10:	c1 de       	rcall	.-638    	; 0x1794 <XPROGTarget_ReceiveByte>
    1a12:	f8 01       	movw	r30, r16
    1a14:	81 93       	st	Z+, r24
    1a16:	8f 01       	movw	r16, r30
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
	XPROGTarget_SendByte(ReadSize - 1);

	/* Send a LD command with indirect access and post-increment to read out the bytes */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
	while (ReadSize-- && TimeoutTicksRemaining)
    1a18:	20 97       	sbiw	r28, 0x00	; 0
    1a1a:	21 f0       	breq	.+8      	; 0x1a24 <XMEGANVM_ReadMemory+0x5a>
    1a1c:	8a b5       	in	r24, 0x2a	; 42
    1a1e:	21 97       	sbiw	r28, 0x01	; 1
    1a20:	88 23       	and	r24, r24
    1a22:	b1 f7       	brne	.-20     	; 0x1a10 <XMEGANVM_ReadMemory+0x46>
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();

	return (TimeoutTicksRemaining > 0);
    1a24:	9a b5       	in	r25, 0x2a	; 42
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	99 23       	and	r25, r25
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <XMEGANVM_ReadMemory+0x64>
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
	while (ReadSize-- && TimeoutTicksRemaining)
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();

	return (TimeoutTicksRemaining > 0);
}
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	1f 91       	pop	r17
    1a34:	0f 91       	pop	r16
    1a36:	ff 90       	pop	r15
    1a38:	ef 90       	pop	r14
    1a3a:	df 90       	pop	r13
    1a3c:	cf 90       	pop	r12
    1a3e:	08 95       	ret

00001a40 <XMEGANVM_WriteByteMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t Byte)
{
    1a40:	cf 92       	push	r12
    1a42:	df 92       	push	r13
    1a44:	ef 92       	push	r14
    1a46:	ff 92       	push	r15
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	d8 2e       	mov	r13, r24
    1a4e:	7a 01       	movw	r14, r20
    1a50:	8b 01       	movw	r16, r22
    1a52:	c2 2e       	mov	r12, r18
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1a54:	26 df       	rcall	.-436    	; 0x18a2 <XMEGANVM_WaitWhileNVMControllerBusy>
    1a56:	88 23       	and	r24, r24
    1a58:	79 f0       	breq	.+30     	; 0x1a78 <XMEGANVM_WriteByteMemory+0x38>
	  return false;

	/* Send the memory write command to the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1a5a:	8c e4       	ldi	r24, 0x4C	; 76
    1a5c:	80 de       	rcall	.-768    	; 0x175e <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1a5e:	8a e0       	ldi	r24, 0x0A	; 10
    1a60:	03 df       	rcall	.-506    	; 0x1868 <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(WriteCommand);
    1a62:	8d 2d       	mov	r24, r13
    1a64:	7c de       	rcall	.-776    	; 0x175e <XPROGTarget_SendByte>

	/* Send new memory byte to the memory of the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1a66:	8c e4       	ldi	r24, 0x4C	; 76
    1a68:	7a de       	rcall	.-780    	; 0x175e <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(WriteAddress);
    1a6a:	c8 01       	movw	r24, r16
    1a6c:	b7 01       	movw	r22, r14
    1a6e:	e3 de       	rcall	.-570    	; 0x1836 <XMEGANVM_SendAddress>
	XPROGTarget_SendByte(Byte);
    1a70:	8c 2d       	mov	r24, r12
    1a72:	75 de       	rcall	.-790    	; 0x175e <XPROGTarget_SendByte>

	return true;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <XMEGANVM_WriteByteMemory+0x3a>
                              const uint32_t WriteAddress,
                              const uint8_t Byte)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;
    1a78:	80 e0       	ldi	r24, 0x00	; 0
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(Byte);

	return true;
}
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	ff 90       	pop	r15
    1a80:	ef 90       	pop	r14
    1a82:	df 90       	pop	r13
    1a84:	cf 90       	pop	r12
    1a86:	08 95       	ret

00001a88 <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
    1a88:	7f 92       	push	r7
    1a8a:	8f 92       	push	r8
    1a8c:	9f 92       	push	r9
    1a8e:	af 92       	push	r10
    1a90:	bf 92       	push	r11
    1a92:	cf 92       	push	r12
    1a94:	df 92       	push	r13
    1a96:	ef 92       	push	r14
    1a98:	ff 92       	push	r15
    1a9a:	0f 93       	push	r16
    1a9c:	1f 93       	push	r17
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	88 2e       	mov	r8, r24
    1aa4:	96 2e       	mov	r9, r22
    1aa6:	74 2e       	mov	r7, r20
    1aa8:	e6 01       	movw	r28, r12
	if (PageMode & XPRG_PAGEMODE_ERASE)
    1aaa:	d2 2e       	mov	r13, r18
    1aac:	20 ff       	sbrs	r18, 0
    1aae:	10 c0       	rjmp	.+32     	; 0x1ad0 <XMEGANVM_WritePageMemory+0x48>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1ab0:	f8 de       	rcall	.-528    	; 0x18a2 <XMEGANVM_WaitWhileNVMControllerBusy>
    1ab2:	88 23       	and	r24, r24
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <XMEGANVM_WritePageMemory+0x30>
    1ab6:	40 c0       	rjmp	.+128    	; 0x1b38 <XMEGANVM_WritePageMemory+0xb0>
		  return false;

		/* Send the memory buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1ab8:	8c e4       	ldi	r24, 0x4C	; 76
    1aba:	51 de       	rcall	.-862    	; 0x175e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1abc:	8a e0       	ldi	r24, 0x0A	; 10
    1abe:	d4 de       	rcall	.-600    	; 0x1868 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseBuffCommand);
    1ac0:	89 2d       	mov	r24, r9
    1ac2:	4d de       	rcall	.-870    	; 0x175e <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1ac4:	8c e4       	ldi	r24, 0x4C	; 76
    1ac6:	4b de       	rcall	.-874    	; 0x175e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1ac8:	8b e0       	ldi	r24, 0x0B	; 11
    1aca:	ce de       	rcall	.-612    	; 0x1868 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	47 de       	rcall	.-882    	; 0x175e <XPROGTarget_SendByte>
	}

	if (WriteSize)
    1ad0:	a1 14       	cp	r10, r1
    1ad2:	b1 04       	cpc	r11, r1
    1ad4:	e9 f0       	breq	.+58     	; 0x1b10 <XMEGANVM_WritePageMemory+0x88>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1ad6:	e5 de       	rcall	.-566    	; 0x18a2 <XMEGANVM_WaitWhileNVMControllerBusy>
    1ad8:	88 23       	and	r24, r24
    1ada:	71 f1       	breq	.+92     	; 0x1b38 <XMEGANVM_WritePageMemory+0xb0>
		  return false;

		/* Send the memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1adc:	8c e4       	ldi	r24, 0x4C	; 76
    1ade:	3f de       	rcall	.-898    	; 0x175e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1ae0:	8a e0       	ldi	r24, 0x0A	; 10
    1ae2:	c2 de       	rcall	.-636    	; 0x1868 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(WriteBuffCommand);
    1ae4:	88 2d       	mov	r24, r8
    1ae6:	3b de       	rcall	.-906    	; 0x175e <XPROGTarget_SendByte>

		/* Load the PDI pointer register with the start address we want to write to */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1ae8:	8b e6       	ldi	r24, 0x6B	; 107
    1aea:	39 de       	rcall	.-910    	; 0x175e <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(WriteAddress);
    1aec:	c8 01       	movw	r24, r16
    1aee:	b7 01       	movw	r22, r14
    1af0:	a2 de       	rcall	.-700    	; 0x1836 <XMEGANVM_SendAddress>

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1af2:	80 ea       	ldi	r24, 0xA0	; 160
    1af4:	34 de       	rcall	.-920    	; 0x175e <XPROGTarget_SendByte>
		XPROGTarget_SendByte(WriteSize - 1);
    1af6:	8a 2d       	mov	r24, r10
    1af8:	81 50       	subi	r24, 0x01	; 1
    1afa:	31 de       	rcall	.-926    	; 0x175e <XPROGTarget_SendByte>

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1afc:	84 e6       	ldi	r24, 0x64	; 100
    1afe:	2f de       	rcall	.-930    	; 0x175e <XPROGTarget_SendByte>
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
    1b00:	89 91       	ld	r24, Y+
    1b02:	2d de       	rcall	.-934    	; 0x175e <XPROGTarget_SendByte>
    1b04:	08 94       	sec
    1b06:	a1 08       	sbc	r10, r1
    1b08:	b1 08       	sbc	r11, r1
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
		XPROGTarget_SendByte(WriteSize - 1);

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		while (WriteSize--)
    1b0a:	a1 14       	cp	r10, r1
    1b0c:	b1 04       	cpc	r11, r1
    1b0e:	c1 f7       	brne	.-16     	; 0x1b00 <XMEGANVM_WritePageMemory+0x78>
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPRG_PAGEMODE_WRITE)
    1b10:	d1 fe       	sbrs	r13, 1
    1b12:	10 c0       	rjmp	.+32     	; 0x1b34 <XMEGANVM_WritePageMemory+0xac>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1b14:	c6 de       	rcall	.-628    	; 0x18a2 <XMEGANVM_WaitWhileNVMControllerBusy>
    1b16:	88 23       	and	r24, r24
    1b18:	79 f0       	breq	.+30     	; 0x1b38 <XMEGANVM_WritePageMemory+0xb0>
		  return false;

		/* Send the memory write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b1a:	8c e4       	ldi	r24, 0x4C	; 76
    1b1c:	20 de       	rcall	.-960    	; 0x175e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1b1e:	8a e0       	ldi	r24, 0x0A	; 10
    1b20:	a3 de       	rcall	.-698    	; 0x1868 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(WritePageCommand);
    1b22:	87 2d       	mov	r24, r7
    1b24:	1c de       	rcall	.-968    	; 0x175e <XPROGTarget_SendByte>

		/* Send the address of the first page location to write the memory page */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b26:	8c e4       	ldi	r24, 0x4C	; 76
    1b28:	1a de       	rcall	.-972    	; 0x175e <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(WriteAddress);
    1b2a:	c8 01       	movw	r24, r16
    1b2c:	b7 01       	movw	r22, r14
    1b2e:	83 de       	rcall	.-762    	; 0x1836 <XMEGANVM_SendAddress>
		XPROGTarget_SendByte(0x00);
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	15 de       	rcall	.-982    	; 0x175e <XPROGTarget_SendByte>
	}

	return true;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	01 c0       	rjmp	.+2      	; 0x1b3a <XMEGANVM_WritePageMemory+0xb2>

	if (PageMode & XPRG_PAGEMODE_WRITE)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
		  return false;
    1b38:	80 e0       	ldi	r24, 0x00	; 0
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
}
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	ff 90       	pop	r15
    1b44:	ef 90       	pop	r14
    1b46:	df 90       	pop	r13
    1b48:	cf 90       	pop	r12
    1b4a:	bf 90       	pop	r11
    1b4c:	af 90       	pop	r10
    1b4e:	9f 90       	pop	r9
    1b50:	8f 90       	pop	r8
    1b52:	7f 90       	pop	r7
    1b54:	08 95       	ret

00001b56 <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
    1b56:	df 92       	push	r13
    1b58:	ef 92       	push	r14
    1b5a:	ff 92       	push	r15
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	d8 2e       	mov	r13, r24
    1b62:	7a 01       	movw	r14, r20
    1b64:	8b 01       	movw	r16, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1b66:	9d de       	rcall	.-710    	; 0x18a2 <XMEGANVM_WaitWhileNVMControllerBusy>
    1b68:	88 23       	and	r24, r24
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <XMEGANVM_EraseMemory+0x18>
    1b6c:	59 c0       	rjmp	.+178    	; 0x1c20 <XMEGANVM_EraseMemory+0xca>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
    1b6e:	8d 2d       	mov	r24, r13
    1b70:	80 34       	cpi	r24, 0x40	; 64
    1b72:	31 f4       	brne	.+12     	; 0x1b80 <XMEGANVM_EraseMemory+0x2a>
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b74:	8c e4       	ldi	r24, 0x4C	; 76
    1b76:	f3 dd       	rcall	.-1050   	; 0x175e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1b78:	8a e0       	ldi	r24, 0x0A	; 10
    1b7a:	76 de       	rcall	.-788    	; 0x1868 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    1b7c:	80 e4       	ldi	r24, 0x40	; 64
    1b7e:	3a c0       	rjmp	.+116    	; 0x1bf4 <XMEGANVM_EraseMemory+0x9e>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
    1b80:	8d 2d       	mov	r24, r13
    1b82:	80 33       	cpi	r24, 0x30	; 48
    1b84:	09 f0       	breq	.+2      	; 0x1b88 <XMEGANVM_EraseMemory+0x32>
    1b86:	3d c0       	rjmp	.+122    	; 0x1c02 <XMEGANVM_EraseMemory+0xac>
	{
		/* Send the EEPROM page buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b88:	8c e4       	ldi	r24, 0x4C	; 76
    1b8a:	e9 dd       	rcall	.-1070   	; 0x175e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1b8c:	8a e0       	ldi	r24, 0x0A	; 10
    1b8e:	6c de       	rcall	.-808    	; 0x1868 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
    1b90:	86 e3       	ldi	r24, 0x36	; 54
    1b92:	e5 dd       	rcall	.-1078   	; 0x175e <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1b94:	8c e4       	ldi	r24, 0x4C	; 76
    1b96:	e3 dd       	rcall	.-1082   	; 0x175e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1b98:	8b e0       	ldi	r24, 0x0B	; 11
    1b9a:	66 de       	rcall	.-820    	; 0x1868 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	df dd       	rcall	.-1090   	; 0x175e <XPROGTarget_SendByte>

		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1ba0:	80 de       	rcall	.-768    	; 0x18a2 <XMEGANVM_WaitWhileNVMControllerBusy>
    1ba2:	88 23       	and	r24, r24
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <XMEGANVM_EraseMemory+0x52>
    1ba6:	3c c0       	rjmp	.+120    	; 0x1c20 <XMEGANVM_EraseMemory+0xca>
		  return false;

		/* Send the EEPROM memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1ba8:	8c e4       	ldi	r24, 0x4C	; 76
    1baa:	d9 dd       	rcall	.-1102   	; 0x175e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1bac:	8a e0       	ldi	r24, 0x0A	; 10
    1bae:	5c de       	rcall	.-840    	; 0x1868 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
    1bb0:	83 e3       	ldi	r24, 0x33	; 51
    1bb2:	d5 dd       	rcall	.-1110   	; 0x175e <XPROGTarget_SendByte>

		/* Load the PDI pointer register with the EEPROM page start address */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    1bb4:	8b e6       	ldi	r24, 0x6B	; 107
    1bb6:	d3 dd       	rcall	.-1114   	; 0x175e <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(Address);
    1bb8:	c8 01       	movw	r24, r16
    1bba:	b7 01       	movw	r22, r14
    1bbc:	3c de       	rcall	.-904    	; 0x1836 <XMEGANVM_SendAddress>

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1bbe:	80 ea       	ldi	r24, 0xA0	; 160
    1bc0:	ce dd       	rcall	.-1124   	; 0x175e <XPROGTarget_SendByte>
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
    1bc2:	80 91 6c 01 	lds	r24, 0x016C
    1bc6:	81 50       	subi	r24, 0x01	; 1
    1bc8:	ca dd       	rcall	.-1132   	; 0x175e <XPROGTarget_SendByte>

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1bca:	84 e6       	ldi	r24, 0x64	; 100
    1bcc:	c8 dd       	rcall	.-1136   	; 0x175e <XPROGTarget_SendByte>
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    1bce:	10 e0       	ldi	r17, 0x00	; 0
    1bd0:	03 c0       	rjmp	.+6      	; 0x1bd8 <XMEGANVM_EraseMemory+0x82>
		  XPROGTarget_SendByte(0x00);
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	c4 dd       	rcall	.-1144   	; 0x175e <XPROGTarget_SendByte>
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    1bd6:	1f 5f       	subi	r17, 0xFF	; 255
    1bd8:	21 2f       	mov	r18, r17
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	80 91 6c 01 	lds	r24, 0x016C
    1be0:	90 91 6d 01 	lds	r25, 0x016D
    1be4:	28 17       	cp	r18, r24
    1be6:	39 07       	cpc	r19, r25
    1be8:	a0 f3       	brcs	.-24     	; 0x1bd2 <XMEGANVM_EraseMemory+0x7c>
		  XPROGTarget_SendByte(0x00);

		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1bea:	8c e4       	ldi	r24, 0x4C	; 76
    1bec:	b8 dd       	rcall	.-1168   	; 0x175e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1bee:	8a e0       	ldi	r24, 0x0A	; 10
    1bf0:	3b de       	rcall	.-906    	; 0x1868 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    1bf2:	80 e3       	ldi	r24, 0x30	; 48
    1bf4:	b4 dd       	rcall	.-1176   	; 0x175e <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the EEPROM erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1bf6:	8c e4       	ldi	r24, 0x4C	; 76
    1bf8:	b2 dd       	rcall	.-1180   	; 0x175e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1bfa:	8b e0       	ldi	r24, 0x0B	; 11
    1bfc:	35 de       	rcall	.-918    	; 0x1868 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	0c c0       	rjmp	.+24     	; 0x1c1a <XMEGANVM_EraseMemory+0xc4>
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1c02:	8c e4       	ldi	r24, 0x4C	; 76
    1c04:	ac dd       	rcall	.-1192   	; 0x175e <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1c06:	8a e0       	ldi	r24, 0x0A	; 10
    1c08:	2f de       	rcall	.-930    	; 0x1868 <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    1c0a:	8d 2d       	mov	r24, r13
    1c0c:	a8 dd       	rcall	.-1200   	; 0x175e <XPROGTarget_SendByte>

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1c0e:	8c e4       	ldi	r24, 0x4C	; 76
    1c10:	a6 dd       	rcall	.-1204   	; 0x175e <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(Address);
    1c12:	c8 01       	movw	r24, r16
    1c14:	b7 01       	movw	r22, r14
    1c16:	0f de       	rcall	.-994    	; 0x1836 <XMEGANVM_SendAddress>
		XPROGTarget_SendByte(0x00);
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	a1 dd       	rcall	.-1214   	; 0x175e <XPROGTarget_SendByte>
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    1c1c:	36 de       	rcall	.-916    	; 0x188a <XMEGANVM_WaitWhileNVMBusBusy>
    1c1e:	01 c0       	rjmp	.+2      	; 0x1c22 <XMEGANVM_EraseMemory+0xcc>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);

		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
		  return false;
    1c20:	80 e0       	ldi	r24, 0x00	; 0
	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
	  return false;

	return true;
}
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	ff 90       	pop	r15
    1c28:	ef 90       	pop	r14
    1c2a:	df 90       	pop	r13
    1c2c:	08 95       	ret

00001c2e <TINYNVM_SendWriteNVMRegister>:
 */
static void TINYNVM_SendWriteNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SOUT | ((Address & 0x30) << 1) | (Address & 0x0F));
    1c2e:	28 2f       	mov	r18, r24
    1c30:	2f 70       	andi	r18, 0x0F	; 15
    1c32:	20 69       	ori	r18, 0x90	; 144
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	80 73       	andi	r24, 0x30	; 48
    1c38:	90 70       	andi	r25, 0x00	; 0
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	82 2b       	or	r24, r18
}
    1c40:	8e cd       	rjmp	.-1252   	; 0x175e <XPROGTarget_SendByte>

00001c42 <TINYNVM_SendPointerAddress>:

#if defined(ENABLE_XPROG_PROTOCOL) || defined(__DOXYGEN__)

/** Sends the given pointer address to the target's TPI pointer register */
static void TINYNVM_SendPointerAddress(const uint16_t AbsoluteAddress)
{
    1c42:	1f 93       	push	r17
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	0f 92       	push	r0
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	18 2f       	mov	r17, r24
	/* Send the given 16-bit address to the target, LSB first */
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 0);
    1c50:	88 e6       	ldi	r24, 0x68	; 104
    1c52:	99 83       	std	Y+1, r25	; 0x01
    1c54:	84 dd       	rcall	.-1272   	; 0x175e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress & 0xFF);
    1c56:	81 2f       	mov	r24, r17
    1c58:	82 dd       	rcall	.-1276   	; 0x175e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 1);
    1c5a:	89 e6       	ldi	r24, 0x69	; 105
    1c5c:	80 dd       	rcall	.-1280   	; 0x175e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    1c5e:	99 81       	ldd	r25, Y+1	; 0x01
    1c60:	89 2f       	mov	r24, r25
    1c62:	7d dd       	rcall	.-1286   	; 0x175e <XPROGTarget_SendByte>
}
    1c64:	0f 90       	pop	r0
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	1f 91       	pop	r17
    1c6c:	08 95       	ret

00001c6e <TINYNVM_WaitWhileNVMBusBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the SLDCS command to read the TPI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(TPI_CMD_SLDCS | TPI_STATUS_REG);
    1c6e:	80 e8       	ldi	r24, 0x80	; 128
    1c70:	76 dd       	rcall	.-1300   	; 0x175e <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1c72:	90 dd       	rcall	.-1248   	; 0x1794 <XPROGTarget_ReceiveByte>

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1c74:	9a b5       	in	r25, 0x2a	; 42
    1c76:	99 23       	and	r25, r25
    1c78:	21 f0       	breq	.+8      	; 0x1c82 <TINYNVM_WaitWhileNVMBusBusy+0x14>
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & TPI_STATUS_NVM)
    1c7a:	81 ff       	sbrs	r24, 1
    1c7c:	f8 cf       	rjmp	.-16     	; 0x1c6e <TINYNVM_WaitWhileNVMBusBusy>
		  return true;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	08 95       	ret

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    1c82:	80 e0       	ldi	r24, 0x00	; 0

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & TPI_STATUS_NVM)
		  return true;
	}
}
    1c84:	08 95       	ret

00001c86 <TINYNVM_WaitWhileNVMControllerBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);
    1c86:	80 91 6f 01 	lds	r24, 0x016F
 */
static void TINYNVM_SendReadNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SIN | ((Address & 0x30) << 1) | (Address & 0x0F));
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	2f 70       	andi	r18, 0x0F	; 15
    1c8e:	20 61       	ori	r18, 0x10	; 16
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	80 73       	andi	r24, 0x30	; 48
    1c94:	90 70       	andi	r25, 0x00	; 0
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	82 2b       	or	r24, r18
    1c9c:	60 dd       	rcall	.-1344   	; 0x175e <XPROGTarget_SendByte>
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    1c9e:	7a dd       	rcall	.-1292   	; 0x1794 <XPROGTarget_ReceiveByte>

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    1ca0:	9a b5       	in	r25, 0x2a	; 42
    1ca2:	99 23       	and	r25, r25
    1ca4:	21 f0       	breq	.+8      	; 0x1cae <TINYNVM_WaitWhileNVMControllerBusy+0x28>
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    1ca6:	87 fd       	sbrc	r24, 7
    1ca8:	ee cf       	rjmp	.-36     	; 0x1c86 <TINYNVM_WaitWhileNVMControllerBusy>
		  return true;
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	08 95       	ret

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    1cae:	80 e0       	ldi	r24, 0x00	; 0

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
		  return true;
	}
}
    1cb0:	08 95       	ret

00001cb2 <TINYNVM_EnableTPI>:
/** Enables the physical TPI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the TPI interface was enabled successfully, false otherwise
 */
bool TINYNVM_EnableTPI(void)
{
    1cb2:	cf 92       	push	r12
    1cb4:	df 92       	push	r13
    1cb6:	ef 92       	push	r14
    1cb8:	ff 92       	push	r15
    1cba:	0f 93       	push	r16
    1cbc:	1f 93       	push	r17
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	28 97       	sbiw	r28, 0x08	; 8
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	de bf       	out	0x3e, r29	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	cd bf       	out	0x3d, r28	; 61
	/* Enable TPI programming mode with the attached target */
	XPROGTarget_EnableTargetTPI();
    1cd2:	7e dd       	rcall	.-1284   	; 0x17d0 <XPROGTarget_EnableTargetTPI>

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
    1cd4:	82 ec       	ldi	r24, 0xC2	; 194
    1cd6:	43 dd       	rcall	.-1402   	; 0x175e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x02);
    1cd8:	82 e0       	ldi	r24, 0x02	; 2
    1cda:	41 dd       	rcall	.-1406   	; 0x175e <XPROGTarget_SendByte>

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
    1cdc:	80 ee       	ldi	r24, 0xE0	; 224
    1cde:	3f dd       	rcall	.-1410   	; 0x175e <XPROGTarget_SendByte>
    1ce0:	8e 01       	movw	r16, r28
    1ce2:	07 5f       	subi	r16, 0xF7	; 247
    1ce4:	1f 4f       	sbci	r17, 0xFF	; 255

/** Enables the physical TPI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the TPI interface was enabled successfully, false otherwise
 */
bool TINYNVM_EnableTPI(void)
    1ce6:	7e 01       	movw	r14, r28
    1ce8:	08 94       	sec
    1cea:	e1 1c       	adc	r14, r1
    1cec:	f1 1c       	adc	r15, r1
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);
    1cee:	67 01       	movw	r12, r14
    1cf0:	d6 01       	movw	r26, r12
    1cf2:	ea e9       	ldi	r30, 0x9A	; 154
    1cf4:	f1 e0       	ldi	r31, 0x01	; 1
    1cf6:	88 e0       	ldi	r24, 0x08	; 8
    1cf8:	01 90       	ld	r0, Z+
    1cfa:	0d 92       	st	X+, r0
    1cfc:	81 50       	subi	r24, 0x01	; 1
    1cfe:	e1 f7       	brne	.-8      	; 0x1cf8 <TINYNVM_EnableTPI+0x46>
    1d00:	f8 01       	movw	r30, r16
    1d02:	82 91       	ld	r24, -Z
    1d04:	8f 01       	movw	r16, r30
    1d06:	2b dd       	rcall	.-1450   	; 0x175e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
    1d08:	0e 15       	cp	r16, r14
    1d0a:	1f 05       	cpc	r17, r15
    1d0c:	89 f7       	brne	.-30     	; 0x1cf0 <TINYNVM_EnableTPI+0x3e>
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return TINYNVM_WaitWhileNVMBusBusy();
    1d0e:	af df       	rcall	.-162    	; 0x1c6e <TINYNVM_WaitWhileNVMBusBusy>
}
    1d10:	28 96       	adiw	r28, 0x08	; 8
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	1f 91       	pop	r17
    1d22:	0f 91       	pop	r16
    1d24:	ff 90       	pop	r15
    1d26:	ef 90       	pop	r14
    1d28:	df 90       	pop	r13
    1d2a:	cf 90       	pop	r12
    1d2c:	08 95       	ret

00001d2e <TINYNVM_DisableTPI>:

/** Removes access to the target's NVM controller and physically disables the target's physical TPI interface. */
void TINYNVM_DisableTPI(void)
{
	TINYNVM_WaitWhileNVMBusBusy();
    1d2e:	9f df       	rcall	.-194    	; 0x1c6e <TINYNVM_WaitWhileNVMBusBusy>

	do
	{
		/* Clear the NVMEN bit in the TPI STATUS register to disable TPI mode */
		XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_STATUS_REG);
    1d30:	80 ec       	ldi	r24, 0xC0	; 192
    1d32:	15 dd       	rcall	.-1494   	; 0x175e <XPROGTarget_SendByte>
		XPROGTarget_SendByte(0x00);
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	13 dd       	rcall	.-1498   	; 0x175e <XPROGTarget_SendByte>

		/* Read back the STATUS register, check to see if it took effect */
		XPROGTarget_SendByte(TPI_CMD_SLDCS | PDI_RESET_REG);
    1d38:	81 e8       	ldi	r24, 0x81	; 129
    1d3a:	11 dd       	rcall	.-1502   	; 0x175e <XPROGTarget_SendByte>
	} while (XPROGTarget_ReceiveByte() != 0x00);
    1d3c:	2b dd       	rcall	.-1450   	; 0x1794 <XPROGTarget_ReceiveByte>
    1d3e:	88 23       	and	r24, r24
    1d40:	b9 f7       	brne	.-18     	; 0x1d30 <TINYNVM_DisableTPI+0x2>

	XPROGTarget_DisableTargetTPI();
}
    1d42:	f6 cc       	rjmp	.-1556   	; 0x1730 <XPROGTarget_DisableTargetTPI>

00001d44 <TINYNVM_ReadMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_ReadMemory(const uint16_t ReadAddress,
                        uint8_t* ReadBuffer,
                        uint16_t ReadSize)
{
    1d44:	ef 92       	push	r14
    1d46:	ff 92       	push	r15
    1d48:	0f 93       	push	r16
    1d4a:	1f 93       	push	r17
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	8c 01       	movw	r16, r24
    1d52:	eb 01       	movw	r28, r22
    1d54:	7a 01       	movw	r14, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1d56:	97 df       	rcall	.-210    	; 0x1c86 <TINYNVM_WaitWhileNVMControllerBusy>
    1d58:	88 23       	and	r24, r24
    1d5a:	c9 f0       	breq	.+50     	; 0x1d8e <TINYNVM_ReadMemory+0x4a>
	  return false;

	/* Set the NVM control register to the NO OP command for memory reading */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1d5c:	80 91 6e 01 	lds	r24, 0x016E
    1d60:	66 df       	rcall	.-308    	; 0x1c2e <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	fc dc       	rcall	.-1544   	; 0x175e <XPROGTarget_SendByte>

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);
    1d66:	c8 01       	movw	r24, r16
    1d68:	6c df       	rcall	.-296    	; 0x1c42 <TINYNVM_SendPointerAddress>

	while (ReadSize-- && TimeoutTicksRemaining)
    1d6a:	04 c0       	rjmp	.+8      	; 0x1d74 <TINYNVM_ReadMemory+0x30>
	{
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
    1d6c:	84 e2       	ldi	r24, 0x24	; 36
    1d6e:	f7 dc       	rcall	.-1554   	; 0x175e <XPROGTarget_SendByte>
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1d70:	11 dd       	rcall	.-1502   	; 0x1794 <XPROGTarget_ReceiveByte>
    1d72:	89 93       	st	Y+, r24
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);

	while (ReadSize-- && TimeoutTicksRemaining)
    1d74:	e1 14       	cp	r14, r1
    1d76:	f1 04       	cpc	r15, r1
    1d78:	31 f0       	breq	.+12     	; 0x1d86 <TINYNVM_ReadMemory+0x42>
    1d7a:	8a b5       	in	r24, 0x2a	; 42
    1d7c:	08 94       	sec
    1d7e:	e1 08       	sbc	r14, r1
    1d80:	f1 08       	sbc	r15, r1
    1d82:	88 23       	and	r24, r24
    1d84:	99 f7       	brne	.-26     	; 0x1d6c <TINYNVM_ReadMemory+0x28>
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
    1d86:	9a b5       	in	r25, 0x2a	; 42
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	99 23       	and	r25, r25
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <TINYNVM_ReadMemory+0x4c>
                        uint8_t* ReadBuffer,
                        uint16_t ReadSize)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
	  return false;
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	1f 91       	pop	r17
    1d96:	0f 91       	pop	r16
    1d98:	ff 90       	pop	r15
    1d9a:	ef 90       	pop	r14
    1d9c:	08 95       	ret

00001d9e <TINYNVM_WriteMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
                         uint8_t* WriteBuffer,
                         uint16_t WriteLength)
{
    1d9e:	ef 92       	push	r14
    1da0:	ff 92       	push	r15
    1da2:	0f 93       	push	r16
    1da4:	1f 93       	push	r17
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	8c 01       	movw	r16, r24
    1dac:	eb 01       	movw	r28, r22
    1dae:	7a 01       	movw	r14, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1db0:	6a df       	rcall	.-300    	; 0x1c86 <TINYNVM_WaitWhileNVMControllerBusy>
    1db2:	88 23       	and	r24, r24
    1db4:	39 f1       	breq	.+78     	; 0x1e04 <TINYNVM_WriteMemory+0x66>
	  return false;

	/* Must have an integer number of words to write - if extra byte, word-align via a dummy high byte */
	if (WriteLength & 0x01)
    1db6:	e0 fe       	sbrs	r14, 0
    1db8:	08 c0       	rjmp	.+16     	; 0x1dca <TINYNVM_WriteMemory+0x2c>
	  WriteBuffer[WriteLength++] = 0xFF;
    1dba:	fe 01       	movw	r30, r28
    1dbc:	ee 0d       	add	r30, r14
    1dbe:	ff 1d       	adc	r31, r15
    1dc0:	8f ef       	ldi	r24, 0xFF	; 255
    1dc2:	80 83       	st	Z, r24
    1dc4:	08 94       	sec
    1dc6:	e1 1c       	adc	r14, r1
    1dc8:	f1 1c       	adc	r15, r1

	/* Set the NVM control register to the WORD WRITE command for memory writing */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1dca:	80 91 6e 01 	lds	r24, 0x016E
    1dce:	2f df       	rcall	.-418    	; 0x1c2e <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);
    1dd0:	8d e1       	ldi	r24, 0x1D	; 29
    1dd2:	c5 dc       	rcall	.-1654   	; 0x175e <XPROGTarget_SendByte>

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);
    1dd4:	c8 01       	movw	r24, r16
    1dd6:	35 df       	rcall	.-406    	; 0x1c42 <TINYNVM_SendPointerAddress>

	while (WriteLength)
    1dd8:	10 c0       	rjmp	.+32     	; 0x1dfa <TINYNVM_WriteMemory+0x5c>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1dda:	55 df       	rcall	.-342    	; 0x1c86 <TINYNVM_WaitWhileNVMControllerBusy>
    1ddc:	88 23       	and	r24, r24
    1dde:	91 f0       	breq	.+36     	; 0x1e04 <TINYNVM_WriteMemory+0x66>
		  return false;

		/* Write the low byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    1de0:	84 e6       	ldi	r24, 0x64	; 100
    1de2:	bd dc       	rcall	.-1670   	; 0x175e <XPROGTarget_SendByte>
		XPROGTarget_SendByte(*(WriteBuffer++));
    1de4:	88 81       	ld	r24, Y
    1de6:	bb dc       	rcall	.-1674   	; 0x175e <XPROGTarget_SendByte>

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    1de8:	84 e6       	ldi	r24, 0x64	; 100
    1dea:	b9 dc       	rcall	.-1678   	; 0x175e <XPROGTarget_SendByte>
		XPROGTarget_SendByte(*(WriteBuffer++));
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
 *  \param[in] WriteBuffer   Buffer to source data from
 *  \param[in] WriteLength   Total number of bytes to write to the device (must be an integer multiple of 2)
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
    1dee:	22 96       	adiw	r28, 0x02	; 2
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
		XPROGTarget_SendByte(*(WriteBuffer++));

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
		XPROGTarget_SendByte(*(WriteBuffer++));
    1df0:	b6 dc       	rcall	.-1684   	; 0x175e <XPROGTarget_SendByte>

		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
    1df2:	8e ef       	ldi	r24, 0xFE	; 254
    1df4:	9f ef       	ldi	r25, 0xFF	; 255
    1df6:	e8 0e       	add	r14, r24
    1df8:	f9 1e       	adc	r15, r25
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);

	while (WriteLength)
    1dfa:	e1 14       	cp	r14, r1
    1dfc:	f1 04       	cpc	r15, r1
    1dfe:	69 f7       	brne	.-38     	; 0x1dda <TINYNVM_WriteMemory+0x3c>

		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
	}

	return true;
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	01 c0       	rjmp	.+2      	; 0x1e06 <TINYNVM_WriteMemory+0x68>

	while (WriteLength)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(TINYNVM_WaitWhileNVMControllerBusy()))
		  return false;
    1e04:	80 e0       	ldi	r24, 0x00	; 0
		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
	}

	return true;
}
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	1f 91       	pop	r17
    1e0c:	0f 91       	pop	r16
    1e0e:	ff 90       	pop	r15
    1e10:	ef 90       	pop	r14
    1e12:	08 95       	ret

00001e14 <TINYNVM_EraseMemory>:
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_EraseMemory(const uint8_t EraseCommand,
                         const uint16_t Address)
{
    1e14:	1f 93       	push	r17
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	18 2f       	mov	r17, r24
    1e1c:	eb 01       	movw	r28, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1e1e:	33 df       	rcall	.-410    	; 0x1c86 <TINYNVM_WaitWhileNVMControllerBusy>
    1e20:	88 23       	and	r24, r24
    1e22:	71 f0       	breq	.+28     	; 0x1e40 <TINYNVM_EraseMemory+0x2c>
	  return false;

	/* Set the NVM control register to the target memory erase command */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1e24:	80 91 6e 01 	lds	r24, 0x016E
    1e28:	02 df       	rcall	.-508    	; 0x1c2e <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(EraseCommand);
    1e2a:	81 2f       	mov	r24, r17
    1e2c:	98 dc       	rcall	.-1744   	; 0x175e <XPROGTarget_SendByte>

	/* Write to a high byte location within the target address space to start the erase process */
	TINYNVM_SendPointerAddress(Address | 0x0001);
    1e2e:	ce 01       	movw	r24, r28
    1e30:	81 60       	ori	r24, 0x01	; 1
    1e32:	07 df       	rcall	.-498    	; 0x1c42 <TINYNVM_SendPointerAddress>
	XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT);
    1e34:	80 e6       	ldi	r24, 0x60	; 96
    1e36:	93 dc       	rcall	.-1754   	; 0x175e <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	91 dc       	rcall	.-1758   	; 0x175e <XPROGTarget_SendByte>

	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1e3c:	24 df       	rcall	.-440    	; 0x1c86 <TINYNVM_WaitWhileNVMControllerBusy>
    1e3e:	01 c0       	rjmp	.+2      	; 0x1e42 <TINYNVM_EraseMemory+0x2e>
bool TINYNVM_EraseMemory(const uint8_t EraseCommand,
                         const uint16_t Address)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
	  return false;
    1e40:	80 e0       	ldi	r24, 0x00	; 0
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
	  return false;

	return true;
}
    1e42:	df 91       	pop	r29
    1e44:	cf 91       	pop	r28
    1e46:	1f 91       	pop	r17
    1e48:	08 95       	ret

00001e4a <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1e4a:	8f 92       	push	r8
    1e4c:	9f 92       	push	r9
    1e4e:	bf 92       	push	r11
    1e50:	cf 92       	push	r12
    1e52:	df 92       	push	r13
    1e54:	ef 92       	push	r14
    1e56:	ff 92       	push	r15
    1e58:	0f 93       	push	r16
    1e5a:	1f 93       	push	r17
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	0f 92       	push	r0
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	e8 2e       	mov	r14, r24
    1e68:	4b 01       	movw	r8, r22
    1e6a:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1e6c:	99 83       	std	Y+1, r25	; 0x01
    1e6e:	4c d2       	rcall	.+1176   	; 0x2308 <Endpoint_WaitUntilReady>
    1e70:	b8 2e       	mov	r11, r24
    1e72:	99 81       	ldd	r25, Y+1	; 0x01
    1e74:	88 23       	and	r24, r24
    1e76:	c9 f5       	brne	.+114    	; 0x1eea <Endpoint_Write_Stream_LE+0xa0>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1e78:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1e7a:	01 15       	cp	r16, r1
    1e7c:	11 05       	cpc	r17, r1
    1e7e:	39 f0       	breq	.+14     	; 0x1e8e <Endpoint_Write_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
    1e80:	f8 01       	movw	r30, r16
    1e82:	20 81       	ld	r18, Z
    1e84:	31 81       	ldd	r19, Z+1	; 0x01
    1e86:	82 1a       	sub	r8, r18
    1e88:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1e8a:	e2 0e       	add	r14, r18
    1e8c:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1e8e:	cc 24       	eor	r12, r12
    1e90:	dd 24       	eor	r13, r13
    1e92:	26 c0       	rjmp	.+76     	; 0x1ee0 <Endpoint_Write_Stream_LE+0x96>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1e94:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1e98:	85 fd       	sbrc	r24, 5
    1e9a:	17 c0       	rjmp	.+46     	; 0x1eca <Endpoint_Write_Stream_LE+0x80>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e9c:	80 91 e8 00 	lds	r24, 0x00E8
    1ea0:	8e 77       	andi	r24, 0x7E	; 126
    1ea2:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1ea6:	56 d4       	rcall	.+2220   	; 0x2754 <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    1ea8:	01 15       	cp	r16, r1
    1eaa:	11 05       	cpc	r17, r1
    1eac:	51 f0       	breq	.+20     	; 0x1ec2 <Endpoint_Write_Stream_LE+0x78>
			{
				*BytesProcessed += BytesInTransfer;
    1eae:	f8 01       	movw	r30, r16
    1eb0:	80 81       	ld	r24, Z
    1eb2:	91 81       	ldd	r25, Z+1	; 0x01
    1eb4:	8c 0d       	add	r24, r12
    1eb6:	9d 1d       	adc	r25, r13
    1eb8:	91 83       	std	Z+1, r25	; 0x01
    1eba:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1ebc:	25 e0       	ldi	r18, 0x05	; 5
    1ebe:	b2 2e       	mov	r11, r18
    1ec0:	14 c0       	rjmp	.+40     	; 0x1eea <Endpoint_Write_Stream_LE+0xa0>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1ec2:	22 d2       	rcall	.+1092   	; 0x2308 <Endpoint_WaitUntilReady>
    1ec4:	88 23       	and	r24, r24
    1ec6:	61 f0       	breq	.+24     	; 0x1ee0 <Endpoint_Write_Stream_LE+0x96>
    1ec8:	0f c0       	rjmp	.+30     	; 0x1ee8 <Endpoint_Write_Stream_LE+0x9e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1eca:	f7 01       	movw	r30, r14
    1ecc:	81 91       	ld	r24, Z+
    1ece:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1ed0:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1ed4:	08 94       	sec
    1ed6:	81 08       	sbc	r8, r1
    1ed8:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    1eda:	08 94       	sec
    1edc:	c1 1c       	adc	r12, r1
    1ede:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1ee0:	81 14       	cp	r8, r1
    1ee2:	91 04       	cpc	r9, r1
    1ee4:	b9 f6       	brne	.-82     	; 0x1e94 <Endpoint_Write_Stream_LE+0x4a>
    1ee6:	01 c0       	rjmp	.+2      	; 0x1eea <Endpoint_Write_Stream_LE+0xa0>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1ee8:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1eea:	8b 2d       	mov	r24, r11
    1eec:	0f 90       	pop	r0
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	1f 91       	pop	r17
    1ef4:	0f 91       	pop	r16
    1ef6:	ff 90       	pop	r15
    1ef8:	ef 90       	pop	r14
    1efa:	df 90       	pop	r13
    1efc:	cf 90       	pop	r12
    1efe:	bf 90       	pop	r11
    1f00:	9f 90       	pop	r9
    1f02:	8f 90       	pop	r8
    1f04:	08 95       	ret

00001f06 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1f06:	8f 92       	push	r8
    1f08:	9f 92       	push	r9
    1f0a:	bf 92       	push	r11
    1f0c:	cf 92       	push	r12
    1f0e:	df 92       	push	r13
    1f10:	ef 92       	push	r14
    1f12:	ff 92       	push	r15
    1f14:	0f 93       	push	r16
    1f16:	1f 93       	push	r17
    1f18:	df 93       	push	r29
    1f1a:	cf 93       	push	r28
    1f1c:	0f 92       	push	r0
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	e8 2e       	mov	r14, r24
    1f24:	4b 01       	movw	r8, r22
    1f26:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1f28:	99 83       	std	Y+1, r25	; 0x01
    1f2a:	ee d1       	rcall	.+988    	; 0x2308 <Endpoint_WaitUntilReady>
    1f2c:	b8 2e       	mov	r11, r24
    1f2e:	99 81       	ldd	r25, Y+1	; 0x01
    1f30:	88 23       	and	r24, r24
    1f32:	c9 f5       	brne	.+114    	; 0x1fa6 <Endpoint_Read_Stream_LE+0xa0>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1f34:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1f36:	01 15       	cp	r16, r1
    1f38:	11 05       	cpc	r17, r1
    1f3a:	39 f0       	breq	.+14     	; 0x1f4a <Endpoint_Read_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
    1f3c:	f8 01       	movw	r30, r16
    1f3e:	20 81       	ld	r18, Z
    1f40:	31 81       	ldd	r19, Z+1	; 0x01
    1f42:	82 1a       	sub	r8, r18
    1f44:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1f46:	e2 0e       	add	r14, r18
    1f48:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1f4a:	cc 24       	eor	r12, r12
    1f4c:	dd 24       	eor	r13, r13
    1f4e:	26 c0       	rjmp	.+76     	; 0x1f9c <Endpoint_Read_Stream_LE+0x96>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1f50:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1f54:	85 fd       	sbrc	r24, 5
    1f56:	17 c0       	rjmp	.+46     	; 0x1f86 <Endpoint_Read_Stream_LE+0x80>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f58:	80 91 e8 00 	lds	r24, 0x00E8
    1f5c:	8b 77       	andi	r24, 0x7B	; 123
    1f5e:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1f62:	f8 d3       	rcall	.+2032   	; 0x2754 <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    1f64:	01 15       	cp	r16, r1
    1f66:	11 05       	cpc	r17, r1
    1f68:	51 f0       	breq	.+20     	; 0x1f7e <Endpoint_Read_Stream_LE+0x78>
			{
				*BytesProcessed += BytesInTransfer;
    1f6a:	f8 01       	movw	r30, r16
    1f6c:	80 81       	ld	r24, Z
    1f6e:	91 81       	ldd	r25, Z+1	; 0x01
    1f70:	8c 0d       	add	r24, r12
    1f72:	9d 1d       	adc	r25, r13
    1f74:	91 83       	std	Z+1, r25	; 0x01
    1f76:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1f78:	45 e0       	ldi	r20, 0x05	; 5
    1f7a:	b4 2e       	mov	r11, r20
    1f7c:	14 c0       	rjmp	.+40     	; 0x1fa6 <Endpoint_Read_Stream_LE+0xa0>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1f7e:	c4 d1       	rcall	.+904    	; 0x2308 <Endpoint_WaitUntilReady>
    1f80:	88 23       	and	r24, r24
    1f82:	61 f0       	breq	.+24     	; 0x1f9c <Endpoint_Read_Stream_LE+0x96>
    1f84:	0f c0       	rjmp	.+30     	; 0x1fa4 <Endpoint_Read_Stream_LE+0x9e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1f86:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1f8a:	f7 01       	movw	r30, r14
    1f8c:	81 93       	st	Z+, r24
    1f8e:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1f90:	08 94       	sec
    1f92:	81 08       	sbc	r8, r1
    1f94:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    1f96:	08 94       	sec
    1f98:	c1 1c       	adc	r12, r1
    1f9a:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1f9c:	81 14       	cp	r8, r1
    1f9e:	91 04       	cpc	r9, r1
    1fa0:	b9 f6       	brne	.-82     	; 0x1f50 <Endpoint_Read_Stream_LE+0x4a>
    1fa2:	01 c0       	rjmp	.+2      	; 0x1fa6 <Endpoint_Read_Stream_LE+0xa0>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1fa4:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1fa6:	8b 2d       	mov	r24, r11
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	1f 91       	pop	r17
    1fb0:	0f 91       	pop	r16
    1fb2:	ff 90       	pop	r15
    1fb4:	ef 90       	pop	r14
    1fb6:	df 90       	pop	r13
    1fb8:	cf 90       	pop	r12
    1fba:	bf 90       	pop	r11
    1fbc:	9f 90       	pop	r9
    1fbe:	8f 90       	pop	r8
    1fc0:	08 95       	ret

00001fc2 <Endpoint_Read_Stream_BE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1fc2:	bf 92       	push	r11
    1fc4:	cf 92       	push	r12
    1fc6:	df 92       	push	r13
    1fc8:	ef 92       	push	r14
    1fca:	ff 92       	push	r15
    1fcc:	0f 93       	push	r16
    1fce:	1f 93       	push	r17
    1fd0:	cf 93       	push	r28
    1fd2:	df 93       	push	r29
    1fd4:	6c 01       	movw	r12, r24
    1fd6:	eb 01       	movw	r28, r22
    1fd8:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1fda:	96 d1       	rcall	.+812    	; 0x2308 <Endpoint_WaitUntilReady>
    1fdc:	b8 2e       	mov	r11, r24
    1fde:	88 23       	and	r24, r24
    1fe0:	d9 f5       	brne	.+118    	; 0x2058 <Endpoint_Read_Stream_BE+0x96>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1fe2:	8e 01       	movw	r16, r28
    1fe4:	01 50       	subi	r16, 0x01	; 1
    1fe6:	10 40       	sbci	r17, 0x00	; 0
    1fe8:	0c 0d       	add	r16, r12
    1fea:	1d 1d       	adc	r17, r13
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1fec:	e1 14       	cp	r14, r1
    1fee:	f1 04       	cpc	r15, r1
    1ff0:	39 f0       	breq	.+14     	; 0x2000 <Endpoint_Read_Stream_BE+0x3e>
	{
		Length -= *BytesProcessed;
    1ff2:	f7 01       	movw	r30, r14
    1ff4:	20 81       	ld	r18, Z
    1ff6:	31 81       	ldd	r19, Z+1	; 0x01
    1ff8:	c2 1b       	sub	r28, r18
    1ffa:	d3 0b       	sbc	r29, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1ffc:	02 1b       	sub	r16, r18
    1ffe:	13 0b       	sbc	r17, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    2000:	cc 24       	eor	r12, r12
    2002:	dd 24       	eor	r13, r13
    2004:	25 c0       	rjmp	.+74     	; 0x2050 <Endpoint_Read_Stream_BE+0x8e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2006:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    200a:	85 fd       	sbrc	r24, 5
    200c:	17 c0       	rjmp	.+46     	; 0x203c <Endpoint_Read_Stream_BE+0x7a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    200e:	80 91 e8 00 	lds	r24, 0x00E8
    2012:	8b 77       	andi	r24, 0x7B	; 123
    2014:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    2018:	9d d3       	rcall	.+1850   	; 0x2754 <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    201a:	e1 14       	cp	r14, r1
    201c:	f1 04       	cpc	r15, r1
    201e:	51 f0       	breq	.+20     	; 0x2034 <Endpoint_Read_Stream_BE+0x72>
			{
				*BytesProcessed += BytesInTransfer;
    2020:	f7 01       	movw	r30, r14
    2022:	80 81       	ld	r24, Z
    2024:	91 81       	ldd	r25, Z+1	; 0x01
    2026:	8c 0d       	add	r24, r12
    2028:	9d 1d       	adc	r25, r13
    202a:	91 83       	std	Z+1, r25	; 0x01
    202c:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    202e:	55 e0       	ldi	r21, 0x05	; 5
    2030:	b5 2e       	mov	r11, r21
    2032:	12 c0       	rjmp	.+36     	; 0x2058 <Endpoint_Read_Stream_BE+0x96>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    2034:	69 d1       	rcall	.+722    	; 0x2308 <Endpoint_WaitUntilReady>
    2036:	88 23       	and	r24, r24
    2038:	59 f0       	breq	.+22     	; 0x2050 <Endpoint_Read_Stream_BE+0x8e>
    203a:	0d c0       	rjmp	.+26     	; 0x2056 <Endpoint_Read_Stream_BE+0x94>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    203c:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    2040:	f8 01       	movw	r30, r16
    2042:	80 83       	st	Z, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2044:	01 50       	subi	r16, 0x01	; 1
    2046:	10 40       	sbci	r17, 0x00	; 0
			Length--;
    2048:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    204a:	08 94       	sec
    204c:	c1 1c       	adc	r12, r1
    204e:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    2050:	20 97       	sbiw	r28, 0x00	; 0
    2052:	c9 f6       	brne	.-78     	; 0x2006 <Endpoint_Read_Stream_BE+0x44>
    2054:	01 c0       	rjmp	.+2      	; 0x2058 <Endpoint_Read_Stream_BE+0x96>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    2056:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    2058:	8b 2d       	mov	r24, r11
    205a:	df 91       	pop	r29
    205c:	cf 91       	pop	r28
    205e:	1f 91       	pop	r17
    2060:	0f 91       	pop	r16
    2062:	ff 90       	pop	r15
    2064:	ef 90       	pop	r14
    2066:	df 90       	pop	r13
    2068:	cf 90       	pop	r12
    206a:	bf 90       	pop	r11
    206c:	08 95       	ret

0000206e <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    206e:	28 2f       	mov	r18, r24
    2070:	39 2f       	mov	r19, r25
    2072:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2074:	80 91 b3 01 	lds	r24, 0x01B3
    2078:	90 91 b4 01 	lds	r25, 0x01B4
    207c:	86 17       	cp	r24, r22
    207e:	97 07       	cpc	r25, r23
    2080:	18 f4       	brcc	.+6      	; 0x2088 <Endpoint_Write_Control_Stream_LE+0x1a>
    2082:	bc 01       	movw	r22, r24
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	34 c0       	rjmp	.+104    	; 0x20f0 <Endpoint_Write_Control_Stream_LE+0x82>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2088:	61 15       	cp	r22, r1
    208a:	71 05       	cpc	r23, r1
    208c:	d9 f7       	brne	.-10     	; 0x2084 <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    208e:	80 91 e8 00 	lds	r24, 0x00E8
    2092:	8e 77       	andi	r24, 0x7E	; 126
    2094:	80 93 e8 00 	sts	0x00E8, r24
    2098:	f5 cf       	rjmp	.-22     	; 0x2084 <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    209a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    209c:	88 23       	and	r24, r24
    209e:	e9 f1       	breq	.+122    	; 0x211a <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    20a0:	85 30       	cpi	r24, 0x05	; 5
    20a2:	b9 f1       	breq	.+110    	; 0x2112 <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20a4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    20a8:	83 fd       	sbrc	r24, 3
    20aa:	35 c0       	rjmp	.+106    	; 0x2116 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    20ac:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    20b0:	82 fd       	sbrc	r24, 2
    20b2:	29 c0       	rjmp	.+82     	; 0x2106 <Endpoint_Write_Control_Stream_LE+0x98>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    20b4:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    20b8:	80 ff       	sbrs	r24, 0
    20ba:	1a c0       	rjmp	.+52     	; 0x20f0 <Endpoint_Write_Control_Stream_LE+0x82>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    20bc:	80 91 f2 00 	lds	r24, 0x00F2
    20c0:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    20c2:	06 c0       	rjmp	.+12     	; 0x20d0 <Endpoint_Write_Control_Stream_LE+0x62>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    20c4:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    20c6:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    20ca:	61 50       	subi	r22, 0x01	; 1
    20cc:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    20ce:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    20d0:	61 15       	cp	r22, r1
    20d2:	71 05       	cpc	r23, r1
    20d4:	19 f0       	breq	.+6      	; 0x20dc <Endpoint_Write_Control_Stream_LE+0x6e>
    20d6:	80 31       	cpi	r24, 0x10	; 16
    20d8:	91 05       	cpc	r25, r1
    20da:	a0 f3       	brcs	.-24     	; 0x20c4 <Endpoint_Write_Control_Stream_LE+0x56>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    20dc:	21 e0       	ldi	r18, 0x01	; 1
    20de:	80 31       	cpi	r24, 0x10	; 16
    20e0:	91 05       	cpc	r25, r1
    20e2:	09 f0       	breq	.+2      	; 0x20e6 <Endpoint_Write_Control_Stream_LE+0x78>
    20e4:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20e6:	80 91 e8 00 	lds	r24, 0x00E8
    20ea:	8e 77       	andi	r24, 0x7E	; 126
    20ec:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    20f0:	61 15       	cp	r22, r1
    20f2:	71 05       	cpc	r23, r1
    20f4:	91 f6       	brne	.-92     	; 0x209a <Endpoint_Write_Control_Stream_LE+0x2c>
    20f6:	22 23       	and	r18, r18
    20f8:	81 f6       	brne	.-96     	; 0x209a <Endpoint_Write_Control_Stream_LE+0x2c>
    20fa:	05 c0       	rjmp	.+10     	; 0x2106 <Endpoint_Write_Control_Stream_LE+0x98>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    20fc:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    20fe:	88 23       	and	r24, r24
    2100:	61 f0       	breq	.+24     	; 0x211a <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2102:	85 30       	cpi	r24, 0x05	; 5
    2104:	61 f0       	breq	.+24     	; 0x211e <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2106:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    210a:	82 ff       	sbrs	r24, 2
    210c:	f7 cf       	rjmp	.-18     	; 0x20fc <Endpoint_Write_Control_Stream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2112:	83 e0       	ldi	r24, 0x03	; 3
    2114:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    211a:	82 e0       	ldi	r24, 0x02	; 2
    211c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    211e:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2120:	08 95       	ret

00002122 <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    2122:	e8 2f       	mov	r30, r24
    2124:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2126:	80 91 b3 01 	lds	r24, 0x01B3
    212a:	90 91 b4 01 	lds	r25, 0x01B4
    212e:	86 17       	cp	r24, r22
    2130:	97 07       	cpc	r25, r23
    2132:	18 f4       	brcc	.+6      	; 0x213a <Endpoint_Write_Control_PStream_LE+0x18>
    2134:	bc 01       	movw	r22, r24
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	36 c0       	rjmp	.+108    	; 0x21a6 <Endpoint_Write_Control_PStream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    213a:	61 15       	cp	r22, r1
    213c:	71 05       	cpc	r23, r1
    213e:	d9 f7       	brne	.-10     	; 0x2136 <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2140:	80 91 e8 00 	lds	r24, 0x00E8
    2144:	8e 77       	andi	r24, 0x7E	; 126
    2146:	80 93 e8 00 	sts	0x00E8, r24
    214a:	f5 cf       	rjmp	.-22     	; 0x2136 <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    214c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    214e:	88 23       	and	r24, r24
    2150:	09 f4       	brne	.+2      	; 0x2154 <Endpoint_Write_Control_PStream_LE+0x32>
    2152:	3e c0       	rjmp	.+124    	; 0x21d0 <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2154:	85 30       	cpi	r24, 0x05	; 5
    2156:	c1 f1       	breq	.+112    	; 0x21c8 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2158:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    215c:	83 fd       	sbrc	r24, 3
    215e:	36 c0       	rjmp	.+108    	; 0x21cc <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2160:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2164:	82 fd       	sbrc	r24, 2
    2166:	2a c0       	rjmp	.+84     	; 0x21bc <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2168:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    216c:	80 ff       	sbrs	r24, 0
    216e:	1b c0       	rjmp	.+54     	; 0x21a6 <Endpoint_Write_Control_PStream_LE+0x84>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    2170:	80 91 f2 00 	lds	r24, 0x00F2
    2174:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2176:	07 c0       	rjmp	.+14     	; 0x2186 <Endpoint_Write_Control_PStream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2178:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    217a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    217e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    2180:	61 50       	subi	r22, 0x01	; 1
    2182:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    2184:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2186:	61 15       	cp	r22, r1
    2188:	71 05       	cpc	r23, r1
    218a:	19 f0       	breq	.+6      	; 0x2192 <Endpoint_Write_Control_PStream_LE+0x70>
    218c:	80 31       	cpi	r24, 0x10	; 16
    218e:	91 05       	cpc	r25, r1
    2190:	98 f3       	brcs	.-26     	; 0x2178 <Endpoint_Write_Control_PStream_LE+0x56>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2192:	21 e0       	ldi	r18, 0x01	; 1
    2194:	80 31       	cpi	r24, 0x10	; 16
    2196:	91 05       	cpc	r25, r1
    2198:	09 f0       	breq	.+2      	; 0x219c <Endpoint_Write_Control_PStream_LE+0x7a>
    219a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    219c:	80 91 e8 00 	lds	r24, 0x00E8
    21a0:	8e 77       	andi	r24, 0x7E	; 126
    21a2:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    21a6:	61 15       	cp	r22, r1
    21a8:	71 05       	cpc	r23, r1
    21aa:	81 f6       	brne	.-96     	; 0x214c <Endpoint_Write_Control_PStream_LE+0x2a>
    21ac:	22 23       	and	r18, r18
    21ae:	71 f6       	brne	.-100    	; 0x214c <Endpoint_Write_Control_PStream_LE+0x2a>
    21b0:	05 c0       	rjmp	.+10     	; 0x21bc <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    21b2:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    21b4:	88 23       	and	r24, r24
    21b6:	61 f0       	breq	.+24     	; 0x21d0 <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    21b8:	85 30       	cpi	r24, 0x05	; 5
    21ba:	61 f0       	breq	.+24     	; 0x21d4 <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    21bc:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    21c0:	82 ff       	sbrs	r24, 2
    21c2:	f7 cf       	rjmp	.-18     	; 0x21b2 <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    21c8:	83 e0       	ldi	r24, 0x03	; 3
    21ca:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    21d0:	82 e0       	ldi	r24, 0x02	; 2
    21d2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    21d4:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    21d6:	08 95       	ret

000021d8 <Endpoint_Write_Control_EStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    21d8:	ef 92       	push	r14
    21da:	ff 92       	push	r15
    21dc:	0f 93       	push	r16
    21de:	1f 93       	push	r17
    21e0:	cf 93       	push	r28
    21e2:	df 93       	push	r29
    21e4:	eb 01       	movw	r28, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    21e6:	e8 2e       	mov	r14, r24
    21e8:	f9 2e       	mov	r15, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    21ea:	80 91 b3 01 	lds	r24, 0x01B3
    21ee:	90 91 b4 01 	lds	r25, 0x01B4
    21f2:	86 17       	cp	r24, r22
    21f4:	97 07       	cpc	r25, r23
    21f6:	18 f4       	brcc	.+6      	; 0x21fe <Endpoint_Write_Control_EStream_LE+0x26>
    21f8:	ec 01       	movw	r28, r24
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	36 c0       	rjmp	.+108    	; 0x226a <Endpoint_Write_Control_EStream_LE+0x92>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    21fe:	20 97       	sbiw	r28, 0x00	; 0
    2200:	e1 f7       	brne	.-8      	; 0x21fa <Endpoint_Write_Control_EStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2202:	80 91 e8 00 	lds	r24, 0x00E8
    2206:	8e 77       	andi	r24, 0x7E	; 126
    2208:	80 93 e8 00 	sts	0x00E8, r24
    220c:	f6 cf       	rjmp	.-20     	; 0x21fa <Endpoint_Write_Control_EStream_LE+0x22>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    220e:	9e b3       	in	r25, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2210:	99 23       	and	r25, r25
    2212:	e9 f1       	breq	.+122    	; 0x228e <Endpoint_Write_Control_EStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2214:	95 30       	cpi	r25, 0x05	; 5
    2216:	e9 f1       	breq	.+122    	; 0x2292 <Endpoint_Write_Control_EStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2218:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    221c:	93 fd       	sbrc	r25, 3
    221e:	35 c0       	rjmp	.+106    	; 0x228a <Endpoint_Write_Control_EStream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2220:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2224:	92 fd       	sbrc	r25, 2
    2226:	2b c0       	rjmp	.+86     	; 0x227e <Endpoint_Write_Control_EStream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2228:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    222c:	90 ff       	sbrs	r25, 0
    222e:	1d c0       	rjmp	.+58     	; 0x226a <Endpoint_Write_Control_EStream_LE+0x92>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    2230:	00 91 f2 00 	lds	r16, 0x00F2
    2234:	10 e0       	ldi	r17, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2236:	0a c0       	rjmp	.+20     	; 0x224c <Endpoint_Write_Control_EStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2238:	c7 01       	movw	r24, r14
    223a:	a7 d2       	rcall	.+1358   	; 0x278a <__eerd_byte_usb162>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    223c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2240:	08 94       	sec
    2242:	e1 1c       	adc	r14, r1
    2244:	f1 1c       	adc	r15, r1
				Length--;
    2246:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    2248:	0f 5f       	subi	r16, 0xFF	; 255
    224a:	1f 4f       	sbci	r17, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    224c:	20 97       	sbiw	r28, 0x00	; 0
    224e:	19 f0       	breq	.+6      	; 0x2256 <Endpoint_Write_Control_EStream_LE+0x7e>
    2250:	00 31       	cpi	r16, 0x10	; 16
    2252:	11 05       	cpc	r17, r1
    2254:	88 f3       	brcs	.-30     	; 0x2238 <Endpoint_Write_Control_EStream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	00 31       	cpi	r16, 0x10	; 16
    225a:	11 05       	cpc	r17, r1
    225c:	09 f0       	breq	.+2      	; 0x2260 <Endpoint_Write_Control_EStream_LE+0x88>
    225e:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2260:	90 91 e8 00 	lds	r25, 0x00E8
    2264:	9e 77       	andi	r25, 0x7E	; 126
    2266:	90 93 e8 00 	sts	0x00E8, r25
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    226a:	20 97       	sbiw	r28, 0x00	; 0
    226c:	81 f6       	brne	.-96     	; 0x220e <Endpoint_Write_Control_EStream_LE+0x36>
    226e:	88 23       	and	r24, r24
    2270:	71 f6       	brne	.-100    	; 0x220e <Endpoint_Write_Control_EStream_LE+0x36>
    2272:	05 c0       	rjmp	.+10     	; 0x227e <Endpoint_Write_Control_EStream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2274:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2276:	88 23       	and	r24, r24
    2278:	51 f0       	breq	.+20     	; 0x228e <Endpoint_Write_Control_EStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    227a:	85 30       	cpi	r24, 0x05	; 5
    227c:	51 f0       	breq	.+20     	; 0x2292 <Endpoint_Write_Control_EStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    227e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2282:	82 ff       	sbrs	r24, 2
    2284:	f7 cf       	rjmp	.-18     	; 0x2274 <Endpoint_Write_Control_EStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	05 c0       	rjmp	.+10     	; 0x2294 <Endpoint_Write_Control_EStream_LE+0xbc>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	03 c0       	rjmp	.+6      	; 0x2294 <Endpoint_Write_Control_EStream_LE+0xbc>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    228e:	82 e0       	ldi	r24, 0x02	; 2
    2290:	01 c0       	rjmp	.+2      	; 0x2294 <Endpoint_Write_Control_EStream_LE+0xbc>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2292:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	1f 91       	pop	r17
    229a:	0f 91       	pop	r16
    229c:	ff 90       	pop	r15
    229e:	ef 90       	pop	r14
    22a0:	08 95       	ret

000022a2 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    22a2:	8f 70       	andi	r24, 0x0F	; 15
    22a4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    22a8:	eb ee       	ldi	r30, 0xEB	; 235
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	81 60       	ori	r24, 0x01	; 1
    22b0:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    22b2:	ed ee       	ldi	r30, 0xED	; 237
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    22b8:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    22bc:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    22be:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    22c2:	88 1f       	adc	r24, r24
    22c4:	88 27       	eor	r24, r24
    22c6:	88 1f       	adc	r24, r24
    22c8:	08 95       	ret

000022ca <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    22ca:	80 91 ad 01 	lds	r24, 0x01AD
    22ce:	87 ff       	sbrs	r24, 7
    22d0:	11 c0       	rjmp	.+34     	; 0x22f4 <Endpoint_ClearStatusStage+0x2a>
    22d2:	03 c0       	rjmp	.+6      	; 0x22da <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    22d4:	8e b3       	in	r24, 0x1e	; 30
    22d6:	88 23       	and	r24, r24
    22d8:	b1 f0       	breq	.+44     	; 0x2306 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    22da:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    22de:	82 ff       	sbrs	r24, 2
    22e0:	f9 cf       	rjmp	.-14     	; 0x22d4 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    22e2:	80 91 e8 00 	lds	r24, 0x00E8
    22e6:	8b 77       	andi	r24, 0x7B	; 123
    22e8:	80 93 e8 00 	sts	0x00E8, r24
    22ec:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    22ee:	8e b3       	in	r24, 0x1e	; 30
    22f0:	88 23       	and	r24, r24
    22f2:	49 f0       	breq	.+18     	; 0x2306 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    22f4:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    22f8:	80 ff       	sbrs	r24, 0
    22fa:	f9 cf       	rjmp	.-14     	; 0x22ee <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    22fc:	80 91 e8 00 	lds	r24, 0x00E8
    2300:	8e 77       	andi	r24, 0x7E	; 126
    2302:	80 93 e8 00 	sts	0x00E8, r24
    2306:	08 95       	ret

00002308 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2308:	80 91 e4 00 	lds	r24, 0x00E4
    230c:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    2310:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2312:	20 91 ec 00 	lds	r18, 0x00EC
    2316:	20 ff       	sbrs	r18, 0
    2318:	25 c0       	rjmp	.+74     	; 0x2364 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    231a:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    231e:	20 fd       	sbrc	r18, 0
    2320:	15 c0       	rjmp	.+42     	; 0x234c <Endpoint_WaitUntilReady+0x44>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2322:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2324:	22 23       	and	r18, r18
    2326:	a1 f0       	breq	.+40     	; 0x2350 <Endpoint_WaitUntilReady+0x48>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2328:	25 30       	cpi	r18, 0x05	; 5
    232a:	a1 f0       	breq	.+40     	; 0x2354 <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    232c:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    2330:	25 fd       	sbrc	r18, 5
    2332:	12 c0       	rjmp	.+36     	; 0x2358 <Endpoint_WaitUntilReady+0x50>
    2334:	20 91 e4 00 	lds	r18, 0x00E4
    2338:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    233c:	28 17       	cp	r18, r24
    233e:	39 07       	cpc	r19, r25
    2340:	41 f3       	breq	.-48     	; 0x2312 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    2342:	44 23       	and	r20, r20
    2344:	59 f0       	breq	.+22     	; 0x235c <Endpoint_WaitUntilReady+0x54>
    2346:	41 50       	subi	r20, 0x01	; 1
    2348:	c9 01       	movw	r24, r18
    234a:	e3 cf       	rjmp	.-58     	; 0x2312 <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    2350:	82 e0       	ldi	r24, 0x02	; 2
    2352:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    2354:	83 e0       	ldi	r24, 0x03	; 3
    2356:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    235c:	84 e0       	ldi	r24, 0x04	; 4
    235e:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    2360:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    2362:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2364:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    2368:	22 ff       	sbrs	r18, 2
    236a:	db cf       	rjmp	.-74     	; 0x2322 <Endpoint_WaitUntilReady+0x1a>
    236c:	f9 cf       	rjmp	.-14     	; 0x2360 <Endpoint_WaitUntilReady+0x58>

0000236e <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    236e:	3c d0       	rcall	.+120    	; 0x23e8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    2370:	3e d0       	rcall	.+124    	; 0x23ee <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    2372:	80 91 d8 00 	lds	r24, 0x00D8
    2376:	8f 77       	andi	r24, 0x7F	; 127
    2378:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    237c:	80 91 d8 00 	lds	r24, 0x00D8
    2380:	80 68       	ori	r24, 0x80	; 128
    2382:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2386:	80 91 d8 00 	lds	r24, 0x00D8
    238a:	8f 7d       	andi	r24, 0xDF	; 223
    238c:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2390:	84 e0       	ldi	r24, 0x04	; 4
    2392:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2394:	86 e0       	ldi	r24, 0x06	; 6
    2396:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    2398:	09 b4       	in	r0, 0x29	; 41
    239a:	00 fe       	sbrs	r0, 0
    239c:	fd cf       	rjmp	.-6      	; 0x2398 <USB_ResetInterface+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    239e:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
    23a0:	10 92 ab 01 	sts	0x01AB, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	42 e1       	ldi	r20, 0x12	; 18
    23aa:	7b df       	rcall	.-266    	; 0x22a2 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    23ac:	80 91 e1 00 	lds	r24, 0x00E1
    23b0:	8e 7f       	andi	r24, 0xFE	; 254
    23b2:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    23b6:	80 91 e2 00 	lds	r24, 0x00E2
    23ba:	81 60       	ori	r24, 0x01	; 1
    23bc:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    23c0:	80 91 e2 00 	lds	r24, 0x00E2
    23c4:	88 60       	ori	r24, 0x08	; 8
    23c6:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    23ca:	80 91 e0 00 	lds	r24, 0x00E0
    23ce:	8e 7f       	andi	r24, 0xFE	; 254
    23d0:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    23d4:	08 95       	ret

000023d6 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
    23d6:	e3 e6       	ldi	r30, 0x63	; 99
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	8e 7f       	andi	r24, 0xFE	; 254
    23de:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	80 93 ac 01 	sts	0x01AC, r24

	USB_ResetInterface();
}
    23e6:	c3 cf       	rjmp	.-122    	; 0x236e <USB_ResetInterface>

000023e8 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    23e8:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    23ec:	08 95       	ret

000023ee <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    23ee:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    23f2:	08 95       	ret

000023f4 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    23f4:	1f 92       	push	r1
    23f6:	0f 92       	push	r0
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	0f 92       	push	r0
    23fc:	11 24       	eor	r1, r1
    23fe:	2f 93       	push	r18
    2400:	3f 93       	push	r19
    2402:	4f 93       	push	r20
    2404:	5f 93       	push	r21
    2406:	6f 93       	push	r22
    2408:	7f 93       	push	r23
    240a:	8f 93       	push	r24
    240c:	9f 93       	push	r25
    240e:	af 93       	push	r26
    2410:	bf 93       	push	r27
    2412:	ef 93       	push	r30
    2414:	ff 93       	push	r31
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    2416:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    241a:	80 ff       	sbrs	r24, 0
    241c:	17 c0       	rjmp	.+46     	; 0x244c <__vector_11+0x58>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    241e:	80 91 e2 00 	lds	r24, 0x00E2
    2422:	80 ff       	sbrs	r24, 0
    2424:	13 c0       	rjmp	.+38     	; 0x244c <__vector_11+0x58>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2426:	80 91 e2 00 	lds	r24, 0x00E2
    242a:	8e 7f       	andi	r24, 0xFE	; 254
    242c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2430:	80 91 e2 00 	lds	r24, 0x00E2
    2434:	80 61       	ori	r24, 0x10	; 16
    2436:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    243a:	80 91 d8 00 	lds	r24, 0x00D8
    243e:	80 62       	ori	r24, 0x20	; 32
    2440:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2444:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    2446:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
    2448:	0e 94 3a 01 	call	0x274	; 0x274 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    244c:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    2450:	84 ff       	sbrs	r24, 4
    2452:	2d c0       	rjmp	.+90     	; 0x24ae <__vector_11+0xba>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    2454:	80 91 e2 00 	lds	r24, 0x00E2
    2458:	84 ff       	sbrs	r24, 4
    245a:	29 c0       	rjmp	.+82     	; 0x24ae <__vector_11+0xba>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    245c:	84 e0       	ldi	r24, 0x04	; 4
    245e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2460:	86 e0       	ldi	r24, 0x06	; 6
    2462:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    2464:	09 b4       	in	r0, 0x29	; 41
    2466:	00 fe       	sbrs	r0, 0
    2468:	fd cf       	rjmp	.-6      	; 0x2464 <__vector_11+0x70>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    246a:	80 91 d8 00 	lds	r24, 0x00D8
    246e:	8f 7d       	andi	r24, 0xDF	; 223
    2470:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    2474:	80 91 e1 00 	lds	r24, 0x00E1
    2478:	8f 7e       	andi	r24, 0xEF	; 239
    247a:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    247e:	80 91 e2 00 	lds	r24, 0x00E2
    2482:	8f 7e       	andi	r24, 0xEF	; 239
    2484:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2488:	80 91 e2 00 	lds	r24, 0x00E2
    248c:	81 60       	ori	r24, 0x01	; 1
    248e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    2492:	80 91 ab 01 	lds	r24, 0x01AB
    2496:	88 23       	and	r24, r24
    2498:	21 f4       	brne	.+8      	; 0x24a2 <__vector_11+0xae>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    249a:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    249e:	87 ff       	sbrs	r24, 7
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <__vector_11+0xb2>
    24a2:	84 e0       	ldi	r24, 0x04	; 4
    24a4:	01 c0       	rjmp	.+2      	; 0x24a8 <__vector_11+0xb4>
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    24aa:	0e 94 38 01 	call	0x270	; 0x270 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    24ae:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    24b2:	83 ff       	sbrs	r24, 3
    24b4:	21 c0       	rjmp	.+66     	; 0x24f8 <__vector_11+0x104>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    24b6:	80 91 e2 00 	lds	r24, 0x00E2
    24ba:	83 ff       	sbrs	r24, 3
    24bc:	1d c0       	rjmp	.+58     	; 0x24f8 <__vector_11+0x104>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    24be:	80 91 e1 00 	lds	r24, 0x00E1
    24c2:	87 7f       	andi	r24, 0xF7	; 247
    24c4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    24c8:	82 e0       	ldi	r24, 0x02	; 2
    24ca:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    24cc:	10 92 ab 01 	sts	0x01AB, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    24d0:	80 91 e1 00 	lds	r24, 0x00E1
    24d4:	8e 7f       	andi	r24, 0xFE	; 254
    24d6:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    24da:	80 91 e2 00 	lds	r24, 0x00E2
    24de:	8e 7f       	andi	r24, 0xFE	; 254
    24e0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    24e4:	80 91 e2 00 	lds	r24, 0x00E2
    24e8:	80 61       	ori	r24, 0x10	; 16
    24ea:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	60 e0       	ldi	r22, 0x00	; 0
    24f2:	42 e1       	ldi	r20, 0x12	; 18
    24f4:	d6 de       	rcall	.-596    	; 0x22a2 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    24f6:	2d d1       	rcall	.+602    	; 0x2752 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    24f8:	ff 91       	pop	r31
    24fa:	ef 91       	pop	r30
    24fc:	bf 91       	pop	r27
    24fe:	af 91       	pop	r26
    2500:	9f 91       	pop	r25
    2502:	8f 91       	pop	r24
    2504:	7f 91       	pop	r23
    2506:	6f 91       	pop	r22
    2508:	5f 91       	pop	r21
    250a:	4f 91       	pop	r20
    250c:	3f 91       	pop	r19
    250e:	2f 91       	pop	r18
    2510:	0f 90       	pop	r0
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	0f 90       	pop	r0
    2516:	1f 90       	pop	r1
    2518:	18 95       	reti

0000251a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    251a:	1f 93       	push	r17
    251c:	df 93       	push	r29
    251e:	cf 93       	push	r28
    2520:	00 d0       	rcall	.+0      	; 0x2522 <USB_Device_ProcessControlRequest+0x8>
    2522:	0f 92       	push	r0
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    2528:	ed ea       	ldi	r30, 0xAD	; 173
    252a:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    252c:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2530:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	e5 3b       	cpi	r30, 0xB5	; 181
    2536:	f8 07       	cpc	r31, r24
    2538:	c9 f7       	brne	.-14     	; 0x252c <USB_Device_ProcessControlRequest+0x12>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    253a:	0b d1       	rcall	.+534    	; 0x2752 <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    253c:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    2540:	83 ff       	sbrs	r24, 3
    2542:	f2 c0       	rjmp	.+484    	; 0x2728 <USB_Device_ProcessControlRequest+0x20e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2544:	80 91 ad 01 	lds	r24, 0x01AD

		switch (USB_ControlRequest.bRequest)
    2548:	90 91 ae 01 	lds	r25, 0x01AE
    254c:	95 30       	cpi	r25, 0x05	; 5
    254e:	09 f4       	brne	.+2      	; 0x2552 <USB_Device_ProcessControlRequest+0x38>
    2550:	6c c0       	rjmp	.+216    	; 0x262a <USB_Device_ProcessControlRequest+0x110>
    2552:	96 30       	cpi	r25, 0x06	; 6
    2554:	40 f4       	brcc	.+16     	; 0x2566 <USB_Device_ProcessControlRequest+0x4c>
    2556:	91 30       	cpi	r25, 0x01	; 1
    2558:	69 f1       	breq	.+90     	; 0x25b4 <USB_Device_ProcessControlRequest+0x9a>
    255a:	91 30       	cpi	r25, 0x01	; 1
    255c:	70 f0       	brcs	.+28     	; 0x257a <USB_Device_ProcessControlRequest+0x60>
    255e:	93 30       	cpi	r25, 0x03	; 3
    2560:	09 f0       	breq	.+2      	; 0x2564 <USB_Device_ProcessControlRequest+0x4a>
    2562:	e2 c0       	rjmp	.+452    	; 0x2728 <USB_Device_ProcessControlRequest+0x20e>
    2564:	27 c0       	rjmp	.+78     	; 0x25b4 <USB_Device_ProcessControlRequest+0x9a>
    2566:	98 30       	cpi	r25, 0x08	; 8
    2568:	09 f4       	brne	.+2      	; 0x256c <USB_Device_ProcessControlRequest+0x52>
    256a:	b0 c0       	rjmp	.+352    	; 0x26cc <USB_Device_ProcessControlRequest+0x1b2>
    256c:	99 30       	cpi	r25, 0x09	; 9
    256e:	09 f4       	brne	.+2      	; 0x2572 <USB_Device_ProcessControlRequest+0x58>
    2570:	bf c0       	rjmp	.+382    	; 0x26f0 <USB_Device_ProcessControlRequest+0x1d6>
    2572:	96 30       	cpi	r25, 0x06	; 6
    2574:	09 f0       	breq	.+2      	; 0x2578 <USB_Device_ProcessControlRequest+0x5e>
    2576:	d8 c0       	rjmp	.+432    	; 0x2728 <USB_Device_ProcessControlRequest+0x20e>
    2578:	7a c0       	rjmp	.+244    	; 0x266e <USB_Device_ProcessControlRequest+0x154>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    257a:	80 38       	cpi	r24, 0x80	; 128
    257c:	81 f0       	breq	.+32     	; 0x259e <USB_Device_ProcessControlRequest+0x84>
    257e:	82 38       	cpi	r24, 0x82	; 130
    2580:	09 f0       	breq	.+2      	; 0x2584 <USB_Device_ProcessControlRequest+0x6a>
    2582:	d2 c0       	rjmp	.+420    	; 0x2728 <USB_Device_ProcessControlRequest+0x20e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2584:	80 91 b1 01 	lds	r24, 0x01B1
    2588:	8f 70       	andi	r24, 0x0F	; 15
    258a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    258e:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	95 ff       	sbrs	r25, 5
    2596:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2598:	10 92 e9 00 	sts	0x00E9, r1
    259c:	01 c0       	rjmp	.+2      	; 0x25a0 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    259e:	80 e0       	ldi	r24, 0x00	; 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    25a0:	90 91 e8 00 	lds	r25, 0x00E8
    25a4:	97 7f       	andi	r25, 0xF7	; 247
    25a6:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    25aa:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    25ae:	10 92 f1 00 	sts	0x00F1, r1
    25b2:	97 c0       	rjmp	.+302    	; 0x26e2 <USB_Device_ProcessControlRequest+0x1c8>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    25b4:	88 23       	and	r24, r24
    25b6:	19 f0       	breq	.+6      	; 0x25be <USB_Device_ProcessControlRequest+0xa4>
    25b8:	82 30       	cpi	r24, 0x02	; 2
    25ba:	09 f0       	breq	.+2      	; 0x25be <USB_Device_ProcessControlRequest+0xa4>
    25bc:	b5 c0       	rjmp	.+362    	; 0x2728 <USB_Device_ProcessControlRequest+0x20e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    25be:	8f 71       	andi	r24, 0x1F	; 31
    25c0:	82 30       	cpi	r24, 0x02	; 2
    25c2:	09 f0       	breq	.+2      	; 0x25c6 <USB_Device_ProcessControlRequest+0xac>
    25c4:	b1 c0       	rjmp	.+354    	; 0x2728 <USB_Device_ProcessControlRequest+0x20e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    25c6:	80 91 af 01 	lds	r24, 0x01AF
    25ca:	88 23       	and	r24, r24
    25cc:	41 f5       	brne	.+80     	; 0x261e <USB_Device_ProcessControlRequest+0x104>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    25ce:	20 91 b1 01 	lds	r18, 0x01B1
    25d2:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <USB_Device_ProcessControlRequest+0xbe>
    25d6:	a8 c0       	rjmp	.+336    	; 0x2728 <USB_Device_ProcessControlRequest+0x20e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    25d8:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    25dc:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    25e0:	80 ff       	sbrs	r24, 0
    25e2:	1d c0       	rjmp	.+58     	; 0x261e <USB_Device_ProcessControlRequest+0x104>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    25e4:	80 91 ae 01 	lds	r24, 0x01AE
    25e8:	83 30       	cpi	r24, 0x03	; 3
    25ea:	21 f4       	brne	.+8      	; 0x25f4 <USB_Device_ProcessControlRequest+0xda>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    25ec:	80 91 eb 00 	lds	r24, 0x00EB
    25f0:	80 62       	ori	r24, 0x20	; 32
    25f2:	13 c0       	rjmp	.+38     	; 0x261a <USB_Device_ProcessControlRequest+0x100>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    25f4:	80 91 eb 00 	lds	r24, 0x00EB
    25f8:	80 61       	ori	r24, 0x10	; 16
    25fa:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	02 c0       	rjmp	.+4      	; 0x2608 <USB_Device_ProcessControlRequest+0xee>
    2604:	88 0f       	add	r24, r24
    2606:	99 1f       	adc	r25, r25
    2608:	2a 95       	dec	r18
    260a:	e2 f7       	brpl	.-8      	; 0x2604 <USB_Device_ProcessControlRequest+0xea>
    260c:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    2610:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2614:	80 91 eb 00 	lds	r24, 0x00EB
    2618:	88 60       	ori	r24, 0x08	; 8
    261a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    261e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2622:	80 91 e8 00 	lds	r24, 0x00E8
    2626:	87 7f       	andi	r24, 0xF7	; 247
    2628:	5f c0       	rjmp	.+190    	; 0x26e8 <USB_Device_ProcessControlRequest+0x1ce>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    262a:	88 23       	and	r24, r24
    262c:	09 f0       	breq	.+2      	; 0x2630 <USB_Device_ProcessControlRequest+0x116>
    262e:	7c c0       	rjmp	.+248    	; 0x2728 <USB_Device_ProcessControlRequest+0x20e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    2630:	10 91 af 01 	lds	r17, 0x01AF
    2634:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2636:	80 91 e3 00 	lds	r24, 0x00E3
    263a:	80 78       	andi	r24, 0x80	; 128
    263c:	81 2b       	or	r24, r17
    263e:	80 93 e3 00 	sts	0x00E3, r24
    2642:	80 91 e8 00 	lds	r24, 0x00E8
    2646:	87 7f       	andi	r24, 0xF7	; 247
    2648:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    264c:	3e de       	rcall	.-900    	; 0x22ca <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    264e:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    2652:	80 ff       	sbrs	r24, 0
    2654:	fc cf       	rjmp	.-8      	; 0x264e <USB_Device_ProcessControlRequest+0x134>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    2656:	80 91 e3 00 	lds	r24, 0x00E3
    265a:	80 68       	ori	r24, 0x80	; 128
    265c:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2660:	11 23       	and	r17, r17
    2662:	11 f0       	breq	.+4      	; 0x2668 <USB_Device_ProcessControlRequest+0x14e>
    2664:	83 e0       	ldi	r24, 0x03	; 3
    2666:	01 c0       	rjmp	.+2      	; 0x266a <USB_Device_ProcessControlRequest+0x150>
    2668:	82 e0       	ldi	r24, 0x02	; 2
    266a:	8e bb       	out	0x1e, r24	; 30
    266c:	5d c0       	rjmp	.+186    	; 0x2728 <USB_Device_ProcessControlRequest+0x20e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    266e:	80 58       	subi	r24, 0x80	; 128
    2670:	82 30       	cpi	r24, 0x02	; 2
    2672:	08 f0       	brcs	.+2      	; 0x2676 <USB_Device_ProcessControlRequest+0x15c>
    2674:	59 c0       	rjmp	.+178    	; 0x2728 <USB_Device_ProcessControlRequest+0x20e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2676:	80 91 af 01 	lds	r24, 0x01AF
    267a:	90 91 b0 01 	lds	r25, 0x01B0
    267e:	60 91 b1 01 	lds	r22, 0x01B1
    2682:	ae 01       	movw	r20, r28
    2684:	4e 5f       	subi	r20, 0xFE	; 254
    2686:	5f 4f       	sbci	r21, 0xFF	; 255
    2688:	9e 01       	movw	r18, r28
    268a:	2f 5f       	subi	r18, 0xFF	; 255
    268c:	3f 4f       	sbci	r19, 0xFF	; 255
    268e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <CALLBACK_USB_GetDescriptor>
    2692:	bc 01       	movw	r22, r24
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	09 f4       	brne	.+2      	; 0x269a <USB_Device_ProcessControlRequest+0x180>
    2698:	47 c0       	rjmp	.+142    	; 0x2728 <USB_Device_ProcessControlRequest+0x20e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    269a:	80 91 e8 00 	lds	r24, 0x00E8
    269e:	87 7f       	andi	r24, 0xF7	; 247
    26a0:	80 93 e8 00 	sts	0x00E8, r24
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
	#else
	if (DescriptorAddressSpace == MEMSPACE_FLASH)
    26a4:	29 81       	ldd	r18, Y+1	; 0x01
    26a6:	22 23       	and	r18, r18
    26a8:	21 f4       	brne	.+8      	; 0x26b2 <USB_Device_ProcessControlRequest+0x198>
	  Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	9b 81       	ldd	r25, Y+3	; 0x03
    26ae:	39 dd       	rcall	.-1422   	; 0x2122 <Endpoint_Write_Control_PStream_LE>
    26b0:	07 c0       	rjmp	.+14     	; 0x26c0 <USB_Device_ProcessControlRequest+0x1a6>
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	9b 81       	ldd	r25, Y+3	; 0x03
	else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
    26b6:	21 30       	cpi	r18, 0x01	; 1
    26b8:	11 f4       	brne	.+4      	; 0x26be <USB_Device_ProcessControlRequest+0x1a4>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
    26ba:	8e dd       	rcall	.-1252   	; 0x21d8 <Endpoint_Write_Control_EStream_LE>
    26bc:	01 c0       	rjmp	.+2      	; 0x26c0 <USB_Device_ProcessControlRequest+0x1a6>
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    26be:	d7 dc       	rcall	.-1618   	; 0x206e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    26c0:	80 91 e8 00 	lds	r24, 0x00E8
    26c4:	8b 77       	andi	r24, 0x7B	; 123
    26c6:	80 93 e8 00 	sts	0x00E8, r24
    26ca:	2e c0       	rjmp	.+92     	; 0x2728 <USB_Device_ProcessControlRequest+0x20e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    26cc:	80 38       	cpi	r24, 0x80	; 128
    26ce:	61 f5       	brne	.+88     	; 0x2728 <USB_Device_ProcessControlRequest+0x20e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    26d0:	80 91 e8 00 	lds	r24, 0x00E8
    26d4:	87 7f       	andi	r24, 0xF7	; 247
    26d6:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    26da:	80 91 ab 01 	lds	r24, 0x01AB
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    26de:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    26e2:	80 91 e8 00 	lds	r24, 0x00E8
    26e6:	8e 77       	andi	r24, 0x7E	; 126
    26e8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    26ec:	ee dd       	rcall	.-1060   	; 0x22ca <Endpoint_ClearStatusStage>
    26ee:	1c c0       	rjmp	.+56     	; 0x2728 <USB_Device_ProcessControlRequest+0x20e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    26f0:	88 23       	and	r24, r24
    26f2:	d1 f4       	brne	.+52     	; 0x2728 <USB_Device_ProcessControlRequest+0x20e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    26f4:	90 91 af 01 	lds	r25, 0x01AF
    26f8:	92 30       	cpi	r25, 0x02	; 2
    26fa:	b0 f4       	brcc	.+44     	; 0x2728 <USB_Device_ProcessControlRequest+0x20e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    26fc:	80 91 e8 00 	lds	r24, 0x00E8
    2700:	87 7f       	andi	r24, 0xF7	; 247
    2702:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2706:	90 93 ab 01 	sts	0x01AB, r25

	Endpoint_ClearStatusStage();
    270a:	df dd       	rcall	.-1090   	; 0x22ca <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    270c:	80 91 ab 01 	lds	r24, 0x01AB
    2710:	88 23       	and	r24, r24
    2712:	21 f4       	brne	.+8      	; 0x271c <USB_Device_ProcessControlRequest+0x202>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2714:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2718:	87 ff       	sbrs	r24, 7
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <USB_Device_ProcessControlRequest+0x206>
    271c:	84 e0       	ldi	r24, 0x04	; 4
    271e:	01 c0       	rjmp	.+2      	; 0x2722 <USB_Device_ProcessControlRequest+0x208>
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    2724:	0e 94 3c 01 	call	0x278	; 0x278 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2728:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    272c:	83 ff       	sbrs	r24, 3
    272e:	0a c0       	rjmp	.+20     	; 0x2744 <USB_Device_ProcessControlRequest+0x22a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2730:	80 91 e8 00 	lds	r24, 0x00E8
    2734:	87 7f       	andi	r24, 0xF7	; 247
    2736:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    273a:	80 91 eb 00 	lds	r24, 0x00EB
    273e:	80 62       	ori	r24, 0x20	; 32
    2740:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	0f 90       	pop	r0
    274a:	cf 91       	pop	r28
    274c:	df 91       	pop	r29
    274e:	1f 91       	pop	r17
    2750:	08 95       	ret

00002752 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    2752:	08 95       	ret

00002754 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2754:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2756:	8e b3       	in	r24, 0x1e	; 30
    2758:	88 23       	and	r24, r24
    275a:	a9 f0       	breq	.+42     	; 0x2786 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    275c:	80 91 e9 00 	lds	r24, 0x00E9
    2760:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2762:	90 91 ec 00 	lds	r25, 0x00EC
    2766:	90 ff       	sbrs	r25, 0
    2768:	02 c0       	rjmp	.+4      	; 0x276e <USB_USBTask+0x1a>
    276a:	10 e8       	ldi	r17, 0x80	; 128
    276c:	01 c0       	rjmp	.+2      	; 0x2770 <USB_USBTask+0x1c>
    276e:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2770:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2772:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2776:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    277a:	83 ff       	sbrs	r24, 3
    277c:	01 c0       	rjmp	.+2      	; 0x2780 <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
    277e:	cd de       	rcall	.-614    	; 0x251a <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2780:	1f 70       	andi	r17, 0x0F	; 15
    2782:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    2786:	1f 91       	pop	r17
    2788:	08 95       	ret

0000278a <__eerd_byte_usb162>:
    278a:	f9 99       	sbic	0x1f, 1	; 31
    278c:	fe cf       	rjmp	.-4      	; 0x278a <__eerd_byte_usb162>
    278e:	92 bd       	out	0x22, r25	; 34
    2790:	81 bd       	out	0x21, r24	; 33
    2792:	f8 9a       	sbi	0x1f, 0	; 31
    2794:	99 27       	eor	r25, r25
    2796:	80 b5       	in	r24, 0x20	; 32
    2798:	08 95       	ret

0000279a <__eeupd_byte_usb162>:
    279a:	26 2f       	mov	r18, r22

0000279c <__eeupd_r18_usb162>:
    279c:	f9 99       	sbic	0x1f, 1	; 31
    279e:	fe cf       	rjmp	.-4      	; 0x279c <__eeupd_r18_usb162>
    27a0:	92 bd       	out	0x22, r25	; 34
    27a2:	81 bd       	out	0x21, r24	; 33
    27a4:	f8 9a       	sbi	0x1f, 0	; 31
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	00 b4       	in	r0, 0x20	; 32
    27aa:	02 16       	cp	r0, r18
    27ac:	39 f0       	breq	.+14     	; 0x27bc <__eeupd_r18_usb162+0x20>
    27ae:	1f ba       	out	0x1f, r1	; 31
    27b0:	20 bd       	out	0x20, r18	; 32
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	f8 94       	cli
    27b6:	fa 9a       	sbi	0x1f, 2	; 31
    27b8:	f9 9a       	sbi	0x1f, 1	; 31
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	08 95       	ret

000027be <_exit>:
    27be:	f8 94       	cli

000027c0 <__stop_program>:
    27c0:	ff cf       	rjmp	.-2      	; 0x27c0 <__stop_program>
