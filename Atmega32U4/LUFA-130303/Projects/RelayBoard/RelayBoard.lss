
RelayBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a44  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000c  00800100  00800100  00000ab8  2**0
                  ALLOC
  2 .stab         00000a98  00000000  00000000  00000ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000016f  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000003f0  00000000  00000000  000016bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000aba  00000000  00000000  00001aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006fa2  00000000  00000000  00002569  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001dca  00000000  00000000  0000950b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005b2e  00000000  00000000  0000b2d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a0  00000000  00000000  00010e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000323a  00000000  00000000  000113a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c87  00000000  00000000  000145de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000f09  00000000  00000000  00017265  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000630  00000000  00000000  0001816e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
   2:	00 00       	nop
   4:	94 c0       	rjmp	.+296    	; 0x12e <__bad_interrupt>
   6:	00 00       	nop
   8:	92 c0       	rjmp	.+292    	; 0x12e <__bad_interrupt>
   a:	00 00       	nop
   c:	90 c0       	rjmp	.+288    	; 0x12e <__bad_interrupt>
   e:	00 00       	nop
  10:	8e c0       	rjmp	.+284    	; 0x12e <__bad_interrupt>
  12:	00 00       	nop
  14:	8c c0       	rjmp	.+280    	; 0x12e <__bad_interrupt>
  16:	00 00       	nop
  18:	8a c0       	rjmp	.+276    	; 0x12e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	88 c0       	rjmp	.+272    	; 0x12e <__bad_interrupt>
  1e:	00 00       	nop
  20:	86 c0       	rjmp	.+268    	; 0x12e <__bad_interrupt>
  22:	00 00       	nop
  24:	84 c0       	rjmp	.+264    	; 0x12e <__bad_interrupt>
  26:	00 00       	nop
  28:	1b c3       	rjmp	.+1590   	; 0x660 <__vector_10>
  2a:	00 00       	nop
  2c:	80 c0       	rjmp	.+256    	; 0x12e <__bad_interrupt>
  2e:	00 00       	nop
  30:	7e c0       	rjmp	.+252    	; 0x12e <__bad_interrupt>
  32:	00 00       	nop
  34:	7c c0       	rjmp	.+248    	; 0x12e <__bad_interrupt>
  36:	00 00       	nop
  38:	7a c0       	rjmp	.+244    	; 0x12e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	78 c0       	rjmp	.+240    	; 0x12e <__bad_interrupt>
  3e:	00 00       	nop
  40:	76 c0       	rjmp	.+236    	; 0x12e <__bad_interrupt>
  42:	00 00       	nop
  44:	74 c0       	rjmp	.+232    	; 0x12e <__bad_interrupt>
  46:	00 00       	nop
  48:	72 c0       	rjmp	.+228    	; 0x12e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	70 c0       	rjmp	.+224    	; 0x12e <__bad_interrupt>
  4e:	00 00       	nop
  50:	6e c0       	rjmp	.+220    	; 0x12e <__bad_interrupt>
  52:	00 00       	nop
  54:	6c c0       	rjmp	.+216    	; 0x12e <__bad_interrupt>
  56:	00 00       	nop
  58:	6a c0       	rjmp	.+212    	; 0x12e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	68 c0       	rjmp	.+208    	; 0x12e <__bad_interrupt>
  5e:	00 00       	nop
  60:	66 c0       	rjmp	.+204    	; 0x12e <__bad_interrupt>
  62:	00 00       	nop
  64:	64 c0       	rjmp	.+200    	; 0x12e <__bad_interrupt>
  66:	00 00       	nop
  68:	62 c0       	rjmp	.+196    	; 0x12e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	60 c0       	rjmp	.+192    	; 0x12e <__bad_interrupt>
  6e:	00 00       	nop
  70:	5e c0       	rjmp	.+188    	; 0x12e <__bad_interrupt>
  72:	00 00       	nop
  74:	5c c0       	rjmp	.+184    	; 0x12e <__bad_interrupt>
  76:	00 00       	nop
  78:	5a c0       	rjmp	.+180    	; 0x12e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	58 c0       	rjmp	.+176    	; 0x12e <__bad_interrupt>
  7e:	00 00       	nop
  80:	56 c0       	rjmp	.+172    	; 0x12e <__bad_interrupt>
  82:	00 00       	nop
  84:	54 c0       	rjmp	.+168    	; 0x12e <__bad_interrupt>
  86:	00 00       	nop
  88:	52 c0       	rjmp	.+164    	; 0x12e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	50 c0       	rjmp	.+160    	; 0x12e <__bad_interrupt>
  8e:	00 00       	nop
  90:	4e c0       	rjmp	.+156    	; 0x12e <__bad_interrupt>
  92:	00 00       	nop
  94:	4c c0       	rjmp	.+152    	; 0x12e <__bad_interrupt>
  96:	00 00       	nop

00000098 <RelayBoard_DeviceDescriptor>:
  98:	12 01 10 01 ff 00 00 08 b4 04 11 fd 00 02 01 02     ................
  a8:	03 01                                               ..

000000aa <RelayBoard_ConfigurationDescriptor>:
  aa:	09 02 12 00 01 01 00 80 fa 09 04 00 00 00 ff 00     ................
  ba:	00 00                                               ..

000000bc <RelayBoard_LanguageString>:
  bc:	04 03 09 04                                         ....

000000c0 <RelayBoard_ManufacturerString>:
  c0:	0c 03 53 00 49 00 53 00 50 00 4d 00 00 00           ..S.I.S.P.M...

000000ce <RelayBoard_ProductString>:
  ce:	16 03 52 00 65 00 6c 00 61 00 79 00 42 00 6f 00     ..R.e.l.a.y.B.o.
  de:	61 00 72 00 64 00 00 00                             a.r.d...

000000e6 <RelayBoard_SerialString>:
  e6:	0c 03 30 00 30 00 30 00 30 00 31 00 00 00           ..0.0.0.0.1...

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	d0 e2       	ldi	r29, 0x20	; 32
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	cd bf       	out	0x3d, r28	; 61

00000100 <__do_copy_data>:
 100:	11 e0       	ldi	r17, 0x01	; 1
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b1 e0       	ldi	r27, 0x01	; 1
 106:	e4 e4       	ldi	r30, 0x44	; 68
 108:	fa e0       	ldi	r31, 0x0A	; 10
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a0 30       	cpi	r26, 0x00	; 0
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	11 e0       	ldi	r17, 0x01	; 1
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	ac 30       	cpi	r26, 0x0C	; 12
 126:	b1 07       	cpc	r27, r17
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	1e d0       	rcall	.+60     	; 0x168 <main>
 12c:	89 c4       	rjmp	.+2322   	; 0xa40 <_exit>

0000012e <__bad_interrupt>:
 12e:	68 cf       	rjmp	.-304    	; 0x0 <__vectors>

00000130 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the project's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 130:	84 b7       	in	r24, 0x34	; 52
 132:	87 7f       	andi	r24, 0xF7	; 247
 134:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 136:	88 e1       	ldi	r24, 0x18	; 24
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	80 93 60 00 	sts	0x0060, r24
 140:	10 92 60 00 	sts	0x0060, r1
 144:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	80 93 61 00 	sts	0x0061, r24
 152:	90 93 61 00 	sts	0x0061, r25
 156:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	USB_Init();
 158:	68 d2       	rcall	.+1232   	; 0x62a <USB_Init>

	/* Initialize Relays */
	DDRC  |=  ALL_RELAYS;
 15a:	87 b1       	in	r24, 0x07	; 7
 15c:	80 6f       	ori	r24, 0xF0	; 240
 15e:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~ALL_RELAYS;
 160:	88 b1       	in	r24, 0x08	; 8
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	88 b9       	out	0x08, r24	; 8
}
 166:	08 95       	ret

00000168 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 168:	e3 df       	rcall	.-58     	; 0x130 <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 16a:	78 94       	sei

	GlobalInterruptEnable();

	for (;;)
	  USB_USBTask();
 16c:	60 d4       	rcall	.+2240   	; 0xa2e <USB_USBTask>
 16e:	fe cf       	rjmp	.-4      	; 0x16c <main+0x4>

00000170 <EVENT_USB_Device_ControlRequest>:
	PORTC &= ~ALL_RELAYS;
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
 170:	df 93       	push	r29
 172:	cf 93       	push	r28
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	27 97       	sbiw	r28, 0x07	; 7
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	f8 94       	cli
 17e:	de bf       	out	0x3e, r29	; 62
 180:	0f be       	out	0x3f, r0	; 63
 182:	cd bf       	out	0x3d, r28	; 61
    const uint8_t SerialNumber[5] = { 0, 0, 0, 0, 1 };
 184:	1b 82       	std	Y+3, r1	; 0x03
 186:	1c 82       	std	Y+4, r1	; 0x04
 188:	1d 82       	std	Y+5, r1	; 0x05
 18a:	1e 82       	std	Y+6, r1	; 0x06
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t ControlData[2]        = { 0, 0 };
 190:	19 82       	std	Y+1, r1	; 0x01
 192:	1a 82       	std	Y+2, r1	; 0x02

    switch (USB_ControlRequest.bRequest)
 194:	80 91 05 01 	lds	r24, 0x0105
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	09 f4       	brne	.+2      	; 0x19e <EVENT_USB_Device_ControlRequest+0x2e>
 19c:	51 c0       	rjmp	.+162    	; 0x240 <EVENT_USB_Device_ControlRequest+0xd0>
 19e:	89 30       	cpi	r24, 0x09	; 9
 1a0:	09 f0       	breq	.+2      	; 0x1a4 <EVENT_USB_Device_ControlRequest+0x34>
 1a2:	9e c0       	rjmp	.+316    	; 0x2e0 <EVENT_USB_Device_ControlRequest+0x170>
	{
		case 0x09:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 1a4:	80 91 04 01 	lds	r24, 0x0104
 1a8:	81 32       	cpi	r24, 0x21	; 33
 1aa:	09 f0       	breq	.+2      	; 0x1ae <EVENT_USB_Device_ControlRequest+0x3e>
 1ac:	99 c0       	rjmp	.+306    	; 0x2e0 <EVENT_USB_Device_ControlRequest+0x170>
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PIND  = LEDMask;
 1ae:	80 e1       	ldi	r24, 0x10	; 16
 1b0:	89 b9       	out	0x09, r24	; 9
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 1b2:	80 91 e8 00 	lds	r24, 0x00E8
 1b6:	87 7f       	andi	r24, 0xF7	; 247
 1b8:	80 93 e8 00 	sts	0x00E8, r24
			{
				LEDs_ToggleLEDs(LEDS_LED1);

				Endpoint_ClearSETUP();

				Endpoint_Read_Control_Stream_LE(ControlData, sizeof(ControlData));
 1bc:	ce 01       	movw	r24, r28
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	23 d1       	rcall	.+582    	; 0x40c <Endpoint_Read_Control_Stream_LE>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 1c6:	80 91 e8 00 	lds	r24, 0x00E8
 1ca:	8e 7f       	andi	r24, 0xFE	; 254
 1cc:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				switch (USB_ControlRequest.wValue)
 1d0:	80 91 06 01 	lds	r24, 0x0106
 1d4:	90 91 07 01 	lds	r25, 0x0107
 1d8:	23 e0       	ldi	r18, 0x03	; 3
 1da:	86 30       	cpi	r24, 0x06	; 6
 1dc:	92 07       	cpc	r25, r18
 1de:	d9 f0       	breq	.+54     	; 0x216 <EVENT_USB_Device_ControlRequest+0xa6>
 1e0:	23 e0       	ldi	r18, 0x03	; 3
 1e2:	87 30       	cpi	r24, 0x07	; 7
 1e4:	92 07       	cpc	r25, r18
 1e6:	30 f4       	brcc	.+12     	; 0x1f4 <EVENT_USB_Device_ControlRequest+0x84>
 1e8:	23 e0       	ldi	r18, 0x03	; 3
 1ea:	83 30       	cpi	r24, 0x03	; 3
 1ec:	92 07       	cpc	r25, r18
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <EVENT_USB_Device_ControlRequest+0x82>
 1f0:	77 c0       	rjmp	.+238    	; 0x2e0 <EVENT_USB_Device_ControlRequest+0x170>
 1f2:	0a c0       	rjmp	.+20     	; 0x208 <EVENT_USB_Device_ControlRequest+0x98>
 1f4:	23 e0       	ldi	r18, 0x03	; 3
 1f6:	89 30       	cpi	r24, 0x09	; 9
 1f8:	92 07       	cpc	r25, r18
 1fa:	a1 f0       	breq	.+40     	; 0x224 <EVENT_USB_Device_ControlRequest+0xb4>
 1fc:	23 e0       	ldi	r18, 0x03	; 3
 1fe:	8c 30       	cpi	r24, 0x0C	; 12
 200:	92 07       	cpc	r25, r18
 202:	09 f0       	breq	.+2      	; 0x206 <EVENT_USB_Device_ControlRequest+0x96>
 204:	6d c0       	rjmp	.+218    	; 0x2e0 <EVENT_USB_Device_ControlRequest+0x170>
 206:	15 c0       	rjmp	.+42     	; 0x232 <EVENT_USB_Device_ControlRequest+0xc2>
				{
					case 0x303:
						if (ControlData[1]) PORTC &= ~RELAY1; else PORTC |= RELAY1;
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	88 23       	and	r24, r24
 20c:	11 f0       	breq	.+4      	; 0x212 <EVENT_USB_Device_ControlRequest+0xa2>
 20e:	47 98       	cbi	0x08, 7	; 8
 210:	67 c0       	rjmp	.+206    	; 0x2e0 <EVENT_USB_Device_ControlRequest+0x170>
 212:	47 9a       	sbi	0x08, 7	; 8
 214:	65 c0       	rjmp	.+202    	; 0x2e0 <EVENT_USB_Device_ControlRequest+0x170>
						break;
					case 0x306:
						if (ControlData[1]) PORTC &= ~RELAY2; else PORTC |= RELAY2;
 216:	8a 81       	ldd	r24, Y+2	; 0x02
 218:	88 23       	and	r24, r24
 21a:	11 f0       	breq	.+4      	; 0x220 <EVENT_USB_Device_ControlRequest+0xb0>
 21c:	46 98       	cbi	0x08, 6	; 8
 21e:	60 c0       	rjmp	.+192    	; 0x2e0 <EVENT_USB_Device_ControlRequest+0x170>
 220:	46 9a       	sbi	0x08, 6	; 8
 222:	5e c0       	rjmp	.+188    	; 0x2e0 <EVENT_USB_Device_ControlRequest+0x170>
						break;
					case 0x309:
						if (ControlData[1]) PORTC &= ~RELAY3; else PORTC |= RELAY3;
 224:	8a 81       	ldd	r24, Y+2	; 0x02
 226:	88 23       	and	r24, r24
 228:	11 f0       	breq	.+4      	; 0x22e <EVENT_USB_Device_ControlRequest+0xbe>
 22a:	45 98       	cbi	0x08, 5	; 8
 22c:	59 c0       	rjmp	.+178    	; 0x2e0 <EVENT_USB_Device_ControlRequest+0x170>
 22e:	45 9a       	sbi	0x08, 5	; 8
 230:	57 c0       	rjmp	.+174    	; 0x2e0 <EVENT_USB_Device_ControlRequest+0x170>
						break;
					case 0x30c:
						if (ControlData[1]) PORTC &= ~RELAY4; else PORTC |= RELAY4;
 232:	8a 81       	ldd	r24, Y+2	; 0x02
 234:	88 23       	and	r24, r24
 236:	11 f0       	breq	.+4      	; 0x23c <EVENT_USB_Device_ControlRequest+0xcc>
 238:	44 98       	cbi	0x08, 4	; 8
 23a:	52 c0       	rjmp	.+164    	; 0x2e0 <EVENT_USB_Device_ControlRequest+0x170>
 23c:	44 9a       	sbi	0x08, 4	; 8
 23e:	50 c0       	rjmp	.+160    	; 0x2e0 <EVENT_USB_Device_ControlRequest+0x170>
				}
			}

			break;
		case 0x01:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 240:	80 91 04 01 	lds	r24, 0x0104
 244:	81 3a       	cpi	r24, 0xA1	; 161
 246:	09 f0       	breq	.+2      	; 0x24a <EVENT_USB_Device_ControlRequest+0xda>
 248:	4b c0       	rjmp	.+150    	; 0x2e0 <EVENT_USB_Device_ControlRequest+0x170>
 24a:	80 e1       	ldi	r24, 0x10	; 16
 24c:	89 b9       	out	0x09, r24	; 9
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 24e:	80 91 e8 00 	lds	r24, 0x00E8
 252:	87 7f       	andi	r24, 0xF7	; 247
 254:	80 93 e8 00 	sts	0x00E8, r24
			{
				LEDs_ToggleLEDs(LEDS_LED1);

				Endpoint_ClearSETUP();

				switch (USB_ControlRequest.wValue)
 258:	80 91 06 01 	lds	r24, 0x0106
 25c:	90 91 07 01 	lds	r25, 0x0107
 260:	23 e0       	ldi	r18, 0x03	; 3
 262:	86 30       	cpi	r24, 0x06	; 6
 264:	92 07       	cpc	r25, r18
 266:	19 f1       	breq	.+70     	; 0x2ae <EVENT_USB_Device_ControlRequest+0x13e>
 268:	23 e0       	ldi	r18, 0x03	; 3
 26a:	87 30       	cpi	r24, 0x07	; 7
 26c:	92 07       	cpc	r25, r18
 26e:	48 f4       	brcc	.+18     	; 0x282 <EVENT_USB_Device_ControlRequest+0x112>
 270:	23 e0       	ldi	r18, 0x03	; 3
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	92 07       	cpc	r25, r18
 276:	71 f0       	breq	.+28     	; 0x294 <EVENT_USB_Device_ControlRequest+0x124>
 278:	23 e0       	ldi	r18, 0x03	; 3
 27a:	83 30       	cpi	r24, 0x03	; 3
 27c:	92 07       	cpc	r25, r18
 27e:	19 f5       	brne	.+70     	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x156>
 280:	0f c0       	rjmp	.+30     	; 0x2a0 <EVENT_USB_Device_ControlRequest+0x130>
 282:	23 e0       	ldi	r18, 0x03	; 3
 284:	89 30       	cpi	r24, 0x09	; 9
 286:	92 07       	cpc	r25, r18
 288:	a9 f0       	breq	.+42     	; 0x2b4 <EVENT_USB_Device_ControlRequest+0x144>
 28a:	23 e0       	ldi	r18, 0x03	; 3
 28c:	8c 30       	cpi	r24, 0x0C	; 12
 28e:	92 07       	cpc	r25, r18
 290:	d1 f4       	brne	.+52     	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x156>
 292:	13 c0       	rjmp	.+38     	; 0x2ba <EVENT_USB_Device_ControlRequest+0x14a>
				{
					case 0x301:
						Endpoint_Write_Control_Stream_LE(SerialNumber, sizeof(SerialNumber));
 294:	ce 01       	movw	r24, r28
 296:	03 96       	adiw	r24, 0x03	; 3
 298:	65 e0       	ldi	r22, 0x05	; 5
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	5c d0       	rcall	.+184    	; 0x356 <Endpoint_Write_Control_Stream_LE>
						break;
 29e:	13 c0       	rjmp	.+38     	; 0x2c6 <EVENT_USB_Device_ControlRequest+0x156>
					case 0x303:
						ControlData[1] = (PORTC & RELAY1) ? 2 : 3;
 2a0:	88 b1       	in	r24, 0x08	; 8
 2a2:	80 95       	com	r24
 2a4:	88 1f       	adc	r24, r24
 2a6:	88 27       	eor	r24, r24
 2a8:	88 1f       	adc	r24, r24
 2aa:	8e 5f       	subi	r24, 0xFE	; 254
 2ac:	0b c0       	rjmp	.+22     	; 0x2c4 <EVENT_USB_Device_ControlRequest+0x154>
						break;
					case 0x306:
						ControlData[1] = (PORTC & RELAY2) ? 2 : 3;
 2ae:	46 9b       	sbis	0x08, 6	; 8
 2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <EVENT_USB_Device_ControlRequest+0x152>
 2b2:	05 c0       	rjmp	.+10     	; 0x2be <EVENT_USB_Device_ControlRequest+0x14e>
						break;
					case 0x309:
						ControlData[1] = (PORTC & RELAY3) ? 2 : 3;
 2b4:	45 9b       	sbis	0x08, 5	; 8
 2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <EVENT_USB_Device_ControlRequest+0x152>
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <EVENT_USB_Device_ControlRequest+0x14e>
						break;
					case 0x30c:
						ControlData[1] = (PORTC & RELAY4) ? 2 : 3;
 2ba:	44 9b       	sbis	0x08, 4	; 8
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <EVENT_USB_Device_ControlRequest+0x152>
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <EVENT_USB_Device_ControlRequest+0x154>
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	8a 83       	std	Y+2, r24	; 0x02
						break;
				}

				if (ControlData[1])
 2c6:	8a 81       	ldd	r24, Y+2	; 0x02
 2c8:	88 23       	and	r24, r24
 2ca:	29 f0       	breq	.+10     	; 0x2d6 <EVENT_USB_Device_ControlRequest+0x166>
				  Endpoint_Write_Control_Stream_LE(ControlData, sizeof(ControlData));
 2cc:	ce 01       	movw	r24, r28
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	62 e0       	ldi	r22, 0x02	; 2
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	40 d0       	rcall	.+128    	; 0x356 <Endpoint_Write_Control_Stream_LE>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
 2d6:	80 91 e8 00 	lds	r24, 0x00E8
 2da:	8b 7f       	andi	r24, 0xFB	; 251
 2dc:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearOUT();
			}

			break;
	}
}
 2e0:	27 96       	adiw	r28, 0x07	; 7
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	f8 94       	cli
 2e6:	de bf       	out	0x3e, r29	; 62
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	cd bf       	out	0x3d, r28	; 61
 2ec:	cf 91       	pop	r28
 2ee:	df 91       	pop	r29
 2f0:	08 95       	ret

000002f2 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 2f2:	92 30       	cpi	r25, 0x02	; 2
 2f4:	29 f0       	breq	.+10     	; 0x300 <CALLBACK_USB_GetDescriptor+0xe>
 2f6:	93 30       	cpi	r25, 0x03	; 3
 2f8:	41 f0       	breq	.+16     	; 0x30a <CALLBACK_USB_GetDescriptor+0x18>
 2fa:	91 30       	cpi	r25, 0x01	; 1
 2fc:	11 f5       	brne	.+68     	; 0x342 <CALLBACK_USB_GetDescriptor+0x50>
 2fe:	1c c0       	rjmp	.+56     	; 0x338 <CALLBACK_USB_GetDescriptor+0x46>
			Address = &RelayBoard_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &RelayBoard_ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 300:	22 e1       	ldi	r18, 0x12	; 18
 302:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &RelayBoard_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &RelayBoard_ConfigurationDescriptor;
 304:	ea ea       	ldi	r30, 0xAA	; 170
 306:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 308:	20 c0       	rjmp	.+64     	; 0x34a <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	51 f0       	breq	.+20     	; 0x322 <CALLBACK_USB_GetDescriptor+0x30>
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	28 f0       	brcs	.+10     	; 0x31c <CALLBACK_USB_GetDescriptor+0x2a>
 312:	82 30       	cpi	r24, 0x02	; 2
 314:	49 f0       	breq	.+18     	; 0x328 <CALLBACK_USB_GetDescriptor+0x36>
 316:	83 30       	cpi	r24, 0x03	; 3
 318:	a1 f4       	brne	.+40     	; 0x342 <CALLBACK_USB_GetDescriptor+0x50>
 31a:	09 c0       	rjmp	.+18     	; 0x32e <CALLBACK_USB_GetDescriptor+0x3c>
			{
				case 0x00:
					Address = &RelayBoard_LanguageString;
					Size    = pgm_read_byte(&RelayBoard_LanguageString.Header.Size);
 31c:	ec eb       	ldi	r30, 0xBC	; 188
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	08 c0       	rjmp	.+16     	; 0x332 <CALLBACK_USB_GetDescriptor+0x40>
					break;
				case 0x01:
					Address = &RelayBoard_ManufacturerString;
					Size    = pgm_read_byte(&RelayBoard_ManufacturerString.Header.Size);
 322:	e0 ec       	ldi	r30, 0xC0	; 192
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	05 c0       	rjmp	.+10     	; 0x332 <CALLBACK_USB_GetDescriptor+0x40>
					break;
				case 0x02:
					Address = &RelayBoard_ProductString;
					Size    = pgm_read_byte(&RelayBoard_ProductString.Header.Size);
 328:	ee ec       	ldi	r30, 0xCE	; 206
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	02 c0       	rjmp	.+4      	; 0x332 <CALLBACK_USB_GetDescriptor+0x40>
					break;
				case 0x03:
					Address = &RelayBoard_SerialString;
					Size    = pgm_read_byte(&RelayBoard_SerialString.Header.Size);
 32e:	e6 ee       	ldi	r30, 0xE6	; 230
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	24 91       	lpm	r18, Z+
 334:	30 e0       	ldi	r19, 0x00	; 0
					break;
 336:	09 c0       	rjmp	.+18     	; 0x34a <CALLBACK_USB_GetDescriptor+0x58>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &RelayBoard_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 338:	22 e1       	ldi	r18, 0x12	; 18
 33a:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &RelayBoard_DeviceDescriptor;
 33c:	e8 e9       	ldi	r30, 0x98	; 152
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	04 c0       	rjmp	.+8      	; 0x34a <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 342:	20 e0       	ldi	r18, 0x00	; 0
 344:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 346:	e0 e0       	ldi	r30, 0x00	; 0
 348:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 34a:	da 01       	movw	r26, r20
 34c:	11 96       	adiw	r26, 0x01	; 1
 34e:	fc 93       	st	X, r31
 350:	ee 93       	st	-X, r30
	return Size;
}
 352:	c9 01       	movw	r24, r18
 354:	08 95       	ret

00000356 <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 356:	28 2f       	mov	r18, r24
 358:	39 2f       	mov	r19, r25
 35a:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 35c:	80 91 0a 01 	lds	r24, 0x010A
 360:	90 91 0b 01 	lds	r25, 0x010B
 364:	86 17       	cp	r24, r22
 366:	97 07       	cpc	r25, r23
 368:	18 f4       	brcc	.+6      	; 0x370 <Endpoint_Write_Control_Stream_LE+0x1a>
 36a:	bc 01       	movw	r22, r24
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	35 c0       	rjmp	.+106    	; 0x3da <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 370:	61 15       	cp	r22, r1
 372:	71 05       	cpc	r23, r1
 374:	d9 f7       	brne	.-10     	; 0x36c <Endpoint_Write_Control_Stream_LE+0x16>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 376:	80 91 e8 00 	lds	r24, 0x00E8
 37a:	8e 7f       	andi	r24, 0xFE	; 254
 37c:	80 93 e8 00 	sts	0x00E8, r24
 380:	f5 cf       	rjmp	.-22     	; 0x36c <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 382:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 384:	88 23       	and	r24, r24
 386:	f1 f1       	breq	.+124    	; 0x404 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 388:	85 30       	cpi	r24, 0x05	; 5
 38a:	c1 f1       	breq	.+112    	; 0x3fc <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 38c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 390:	83 fd       	sbrc	r24, 3
 392:	36 c0       	rjmp	.+108    	; 0x400 <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 394:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 398:	82 fd       	sbrc	r24, 2
 39a:	2a c0       	rjmp	.+84     	; 0x3f0 <Endpoint_Write_Control_Stream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 39c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 3a0:	80 ff       	sbrs	r24, 0
 3a2:	1b c0       	rjmp	.+54     	; 0x3da <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 3a4:	80 91 f2 00 	lds	r24, 0x00F2
 3a8:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 3ac:	06 c0       	rjmp	.+12     	; 0x3ba <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 3ae:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 3b0:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 3b4:	61 50       	subi	r22, 0x01	; 1
 3b6:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 3b8:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 3ba:	61 15       	cp	r22, r1
 3bc:	71 05       	cpc	r23, r1
 3be:	19 f0       	breq	.+6      	; 0x3c6 <Endpoint_Write_Control_Stream_LE+0x70>
 3c0:	88 30       	cpi	r24, 0x08	; 8
 3c2:	91 05       	cpc	r25, r1
 3c4:	a0 f3       	brcs	.-24     	; 0x3ae <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 3c6:	21 e0       	ldi	r18, 0x01	; 1
 3c8:	88 30       	cpi	r24, 0x08	; 8
 3ca:	91 05       	cpc	r25, r1
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <Endpoint_Write_Control_Stream_LE+0x7a>
 3ce:	20 e0       	ldi	r18, 0x00	; 0
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 3d0:	80 91 e8 00 	lds	r24, 0x00E8
 3d4:	8e 7f       	andi	r24, 0xFE	; 254
 3d6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 3da:	61 15       	cp	r22, r1
 3dc:	71 05       	cpc	r23, r1
 3de:	89 f6       	brne	.-94     	; 0x382 <Endpoint_Write_Control_Stream_LE+0x2c>
 3e0:	22 23       	and	r18, r18
 3e2:	79 f6       	brne	.-98     	; 0x382 <Endpoint_Write_Control_Stream_LE+0x2c>
 3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <Endpoint_Write_Control_Stream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 3e6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 3e8:	88 23       	and	r24, r24
 3ea:	61 f0       	breq	.+24     	; 0x404 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 3ec:	85 30       	cpi	r24, 0x05	; 5
 3ee:	61 f0       	breq	.+24     	; 0x408 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3f0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 3f4:	82 ff       	sbrs	r24, 2
 3f6:	f7 cf       	rjmp	.-18     	; 0x3e6 <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 3fc:	83 e0       	ldi	r24, 0x03	; 3
 3fe:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 408:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 40a:	08 95       	ret

0000040c <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
 40c:	61 15       	cp	r22, r1
 40e:	71 05       	cpc	r23, r1
 410:	29 f5       	brne	.+74     	; 0x45c <Endpoint_Read_Control_Stream_LE+0x50>
 412:	1f c0       	rjmp	.+62     	; 0x452 <Endpoint_Read_Control_Stream_LE+0x46>
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 414:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 416:	22 23       	and	r18, r18
 418:	a1 f1       	breq	.+104    	; 0x482 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 41a:	25 30       	cpi	r18, 0x05	; 5
 41c:	71 f1       	breq	.+92     	; 0x47a <Endpoint_Read_Control_Stream_LE+0x6e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 41e:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 422:	23 fd       	sbrc	r18, 3
 424:	2c c0       	rjmp	.+88     	; 0x47e <Endpoint_Read_Control_Stream_LE+0x72>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 426:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 42a:	22 ff       	sbrs	r18, 2
 42c:	f3 cf       	rjmp	.-26     	; 0x414 <Endpoint_Read_Control_Stream_LE+0x8>
 42e:	e8 2f       	mov	r30, r24
 430:	f9 2f       	mov	r31, r25
 432:	07 c0       	rjmp	.+14     	; 0x442 <Endpoint_Read_Control_Stream_LE+0x36>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 434:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 438:	81 93       	st	Z+, r24
 43a:	cf 01       	movw	r24, r30
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 43c:	61 50       	subi	r22, 0x01	; 1
 43e:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 440:	41 f0       	breq	.+16     	; 0x452 <Endpoint_Read_Control_Stream_LE+0x46>
 442:	cf 01       	movw	r24, r30
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 444:	20 91 f2 00 	lds	r18, 0x00F2
 448:	30 91 f3 00 	lds	r19, 0x00F3
 44c:	21 15       	cp	r18, r1
 44e:	31 05       	cpc	r19, r1
 450:	89 f7       	brne	.-30     	; 0x434 <Endpoint_Read_Control_Stream_LE+0x28>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
 452:	20 91 e8 00 	lds	r18, 0x00E8
 456:	2b 7f       	andi	r18, 0xFB	; 251
 458:	20 93 e8 00 	sts	0x00E8, r18
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
 45c:	61 15       	cp	r22, r1
 45e:	71 05       	cpc	r23, r1
 460:	c9 f6       	brne	.-78     	; 0x414 <Endpoint_Read_Control_Stream_LE+0x8>
 462:	05 c0       	rjmp	.+10     	; 0x46e <Endpoint_Read_Control_Stream_LE+0x62>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 464:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 466:	88 23       	and	r24, r24
 468:	61 f0       	breq	.+24     	; 0x482 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 46a:	85 30       	cpi	r24, 0x05	; 5
 46c:	61 f0       	breq	.+24     	; 0x486 <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 46e:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
 472:	80 ff       	sbrs	r24, 0
 474:	f7 cf       	rjmp	.-18     	; 0x464 <Endpoint_Read_Control_Stream_LE+0x58>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 47a:	83 e0       	ldi	r24, 0x03	; 3
 47c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 486:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 488:	08 95       	ret

0000048a <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 48a:	e8 2f       	mov	r30, r24
 48c:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 48e:	80 91 0a 01 	lds	r24, 0x010A
 492:	90 91 0b 01 	lds	r25, 0x010B
 496:	86 17       	cp	r24, r22
 498:	97 07       	cpc	r25, r23
 49a:	18 f4       	brcc	.+6      	; 0x4a2 <Endpoint_Write_Control_PStream_LE+0x18>
 49c:	bc 01       	movw	r22, r24
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	37 c0       	rjmp	.+110    	; 0x510 <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 4a2:	61 15       	cp	r22, r1
 4a4:	71 05       	cpc	r23, r1
 4a6:	d9 f7       	brne	.-10     	; 0x49e <Endpoint_Write_Control_PStream_LE+0x14>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 4a8:	80 91 e8 00 	lds	r24, 0x00E8
 4ac:	8e 7f       	andi	r24, 0xFE	; 254
 4ae:	80 93 e8 00 	sts	0x00E8, r24
 4b2:	f5 cf       	rjmp	.-22     	; 0x49e <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 4b4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 4b6:	88 23       	and	r24, r24
 4b8:	09 f4       	brne	.+2      	; 0x4bc <Endpoint_Write_Control_PStream_LE+0x32>
 4ba:	3f c0       	rjmp	.+126    	; 0x53a <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 4bc:	85 30       	cpi	r24, 0x05	; 5
 4be:	c9 f1       	breq	.+114    	; 0x532 <Endpoint_Write_Control_PStream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 4c0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 4c4:	83 fd       	sbrc	r24, 3
 4c6:	37 c0       	rjmp	.+110    	; 0x536 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4c8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 4cc:	82 fd       	sbrc	r24, 2
 4ce:	2b c0       	rjmp	.+86     	; 0x526 <Endpoint_Write_Control_PStream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4d0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 4d4:	80 ff       	sbrs	r24, 0
 4d6:	1c c0       	rjmp	.+56     	; 0x510 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 4d8:	80 91 f2 00 	lds	r24, 0x00F2
 4dc:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4e0:	07 c0       	rjmp	.+14     	; 0x4f0 <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 4e2:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 4e4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 4e8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 4ea:	61 50       	subi	r22, 0x01	; 1
 4ec:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 4ee:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4f0:	61 15       	cp	r22, r1
 4f2:	71 05       	cpc	r23, r1
 4f4:	19 f0       	breq	.+6      	; 0x4fc <Endpoint_Write_Control_PStream_LE+0x72>
 4f6:	88 30       	cpi	r24, 0x08	; 8
 4f8:	91 05       	cpc	r25, r1
 4fa:	98 f3       	brcs	.-26     	; 0x4e2 <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 4fc:	21 e0       	ldi	r18, 0x01	; 1
 4fe:	88 30       	cpi	r24, 0x08	; 8
 500:	91 05       	cpc	r25, r1
 502:	09 f0       	breq	.+2      	; 0x506 <Endpoint_Write_Control_PStream_LE+0x7c>
 504:	20 e0       	ldi	r18, 0x00	; 0
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 506:	80 91 e8 00 	lds	r24, 0x00E8
 50a:	8e 7f       	andi	r24, 0xFE	; 254
 50c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 510:	61 15       	cp	r22, r1
 512:	71 05       	cpc	r23, r1
 514:	79 f6       	brne	.-98     	; 0x4b4 <Endpoint_Write_Control_PStream_LE+0x2a>
 516:	22 23       	and	r18, r18
 518:	69 f6       	brne	.-102    	; 0x4b4 <Endpoint_Write_Control_PStream_LE+0x2a>
 51a:	05 c0       	rjmp	.+10     	; 0x526 <Endpoint_Write_Control_PStream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 51c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 51e:	88 23       	and	r24, r24
 520:	61 f0       	breq	.+24     	; 0x53a <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 522:	85 30       	cpi	r24, 0x05	; 5
 524:	61 f0       	breq	.+24     	; 0x53e <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 526:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 52a:	82 ff       	sbrs	r24, 2
 52c:	f7 cf       	rjmp	.-18     	; 0x51c <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 532:	83 e0       	ldi	r24, 0x03	; 3
 534:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 53a:	82 e0       	ldi	r24, 0x02	; 2
 53c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 53e:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 540:	08 95       	ret

00000542 <Endpoint_ConfigureEndpoint_Prv>:
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 542:	eb ee       	ldi	r30, 0xEB	; 235
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	81 60       	ori	r24, 0x01	; 1
 54a:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 54c:	ed ee       	ldi	r30, 0xED	; 237
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
 552:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 556:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 558:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 55c:	88 1f       	adc	r24, r24
 55e:	88 27       	eor	r24, r24
 560:	88 1f       	adc	r24, r24
 562:	08 95       	ret

00000564 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 564:	80 91 04 01 	lds	r24, 0x0104
 568:	87 ff       	sbrs	r24, 7
 56a:	11 c0       	rjmp	.+34     	; 0x58e <Endpoint_ClearStatusStage+0x2a>
 56c:	03 c0       	rjmp	.+6      	; 0x574 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 56e:	8e b3       	in	r24, 0x1e	; 30
 570:	88 23       	and	r24, r24
 572:	b1 f0       	breq	.+44     	; 0x5a0 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 574:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 578:	82 ff       	sbrs	r24, 2
 57a:	f9 cf       	rjmp	.-14     	; 0x56e <Endpoint_ClearStatusStage+0xa>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
 57c:	80 91 e8 00 	lds	r24, 0x00E8
 580:	8b 7f       	andi	r24, 0xFB	; 251
 582:	80 93 e8 00 	sts	0x00E8, r24
 586:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 588:	8e b3       	in	r24, 0x1e	; 30
 58a:	88 23       	and	r24, r24
 58c:	49 f0       	breq	.+18     	; 0x5a0 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 58e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 592:	80 ff       	sbrs	r24, 0
 594:	f9 cf       	rjmp	.-14     	; 0x588 <Endpoint_ClearStatusStage+0x24>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 596:	80 91 e8 00 	lds	r24, 0x00E8
 59a:	8e 7f       	andi	r24, 0xFE	; 254
 59c:	80 93 e8 00 	sts	0x00E8, r24
 5a0:	08 95       	ret

000005a2 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
 5a2:	0f 93       	push	r16
 5a4:	1f 93       	push	r17
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 5aa:	4d d0       	rcall	.+154    	; 0x646 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 5ac:	54 d0       	rcall	.+168    	; 0x656 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 5ae:	c8 ed       	ldi	r28, 0xD8	; 216
 5b0:	d0 e0       	ldi	r29, 0x00	; 0
 5b2:	88 81       	ld	r24, Y
 5b4:	8f 77       	andi	r24, 0x7F	; 127
 5b6:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
 5b8:	88 81       	ld	r24, Y
 5ba:	80 68       	ori	r24, 0x80	; 128
 5bc:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 5be:	88 81       	ld	r24, Y
 5c0:	8f 7d       	andi	r24, 0xDF	; 223
 5c2:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 5c4:	e7 ed       	ldi	r30, 0xD7	; 215
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	80 81       	ld	r24, Z
 5ca:	80 68       	ori	r24, 0x80	; 128
 5cc:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 5ce:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 5d0:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
 5d2:	10 92 00 01 	sts	0x0100, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 5d6:	10 92 02 01 	sts	0x0102, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 5da:	10 92 01 01 	sts	0x0101, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 5de:	00 ee       	ldi	r16, 0xE0	; 224
 5e0:	10 e0       	ldi	r17, 0x00	; 0
 5e2:	f8 01       	movw	r30, r16
 5e4:	80 81       	ld	r24, Z
 5e6:	8b 7f       	andi	r24, 0xFB	; 251
 5e8:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 5ea:	88 81       	ld	r24, Y
 5ec:	81 60       	ori	r24, 0x01	; 1
 5ee:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	42 e0       	ldi	r20, 0x02	; 2
 5f6:	a5 df       	rcall	.-182    	; 0x542 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 5f8:	e1 ee       	ldi	r30, 0xE1	; 225
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	80 81       	ld	r24, Z
 5fe:	8e 7f       	andi	r24, 0xFE	; 254
 600:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 602:	e2 ee       	ldi	r30, 0xE2	; 226
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	81 60       	ori	r24, 0x01	; 1
 60a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 60c:	80 81       	ld	r24, Z
 60e:	88 60       	ori	r24, 0x08	; 8
 610:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 612:	f8 01       	movw	r30, r16
 614:	80 81       	ld	r24, Z
 616:	8e 7f       	andi	r24, 0xFE	; 254
 618:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 61a:	88 81       	ld	r24, Y
 61c:	80 61       	ori	r24, 0x10	; 16
 61e:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	1f 91       	pop	r17
 626:	0f 91       	pop	r16
 628:	08 95       	ret

0000062a <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 62a:	e8 ed       	ldi	r30, 0xD8	; 216
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	80 81       	ld	r24, Z
 630:	8f 7e       	andi	r24, 0xEF	; 239
 632:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 634:	e7 ed       	ldi	r30, 0xD7	; 215
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
 63a:	81 60       	ori	r24, 0x01	; 1
 63c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	80 93 03 01 	sts	0x0103, r24

	USB_ResetInterface();
}
 644:	ae cf       	rjmp	.-164    	; 0x5a2 <USB_ResetInterface>

00000646 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 646:	e8 ed       	ldi	r30, 0xD8	; 216
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	80 81       	ld	r24, Z
 64c:	8c 7f       	andi	r24, 0xFC	; 252
 64e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 650:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 654:	08 95       	ret

00000656 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 656:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 65a:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 65e:	08 95       	ret

00000660 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 660:	1f 92       	push	r1
 662:	0f 92       	push	r0
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	0f 92       	push	r0
 668:	0b b6       	in	r0, 0x3b	; 59
 66a:	0f 92       	push	r0
 66c:	11 24       	eor	r1, r1
 66e:	2f 93       	push	r18
 670:	3f 93       	push	r19
 672:	4f 93       	push	r20
 674:	5f 93       	push	r21
 676:	6f 93       	push	r22
 678:	7f 93       	push	r23
 67a:	8f 93       	push	r24
 67c:	9f 93       	push	r25
 67e:	af 93       	push	r26
 680:	bf 93       	push	r27
 682:	ef 93       	push	r30
 684:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 686:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 68a:	82 ff       	sbrs	r24, 2
 68c:	0a c0       	rjmp	.+20     	; 0x6a2 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 68e:	80 91 e2 00 	lds	r24, 0x00E2
 692:	82 ff       	sbrs	r24, 2
 694:	06 c0       	rjmp	.+12     	; 0x6a2 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 696:	80 91 e1 00 	lds	r24, 0x00E1
 69a:	8b 7f       	andi	r24, 0xFB	; 251
 69c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 6a0:	c5 d1       	rcall	.+906    	; 0xa2c <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 6a2:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 6a6:	80 ff       	sbrs	r24, 0
 6a8:	1b c0       	rjmp	.+54     	; 0x6e0 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 6aa:	80 91 d8 00 	lds	r24, 0x00D8
 6ae:	80 ff       	sbrs	r24, 0
 6b0:	17 c0       	rjmp	.+46     	; 0x6e0 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 6b2:	80 91 da 00 	lds	r24, 0x00DA
 6b6:	8e 7f       	andi	r24, 0xFE	; 254
 6b8:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 6bc:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 6c0:	80 ff       	sbrs	r24, 0
 6c2:	0b c0       	rjmp	.+22     	; 0x6da <__vector_10+0x7a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 6c4:	8c e0       	ldi	r24, 0x0C	; 12
 6c6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 6c8:	8e e0       	ldi	r24, 0x0E	; 14
 6ca:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 6cc:	09 b4       	in	r0, 0x29	; 41
 6ce:	00 fe       	sbrs	r0, 0
 6d0:	fd cf       	rjmp	.-6      	; 0x6cc <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
 6d6:	aa d1       	rcall	.+852    	; 0xa2c <USB_Event_Stub>
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 6da:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 6dc:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
 6de:	a6 d1       	rcall	.+844    	; 0xa2c <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 6e0:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 6e4:	80 ff       	sbrs	r24, 0
 6e6:	17 c0       	rjmp	.+46     	; 0x716 <__vector_10+0xb6>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 6e8:	80 91 e2 00 	lds	r24, 0x00E2
 6ec:	80 ff       	sbrs	r24, 0
 6ee:	13 c0       	rjmp	.+38     	; 0x716 <__vector_10+0xb6>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 6f0:	80 91 e2 00 	lds	r24, 0x00E2
 6f4:	8e 7f       	andi	r24, 0xFE	; 254
 6f6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 6fa:	80 91 e2 00 	lds	r24, 0x00E2
 6fe:	80 61       	ori	r24, 0x10	; 16
 700:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 704:	80 91 d8 00 	lds	r24, 0x00D8
 708:	80 62       	ori	r24, 0x20	; 32
 70a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 70e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 710:	85 e0       	ldi	r24, 0x05	; 5
 712:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
 714:	8b d1       	rcall	.+790    	; 0xa2c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 716:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 71a:	84 ff       	sbrs	r24, 4
 71c:	2c c0       	rjmp	.+88     	; 0x776 <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 71e:	80 91 e2 00 	lds	r24, 0x00E2
 722:	84 ff       	sbrs	r24, 4
 724:	28 c0       	rjmp	.+80     	; 0x776 <__vector_10+0x116>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 726:	8c e0       	ldi	r24, 0x0C	; 12
 728:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 72a:	8e e0       	ldi	r24, 0x0E	; 14
 72c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 72e:	09 b4       	in	r0, 0x29	; 41
 730:	00 fe       	sbrs	r0, 0
 732:	fd cf       	rjmp	.-6      	; 0x72e <__vector_10+0xce>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 734:	80 91 d8 00 	lds	r24, 0x00D8
 738:	8f 7d       	andi	r24, 0xDF	; 223
 73a:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 73e:	80 91 e1 00 	lds	r24, 0x00E1
 742:	8f 7e       	andi	r24, 0xEF	; 239
 744:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 748:	80 91 e2 00 	lds	r24, 0x00E2
 74c:	8f 7e       	andi	r24, 0xEF	; 239
 74e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 752:	80 91 e2 00 	lds	r24, 0x00E2
 756:	81 60       	ori	r24, 0x01	; 1
 758:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 75c:	80 91 00 01 	lds	r24, 0x0100
 760:	88 23       	and	r24, r24
 762:	21 f4       	brne	.+8      	; 0x76c <__vector_10+0x10c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 764:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 768:	87 ff       	sbrs	r24, 7
 76a:	02 c0       	rjmp	.+4      	; 0x770 <__vector_10+0x110>
 76c:	84 e0       	ldi	r24, 0x04	; 4
 76e:	01 c0       	rjmp	.+2      	; 0x772 <__vector_10+0x112>
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 774:	5b d1       	rcall	.+694    	; 0xa2c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 776:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 77a:	83 ff       	sbrs	r24, 3
 77c:	21 c0       	rjmp	.+66     	; 0x7c0 <__vector_10+0x160>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 77e:	80 91 e2 00 	lds	r24, 0x00E2
 782:	83 ff       	sbrs	r24, 3
 784:	1d c0       	rjmp	.+58     	; 0x7c0 <__vector_10+0x160>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 786:	80 91 e1 00 	lds	r24, 0x00E1
 78a:	87 7f       	andi	r24, 0xF7	; 247
 78c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 790:	82 e0       	ldi	r24, 0x02	; 2
 792:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
 794:	10 92 00 01 	sts	0x0100, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 798:	80 91 e1 00 	lds	r24, 0x00E1
 79c:	8e 7f       	andi	r24, 0xFE	; 254
 79e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7a2:	80 91 e2 00 	lds	r24, 0x00E2
 7a6:	8e 7f       	andi	r24, 0xFE	; 254
 7a8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 7ac:	80 91 e2 00 	lds	r24, 0x00E2
 7b0:	80 61       	ori	r24, 0x10	; 16
 7b2:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 7b6:	80 e0       	ldi	r24, 0x00	; 0
 7b8:	60 e0       	ldi	r22, 0x00	; 0
 7ba:	42 e0       	ldi	r20, 0x02	; 2
 7bc:	c2 de       	rcall	.-636    	; 0x542 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 7be:	36 d1       	rcall	.+620    	; 0xa2c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 7c0:	ff 91       	pop	r31
 7c2:	ef 91       	pop	r30
 7c4:	bf 91       	pop	r27
 7c6:	af 91       	pop	r26
 7c8:	9f 91       	pop	r25
 7ca:	8f 91       	pop	r24
 7cc:	7f 91       	pop	r23
 7ce:	6f 91       	pop	r22
 7d0:	5f 91       	pop	r21
 7d2:	4f 91       	pop	r20
 7d4:	3f 91       	pop	r19
 7d6:	2f 91       	pop	r18
 7d8:	0f 90       	pop	r0
 7da:	0b be       	out	0x3b, r0	; 59
 7dc:	0f 90       	pop	r0
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	0f 90       	pop	r0
 7e2:	1f 90       	pop	r1
 7e4:	18 95       	reti

000007e6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 7e6:	1f 93       	push	r17
 7e8:	df 93       	push	r29
 7ea:	cf 93       	push	r28
 7ec:	cd b7       	in	r28, 0x3d	; 61
 7ee:	de b7       	in	r29, 0x3e	; 62
 7f0:	ac 97       	sbiw	r28, 0x2c	; 44
 7f2:	0f b6       	in	r0, 0x3f	; 63
 7f4:	f8 94       	cli
 7f6:	de bf       	out	0x3e, r29	; 62
 7f8:	0f be       	out	0x3f, r0	; 63
 7fa:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 7fc:	e4 e0       	ldi	r30, 0x04	; 4
 7fe:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 800:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 804:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 806:	21 e0       	ldi	r18, 0x01	; 1
 808:	ec 30       	cpi	r30, 0x0C	; 12
 80a:	f2 07       	cpc	r31, r18
 80c:	c9 f7       	brne	.-14     	; 0x800 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 80e:	b0 dc       	rcall	.-1696   	; 0x170 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 810:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 814:	83 ff       	sbrs	r24, 3
 816:	f2 c0       	rjmp	.+484    	; 0x9fc <USB_Device_ProcessControlRequest+0x216>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 818:	80 91 04 01 	lds	r24, 0x0104

		switch (USB_ControlRequest.bRequest)
 81c:	20 91 05 01 	lds	r18, 0x0105
 820:	25 30       	cpi	r18, 0x05	; 5
 822:	09 f4       	brne	.+2      	; 0x826 <USB_Device_ProcessControlRequest+0x40>
 824:	46 c0       	rjmp	.+140    	; 0x8b2 <USB_Device_ProcessControlRequest+0xcc>
 826:	26 30       	cpi	r18, 0x06	; 6
 828:	40 f4       	brcc	.+16     	; 0x83a <USB_Device_ProcessControlRequest+0x54>
 82a:	21 30       	cpi	r18, 0x01	; 1
 82c:	49 f1       	breq	.+82     	; 0x880 <USB_Device_ProcessControlRequest+0x9a>
 82e:	21 30       	cpi	r18, 0x01	; 1
 830:	70 f0       	brcs	.+28     	; 0x84e <USB_Device_ProcessControlRequest+0x68>
 832:	23 30       	cpi	r18, 0x03	; 3
 834:	09 f0       	breq	.+2      	; 0x838 <USB_Device_ProcessControlRequest+0x52>
 836:	e2 c0       	rjmp	.+452    	; 0x9fc <USB_Device_ProcessControlRequest+0x216>
 838:	23 c0       	rjmp	.+70     	; 0x880 <USB_Device_ProcessControlRequest+0x9a>
 83a:	28 30       	cpi	r18, 0x08	; 8
 83c:	09 f4       	brne	.+2      	; 0x840 <USB_Device_ProcessControlRequest+0x5a>
 83e:	b1 c0       	rjmp	.+354    	; 0x9a2 <USB_Device_ProcessControlRequest+0x1bc>
 840:	29 30       	cpi	r18, 0x09	; 9
 842:	09 f4       	brne	.+2      	; 0x846 <USB_Device_ProcessControlRequest+0x60>
 844:	c0 c0       	rjmp	.+384    	; 0x9c6 <USB_Device_ProcessControlRequest+0x1e0>
 846:	26 30       	cpi	r18, 0x06	; 6
 848:	09 f0       	breq	.+2      	; 0x84c <USB_Device_ProcessControlRequest+0x66>
 84a:	d8 c0       	rjmp	.+432    	; 0x9fc <USB_Device_ProcessControlRequest+0x216>
 84c:	54 c0       	rjmp	.+168    	; 0x8f6 <USB_Device_ProcessControlRequest+0x110>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 84e:	80 38       	cpi	r24, 0x80	; 128
 850:	21 f0       	breq	.+8      	; 0x85a <USB_Device_ProcessControlRequest+0x74>
 852:	82 38       	cpi	r24, 0x82	; 130
 854:	09 f0       	breq	.+2      	; 0x858 <USB_Device_ProcessControlRequest+0x72>
 856:	d2 c0       	rjmp	.+420    	; 0x9fc <USB_Device_ProcessControlRequest+0x216>
 858:	08 c0       	rjmp	.+16     	; 0x86a <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 85a:	80 91 01 01 	lds	r24, 0x0101
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 85e:	90 91 02 01 	lds	r25, 0x0102
 862:	99 23       	and	r25, r25
 864:	19 f0       	breq	.+6      	; 0x86c <USB_Device_ProcessControlRequest+0x86>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 866:	82 60       	ori	r24, 0x02	; 2
 868:	01 c0       	rjmp	.+2      	; 0x86c <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 86a:	80 e0       	ldi	r24, 0x00	; 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 86c:	90 91 e8 00 	lds	r25, 0x00E8
 870:	97 7f       	andi	r25, 0xF7	; 247
 872:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 876:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 87a:	10 92 f1 00 	sts	0x00F1, r1
 87e:	9c c0       	rjmp	.+312    	; 0x9b8 <USB_Device_ProcessControlRequest+0x1d2>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 880:	88 23       	and	r24, r24
 882:	19 f0       	breq	.+6      	; 0x88a <USB_Device_ProcessControlRequest+0xa4>
 884:	82 30       	cpi	r24, 0x02	; 2
 886:	09 f0       	breq	.+2      	; 0x88a <USB_Device_ProcessControlRequest+0xa4>
 888:	b9 c0       	rjmp	.+370    	; 0x9fc <USB_Device_ProcessControlRequest+0x216>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	8f 71       	andi	r24, 0x1F	; 31
 88e:	90 70       	andi	r25, 0x00	; 0
 890:	00 97       	sbiw	r24, 0x00	; 0
 892:	09 f0       	breq	.+2      	; 0x896 <USB_Device_ProcessControlRequest+0xb0>
 894:	b3 c0       	rjmp	.+358    	; 0x9fc <USB_Device_ProcessControlRequest+0x216>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 896:	80 91 06 01 	lds	r24, 0x0106
 89a:	81 30       	cpi	r24, 0x01	; 1
 89c:	09 f0       	breq	.+2      	; 0x8a0 <USB_Device_ProcessControlRequest+0xba>
 89e:	ae c0       	rjmp	.+348    	; 0x9fc <USB_Device_ProcessControlRequest+0x216>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 8a0:	23 30       	cpi	r18, 0x03	; 3
 8a2:	09 f0       	breq	.+2      	; 0x8a6 <USB_Device_ProcessControlRequest+0xc0>
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	80 93 02 01 	sts	0x0102, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8aa:	80 91 e8 00 	lds	r24, 0x00E8
 8ae:	87 7f       	andi	r24, 0xF7	; 247
 8b0:	86 c0       	rjmp	.+268    	; 0x9be <USB_Device_ProcessControlRequest+0x1d8>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 8b2:	88 23       	and	r24, r24
 8b4:	09 f0       	breq	.+2      	; 0x8b8 <USB_Device_ProcessControlRequest+0xd2>
 8b6:	a2 c0       	rjmp	.+324    	; 0x9fc <USB_Device_ProcessControlRequest+0x216>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 8b8:	10 91 06 01 	lds	r17, 0x0106
 8bc:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 8be:	80 91 e3 00 	lds	r24, 0x00E3
 8c2:	80 78       	andi	r24, 0x80	; 128
 8c4:	81 2b       	or	r24, r17
 8c6:	80 93 e3 00 	sts	0x00E3, r24
 8ca:	80 91 e8 00 	lds	r24, 0x00E8
 8ce:	87 7f       	andi	r24, 0xF7	; 247
 8d0:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 8d4:	47 de       	rcall	.-882    	; 0x564 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8d6:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 8da:	80 ff       	sbrs	r24, 0
 8dc:	fc cf       	rjmp	.-8      	; 0x8d6 <USB_Device_ProcessControlRequest+0xf0>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
 8de:	80 91 e3 00 	lds	r24, 0x00E3
 8e2:	80 68       	ori	r24, 0x80	; 128
 8e4:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 8e8:	11 23       	and	r17, r17
 8ea:	11 f0       	breq	.+4      	; 0x8f0 <USB_Device_ProcessControlRequest+0x10a>
 8ec:	83 e0       	ldi	r24, 0x03	; 3
 8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <USB_Device_ProcessControlRequest+0x10c>
 8f0:	82 e0       	ldi	r24, 0x02	; 2
 8f2:	8e bb       	out	0x1e, r24	; 30
 8f4:	83 c0       	rjmp	.+262    	; 0x9fc <USB_Device_ProcessControlRequest+0x216>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 8f6:	80 58       	subi	r24, 0x80	; 128
 8f8:	82 30       	cpi	r24, 0x02	; 2
 8fa:	08 f0       	brcs	.+2      	; 0x8fe <USB_Device_ProcessControlRequest+0x118>
 8fc:	7f c0       	rjmp	.+254    	; 0x9fc <USB_Device_ProcessControlRequest+0x216>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 8fe:	80 91 06 01 	lds	r24, 0x0106
 902:	90 91 07 01 	lds	r25, 0x0107
 906:	23 e0       	ldi	r18, 0x03	; 3
 908:	8c 3d       	cpi	r24, 0xDC	; 220
 90a:	92 07       	cpc	r25, r18
 90c:	91 f5       	brne	.+100    	; 0x972 <USB_Device_ProcessControlRequest+0x18c>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 90e:	83 e0       	ldi	r24, 0x03	; 3
 910:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 912:	8a e2       	ldi	r24, 0x2A	; 42
 914:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 916:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 918:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 91a:	de 01       	movw	r26, r28
 91c:	15 96       	adiw	r26, 0x05	; 5
 91e:	80 e0       	ldi	r24, 0x00	; 0
 920:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 922:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 924:	61 e2       	ldi	r22, 0x21	; 33
 926:	e4 2f       	mov	r30, r20
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	60 93 57 00 	sts	0x0057, r22
 92e:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
 930:	80 ff       	sbrs	r24, 0
 932:	03 c0       	rjmp	.+6      	; 0x93a <USB_Device_ProcessControlRequest+0x154>
					{
						SerialByte >>= 4;
 934:	e2 95       	swap	r30
 936:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 938:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 93a:	ef 70       	andi	r30, 0x0F	; 15
 93c:	2e 2f       	mov	r18, r30
 93e:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 940:	ea 30       	cpi	r30, 0x0A	; 10
 942:	18 f0       	brcs	.+6      	; 0x94a <USB_Device_ProcessControlRequest+0x164>
 944:	29 5c       	subi	r18, 0xC9	; 201
 946:	3f 4f       	sbci	r19, 0xFF	; 255
 948:	02 c0       	rjmp	.+4      	; 0x94e <USB_Device_ProcessControlRequest+0x168>
 94a:	20 5d       	subi	r18, 0xD0	; 208
 94c:	3f 4f       	sbci	r19, 0xFF	; 255
 94e:	2d 93       	st	X+, r18
 950:	3d 93       	st	X+, r19
 952:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 954:	84 31       	cpi	r24, 0x14	; 20
 956:	91 05       	cpc	r25, r1
 958:	31 f7       	brne	.-52     	; 0x926 <USB_Device_ProcessControlRequest+0x140>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 95a:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 95c:	80 91 e8 00 	lds	r24, 0x00E8
 960:	87 7f       	andi	r24, 0xF7	; 247
 962:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 966:	ce 01       	movw	r24, r28
 968:	03 96       	adiw	r24, 0x03	; 3
 96a:	6a e2       	ldi	r22, 0x2A	; 42
 96c:	70 e0       	ldi	r23, 0x00	; 0
 96e:	f3 dc       	rcall	.-1562   	; 0x356 <Endpoint_Write_Control_Stream_LE>
 970:	12 c0       	rjmp	.+36     	; 0x996 <USB_Device_ProcessControlRequest+0x1b0>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 972:	60 91 08 01 	lds	r22, 0x0108
 976:	ae 01       	movw	r20, r28
 978:	4f 5f       	subi	r20, 0xFF	; 255
 97a:	5f 4f       	sbci	r21, 0xFF	; 255
 97c:	ba dc       	rcall	.-1676   	; 0x2f2 <CALLBACK_USB_GetDescriptor>
 97e:	bc 01       	movw	r22, r24
 980:	00 97       	sbiw	r24, 0x00	; 0
 982:	09 f4       	brne	.+2      	; 0x986 <USB_Device_ProcessControlRequest+0x1a0>
 984:	3b c0       	rjmp	.+118    	; 0x9fc <USB_Device_ProcessControlRequest+0x216>
 986:	80 91 e8 00 	lds	r24, 0x00E8
 98a:	87 7f       	andi	r24, 0xF7	; 247
 98c:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 990:	89 81       	ldd	r24, Y+1	; 0x01
 992:	9a 81       	ldd	r25, Y+2	; 0x02
 994:	7a dd       	rcall	.-1292   	; 0x48a <Endpoint_Write_Control_PStream_LE>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
 996:	80 91 e8 00 	lds	r24, 0x00E8
 99a:	8b 7f       	andi	r24, 0xFB	; 251
 99c:	80 93 e8 00 	sts	0x00E8, r24
 9a0:	2d c0       	rjmp	.+90     	; 0x9fc <USB_Device_ProcessControlRequest+0x216>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 9a2:	80 38       	cpi	r24, 0x80	; 128
 9a4:	59 f5       	brne	.+86     	; 0x9fc <USB_Device_ProcessControlRequest+0x216>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9a6:	80 91 e8 00 	lds	r24, 0x00E8
 9aa:	87 7f       	andi	r24, 0xF7	; 247
 9ac:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 9b0:	80 91 00 01 	lds	r24, 0x0100
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 9b4:	80 93 f1 00 	sts	0x00F1, r24
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
 9b8:	80 91 e8 00 	lds	r24, 0x00E8
 9bc:	8e 7f       	andi	r24, 0xFE	; 254
 9be:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 9c2:	d0 dd       	rcall	.-1120   	; 0x564 <Endpoint_ClearStatusStage>
 9c4:	1b c0       	rjmp	.+54     	; 0x9fc <USB_Device_ProcessControlRequest+0x216>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 9c6:	88 23       	and	r24, r24
 9c8:	c9 f4       	brne	.+50     	; 0x9fc <USB_Device_ProcessControlRequest+0x216>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 9ca:	90 91 06 01 	lds	r25, 0x0106
 9ce:	92 30       	cpi	r25, 0x02	; 2
 9d0:	a8 f4       	brcc	.+42     	; 0x9fc <USB_Device_ProcessControlRequest+0x216>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9d2:	80 91 e8 00 	lds	r24, 0x00E8
 9d6:	87 7f       	andi	r24, 0xF7	; 247
 9d8:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 9dc:	90 93 00 01 	sts	0x0100, r25

	Endpoint_ClearStatusStage();
 9e0:	c1 dd       	rcall	.-1150   	; 0x564 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 9e2:	80 91 00 01 	lds	r24, 0x0100
 9e6:	88 23       	and	r24, r24
 9e8:	21 f4       	brne	.+8      	; 0x9f2 <USB_Device_ProcessControlRequest+0x20c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 9ea:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 9ee:	87 ff       	sbrs	r24, 7
 9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <USB_Device_ProcessControlRequest+0x210>
 9f2:	84 e0       	ldi	r24, 0x04	; 4
 9f4:	01 c0       	rjmp	.+2      	; 0x9f8 <USB_Device_ProcessControlRequest+0x212>
 9f6:	81 e0       	ldi	r24, 0x01	; 1
 9f8:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
 9fa:	18 d0       	rcall	.+48     	; 0xa2c <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9fc:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 a00:	83 ff       	sbrs	r24, 3
 a02:	0a c0       	rjmp	.+20     	; 0xa18 <USB_Device_ProcessControlRequest+0x232>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a04:	80 91 e8 00 	lds	r24, 0x00E8
 a08:	87 7f       	andi	r24, 0xF7	; 247
 a0a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a0e:	80 91 eb 00 	lds	r24, 0x00EB
 a12:	80 62       	ori	r24, 0x20	; 32
 a14:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 a18:	ac 96       	adiw	r28, 0x2c	; 44
 a1a:	0f b6       	in	r0, 0x3f	; 63
 a1c:	f8 94       	cli
 a1e:	de bf       	out	0x3e, r29	; 62
 a20:	0f be       	out	0x3f, r0	; 63
 a22:	cd bf       	out	0x3d, r28	; 61
 a24:	cf 91       	pop	r28
 a26:	df 91       	pop	r29
 a28:	1f 91       	pop	r17
 a2a:	08 95       	ret

00000a2c <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 a2c:	08 95       	ret

00000a2e <USB_USBTask>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 a2e:	8e b3       	in	r24, 0x1e	; 30
 a30:	88 23       	and	r24, r24
 a32:	29 f0       	breq	.+10     	; 0xa3e <USB_USBTask+0x10>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a34:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 a38:	83 ff       	sbrs	r24, 3
 a3a:	01 c0       	rjmp	.+2      	; 0xa3e <USB_USBTask+0x10>
	  USB_Device_ProcessControlRequest();
 a3c:	d4 ce       	rjmp	.-600    	; 0x7e6 <USB_Device_ProcessControlRequest>
 a3e:	08 95       	ret

00000a40 <_exit>:
 a40:	f8 94       	cli

00000a42 <__stop_program>:
 a42:	ff cf       	rjmp	.-2      	; 0xa42 <__stop_program>
