
TempDataLogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ce  00800100  00005076  0000512a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005076  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000268  008001ce  008001ce  000051f8  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  000051f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00002220  00000000  00000000  000051fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000df6  00000000  00000000  0000741c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000728  00000000  00000000  00008212  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00001130  00000000  00000000  0000893a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000d5e6  00000000  00000000  00009a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002e5a  00000000  00000000  00017050  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a829  00000000  00000000  00019eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000b10  00000000  00000000  000246d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004776  00000000  00000000  000251e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007e5d  00000000  00000000  0002995a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00001494  00000000  00000000  000317b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b28  00000000  00000000  00032c4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
       0:	20 c1       	rjmp	.+576    	; 0x242 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
       4:	3c c1       	rjmp	.+632    	; 0x27e <__bad_interrupt>
       6:	00 00       	nop
       8:	3a c1       	rjmp	.+628    	; 0x27e <__bad_interrupt>
       a:	00 00       	nop
       c:	38 c1       	rjmp	.+624    	; 0x27e <__bad_interrupt>
       e:	00 00       	nop
      10:	36 c1       	rjmp	.+620    	; 0x27e <__bad_interrupt>
      12:	00 00       	nop
      14:	34 c1       	rjmp	.+616    	; 0x27e <__bad_interrupt>
      16:	00 00       	nop
      18:	32 c1       	rjmp	.+612    	; 0x27e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	30 c1       	rjmp	.+608    	; 0x27e <__bad_interrupt>
      1e:	00 00       	nop
      20:	2e c1       	rjmp	.+604    	; 0x27e <__bad_interrupt>
      22:	00 00       	nop
      24:	2c c1       	rjmp	.+600    	; 0x27e <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__vector_10>
      2c:	0c 94 26 1e 	jmp	0x3c4c	; 0x3c4c <__vector_11>
      30:	26 c1       	rjmp	.+588    	; 0x27e <__bad_interrupt>
      32:	00 00       	nop
      34:	24 c1       	rjmp	.+584    	; 0x27e <__bad_interrupt>
      36:	00 00       	nop
      38:	22 c1       	rjmp	.+580    	; 0x27e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	20 c1       	rjmp	.+576    	; 0x27e <__bad_interrupt>
      3e:	00 00       	nop
      40:	1e c1       	rjmp	.+572    	; 0x27e <__bad_interrupt>
      42:	00 00       	nop
      44:	22 c1       	rjmp	.+580    	; 0x28a <__vector_17>
      46:	00 00       	nop
      48:	1a c1       	rjmp	.+564    	; 0x27e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	18 c1       	rjmp	.+560    	; 0x27e <__bad_interrupt>
      4e:	00 00       	nop
      50:	16 c1       	rjmp	.+556    	; 0x27e <__bad_interrupt>
      52:	00 00       	nop
      54:	14 c1       	rjmp	.+552    	; 0x27e <__bad_interrupt>
      56:	00 00       	nop
      58:	12 c1       	rjmp	.+548    	; 0x27e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	10 c1       	rjmp	.+544    	; 0x27e <__bad_interrupt>
      5e:	00 00       	nop
      60:	0e c1       	rjmp	.+540    	; 0x27e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c c1       	rjmp	.+536    	; 0x27e <__bad_interrupt>
      66:	00 00       	nop
      68:	0a c1       	rjmp	.+532    	; 0x27e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	08 c1       	rjmp	.+528    	; 0x27e <__bad_interrupt>
      6e:	00 00       	nop
      70:	06 c1       	rjmp	.+524    	; 0x27e <__bad_interrupt>
      72:	00 00       	nop
      74:	04 c1       	rjmp	.+520    	; 0x27e <__bad_interrupt>
      76:	00 00       	nop
      78:	02 c1       	rjmp	.+516    	; 0x27e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	00 c1       	rjmp	.+512    	; 0x27e <__bad_interrupt>
      7e:	00 00       	nop
      80:	fe c0       	rjmp	.+508    	; 0x27e <__bad_interrupt>
      82:	00 00       	nop
      84:	fc c0       	rjmp	.+504    	; 0x27e <__bad_interrupt>
      86:	00 00       	nop
      88:	fa c0       	rjmp	.+500    	; 0x27e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f8 c0       	rjmp	.+496    	; 0x27e <__bad_interrupt>
      8e:	00 00       	nop
      90:	f6 c0       	rjmp	.+492    	; 0x27e <__bad_interrupt>
      92:	00 00       	nop
      94:	f4 c0       	rjmp	.+488    	; 0x27e <__bad_interrupt>
      96:	00 00       	nop

00000098 <GenericReport>:
      98:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
      a8:	07 81 02 09 03 15 00 25 ff 75 08 95 07 91 02 c0     .......%.u......

000000b8 <DeviceDescriptor>:
      b8:	12 01 10 01 00 00 00 08 eb 03 63 20 01 00 01 02     ..........c ....
      c8:	dc 01                                               ..

000000ca <ConfigurationDescriptor>:
      ca:	09 02 39 00 02 01 00 c0 32 09 04 00 00 02 08 06     ..9.....2.......
      da:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..
      ea:	09 04 01 00 01 03 00 00 00 09 21 11 01 00 01 22     ..........!...."
      fa:	20 00 07 05 81 03 10 00 05                           ........

00000103 <LanguageString>:
     103:	04 03 09 04                                         ....

00000107 <ManufacturerString>:
     107:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     117:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000121 <ProductString>:
     121:	2e 03 54 00 65 00 6d 00 70 00 65 00 72 00 61 00     ..T.e.m.p.e.r.a.
     131:	74 00 75 00 72 00 65 00 20 00 44 00 61 00 74 00     t.u.r.e. .D.a.t.
     141:	61 00 6c 00 6f 00 67 00 67 00 65 00 72 00 00 00     a.l.o.g.g.e.r...

00000151 <Temperature_Lookup>:
     151:	b4 03 b0 03 ab 03 a6 03 a0 03 9a 03 94 03 8e 03     ................
     161:	88 03 81 03 7a 03 73 03 6b 03 63 03 5b 03 53 03     ....z.s.k.c.[.S.
     171:	4a 03 41 03 38 03 2f 03 25 03 1b 03 11 03 07 03     J.A.8./.%.......
     181:	fc 02 f1 02 e6 02 db 02 d0 02 c4 02 b8 02 ac 02     ................
     191:	a0 02 94 02 88 02 7c 02 6f 02 63 02 56 02 4a 02     ......|.o.c.V.J.
     1a1:	3d 02 31 02 25 02 18 02 0c 02 00 02 f3 01 e7 01     =.1.%...........
     1b1:	db 01 cf 01 c4 01 b8 01 ac 01 a1 01 96 01 8b 01     ................
     1c1:	80 01 76 01 6b 01 61 01 57 01 4d 01 44 01 3a 01     ..v.k.a.W.M.D.:.
     1d1:	31 01 28 01 1f 01 17 01 0f 01 06 01 fe 00 f7 00     1.(.............
     1e1:	ef 00 e8 00 e1 00 da 00 d3 00 cd 00 c7 00 c0 00     ................
     1f1:	ba 00 b5 00 af 00 aa 00 a4 00 9f 00 9a 00 96 00     ................
     201:	91 00 8c 00 88 00 84 00 80 00 7c 00 78 00 74 00     ..........|.x.t.
     211:	71 00 6d 00 6a 00 67 00 64 00 61 00 5e 00 5b 00     q.m.j.g.d.a.^.[.
     221:	58 00 55 00 53 00 50 00 4e 00 4c 00 49 00 47 00     X.U.S.P.N.L.I.G.
     231:	45 00 43 00 41 00 3f 00 3d 00 3c 00 3a 00 38 00     E.C.A.?.=.<.:.8.
     241:	00                                                  .

00000242 <__ctors_end>:
     242:	11 24       	eor	r1, r1
     244:	1f be       	out	0x3f, r1	; 63
     246:	cf ef       	ldi	r28, 0xFF	; 255
     248:	d0 e2       	ldi	r29, 0x20	; 32
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	cd bf       	out	0x3d, r28	; 61

0000024e <__do_copy_data>:
     24e:	11 e0       	ldi	r17, 0x01	; 1
     250:	a0 e0       	ldi	r26, 0x00	; 0
     252:	b1 e0       	ldi	r27, 0x01	; 1
     254:	e6 e7       	ldi	r30, 0x76	; 118
     256:	f0 e5       	ldi	r31, 0x50	; 80
     258:	00 e0       	ldi	r16, 0x00	; 0
     25a:	0b bf       	out	0x3b, r16	; 59
     25c:	02 c0       	rjmp	.+4      	; 0x262 <__do_copy_data+0x14>
     25e:	07 90       	elpm	r0, Z+
     260:	0d 92       	st	X+, r0
     262:	ae 3c       	cpi	r26, 0xCE	; 206
     264:	b1 07       	cpc	r27, r17
     266:	d9 f7       	brne	.-10     	; 0x25e <__do_copy_data+0x10>

00000268 <__do_clear_bss>:
     268:	14 e0       	ldi	r17, 0x04	; 4
     26a:	ae ec       	ldi	r26, 0xCE	; 206
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	01 c0       	rjmp	.+2      	; 0x272 <.do_clear_bss_start>

00000270 <.do_clear_bss_loop>:
     270:	1d 92       	st	X+, r1

00000272 <.do_clear_bss_start>:
     272:	a6 33       	cpi	r26, 0x36	; 54
     274:	b1 07       	cpc	r27, r17
     276:	e1 f7       	brne	.-8      	; 0x270 <.do_clear_bss_loop>
     278:	80 d1       	rcall	.+768    	; 0x57a <main>
     27a:	0c 94 39 28 	jmp	0x5072	; 0x5072 <_exit>

0000027e <__bad_interrupt>:
     27e:	c0 ce       	rjmp	.-640    	; 0x0 <__vectors>

00000280 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     280:	9b b1       	in	r25, 0x0b	; 11
     282:	9f 70       	andi	r25, 0x0F	; 15
     284:	98 2b       	or	r25, r24
     286:	9b b9       	out	0x0b, r25	; 11
			}
     288:	08 95       	ret

0000028a <__vector_17>:
static FIL TempLogFile;


/** ISR to handle the 500ms ticks for sampling and data logging */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
     28a:	1f 92       	push	r1
     28c:	0f 92       	push	r0
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	0f 92       	push	r0
     292:	0b b6       	in	r0, 0x3b	; 59
     294:	0f 92       	push	r0
     296:	11 24       	eor	r1, r1
     298:	9f 92       	push	r9
     29a:	af 92       	push	r10
     29c:	bf 92       	push	r11
     29e:	cf 92       	push	r12
     2a0:	df 92       	push	r13
     2a2:	ef 92       	push	r14
     2a4:	ff 92       	push	r15
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	2f 93       	push	r18
     2ac:	3f 93       	push	r19
     2ae:	4f 93       	push	r20
     2b0:	5f 93       	push	r21
     2b2:	6f 93       	push	r22
     2b4:	7f 93       	push	r23
     2b6:	8f 93       	push	r24
     2b8:	9f 93       	push	r25
     2ba:	af 93       	push	r26
     2bc:	bf 93       	push	r27
     2be:	ef 93       	push	r30
     2c0:	ff 93       	push	r31
     2c2:	df 93       	push	r29
     2c4:	cf 93       	push	r28
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	cc 56       	subi	r28, 0x6C	; 108
     2cc:	d0 40       	sbci	r29, 0x00	; 0
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	cd bf       	out	0x3d, r28	; 61
			}

			static inline uint8_t LEDs_GetLEDs(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t LEDs_GetLEDs(void)
			{
				return (PORTD & LEDS_ALL_LEDS);
     2d2:	fb b0       	in	r15, 0x0b	; 11
	uint8_t LEDMask = LEDs_GetLEDs();

	/* Check to see if the logging interval has expired */
	if (++CurrentLoggingTicks < LoggingInterval500MS_SRAM)
     2d4:	80 91 1d 04 	lds	r24, 0x041D
     2d8:	90 91 1e 04 	lds	r25, 0x041E
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	90 93 1e 04 	sts	0x041E, r25
     2e2:	80 93 1d 04 	sts	0x041D, r24
     2e6:	20 91 ce 01 	lds	r18, 0x01CE
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	82 17       	cp	r24, r18
     2ee:	93 07       	cpc	r25, r19
     2f0:	08 f4       	brcc	.+2      	; 0x2f4 <__vector_17+0x6a>
     2f2:	5c c0       	rjmp	.+184    	; 0x3ac <__vector_17+0x122>
	  return;

	/* Reset log tick counter to prepare for next logging interval */
	CurrentLoggingTicks = 0;
     2f4:	10 92 1e 04 	sts	0x041E, r1
     2f8:	10 92 1d 04 	sts	0x041D, r1

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     2fc:	80 e2       	ldi	r24, 0x20	; 32
     2fe:	c0 df       	rcall	.-128    	; 0x280 <LEDs_SetAllLEDs>

	/* Only log when not connected to a USB host */
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     300:	8e b3       	in	r24, 0x1e	; 30
     302:	88 23       	and	r24, r24
     304:	09 f0       	breq	.+2      	; 0x308 <__vector_17+0x7e>
     306:	4f c0       	rjmp	.+158    	; 0x3a6 <__vector_17+0x11c>
	{
		TimeDate_t CurrentTimeDate;
		DS1307_GetTimeDate(&CurrentTimeDate);
     308:	ce 01       	movw	r24, r28
     30a:	03 96       	adiw	r24, 0x03	; 3
     30c:	c8 d6       	rcall	.+3472   	; 0x109e <DS1307_GetTimeDate>

		char     LineBuffer[100];
		uint16_t BytesWritten;

		BytesWritten = sprintf(LineBuffer, "%02d/%02d/20%02d, %02d:%02d:%02d, %d Degrees\r\n",
     30e:	9e 80       	ldd	r9, Y+6	; 0x06
     310:	af 80       	ldd	r10, Y+7	; 0x07
     312:	b8 84       	ldd	r11, Y+8	; 0x08
     314:	cb 80       	ldd	r12, Y+3	; 0x03
     316:	dc 80       	ldd	r13, Y+4	; 0x04
     318:	ed 80       	ldd	r14, Y+5	; 0x05
		                       CurrentTimeDate.Day, CurrentTimeDate.Month, CurrentTimeDate.Year,
		                       CurrentTimeDate.Hour, CurrentTimeDate.Minute, CurrentTimeDate.Second,
		                       Temperature_GetTemperature());
     31a:	0e 94 b1 24 	call	0x4962	; 0x4962 <Temperature_GetTemperature>
		DS1307_GetTimeDate(&CurrentTimeDate);

		char     LineBuffer[100];
		uint16_t BytesWritten;

		BytesWritten = sprintf(LineBuffer, "%02d/%02d/20%02d, %02d:%02d:%02d, %d Degrees\r\n",
     31e:	2d b7       	in	r18, 0x3d	; 61
     320:	3e b7       	in	r19, 0x3e	; 62
     322:	22 51       	subi	r18, 0x12	; 18
     324:	30 40       	sbci	r19, 0x00	; 0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	f8 94       	cli
     32a:	3e bf       	out	0x3e, r19	; 62
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	2d bf       	out	0x3d, r18	; 61
     330:	ed b7       	in	r30, 0x3d	; 61
     332:	fe b7       	in	r31, 0x3e	; 62
     334:	31 96       	adiw	r30, 0x01	; 1
     336:	8e 01       	movw	r16, r28
     338:	07 5f       	subi	r16, 0xF7	; 247
     33a:	1f 4f       	sbci	r17, 0xFF	; 255
     33c:	ad b7       	in	r26, 0x3d	; 61
     33e:	be b7       	in	r27, 0x3e	; 62
     340:	12 96       	adiw	r26, 0x02	; 2
     342:	1c 93       	st	X, r17
     344:	0e 93       	st	-X, r16
     346:	11 97       	sbiw	r26, 0x01	; 1
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	31 e0       	ldi	r19, 0x01	; 1
     34c:	33 83       	std	Z+3, r19	; 0x03
     34e:	22 83       	std	Z+2, r18	; 0x02
     350:	94 82       	std	Z+4, r9	; 0x04
     352:	15 82       	std	Z+5, r1	; 0x05
     354:	a6 82       	std	Z+6, r10	; 0x06
     356:	17 82       	std	Z+7, r1	; 0x07
     358:	b0 86       	std	Z+8, r11	; 0x08
     35a:	11 86       	std	Z+9, r1	; 0x09
     35c:	c2 86       	std	Z+10, r12	; 0x0a
     35e:	13 86       	std	Z+11, r1	; 0x0b
     360:	d4 86       	std	Z+12, r13	; 0x0c
     362:	15 86       	std	Z+13, r1	; 0x0d
     364:	e6 86       	std	Z+14, r14	; 0x0e
     366:	17 86       	std	Z+15, r1	; 0x0f
     368:	99 27       	eor	r25, r25
     36a:	87 fd       	sbrc	r24, 7
     36c:	90 95       	com	r25
     36e:	91 8b       	std	Z+17, r25	; 0x11
     370:	80 8b       	std	Z+16, r24	; 0x10
     372:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <sprintf>
     376:	ac 01       	movw	r20, r24
     378:	89 83       	std	Y+1, r24	; 0x01
     37a:	5a 83       	std	Y+2, r21	; 0x02
		                       CurrentTimeDate.Day, CurrentTimeDate.Month, CurrentTimeDate.Year,
		                       CurrentTimeDate.Hour, CurrentTimeDate.Minute, CurrentTimeDate.Second,
		                       Temperature_GetTemperature());

		f_write(&TempLogFile, LineBuffer, BytesWritten, &BytesWritten);
     37c:	2d b7       	in	r18, 0x3d	; 61
     37e:	3e b7       	in	r19, 0x3e	; 62
     380:	2e 5e       	subi	r18, 0xEE	; 238
     382:	3f 4f       	sbci	r19, 0xFF	; 255
     384:	0f b6       	in	r0, 0x3f	; 63
     386:	f8 94       	cli
     388:	3e bf       	out	0x3e, r19	; 62
     38a:	0f be       	out	0x3f, r0	; 63
     38c:	2d bf       	out	0x3d, r18	; 61
     38e:	8f ec       	ldi	r24, 0xCF	; 207
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	b8 01       	movw	r22, r16
     394:	9e 01       	movw	r18, r28
     396:	2f 5f       	subi	r18, 0xFF	; 255
     398:	3f 4f       	sbci	r19, 0xFF	; 255
     39a:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <f_write>
		f_sync(&TempLogFile);
     39e:	8f ec       	ldi	r24, 0xCF	; 207
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	0e 94 6f 17 	call	0x2ede	; 0x2ede <f_sync>
	}

	LEDs_SetAllLEDs(LEDMask);
     3a6:	8f 2d       	mov	r24, r15
     3a8:	80 7f       	andi	r24, 0xF0	; 240
     3aa:	6a df       	rcall	.-300    	; 0x280 <LEDs_SetAllLEDs>
}
     3ac:	c4 59       	subi	r28, 0x94	; 148
     3ae:	df 4f       	sbci	r29, 0xFF	; 255
     3b0:	de bf       	out	0x3e, r29	; 62
     3b2:	cd bf       	out	0x3d, r28	; 61
     3b4:	cf 91       	pop	r28
     3b6:	df 91       	pop	r29
     3b8:	ff 91       	pop	r31
     3ba:	ef 91       	pop	r30
     3bc:	bf 91       	pop	r27
     3be:	af 91       	pop	r26
     3c0:	9f 91       	pop	r25
     3c2:	8f 91       	pop	r24
     3c4:	7f 91       	pop	r23
     3c6:	6f 91       	pop	r22
     3c8:	5f 91       	pop	r21
     3ca:	4f 91       	pop	r20
     3cc:	3f 91       	pop	r19
     3ce:	2f 91       	pop	r18
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	ff 90       	pop	r15
     3d6:	ef 90       	pop	r14
     3d8:	df 90       	pop	r13
     3da:	cf 90       	pop	r12
     3dc:	bf 90       	pop	r11
     3de:	af 90       	pop	r10
     3e0:	9f 90       	pop	r9
     3e2:	0f 90       	pop	r0
     3e4:	0b be       	out	0x3b, r0	; 59
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <OpenLogFile>:
	}
}

/** Opens the log file on the Dataflash's FAT formatted partition according to the current date */
void OpenLogFile(void)
{
     3f0:	ef 92       	push	r14
     3f2:	ff 92       	push	r15
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	df 93       	push	r29
     3fa:	cf 93       	push	r28
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	62 97       	sbiw	r28, 0x12	; 18
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	cd bf       	out	0x3d, r28	; 61
	char LogFileName[12];

	/* Get the current date for the filename as "DDMMYY.csv" */
	TimeDate_t CurrentTimeDate;
	DS1307_GetTimeDate(&CurrentTimeDate);
     40c:	ce 01       	movw	r24, r28
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	46 d6       	rcall	.+3212   	; 0x109e <DS1307_GetTimeDate>
	sprintf(LogFileName, "%02d%02d%02d.csv", CurrentTimeDate.Day, CurrentTimeDate.Month, CurrentTimeDate.Year);
     412:	8d b7       	in	r24, 0x3d	; 61
     414:	9e b7       	in	r25, 0x3e	; 62
     416:	0a 97       	sbiw	r24, 0x0a	; 10
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	f8 94       	cli
     41c:	9e bf       	out	0x3e, r25	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	8d bf       	out	0x3d, r24	; 61
     422:	ed b7       	in	r30, 0x3d	; 61
     424:	fe b7       	in	r31, 0x3e	; 62
     426:	31 96       	adiw	r30, 0x01	; 1
     428:	8e 01       	movw	r16, r28
     42a:	09 5f       	subi	r16, 0xF9	; 249
     42c:	1f 4f       	sbci	r17, 0xFF	; 255
     42e:	ad b7       	in	r26, 0x3d	; 61
     430:	be b7       	in	r27, 0x3e	; 62
     432:	12 96       	adiw	r26, 0x02	; 2
     434:	1c 93       	st	X, r17
     436:	0e 93       	st	-X, r16
     438:	11 97       	sbiw	r26, 0x01	; 1
     43a:	8f e2       	ldi	r24, 0x2F	; 47
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	93 83       	std	Z+3, r25	; 0x03
     440:	82 83       	std	Z+2, r24	; 0x02
     442:	8c 81       	ldd	r24, Y+4	; 0x04
     444:	84 83       	std	Z+4, r24	; 0x04
     446:	15 82       	std	Z+5, r1	; 0x05
     448:	8d 81       	ldd	r24, Y+5	; 0x05
     44a:	86 83       	std	Z+6, r24	; 0x06
     44c:	17 82       	std	Z+7, r1	; 0x07
     44e:	8e 81       	ldd	r24, Y+6	; 0x06
     450:	80 87       	std	Z+8, r24	; 0x08
     452:	11 86       	std	Z+9, r1	; 0x09
     454:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <sprintf>

	/* Mount the storage device, open the file */
	f_mount(0, &DiskFATState);
     458:	8d b7       	in	r24, 0x3d	; 61
     45a:	9e b7       	in	r25, 0x3e	; 62
     45c:	0a 96       	adiw	r24, 0x0a	; 10
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	9e bf       	out	0x3e, r25	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	8d bf       	out	0x3d, r24	; 61
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	6f ee       	ldi	r22, 0xEF	; 239
     46c:	71 e0       	ldi	r23, 0x01	; 1
     46e:	0e 94 42 10 	call	0x2084	; 0x2084 <f_mount>
	f_open(&TempLogFile, LogFileName, FA_OPEN_ALWAYS | FA_WRITE);
     472:	8f ec       	ldi	r24, 0xCF	; 207
     474:	e8 2e       	mov	r14, r24
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	f8 2e       	mov	r15, r24
     47a:	c7 01       	movw	r24, r14
     47c:	b8 01       	movw	r22, r16
     47e:	42 e1       	ldi	r20, 0x12	; 18
     480:	0e 94 58 10 	call	0x20b0	; 0x20b0 <f_open>
	f_lseek(&TempLogFile, TempLogFile.fsize);
     484:	40 91 d9 01 	lds	r20, 0x01D9
     488:	50 91 da 01 	lds	r21, 0x01DA
     48c:	60 91 db 01 	lds	r22, 0x01DB
     490:	70 91 dc 01 	lds	r23, 0x01DC
     494:	c7 01       	movw	r24, r14
     496:	0e 94 26 18 	call	0x304c	; 0x304c <f_lseek>
}
     49a:	62 96       	adiw	r28, 0x12	; 18
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	cf 91       	pop	r28
     4a8:	df 91       	pop	r29
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	08 95       	ret

000004b4 <CloseLogFile>:

/** Closes the open data log file on the Dataflash's FAT formatted partition */
void CloseLogFile(void)
{
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
	/* Sync any data waiting to be written, unmount the storage device */
	f_sync(&TempLogFile);
     4b8:	cf ec       	ldi	r28, 0xCF	; 207
     4ba:	d1 e0       	ldi	r29, 0x01	; 1
     4bc:	ce 01       	movw	r24, r28
     4be:	0e 94 6f 17 	call	0x2ede	; 0x2ede <f_sync>
	f_close(&TempLogFile);
     4c2:	ce 01       	movw	r24, r28
     4c4:	0e 94 1b 18 	call	0x3036	; 0x3036 <f_close>
}
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	08 95       	ret

000004ce <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     4ce:	84 b7       	in	r24, 0x34	; 52
     4d0:	87 7f       	andi	r24, 0xF7	; 247
     4d2:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     4d4:	88 e1       	ldi	r24, 0x18	; 24
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	80 93 60 00 	sts	0x0060, r24
     4de:	10 92 60 00 	sts	0x0060, r1
     4e2:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	80 e8       	ldi	r24, 0x80	; 128
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	80 93 61 00 	sts	0x0061, r24
     4f0:	90 93 61 00 	sts	0x0061, r25
     4f4:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     4f6:	8a b1       	in	r24, 0x0a	; 10
     4f8:	80 6f       	ori	r24, 0xF0	; 240
     4fa:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     4fc:	8b b1       	in	r24, 0x0b	; 11
     4fe:	8f 70       	andi	r24, 0x0F	; 15
     500:	8b b9       	out	0x0b, r24	; 11
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     502:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     504:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     506:	84 b1       	in	r24, 0x04	; 4
     508:	86 60       	ori	r24, 0x06	; 6
     50a:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     50c:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     50e:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     510:	8d b5       	in	r24, 0x2d	; 45
     512:	81 60       	ori	r24, 0x01	; 1
     514:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     516:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     518:	8c e5       	ldi	r24, 0x5C	; 92
     51a:	8c bd       	out	0x2c, r24	; 44
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(const uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(const uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     51c:	87 ea       	ldi	r24, 0xA7	; 167
     51e:	80 93 7a 00 	sts	0x007A, r24
			 */
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__))
				DDRF  &= ~(1 << ChannelIndex);
     522:	80 98       	cbi	0x10, 0	; 16
				DIDR0 |=  (1 << ChannelIndex);
     524:	80 91 7e 00 	lds	r24, 0x007E
     528:	81 60       	ori	r24, 0x01	; 1
     52a:	80 93 7e 00 	sts	0x007E, r24
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     52e:	8d b1       	in	r24, 0x0d	; 13
     530:	83 60       	ori	r24, 0x03	; 3
     532:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     534:	8e b1       	in	r24, 0x0e	; 14
     536:	83 60       	ori	r24, 0x03	; 3
     538:	8e b9       	out	0x0e, r24	; 14
	LEDs_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_128);
	Temperature_Init();
	Dataflash_Init();
	USB_Init();
     53a:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <USB_Init>
			 *  \param[in] BitLength  Length of the bits sent on the bus.
			 */
			static inline void TWI_Init(const uint8_t Prescale, const uint8_t BitLength) ATTR_ALWAYS_INLINE;
			static inline void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
			{
				TWCR |= (1 << TWEN);
     53e:	80 91 bc 00 	lds	r24, 0x00BC
     542:	84 60       	ori	r24, 0x04	; 4
     544:	80 93 bc 00 	sts	0x00BC, r24
				TWSR  = Prescale;
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	80 93 b9 00 	sts	0x00B9, r24
				TWBR  = BitLength;
     54e:	8c e0       	ldi	r24, 0x0C	; 12
     550:	80 93 b8 00 	sts	0x00B8, r24
	TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 50000));

	/* 500ms logging interval timer configuration */
	OCR1A   = (((F_CPU / 1024) / 2) - 1);
     554:	81 e4       	ldi	r24, 0x41	; 65
     556:	9f e0       	ldi	r25, 0x0F	; 15
     558:	90 93 89 00 	sts	0x0089, r25
     55c:	80 93 88 00 	sts	0x0088, r24
	TCCR1B  = (1 << WGM12) | (1 << CS12) | (1 << CS10);
     560:	8d e0       	ldi	r24, 0x0D	; 13
     562:	80 93 81 00 	sts	0x0081, r24
	TIMSK1  = (1 << OCIE1A);
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	80 93 6f 00 	sts	0x006F, r24

	/* Check if the Dataflash is working, abort if not */
	if (!(DataflashManager_CheckDataflashOperation()))
     56c:	01 d5       	rcall	.+2562   	; 0xf70 <DataflashManager_CheckDataflashOperation>
     56e:	88 23       	and	r24, r24
     570:	19 f4       	brne	.+6      	; 0x578 <SetupHardware+0xaa>
	{
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     572:	80 e9       	ldi	r24, 0x90	; 144
     574:	85 de       	rcall	.-758    	; 0x280 <LEDs_SetAllLEDs>
     576:	ff cf       	rjmp	.-2      	; 0x576 <SetupHardware+0xa8>
		for(;;);
	}

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     578:	ad c4       	rjmp	.+2394   	; 0xed4 <DataflashManager_ResetDataflashProtections>

0000057a <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     57a:	a9 df       	rcall	.-174    	; 0x4ce <SetupHardware>

	/* Fetch logging interval from EEPROM */
	LoggingInterval500MS_SRAM = eeprom_read_byte(&LoggingInterval500MS_EEPROM);
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	0e 94 7f 27 	call	0x4efe	; 0x4efe <__eerd_byte_usb1287>
     584:	80 93 ce 01 	sts	0x01CE, r24

	/* Check if the logging interval is invalid (0xFF) indicating that the EEPROM is blank */
	if (LoggingInterval500MS_SRAM == 0xFF)
     588:	8f 3f       	cpi	r24, 0xFF	; 255
     58a:	19 f4       	brne	.+6      	; 0x592 <main+0x18>
	  LoggingInterval500MS_SRAM = DEFAULT_LOG_INTERVAL;
     58c:	8a e0       	ldi	r24, 0x0A	; 10
     58e:	80 93 ce 01 	sts	0x01CE, r24

	/* Mount and open the log file on the Dataflash FAT partition */
	OpenLogFile();
     592:	2e df       	rcall	.-420    	; 0x3f0 <OpenLogFile>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     594:	80 e1       	ldi	r24, 0x10	; 16
     596:	74 de       	rcall	.-792    	; 0x280 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     598:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     59a:	80 e4       	ldi	r24, 0x40	; 64
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	0e 94 62 22 	call	0x44c4	; 0x44c4 <MS_Device_USBTask>
		HID_Device_USBTask(&Generic_HID_Interface);
     5a2:	89 e7       	ldi	r24, 0x79	; 121
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	0e 94 3d 21 	call	0x427a	; 0x427a <HID_Device_USBTask>
		USB_USBTask();
     5aa:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <USB_USBTask>
     5ae:	f5 cf       	rjmp	.-22     	; 0x59a <main+0x20>

000005b0 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     5b0:	80 ea       	ldi	r24, 0xA0	; 160
     5b2:	66 de       	rcall	.-820    	; 0x280 <LEDs_SetAllLEDs>

	/* Close the log file so that the host has exclusive file system access */
	CloseLogFile();
}
     5b4:	7f cf       	rjmp	.-258    	; 0x4b4 <CloseLogFile>

000005b6 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     5b6:	80 e1       	ldi	r24, 0x10	; 16
     5b8:	63 de       	rcall	.-826    	; 0x280 <LEDs_SetAllLEDs>

	/* Mount and open the log file on the Dataflash FAT partition */
	OpenLogFile();
}
     5ba:	1a cf       	rjmp	.-460    	; 0x3f0 <OpenLogFile>

000005bc <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     5bc:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     5be:	89 e7       	ldi	r24, 0x79	; 121
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	0e 94 24 21 	call	0x4248	; 0x4248 <HID_Device_ConfigureEndpoints>
     5c6:	18 2f       	mov	r17, r24
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     5c8:	80 e4       	ldi	r24, 0x40	; 64
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	0e 94 46 22 	call	0x448c	; 0x448c <MS_Device_ConfigureEndpoints>
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     5d0:	21 2f       	mov	r18, r17
     5d2:	30 e0       	ldi	r19, 0x00	; 0
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     5d4:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     5d6:	28 23       	and	r18, r24
     5d8:	39 23       	and	r19, r25
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     5da:	20 ff       	sbrs	r18, 0
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <EVENT_USB_Device_ConfigurationChanged+0x26>
     5de:	80 e6       	ldi	r24, 0x60	; 96
     5e0:	01 c0       	rjmp	.+2      	; 0x5e4 <EVENT_USB_Device_ConfigurationChanged+0x28>
     5e2:	80 e9       	ldi	r24, 0x90	; 144
     5e4:	4d de       	rcall	.-870    	; 0x280 <LEDs_SetAllLEDs>
}
     5e6:	1f 91       	pop	r17
     5e8:	08 95       	ret

000005ea <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     5ea:	80 e4       	ldi	r24, 0x40	; 64
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	0e 94 09 22 	call	0x4412	; 0x4412 <MS_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
     5f2:	89 e7       	ldi	r24, 0x79	; 121
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	0c 94 e5 1f 	jmp	0x3fca	; 0x3fca <HID_Device_ProcessControlRequest>

000005fa <CALLBACK_MS_Device_SCSICommandReceived>:
/** Mass Storage class driver callback function the reception of SCSI commands from the host, which must be processed.
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	ec 01       	movw	r28, r24
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     602:	80 e2       	ldi	r24, 0x20	; 32
     604:	3d de       	rcall	.-902    	; 0x280 <LEDs_SetAllLEDs>
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     606:	ce 01       	movw	r24, r28
     608:	2e d6       	rcall	.+3164   	; 0x1266 <SCSI_DecodeSCSICommand>
     60a:	18 2f       	mov	r17, r24
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     60c:	80 e6       	ldi	r24, 0x60	; 96
     60e:	38 de       	rcall	.-912    	; 0x280 <LEDs_SetAllLEDs>

	return CommandSuccess;
}
     610:	81 2f       	mov	r24, r17
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	08 95       	ret

0000061a <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;
     626:	e2 2e       	mov	r14, r18
     628:	e7 01       	movw	r28, r14
     62a:	7e 01       	movw	r14, r28
     62c:	f3 2e       	mov	r15, r19
     62e:	e7 01       	movw	r28, r14

	DS1307_GetTimeDate(&ReportParams->TimeDate);
     630:	c7 01       	movw	r24, r14
     632:	35 d5       	rcall	.+2666   	; 0x109e <DS1307_GetTimeDate>

	ReportParams->LogInterval500MS = LoggingInterval500MS_SRAM;
     634:	80 91 ce 01 	lds	r24, 0x01CE
     638:	8e 83       	std	Y+6, r24	; 0x06

	*ReportSize = sizeof(Device_Report_t);
     63a:	87 e0       	ldi	r24, 0x07	; 7
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	f8 01       	movw	r30, r16
     640:	91 83       	std	Z+1, r25	; 0x01
     642:	80 83       	st	Z, r24
	return true;
}
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	ff 90       	pop	r15
     650:	ef 90       	pop	r14
     652:	08 95       	ret

00000654 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     654:	ef 92       	push	r14
     656:	ff 92       	push	r15
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;
     65c:	e2 2e       	mov	r14, r18
     65e:	e7 01       	movw	r28, r14
     660:	7e 01       	movw	r14, r28
     662:	f3 2e       	mov	r15, r19
     664:	e7 01       	movw	r28, r14

	DS1307_SetTimeDate(&ReportParams->TimeDate);
     666:	c7 01       	movw	r24, r14
     668:	ae d4       	rcall	.+2396   	; 0xfc6 <DS1307_SetTimeDate>

	/* If the logging interval has changed from its current value, write it to EEPROM */
	if (LoggingInterval500MS_SRAM != ReportParams->LogInterval500MS)
     66a:	6e 81       	ldd	r22, Y+6	; 0x06
     66c:	80 91 ce 01 	lds	r24, 0x01CE
     670:	86 17       	cp	r24, r22
     672:	31 f0       	breq	.+12     	; 0x680 <CALLBACK_HID_Device_ProcessHIDReport+0x2c>
	{
		LoggingInterval500MS_SRAM = ReportParams->LogInterval500MS;
     674:	60 93 ce 01 	sts	0x01CE, r22
		eeprom_update_byte(&LoggingInterval500MS_EEPROM, LoggingInterval500MS_SRAM);
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <__eeupd_byte_usb1287>
	}
}
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	08 95       	ret

0000068a <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     68a:	93 30       	cpi	r25, 0x03	; 3
     68c:	89 f0       	breq	.+34     	; 0x6b0 <CALLBACK_USB_GetDescriptor+0x26>
     68e:	94 30       	cpi	r25, 0x04	; 4
     690:	28 f4       	brcc	.+10     	; 0x69c <CALLBACK_USB_GetDescriptor+0x12>
     692:	91 30       	cpi	r25, 0x01	; 1
     694:	49 f1       	breq	.+82     	; 0x6e8 <CALLBACK_USB_GetDescriptor+0x5e>
     696:	92 30       	cpi	r25, 0x02	; 2
     698:	61 f5       	brne	.+88     	; 0x6f2 <CALLBACK_USB_GetDescriptor+0x68>
     69a:	05 c0       	rjmp	.+10     	; 0x6a6 <CALLBACK_USB_GetDescriptor+0x1c>
     69c:	91 32       	cpi	r25, 0x21	; 33
     69e:	d1 f0       	breq	.+52     	; 0x6d4 <CALLBACK_USB_GetDescriptor+0x4a>
     6a0:	92 32       	cpi	r25, 0x22	; 34
     6a2:	39 f5       	brne	.+78     	; 0x6f2 <CALLBACK_USB_GetDescriptor+0x68>
     6a4:	1c c0       	rjmp	.+56     	; 0x6de <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     6a6:	29 e3       	ldi	r18, 0x39	; 57
     6a8:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     6aa:	ea ec       	ldi	r30, 0xCA	; 202
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     6ae:	25 c0       	rjmp	.+74     	; 0x6fa <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
     6b0:	81 30       	cpi	r24, 0x01	; 1
     6b2:	41 f0       	breq	.+16     	; 0x6c4 <CALLBACK_USB_GetDescriptor+0x3a>
     6b4:	81 30       	cpi	r24, 0x01	; 1
     6b6:	18 f0       	brcs	.+6      	; 0x6be <CALLBACK_USB_GetDescriptor+0x34>
     6b8:	82 30       	cpi	r24, 0x02	; 2
     6ba:	d9 f4       	brne	.+54     	; 0x6f2 <CALLBACK_USB_GetDescriptor+0x68>
     6bc:	06 c0       	rjmp	.+12     	; 0x6ca <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     6be:	e3 e0       	ldi	r30, 0x03	; 3
     6c0:	f1 e0       	ldi	r31, 0x01	; 1
     6c2:	05 c0       	rjmp	.+10     	; 0x6ce <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     6c4:	e7 e0       	ldi	r30, 0x07	; 7
     6c6:	f1 e0       	ldi	r31, 0x01	; 1
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     6ca:	e1 e2       	ldi	r30, 0x21	; 33
     6cc:	f1 e0       	ldi	r31, 0x01	; 1
     6ce:	24 91       	lpm	r18, Z+
     6d0:	30 e0       	ldi	r19, 0x00	; 0
					break;
     6d2:	13 c0       	rjmp	.+38     	; 0x6fa <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     6d4:	29 e0       	ldi	r18, 0x09	; 9
     6d6:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
     6d8:	e3 ef       	ldi	r30, 0xF3	; 243
     6da:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     6dc:	0e c0       	rjmp	.+28     	; 0x6fa <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
     6de:	20 e2       	ldi	r18, 0x20	; 32
     6e0:	30 e0       	ldi	r19, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
     6e2:	e8 e9       	ldi	r30, 0x98	; 152
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(GenericReport);
			break;
     6e6:	09 c0       	rjmp	.+18     	; 0x6fa <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     6e8:	22 e1       	ldi	r18, 0x12	; 18
     6ea:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     6ec:	e8 eb       	ldi	r30, 0xB8	; 184
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	04 c0       	rjmp	.+8      	; 0x6fa <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     6f6:	e0 e0       	ldi	r30, 0x00	; 0
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
     6fa:	da 01       	movw	r26, r20
     6fc:	11 96       	adiw	r26, 0x01	; 1
     6fe:	fc 93       	st	X, r31
     700:	ee 93       	st	-X, r30
	return Size;
}
     702:	c9 01       	movw	r24, r18
     704:	08 95       	ret

00000706 <Dataflash_SelectChipFromPage>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     706:	2e b1       	in	r18, 0x0e	; 14
     708:	23 60       	ori	r18, 0x03	; 3
     70a:	2e b9       	out	0x0e, r18	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     70c:	20 e4       	ldi	r18, 0x40	; 64
     70e:	80 30       	cpi	r24, 0x00	; 0
     710:	92 07       	cpc	r25, r18
     712:	58 f4       	brcc	.+22     	; 0x72a <Dataflash_SelectChipFromPage+0x24>
				  return;

				#if (DATAFLASH_TOTALCHIPS == 2)
					if (PageAddress & 0x01)
     714:	80 ff       	sbrs	r24, 0
     716:	05 c0       	rjmp	.+10     	; 0x722 <Dataflash_SelectChipFromPage+0x1c>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     718:	8e b1       	in	r24, 0x0e	; 14
     71a:	83 60       	ori	r24, 0x03	; 3
     71c:	8d 7f       	andi	r24, 0xFD	; 253
     71e:	8e b9       	out	0x0e, r24	; 14
     720:	08 95       	ret
     722:	8e b1       	in	r24, 0x0e	; 14
     724:	83 60       	ori	r24, 0x03	; 3
     726:	8e 7f       	andi	r24, 0xFE	; 254
     728:	8e b9       	out	0x0e, r24	; 14
     72a:	08 95       	ret

0000072c <Dataflash_ToggleSelectedChipCS>:
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     72c:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     72e:	9e b1       	in	r25, 0x0e	; 14
     730:	93 60       	ori	r25, 0x03	; 3
     732:	9e b9       	out	0x0e, r25	; 14
     734:	9e b1       	in	r25, 0x0e	; 14
     736:	8c 6f       	ori	r24, 0xFC	; 252
     738:	93 60       	ori	r25, 0x03	; 3
     73a:	89 23       	and	r24, r25
     73c:	8e b9       	out	0x0e, r24	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     73e:	08 95       	ret

00000740 <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     740:	f5 df       	rcall	.-22     	; 0x72c <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     742:	87 ed       	ldi	r24, 0xD7	; 215
     744:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     746:	0d b4       	in	r0, 0x2d	; 45
     748:	07 fe       	sbrs	r0, 7
     74a:	fd cf       	rjmp	.-6      	; 0x746 <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     74c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     74e:	0d b4       	in	r0, 0x2d	; 45
     750:	07 fe       	sbrs	r0, 7
     752:	fd cf       	rjmp	.-6      	; 0x74e <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     754:	0e b4       	in	r0, 0x2e	; 46
     756:	07 fe       	sbrs	r0, 7
     758:	f9 cf       	rjmp	.-14     	; 0x74c <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
     75a:	e8 cf       	rjmp	.-48     	; 0x72c <Dataflash_ToggleSelectedChipCS>

0000075c <Dataflash_SendAddressBytes>:
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				#if (DATAFLASH_TOTALCHIPS == 2)
					PageAddress >>= 1;
     75c:	9c 01       	movw	r18, r24
     75e:	36 95       	lsr	r19
     760:	27 95       	ror	r18
				#endif
				
				Dataflash_SendByte(PageAddress >> 5);
     762:	36 e0       	ldi	r19, 0x06	; 6
     764:	96 95       	lsr	r25
     766:	87 95       	ror	r24
     768:	3a 95       	dec	r19
     76a:	e1 f7       	brne	.-8      	; 0x764 <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     76c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     76e:	0d b4       	in	r0, 0x2d	; 45
     770:	07 fe       	sbrs	r0, 7
     772:	fd cf       	rjmp	.-6      	; 0x76e <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     774:	22 0f       	add	r18, r18
     776:	22 0f       	add	r18, r18
     778:	22 0f       	add	r18, r18
     77a:	27 2b       	or	r18, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     77c:	2e bd       	out	0x2e, r18	; 46
				while (!(SPSR & (1 << SPIF)));
     77e:	0d b4       	in	r0, 0x2d	; 45
     780:	07 fe       	sbrs	r0, 7
     782:	fd cf       	rjmp	.-6      	; 0x77e <Dataflash_SendAddressBytes+0x22>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     784:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     786:	0d b4       	in	r0, 0x2d	; 45
     788:	07 fe       	sbrs	r0, 7
     78a:	fd cf       	rjmp	.-6      	; 0x786 <Dataflash_SendAddressBytes+0x2a>
				Dataflash_SendByte(BufferByte);
			}
     78c:	08 95       	ret

0000078e <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     78e:	6f 92       	push	r6
     790:	7f 92       	push	r7
     792:	9f 92       	push	r9
     794:	af 92       	push	r10
     796:	bf 92       	push	r11
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	df 93       	push	r29
     7a6:	cf 93       	push	r28
     7a8:	0f 92       	push	r0
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
     7ae:	6c 01       	movw	r12, r24
     7b0:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     7b2:	db 01       	movw	r26, r22
     7b4:	ca 01       	movw	r24, r20
     7b6:	19 e0       	ldi	r17, 0x09	; 9
     7b8:	88 0f       	add	r24, r24
     7ba:	99 1f       	adc	r25, r25
     7bc:	aa 1f       	adc	r26, r26
     7be:	bb 1f       	adc	r27, r27
     7c0:	1a 95       	dec	r17
     7c2:	d1 f7       	brne	.-12     	; 0x7b8 <DataflashManager_WriteBlocks+0x2a>
     7c4:	fa e0       	ldi	r31, 0x0A	; 10
     7c6:	b6 95       	lsr	r27
     7c8:	a7 95       	ror	r26
     7ca:	97 95       	ror	r25
     7cc:	87 95       	ror	r24
     7ce:	fa 95       	dec	r31
     7d0:	d1 f7       	brne	.-12     	; 0x7c6 <DataflashManager_WriteBlocks+0x38>
     7d2:	3c 01       	movw	r6, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     7d4:	8a 01       	movw	r16, r20
     7d6:	10 2f       	mov	r17, r16
     7d8:	00 27       	eor	r16, r16
     7da:	11 0f       	add	r17, r17
     7dc:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     7de:	93 df       	rcall	.-218    	; 0x706 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7e0:	83 e5       	ldi	r24, 0x53	; 83
     7e2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7e4:	0d b4       	in	r0, 0x2d	; 45
     7e6:	07 fe       	sbrs	r0, 7
     7e8:	fd cf       	rjmp	.-6      	; 0x7e4 <DataflashManager_WriteBlocks+0x56>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     7ea:	c3 01       	movw	r24, r6
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	b5 df       	rcall	.-150    	; 0x75c <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     7f2:	a6 df       	rcall	.-180    	; 0x740 <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7f4:	84 e8       	ldi	r24, 0x84	; 132
     7f6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7f8:	0d b4       	in	r0, 0x2d	; 45
     7fa:	07 fe       	sbrs	r0, 7
     7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <DataflashManager_WriteBlocks+0x6a>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	b8 01       	movw	r22, r16
     804:	ab df       	rcall	.-170    	; 0x75c <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     806:	0e 94 ca 1c 	call	0x3994	; 0x3994 <Endpoint_WaitUntilReady>
     80a:	88 23       	and	r24, r24
     80c:	09 f0       	breq	.+2      	; 0x810 <DataflashManager_WriteBlocks+0x82>
     80e:	eb c0       	rjmp	.+470    	; 0x9e6 <DataflashManager_WriteBlocks+0x258>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     810:	74 e0       	ldi	r23, 0x04	; 4
     812:	16 95       	lsr	r17
     814:	07 95       	ror	r16
     816:	7a 95       	dec	r23
     818:	e1 f7       	brne	.-8      	; 0x812 <DataflashManager_WriteBlocks+0x84>
     81a:	90 2f       	mov	r25, r16
     81c:	87 01       	movw	r16, r14
     81e:	65 e0       	ldi	r22, 0x05	; 5
     820:	00 0f       	add	r16, r16
     822:	11 1f       	adc	r17, r17
     824:	6a 95       	dec	r22
     826:	e1 f7       	brne	.-8      	; 0x820 <DataflashManager_WriteBlocks+0x92>
     828:	bb 24       	eor	r11, r11
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
				  UsingSecondBuffer = !(UsingSecondBuffer);
     82a:	99 24       	eor	r9, r9
     82c:	93 94       	inc	r9
     82e:	bc c0       	rjmp	.+376    	; 0x9a8 <DataflashManager_WriteBlocks+0x21a>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     830:	50 e2       	ldi	r21, 0x20	; 32
     832:	a5 2e       	mov	r10, r21
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     834:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     838:	85 fd       	sbrc	r24, 5
     83a:	0c c0       	rjmp	.+24     	; 0x854 <DataflashManager_WriteBlocks+0xc6>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     83c:	80 91 e8 00 	lds	r24, 0x00E8
     840:	8b 77       	andi	r24, 0x7B	; 123
     842:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     846:	99 83       	std	Y+1, r25	; 0x01
     848:	0e 94 ca 1c 	call	0x3994	; 0x3994 <Endpoint_WaitUntilReady>
     84c:	99 81       	ldd	r25, Y+1	; 0x01
     84e:	88 23       	and	r24, r24
     850:	09 f0       	breq	.+2      	; 0x854 <DataflashManager_WriteBlocks+0xc6>
     852:	c9 c0       	rjmp	.+402    	; 0x9e6 <DataflashManager_WriteBlocks+0x258>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     854:	90 34       	cpi	r25, 0x40	; 64
     856:	09 f0       	breq	.+2      	; 0x85a <DataflashManager_WriteBlocks+0xcc>
     858:	3a c0       	rjmp	.+116    	; 0x8ce <DataflashManager_WriteBlocks+0x140>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     85a:	72 df       	rcall	.-284    	; 0x740 <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     85c:	bb 20       	and	r11, r11
     85e:	11 f0       	breq	.+4      	; 0x864 <DataflashManager_WriteBlocks+0xd6>
     860:	86 e8       	ldi	r24, 0x86	; 134
     862:	01 c0       	rjmp	.+2      	; 0x866 <DataflashManager_WriteBlocks+0xd8>
     864:	83 e8       	ldi	r24, 0x83	; 131
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     866:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     868:	0d b4       	in	r0, 0x2d	; 45
     86a:	07 fe       	sbrs	r0, 7
     86c:	fd cf       	rjmp	.-6      	; 0x868 <DataflashManager_WriteBlocks+0xda>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     86e:	c3 01       	movw	r24, r6
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	73 df       	rcall	.-282    	; 0x75c <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     876:	08 94       	sec
     878:	61 1c       	adc	r6, r1
     87a:	71 1c       	adc	r7, r1
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     87c:	8e b1       	in	r24, 0x0e	; 14
     87e:	80 95       	com	r24
     880:	83 70       	andi	r24, 0x03	; 3

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	09 f4       	brne	.+2      	; 0x888 <DataflashManager_WriteBlocks+0xfa>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     886:	b9 24       	eor	r11, r9

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     888:	c3 01       	movw	r24, r6
     88a:	3d df       	rcall	.-390    	; 0x706 <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     88c:	00 34       	cpi	r16, 0x40	; 64
     88e:	11 05       	cpc	r17, r1
     890:	78 f4       	brcc	.+30     	; 0x8b0 <DataflashManager_WriteBlocks+0x122>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     892:	56 df       	rcall	.-340    	; 0x740 <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     894:	bb 20       	and	r11, r11
     896:	11 f0       	breq	.+4      	; 0x89c <DataflashManager_WriteBlocks+0x10e>
     898:	85 e5       	ldi	r24, 0x55	; 85
     89a:	01 c0       	rjmp	.+2      	; 0x89e <DataflashManager_WriteBlocks+0x110>
     89c:	83 e5       	ldi	r24, 0x53	; 83
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     89e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8a0:	0d b4       	in	r0, 0x2d	; 45
     8a2:	07 fe       	sbrs	r0, 7
     8a4:	fd cf       	rjmp	.-6      	; 0x8a0 <DataflashManager_WriteBlocks+0x112>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     8a6:	c3 01       	movw	r24, r6
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	57 df       	rcall	.-338    	; 0x75c <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     8ae:	48 df       	rcall	.-368    	; 0x740 <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     8b0:	bb 20       	and	r11, r11
     8b2:	11 f0       	breq	.+4      	; 0x8b8 <DataflashManager_WriteBlocks+0x12a>
     8b4:	87 e8       	ldi	r24, 0x87	; 135
     8b6:	01 c0       	rjmp	.+2      	; 0x8ba <DataflashManager_WriteBlocks+0x12c>
     8b8:	84 e8       	ldi	r24, 0x84	; 132
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8ba:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8bc:	0d b4       	in	r0, 0x2d	; 45
     8be:	07 fe       	sbrs	r0, 7
     8c0:	fd cf       	rjmp	.-6      	; 0x8bc <DataflashManager_WriteBlocks+0x12e>
				Dataflash_SendAddressBytes(0, 0);
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	48 df       	rcall	.-368    	; 0x75c <Dataflash_SendAddressBytes>
				Dataflash_WaitWhileBusy();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
				Dataflash_SendAddressBytes(CurrDFPage, 0);

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     8cc:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     8ce:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8d2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8d4:	0d b4       	in	r0, 0x2d	; 45
     8d6:	07 fe       	sbrs	r0, 7
     8d8:	fd cf       	rjmp	.-6      	; 0x8d4 <DataflashManager_WriteBlocks+0x146>
     8da:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8de:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8e0:	0d b4       	in	r0, 0x2d	; 45
     8e2:	07 fe       	sbrs	r0, 7
     8e4:	fd cf       	rjmp	.-6      	; 0x8e0 <DataflashManager_WriteBlocks+0x152>
     8e6:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8ea:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8ec:	0d b4       	in	r0, 0x2d	; 45
     8ee:	07 fe       	sbrs	r0, 7
     8f0:	fd cf       	rjmp	.-6      	; 0x8ec <DataflashManager_WriteBlocks+0x15e>
     8f2:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8f6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8f8:	0d b4       	in	r0, 0x2d	; 45
     8fa:	07 fe       	sbrs	r0, 7
     8fc:	fd cf       	rjmp	.-6      	; 0x8f8 <DataflashManager_WriteBlocks+0x16a>
     8fe:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     902:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     904:	0d b4       	in	r0, 0x2d	; 45
     906:	07 fe       	sbrs	r0, 7
     908:	fd cf       	rjmp	.-6      	; 0x904 <DataflashManager_WriteBlocks+0x176>
     90a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     90e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     910:	0d b4       	in	r0, 0x2d	; 45
     912:	07 fe       	sbrs	r0, 7
     914:	fd cf       	rjmp	.-6      	; 0x910 <DataflashManager_WriteBlocks+0x182>
     916:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     91a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     91c:	0d b4       	in	r0, 0x2d	; 45
     91e:	07 fe       	sbrs	r0, 7
     920:	fd cf       	rjmp	.-6      	; 0x91c <DataflashManager_WriteBlocks+0x18e>
     922:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     926:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     928:	0d b4       	in	r0, 0x2d	; 45
     92a:	07 fe       	sbrs	r0, 7
     92c:	fd cf       	rjmp	.-6      	; 0x928 <DataflashManager_WriteBlocks+0x19a>
     92e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     932:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     934:	0d b4       	in	r0, 0x2d	; 45
     936:	07 fe       	sbrs	r0, 7
     938:	fd cf       	rjmp	.-6      	; 0x934 <DataflashManager_WriteBlocks+0x1a6>
     93a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     93e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     940:	0d b4       	in	r0, 0x2d	; 45
     942:	07 fe       	sbrs	r0, 7
     944:	fd cf       	rjmp	.-6      	; 0x940 <DataflashManager_WriteBlocks+0x1b2>
     946:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     94a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     94c:	0d b4       	in	r0, 0x2d	; 45
     94e:	07 fe       	sbrs	r0, 7
     950:	fd cf       	rjmp	.-6      	; 0x94c <DataflashManager_WriteBlocks+0x1be>
     952:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     956:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     958:	0d b4       	in	r0, 0x2d	; 45
     95a:	07 fe       	sbrs	r0, 7
     95c:	fd cf       	rjmp	.-6      	; 0x958 <DataflashManager_WriteBlocks+0x1ca>
     95e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     962:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     964:	0d b4       	in	r0, 0x2d	; 45
     966:	07 fe       	sbrs	r0, 7
     968:	fd cf       	rjmp	.-6      	; 0x964 <DataflashManager_WriteBlocks+0x1d6>
     96a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     96e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     970:	0d b4       	in	r0, 0x2d	; 45
     972:	07 fe       	sbrs	r0, 7
     974:	fd cf       	rjmp	.-6      	; 0x970 <DataflashManager_WriteBlocks+0x1e2>
     976:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     97a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     97c:	0d b4       	in	r0, 0x2d	; 45
     97e:	07 fe       	sbrs	r0, 7
     980:	fd cf       	rjmp	.-6      	; 0x97c <DataflashManager_WriteBlocks+0x1ee>
     982:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     986:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     988:	0d b4       	in	r0, 0x2d	; 45
     98a:	07 fe       	sbrs	r0, 7
     98c:	fd cf       	rjmp	.-6      	; 0x988 <DataflashManager_WriteBlocks+0x1fa>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     98e:	f6 01       	movw	r30, r12
     990:	80 ad       	ldd	r24, Z+56	; 0x38
     992:	88 23       	and	r24, r24
     994:	41 f5       	brne	.+80     	; 0x9e6 <DataflashManager_WriteBlocks+0x258>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     996:	9f 5f       	subi	r25, 0xFF	; 255
     998:	aa 94       	dec	r10
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     99a:	09 f0       	breq	.+2      	; 0x99e <DataflashManager_WriteBlocks+0x210>
     99c:	4b cf       	rjmp	.-362    	; 0x834 <DataflashManager_WriteBlocks+0xa6>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     99e:	08 94       	sec
     9a0:	e1 08       	sbc	r14, r1
     9a2:	f1 08       	sbc	r15, r1
     9a4:	00 52       	subi	r16, 0x20	; 32
     9a6:	10 40       	sbci	r17, 0x00	; 0

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     9a8:	e1 14       	cp	r14, r1
     9aa:	f1 04       	cpc	r15, r1
     9ac:	09 f0       	breq	.+2      	; 0x9b0 <DataflashManager_WriteBlocks+0x222>
     9ae:	40 cf       	rjmp	.-384    	; 0x830 <DataflashManager_WriteBlocks+0xa2>
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     9b0:	c7 de       	rcall	.-626    	; 0x740 <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     9b2:	bb 20       	and	r11, r11
     9b4:	11 f0       	breq	.+4      	; 0x9ba <DataflashManager_WriteBlocks+0x22c>
     9b6:	86 e8       	ldi	r24, 0x86	; 134
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <DataflashManager_WriteBlocks+0x22e>
     9ba:	83 e8       	ldi	r24, 0x83	; 131
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9bc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9be:	0d b4       	in	r0, 0x2d	; 45
     9c0:	07 fe       	sbrs	r0, 7
     9c2:	fd cf       	rjmp	.-6      	; 0x9be <DataflashManager_WriteBlocks+0x230>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     9c4:	c3 01       	movw	r24, r6
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	c8 de       	rcall	.-624    	; 0x75c <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     9cc:	b9 de       	rcall	.-654    	; 0x740 <Dataflash_WaitWhileBusy>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     9ce:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     9d2:	85 fd       	sbrc	r24, 5
     9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <DataflashManager_WriteBlocks+0x252>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9d6:	80 91 e8 00 	lds	r24, 0x00E8
     9da:	8b 77       	andi	r24, 0x7B	; 123
     9dc:	80 93 e8 00 	sts	0x00E8, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     9e0:	8e b1       	in	r24, 0x0e	; 14
     9e2:	83 60       	ori	r24, 0x03	; 3
     9e4:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     9e6:	0f 90       	pop	r0
     9e8:	cf 91       	pop	r28
     9ea:	df 91       	pop	r29
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	ff 90       	pop	r15
     9f2:	ef 90       	pop	r14
     9f4:	df 90       	pop	r13
     9f6:	cf 90       	pop	r12
     9f8:	bf 90       	pop	r11
     9fa:	af 90       	pop	r10
     9fc:	9f 90       	pop	r9
     9fe:	7f 90       	pop	r7
     a00:	6f 90       	pop	r6
     a02:	08 95       	ret

00000a04 <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     a04:	bf 92       	push	r11
     a06:	cf 92       	push	r12
     a08:	df 92       	push	r13
     a0a:	ef 92       	push	r14
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	6c 01       	movw	r12, r24
     a18:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     a1a:	db 01       	movw	r26, r22
     a1c:	ca 01       	movw	r24, r20
     a1e:	69 e0       	ldi	r22, 0x09	; 9
     a20:	88 0f       	add	r24, r24
     a22:	99 1f       	adc	r25, r25
     a24:	aa 1f       	adc	r26, r26
     a26:	bb 1f       	adc	r27, r27
     a28:	6a 95       	dec	r22
     a2a:	d1 f7       	brne	.-12     	; 0xa20 <DataflashManager_ReadBlocks+0x1c>
     a2c:	3a e0       	ldi	r19, 0x0A	; 10
     a2e:	b6 95       	lsr	r27
     a30:	a7 95       	ror	r26
     a32:	97 95       	ror	r25
     a34:	87 95       	ror	r24
     a36:	3a 95       	dec	r19
     a38:	d1 f7       	brne	.-12     	; 0xa2e <DataflashManager_ReadBlocks+0x2a>
     a3a:	ec 01       	movw	r28, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     a3c:	8a 01       	movw	r16, r20
     a3e:	10 2f       	mov	r17, r16
     a40:	00 27       	eor	r16, r16
     a42:	11 0f       	add	r17, r17
     a44:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     a46:	5f de       	rcall	.-834    	; 0x706 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a48:	82 ed       	ldi	r24, 0xD2	; 210
     a4a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a4c:	0d b4       	in	r0, 0x2d	; 45
     a4e:	07 fe       	sbrs	r0, 7
     a50:	fd cf       	rjmp	.-6      	; 0xa4c <DataflashManager_ReadBlocks+0x48>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     a52:	ce 01       	movw	r24, r28
     a54:	b8 01       	movw	r22, r16
     a56:	82 de       	rcall	.-764    	; 0x75c <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a58:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a5a:	0d b4       	in	r0, 0x2d	; 45
     a5c:	07 fe       	sbrs	r0, 7
     a5e:	fd cf       	rjmp	.-6      	; 0xa5a <DataflashManager_ReadBlocks+0x56>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a60:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a62:	0d b4       	in	r0, 0x2d	; 45
     a64:	07 fe       	sbrs	r0, 7
     a66:	fd cf       	rjmp	.-6      	; 0xa62 <DataflashManager_ReadBlocks+0x5e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a68:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a6a:	0d b4       	in	r0, 0x2d	; 45
     a6c:	07 fe       	sbrs	r0, 7
     a6e:	fd cf       	rjmp	.-6      	; 0xa6a <DataflashManager_ReadBlocks+0x66>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a70:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a72:	0d b4       	in	r0, 0x2d	; 45
     a74:	07 fe       	sbrs	r0, 7
     a76:	fd cf       	rjmp	.-6      	; 0xa72 <DataflashManager_ReadBlocks+0x6e>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     a78:	0e 94 ca 1c 	call	0x3994	; 0x3994 <Endpoint_WaitUntilReady>
     a7c:	88 23       	and	r24, r24
     a7e:	09 f0       	breq	.+2      	; 0xa82 <DataflashManager_ReadBlocks+0x7e>
     a80:	c0 c0       	rjmp	.+384    	; 0xc02 <DataflashManager_ReadBlocks+0x1fe>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     a82:	94 e0       	ldi	r25, 0x04	; 4
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	9a 95       	dec	r25
     a8a:	e1 f7       	brne	.-8      	; 0xa84 <DataflashManager_ReadBlocks+0x80>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a8c:	82 ed       	ldi	r24, 0xD2	; 210
     a8e:	b8 2e       	mov	r11, r24
     a90:	a8 c0       	rjmp	.+336    	; 0xbe2 <DataflashManager_ReadBlocks+0x1de>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     a92:	10 e2       	ldi	r17, 0x20	; 32
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     a94:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     a98:	85 fd       	sbrc	r24, 5
     a9a:	0a c0       	rjmp	.+20     	; 0xab0 <DataflashManager_ReadBlocks+0xac>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a9c:	80 91 e8 00 	lds	r24, 0x00E8
     aa0:	8e 77       	andi	r24, 0x7E	; 126
     aa2:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     aa6:	0e 94 ca 1c 	call	0x3994	; 0x3994 <Endpoint_WaitUntilReady>
     aaa:	88 23       	and	r24, r24
     aac:	09 f0       	breq	.+2      	; 0xab0 <DataflashManager_ReadBlocks+0xac>
     aae:	a9 c0       	rjmp	.+338    	; 0xc02 <DataflashManager_ReadBlocks+0x1fe>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     ab0:	00 34       	cpi	r16, 0x40	; 64
     ab2:	e1 f4       	brne	.+56     	; 0xaec <DataflashManager_ReadBlocks+0xe8>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     ab4:	21 96       	adiw	r28, 0x01	; 1

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     ab6:	ce 01       	movw	r24, r28
     ab8:	26 de       	rcall	.-948    	; 0x706 <Dataflash_SelectChipFromPage>
     aba:	be bc       	out	0x2e, r11	; 46
				while (!(SPSR & (1 << SPIF)));
     abc:	0d b4       	in	r0, 0x2d	; 45
     abe:	07 fe       	sbrs	r0, 7
     ac0:	fd cf       	rjmp	.-6      	; 0xabc <DataflashManager_ReadBlocks+0xb8>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     ac2:	ce 01       	movw	r24, r28
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	49 de       	rcall	.-878    	; 0x75c <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     aca:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     acc:	0d b4       	in	r0, 0x2d	; 45
     ace:	07 fe       	sbrs	r0, 7
     ad0:	fd cf       	rjmp	.-6      	; 0xacc <DataflashManager_ReadBlocks+0xc8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ad2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ad4:	0d b4       	in	r0, 0x2d	; 45
     ad6:	07 fe       	sbrs	r0, 7
     ad8:	fd cf       	rjmp	.-6      	; 0xad4 <DataflashManager_ReadBlocks+0xd0>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ada:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     adc:	0d b4       	in	r0, 0x2d	; 45
     ade:	07 fe       	sbrs	r0, 7
     ae0:	fd cf       	rjmp	.-6      	; 0xadc <DataflashManager_ReadBlocks+0xd8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ae2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ae4:	0d b4       	in	r0, 0x2d	; 45
     ae6:	07 fe       	sbrs	r0, 7
     ae8:	fd cf       	rjmp	.-6      	; 0xae4 <DataflashManager_ReadBlocks+0xe0>

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     aea:	00 e0       	ldi	r16, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     aec:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     aee:	0d b4       	in	r0, 0x2d	; 45
     af0:	07 fe       	sbrs	r0, 7
     af2:	fd cf       	rjmp	.-6      	; 0xaee <DataflashManager_ReadBlocks+0xea>
				return SPDR;
     af4:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     af6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     afa:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     afc:	0d b4       	in	r0, 0x2d	; 45
     afe:	07 fe       	sbrs	r0, 7
     b00:	fd cf       	rjmp	.-6      	; 0xafc <DataflashManager_ReadBlocks+0xf8>
				return SPDR;
     b02:	8e b5       	in	r24, 0x2e	; 46
     b04:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b08:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b0a:	0d b4       	in	r0, 0x2d	; 45
     b0c:	07 fe       	sbrs	r0, 7
     b0e:	fd cf       	rjmp	.-6      	; 0xb0a <DataflashManager_ReadBlocks+0x106>
				return SPDR;
     b10:	8e b5       	in	r24, 0x2e	; 46
     b12:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b16:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b18:	0d b4       	in	r0, 0x2d	; 45
     b1a:	07 fe       	sbrs	r0, 7
     b1c:	fd cf       	rjmp	.-6      	; 0xb18 <DataflashManager_ReadBlocks+0x114>
				return SPDR;
     b1e:	8e b5       	in	r24, 0x2e	; 46
     b20:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b24:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b26:	0d b4       	in	r0, 0x2d	; 45
     b28:	07 fe       	sbrs	r0, 7
     b2a:	fd cf       	rjmp	.-6      	; 0xb26 <DataflashManager_ReadBlocks+0x122>
				return SPDR;
     b2c:	8e b5       	in	r24, 0x2e	; 46
     b2e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b32:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b34:	0d b4       	in	r0, 0x2d	; 45
     b36:	07 fe       	sbrs	r0, 7
     b38:	fd cf       	rjmp	.-6      	; 0xb34 <DataflashManager_ReadBlocks+0x130>
				return SPDR;
     b3a:	8e b5       	in	r24, 0x2e	; 46
     b3c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b40:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b42:	0d b4       	in	r0, 0x2d	; 45
     b44:	07 fe       	sbrs	r0, 7
     b46:	fd cf       	rjmp	.-6      	; 0xb42 <DataflashManager_ReadBlocks+0x13e>
				return SPDR;
     b48:	8e b5       	in	r24, 0x2e	; 46
     b4a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b4e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b50:	0d b4       	in	r0, 0x2d	; 45
     b52:	07 fe       	sbrs	r0, 7
     b54:	fd cf       	rjmp	.-6      	; 0xb50 <DataflashManager_ReadBlocks+0x14c>
				return SPDR;
     b56:	8e b5       	in	r24, 0x2e	; 46
     b58:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b5c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b5e:	0d b4       	in	r0, 0x2d	; 45
     b60:	07 fe       	sbrs	r0, 7
     b62:	fd cf       	rjmp	.-6      	; 0xb5e <DataflashManager_ReadBlocks+0x15a>
				return SPDR;
     b64:	8e b5       	in	r24, 0x2e	; 46
     b66:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b6a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b6c:	0d b4       	in	r0, 0x2d	; 45
     b6e:	07 fe       	sbrs	r0, 7
     b70:	fd cf       	rjmp	.-6      	; 0xb6c <DataflashManager_ReadBlocks+0x168>
				return SPDR;
     b72:	8e b5       	in	r24, 0x2e	; 46
     b74:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b78:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b7a:	0d b4       	in	r0, 0x2d	; 45
     b7c:	07 fe       	sbrs	r0, 7
     b7e:	fd cf       	rjmp	.-6      	; 0xb7a <DataflashManager_ReadBlocks+0x176>
				return SPDR;
     b80:	8e b5       	in	r24, 0x2e	; 46
     b82:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b86:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b88:	0d b4       	in	r0, 0x2d	; 45
     b8a:	07 fe       	sbrs	r0, 7
     b8c:	fd cf       	rjmp	.-6      	; 0xb88 <DataflashManager_ReadBlocks+0x184>
				return SPDR;
     b8e:	8e b5       	in	r24, 0x2e	; 46
     b90:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     b94:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     b96:	0d b4       	in	r0, 0x2d	; 45
     b98:	07 fe       	sbrs	r0, 7
     b9a:	fd cf       	rjmp	.-6      	; 0xb96 <DataflashManager_ReadBlocks+0x192>
				return SPDR;
     b9c:	8e b5       	in	r24, 0x2e	; 46
     b9e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     ba2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ba4:	0d b4       	in	r0, 0x2d	; 45
     ba6:	07 fe       	sbrs	r0, 7
     ba8:	fd cf       	rjmp	.-6      	; 0xba4 <DataflashManager_ReadBlocks+0x1a0>
				return SPDR;
     baa:	8e b5       	in	r24, 0x2e	; 46
     bac:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     bb0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     bb2:	0d b4       	in	r0, 0x2d	; 45
     bb4:	07 fe       	sbrs	r0, 7
     bb6:	fd cf       	rjmp	.-6      	; 0xbb2 <DataflashManager_ReadBlocks+0x1ae>
				return SPDR;
     bb8:	8e b5       	in	r24, 0x2e	; 46
     bba:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     bbe:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     bc0:	0d b4       	in	r0, 0x2d	; 45
     bc2:	07 fe       	sbrs	r0, 7
     bc4:	fd cf       	rjmp	.-6      	; 0xbc0 <DataflashManager_ReadBlocks+0x1bc>
				return SPDR;
     bc6:	8e b5       	in	r24, 0x2e	; 46
     bc8:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     bcc:	f6 01       	movw	r30, r12
     bce:	80 ad       	ldd	r24, Z+56	; 0x38
     bd0:	88 23       	and	r24, r24
     bd2:	b9 f4       	brne	.+46     	; 0xc02 <DataflashManager_ReadBlocks+0x1fe>
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     bd4:	0f 5f       	subi	r16, 0xFF	; 255
     bd6:	11 50       	subi	r17, 0x01	; 1
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     bd8:	09 f0       	breq	.+2      	; 0xbdc <DataflashManager_ReadBlocks+0x1d8>
     bda:	5c cf       	rjmp	.-328    	; 0xa94 <DataflashManager_ReadBlocks+0x90>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     bdc:	08 94       	sec
     bde:	e1 08       	sbc	r14, r1
     be0:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     be2:	e1 14       	cp	r14, r1
     be4:	f1 04       	cpc	r15, r1
     be6:	09 f0       	breq	.+2      	; 0xbea <DataflashManager_ReadBlocks+0x1e6>
     be8:	54 cf       	rjmp	.-344    	; 0xa92 <DataflashManager_ReadBlocks+0x8e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     bea:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     bee:	85 fd       	sbrc	r24, 5
     bf0:	05 c0       	rjmp	.+10     	; 0xbfc <DataflashManager_ReadBlocks+0x1f8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bf2:	80 91 e8 00 	lds	r24, 0x00E8
     bf6:	8e 77       	andi	r24, 0x7E	; 126
     bf8:	80 93 e8 00 	sts	0x00E8, r24
     bfc:	8e b1       	in	r24, 0x0e	; 14
     bfe:	83 60       	ori	r24, 0x03	; 3
     c00:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	ff 90       	pop	r15
     c0c:	ef 90       	pop	r14
     c0e:	df 90       	pop	r13
     c10:	cf 90       	pop	r12
     c12:	bf 90       	pop	r11
     c14:	08 95       	ret

00000c16 <DataflashManager_WriteBlocks_RAM>:
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      const uint8_t* BufferPtr)
{
     c16:	6f 92       	push	r6
     c18:	7f 92       	push	r7
     c1a:	8f 92       	push	r8
     c1c:	9f 92       	push	r9
     c1e:	af 92       	push	r10
     c20:	bf 92       	push	r11
     c22:	cf 92       	push	r12
     c24:	df 92       	push	r13
     c26:	ef 92       	push	r14
     c28:	ff 92       	push	r15
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	5a 01       	movw	r10, r20
     c34:	39 01       	movw	r6, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     c36:	9b 01       	movw	r18, r22
     c38:	ac 01       	movw	r20, r24
     c3a:	19 e0       	ldi	r17, 0x09	; 9
     c3c:	22 0f       	add	r18, r18
     c3e:	33 1f       	adc	r19, r19
     c40:	44 1f       	adc	r20, r20
     c42:	55 1f       	adc	r21, r21
     c44:	1a 95       	dec	r17
     c46:	d1 f7       	brne	.-12     	; 0xc3c <DataflashManager_WriteBlocks_RAM+0x26>
     c48:	ba e0       	ldi	r27, 0x0A	; 10
     c4a:	56 95       	lsr	r21
     c4c:	47 95       	ror	r20
     c4e:	37 95       	ror	r19
     c50:	27 95       	ror	r18
     c52:	ba 95       	dec	r27
     c54:	d1 f7       	brne	.-12     	; 0xc4a <DataflashManager_WriteBlocks_RAM+0x34>
     c56:	e9 01       	movw	r28, r18
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     c58:	8b 01       	movw	r16, r22
     c5a:	10 2f       	mov	r17, r16
     c5c:	00 27       	eor	r16, r16
     c5e:	11 0f       	add	r17, r17
     c60:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     c62:	c8 01       	movw	r24, r16
     c64:	f4 e0       	ldi	r31, 0x04	; 4
     c66:	96 95       	lsr	r25
     c68:	87 95       	ror	r24
     c6a:	fa 95       	dec	r31
     c6c:	e1 f7       	brne	.-8      	; 0xc66 <DataflashManager_WriteBlocks_RAM+0x50>
     c6e:	d8 2e       	mov	r13, r24
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     c70:	c9 01       	movw	r24, r18
     c72:	49 dd       	rcall	.-1390   	; 0x706 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     c74:	83 e5       	ldi	r24, 0x53	; 83
     c76:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     c78:	0d b4       	in	r0, 0x2d	; 45
     c7a:	07 fe       	sbrs	r0, 7
     c7c:	fd cf       	rjmp	.-6      	; 0xc78 <DataflashManager_WriteBlocks_RAM+0x62>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     c7e:	ce 01       	movw	r24, r28
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	6b dd       	rcall	.-1322   	; 0x75c <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     c86:	5c dd       	rcall	.-1352   	; 0x740 <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     c88:	84 e8       	ldi	r24, 0x84	; 132
     c8a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     c8c:	0d b4       	in	r0, 0x2d	; 45
     c8e:	07 fe       	sbrs	r0, 7
     c90:	fd cf       	rjmp	.-6      	; 0xc8c <DataflashManager_WriteBlocks_RAM+0x76>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	b8 01       	movw	r22, r16
     c98:	61 dd       	rcall	.-1342   	; 0x75c <Dataflash_SendAddressBytes>
     c9a:	75 01       	movw	r14, r10
     c9c:	e5 e0       	ldi	r30, 0x05	; 5
     c9e:	ee 0c       	add	r14, r14
     ca0:	ff 1c       	adc	r15, r15
     ca2:	ea 95       	dec	r30
     ca4:	e1 f7       	brne	.-8      	; 0xc9e <DataflashManager_WriteBlocks_RAM+0x88>
                                      const uint8_t* BufferPtr)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;
     ca6:	cc 24       	eor	r12, r12
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
				  UsingSecondBuffer = !(UsingSecondBuffer);
     ca8:	88 24       	eor	r8, r8
     caa:	83 94       	inc	r8

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);

	while (TotalBlocks)
     cac:	5b c0       	rjmp	.+182    	; 0xd64 <DataflashManager_WriteBlocks_RAM+0x14e>
     cae:	83 01       	movw	r16, r6
     cb0:	70 e2       	ldi	r23, 0x20	; 32
     cb2:	97 2e       	mov	r9, r23

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     cb4:	8d 2d       	mov	r24, r13
     cb6:	80 34       	cpi	r24, 0x40	; 64
     cb8:	09 f0       	breq	.+2      	; 0xcbc <DataflashManager_WriteBlocks_RAM+0xa6>
     cba:	3a c0       	rjmp	.+116    	; 0xd30 <DataflashManager_WriteBlocks_RAM+0x11a>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     cbc:	41 dd       	rcall	.-1406   	; 0x740 <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     cbe:	cc 20       	and	r12, r12
     cc0:	11 f0       	breq	.+4      	; 0xcc6 <DataflashManager_WriteBlocks_RAM+0xb0>
     cc2:	86 e8       	ldi	r24, 0x86	; 134
     cc4:	01 c0       	rjmp	.+2      	; 0xcc8 <DataflashManager_WriteBlocks_RAM+0xb2>
     cc6:	83 e8       	ldi	r24, 0x83	; 131
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     cc8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     cca:	0d b4       	in	r0, 0x2d	; 45
     ccc:	07 fe       	sbrs	r0, 7
     cce:	fd cf       	rjmp	.-6      	; 0xcca <DataflashManager_WriteBlocks_RAM+0xb4>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     cd0:	ce 01       	movw	r24, r28
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	42 dd       	rcall	.-1404   	; 0x75c <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     cd8:	21 96       	adiw	r28, 0x01	; 1
			 *          or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (~DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     cda:	8e b1       	in	r24, 0x0e	; 14
     cdc:	80 95       	com	r24
     cde:	83 70       	andi	r24, 0x03	; 3

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     ce0:	82 30       	cpi	r24, 0x02	; 2
     ce2:	09 f4       	brne	.+2      	; 0xce6 <DataflashManager_WriteBlocks_RAM+0xd0>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     ce4:	c8 24       	eor	r12, r8

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     ce6:	ce 01       	movw	r24, r28
     ce8:	0e dd       	rcall	.-1508   	; 0x706 <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     cea:	90 e4       	ldi	r25, 0x40	; 64
     cec:	e9 16       	cp	r14, r25
     cee:	f1 04       	cpc	r15, r1
     cf0:	78 f4       	brcc	.+30     	; 0xd10 <DataflashManager_WriteBlocks_RAM+0xfa>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     cf2:	26 dd       	rcall	.-1460   	; 0x740 <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     cf4:	cc 20       	and	r12, r12
     cf6:	11 f0       	breq	.+4      	; 0xcfc <DataflashManager_WriteBlocks_RAM+0xe6>
     cf8:	85 e5       	ldi	r24, 0x55	; 85
     cfa:	01 c0       	rjmp	.+2      	; 0xcfe <DataflashManager_WriteBlocks_RAM+0xe8>
     cfc:	83 e5       	ldi	r24, 0x53	; 83
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     cfe:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     d00:	0d b4       	in	r0, 0x2d	; 45
     d02:	07 fe       	sbrs	r0, 7
     d04:	fd cf       	rjmp	.-6      	; 0xd00 <DataflashManager_WriteBlocks_RAM+0xea>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     d06:	ce 01       	movw	r24, r28
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	27 dd       	rcall	.-1458   	; 0x75c <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     d0e:	18 dd       	rcall	.-1488   	; 0x740 <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_ToggleSelectedChipCS();
     d10:	0d dd       	rcall	.-1510   	; 0x72c <Dataflash_ToggleSelectedChipCS>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     d12:	cc 20       	and	r12, r12
     d14:	11 f0       	breq	.+4      	; 0xd1a <DataflashManager_WriteBlocks_RAM+0x104>
     d16:	87 e8       	ldi	r24, 0x87	; 135
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <DataflashManager_WriteBlocks_RAM+0x106>
     d1a:	84 e8       	ldi	r24, 0x84	; 132
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     d1c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     d1e:	0d b4       	in	r0, 0x2d	; 45
     d20:	07 fe       	sbrs	r0, 7
     d22:	fd cf       	rjmp	.-6      	; 0xd1e <DataflashManager_WriteBlocks_RAM+0x108>
				Dataflash_SendAddressBytes(0, 0);
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	17 dd       	rcall	.-1490   	; 0x75c <Dataflash_SendAddressBytes>
				Dataflash_WaitWhileBusy();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
				Dataflash_SendAddressBytes(CurrDFPage, 0);

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     d2e:	dd 24       	eor	r13, r13
     d30:	f8 01       	movw	r30, r16
     d32:	80 e1       	ldi	r24, 0x10	; 16
				Dataflash_SendAddressBytes(0, 0);
			}

			/* Write one 16-byte chunk of data to the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
			  Dataflash_SendByte(*(BufferPtr++));
     d34:	91 91       	ld	r25, Z+
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     d36:	9e bd       	out	0x2e, r25	; 46
				while (!(SPSR & (1 << SPIF)));
     d38:	0d b4       	in	r0, 0x2d	; 45
     d3a:	07 fe       	sbrs	r0, 7
     d3c:	fd cf       	rjmp	.-6      	; 0xd38 <DataflashManager_WriteBlocks_RAM+0x122>
     d3e:	81 50       	subi	r24, 0x01	; 1
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
				Dataflash_SendAddressBytes(0, 0);
			}

			/* Write one 16-byte chunk of data to the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
     d40:	c9 f7       	brne	.-14     	; 0xd34 <DataflashManager_WriteBlocks_RAM+0x11e>
     d42:	00 5f       	subi	r16, 0xF0	; 240
     d44:	1f 4f       	sbci	r17, 0xFF	; 255
			  Dataflash_SendByte(*(BufferPtr++));

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     d46:	d3 94       	inc	r13
     d48:	9a 94       	dec	r9
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     d4a:	09 f0       	breq	.+2      	; 0xd4e <DataflashManager_WriteBlocks_RAM+0x138>
     d4c:	b3 cf       	rjmp	.-154    	; 0xcb4 <DataflashManager_WriteBlocks_RAM+0x9e>
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	92 e0       	ldi	r25, 0x02	; 2
     d52:	68 0e       	add	r6, r24
     d54:	79 1e       	adc	r7, r25
			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     d56:	08 94       	sec
     d58:	a1 08       	sbc	r10, r1
     d5a:	b1 08       	sbc	r11, r1
     d5c:	80 ee       	ldi	r24, 0xE0	; 224
     d5e:	9f ef       	ldi	r25, 0xFF	; 255
     d60:	e8 0e       	add	r14, r24
     d62:	f9 1e       	adc	r15, r25

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);

	while (TotalBlocks)
     d64:	a1 14       	cp	r10, r1
     d66:	b1 04       	cpc	r11, r1
     d68:	09 f0       	breq	.+2      	; 0xd6c <DataflashManager_WriteBlocks_RAM+0x156>
     d6a:	a1 cf       	rjmp	.-190    	; 0xcae <DataflashManager_WriteBlocks_RAM+0x98>
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     d6c:	e9 dc       	rcall	.-1582   	; 0x740 <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     d6e:	cc 20       	and	r12, r12
     d70:	11 f0       	breq	.+4      	; 0xd76 <DataflashManager_WriteBlocks_RAM+0x160>
     d72:	86 e8       	ldi	r24, 0x86	; 134
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <DataflashManager_WriteBlocks_RAM+0x162>
     d76:	83 e8       	ldi	r24, 0x83	; 131
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     d78:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     d7a:	0d b4       	in	r0, 0x2d	; 45
     d7c:	07 fe       	sbrs	r0, 7
     d7e:	fd cf       	rjmp	.-6      	; 0xd7a <DataflashManager_WriteBlocks_RAM+0x164>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     d80:	ce 01       	movw	r24, r28
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	ea dc       	rcall	.-1580   	; 0x75c <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     d88:	db dc       	rcall	.-1610   	; 0x740 <Dataflash_WaitWhileBusy>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     d8a:	8e b1       	in	r24, 0x0e	; 14
     d8c:	83 60       	ori	r24, 0x03	; 3
     d8e:	8e b9       	out	0x0e, r24	; 14

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	df 90       	pop	r13
     d9e:	cf 90       	pop	r12
     da0:	bf 90       	pop	r11
     da2:	af 90       	pop	r10
     da4:	9f 90       	pop	r9
     da6:	8f 90       	pop	r8
     da8:	7f 90       	pop	r7
     daa:	6f 90       	pop	r6
     dac:	08 95       	ret

00000dae <DataflashManager_ReadBlocks_RAM>:
 *  \param[out] BufferPtr    Pointer to the data destination RAM buffer
 */
void DataflashManager_ReadBlocks_RAM(const uint32_t BlockAddress,
                                     uint16_t TotalBlocks,
                                     uint8_t* BufferPtr)
{
     dae:	9f 92       	push	r9
     db0:	af 92       	push	r10
     db2:	bf 92       	push	r11
     db4:	cf 92       	push	r12
     db6:	df 92       	push	r13
     db8:	ef 92       	push	r14
     dba:	ff 92       	push	r15
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	5a 01       	movw	r10, r20
     dc6:	69 01       	movw	r12, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     dc8:	9b 01       	movw	r18, r22
     dca:	ac 01       	movw	r20, r24
     dcc:	f9 e0       	ldi	r31, 0x09	; 9
     dce:	22 0f       	add	r18, r18
     dd0:	33 1f       	adc	r19, r19
     dd2:	44 1f       	adc	r20, r20
     dd4:	55 1f       	adc	r21, r21
     dd6:	fa 95       	dec	r31
     dd8:	d1 f7       	brne	.-12     	; 0xdce <DataflashManager_ReadBlocks_RAM+0x20>
     dda:	ea e0       	ldi	r30, 0x0A	; 10
     ddc:	56 95       	lsr	r21
     dde:	47 95       	ror	r20
     de0:	37 95       	ror	r19
     de2:	27 95       	ror	r18
     de4:	ea 95       	dec	r30
     de6:	d1 f7       	brne	.-12     	; 0xddc <DataflashManager_ReadBlocks_RAM+0x2e>
     de8:	e9 01       	movw	r28, r18
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     dea:	8b 01       	movw	r16, r22
     dec:	10 2f       	mov	r17, r16
     dee:	00 27       	eor	r16, r16
     df0:	11 0f       	add	r17, r17
     df2:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     df4:	c8 01       	movw	r24, r16
     df6:	44 e0       	ldi	r20, 0x04	; 4
     df8:	96 95       	lsr	r25
     dfa:	87 95       	ror	r24
     dfc:	4a 95       	dec	r20
     dfe:	e1 f7       	brne	.-8      	; 0xdf8 <DataflashManager_ReadBlocks_RAM+0x4a>
     e00:	f8 2e       	mov	r15, r24

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     e02:	c9 01       	movw	r24, r18
     e04:	80 dc       	rcall	.-1792   	; 0x706 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e06:	82 ed       	ldi	r24, 0xD2	; 210
     e08:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     e0a:	0d b4       	in	r0, 0x2d	; 45
     e0c:	07 fe       	sbrs	r0, 7
     e0e:	fd cf       	rjmp	.-6      	; 0xe0a <DataflashManager_ReadBlocks_RAM+0x5c>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     e10:	ce 01       	movw	r24, r28
     e12:	b8 01       	movw	r22, r16
     e14:	a3 dc       	rcall	.-1722   	; 0x75c <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e16:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     e18:	0d b4       	in	r0, 0x2d	; 45
     e1a:	07 fe       	sbrs	r0, 7
     e1c:	fd cf       	rjmp	.-6      	; 0xe18 <DataflashManager_ReadBlocks_RAM+0x6a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e1e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     e20:	0d b4       	in	r0, 0x2d	; 45
     e22:	07 fe       	sbrs	r0, 7
     e24:	fd cf       	rjmp	.-6      	; 0xe20 <DataflashManager_ReadBlocks_RAM+0x72>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e26:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     e28:	0d b4       	in	r0, 0x2d	; 45
     e2a:	07 fe       	sbrs	r0, 7
     e2c:	fd cf       	rjmp	.-6      	; 0xe28 <DataflashManager_ReadBlocks_RAM+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e2e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     e30:	0d b4       	in	r0, 0x2d	; 45
     e32:	07 fe       	sbrs	r0, 7
     e34:	fd cf       	rjmp	.-6      	; 0xe30 <DataflashManager_ReadBlocks_RAM+0x82>
     e36:	39 c0       	rjmp	.+114    	; 0xeaa <DataflashManager_ReadBlocks_RAM+0xfc>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	while (TotalBlocks)
     e38:	86 01       	movw	r16, r12
     e3a:	80 e2       	ldi	r24, 0x20	; 32
     e3c:	e8 2e       	mov	r14, r24

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     e3e:	8f 2d       	mov	r24, r15
     e40:	80 34       	cpi	r24, 0x40	; 64
     e42:	e1 f4       	brne	.+56     	; 0xe7c <DataflashManager_ReadBlocks_RAM+0xce>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     e44:	21 96       	adiw	r28, 0x01	; 1

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     e46:	ce 01       	movw	r24, r28
     e48:	5e dc       	rcall	.-1860   	; 0x706 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e4a:	9e bc       	out	0x2e, r9	; 46
				while (!(SPSR & (1 << SPIF)));
     e4c:	0d b4       	in	r0, 0x2d	; 45
     e4e:	07 fe       	sbrs	r0, 7
     e50:	fd cf       	rjmp	.-6      	; 0xe4c <DataflashManager_ReadBlocks_RAM+0x9e>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     e52:	ce 01       	movw	r24, r28
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	81 dc       	rcall	.-1790   	; 0x75c <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e5a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     e5c:	0d b4       	in	r0, 0x2d	; 45
     e5e:	07 fe       	sbrs	r0, 7
     e60:	fd cf       	rjmp	.-6      	; 0xe5c <DataflashManager_ReadBlocks_RAM+0xae>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e62:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     e64:	0d b4       	in	r0, 0x2d	; 45
     e66:	07 fe       	sbrs	r0, 7
     e68:	fd cf       	rjmp	.-6      	; 0xe64 <DataflashManager_ReadBlocks_RAM+0xb6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e6a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     e6c:	0d b4       	in	r0, 0x2d	; 45
     e6e:	07 fe       	sbrs	r0, 7
     e70:	fd cf       	rjmp	.-6      	; 0xe6c <DataflashManager_ReadBlocks_RAM+0xbe>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     e72:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     e74:	0d b4       	in	r0, 0x2d	; 45
     e76:	07 fe       	sbrs	r0, 7
     e78:	fd cf       	rjmp	.-6      	; 0xe74 <DataflashManager_ReadBlocks_RAM+0xc6>
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
     e7a:	ff 24       	eor	r15, r15
     e7c:	f8 01       	movw	r30, r16
     e7e:	80 e1       	ldi	r24, 0x10	; 16
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     e80:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     e82:	0d b4       	in	r0, 0x2d	; 45
     e84:	07 fe       	sbrs	r0, 7
     e86:	fd cf       	rjmp	.-6      	; 0xe82 <DataflashManager_ReadBlocks_RAM+0xd4>
				return SPDR;
     e88:	9e b5       	in	r25, 0x2e	; 46
				Dataflash_SendByte(0x00);
			}

			/* Read one 16-byte chunk of data from the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
			  *(BufferPtr++) = Dataflash_ReceiveByte();
     e8a:	91 93       	st	Z+, r25
     e8c:	81 50       	subi	r24, 0x01	; 1
				Dataflash_SendByte(0x00);
				Dataflash_SendByte(0x00);
			}

			/* Read one 16-byte chunk of data from the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
     e8e:	c1 f7       	brne	.-16     	; 0xe80 <DataflashManager_ReadBlocks_RAM+0xd2>
     e90:	00 5f       	subi	r16, 0xF0	; 240
     e92:	1f 4f       	sbci	r17, 0xFF	; 255
			  *(BufferPtr++) = Dataflash_ReceiveByte();

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     e94:	f3 94       	inc	r15
     e96:	ea 94       	dec	r14
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     e98:	91 f6       	brne	.-92     	; 0xe3e <DataflashManager_ReadBlocks_RAM+0x90>
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	92 e0       	ldi	r25, 0x02	; 2
     e9e:	c8 0e       	add	r12, r24
     ea0:	d9 1e       	adc	r13, r25
			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     ea2:	08 94       	sec
     ea4:	a1 08       	sbc	r10, r1
     ea6:	b1 08       	sbc	r11, r1
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DataflashManager_ReadBlocks_RAM+0x100>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     eaa:	02 ed       	ldi	r16, 0xD2	; 210
     eac:	90 2e       	mov	r9, r16
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	while (TotalBlocks)
     eae:	a1 14       	cp	r10, r1
     eb0:	b1 04       	cpc	r11, r1
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <DataflashManager_ReadBlocks_RAM+0x108>
     eb4:	c1 cf       	rjmp	.-126    	; 0xe38 <DataflashManager_ReadBlocks_RAM+0x8a>
     eb6:	8e b1       	in	r24, 0x0e	; 14
     eb8:	83 60       	ori	r24, 0x03	; 3
     eba:	8e b9       	out	0x0e, r24	; 14
		TotalBlocks--;
	}

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	ff 90       	pop	r15
     ec6:	ef 90       	pop	r14
     ec8:	df 90       	pop	r13
     eca:	cf 90       	pop	r12
     ecc:	bf 90       	pop	r11
     ece:	af 90       	pop	r10
     ed0:	9f 90       	pop	r9
     ed2:	08 95       	ret

00000ed4 <DataflashManager_ResetDataflashProtections>:
     ed4:	8e b1       	in	r24, 0x0e	; 14
     ed6:	83 60       	ori	r24, 0x03	; 3
     ed8:	8e 7f       	andi	r24, 0xFE	; 254
     eda:	8e b9       	out	0x0e, r24	; 14
     edc:	87 ed       	ldi	r24, 0xD7	; 215
     ede:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ee0:	0d b4       	in	r0, 0x2d	; 45
     ee2:	07 fe       	sbrs	r0, 7
     ee4:	fd cf       	rjmp	.-6      	; 0xee0 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     ee6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     ee8:	0d b4       	in	r0, 0x2d	; 45
     eea:	07 fe       	sbrs	r0, 7
     eec:	fd cf       	rjmp	.-6      	; 0xee8 <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     eee:	0e b4       	in	r0, 0x2e	; 46
     ef0:	01 fe       	sbrs	r0, 1
     ef2:	15 c0       	rjmp	.+42     	; 0xf1e <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     ef4:	1b dc       	rcall	.-1994   	; 0x72c <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ef6:	8d e3       	ldi	r24, 0x3D	; 61
     ef8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     efa:	0d b4       	in	r0, 0x2d	; 45
     efc:	07 fe       	sbrs	r0, 7
     efe:	fd cf       	rjmp	.-6      	; 0xefa <DataflashManager_ResetDataflashProtections+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f00:	8a e2       	ldi	r24, 0x2A	; 42
     f02:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f04:	0d b4       	in	r0, 0x2d	; 45
     f06:	07 fe       	sbrs	r0, 7
     f08:	fd cf       	rjmp	.-6      	; 0xf04 <DataflashManager_ResetDataflashProtections+0x30>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f0a:	8f e7       	ldi	r24, 0x7F	; 127
     f0c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f0e:	0d b4       	in	r0, 0x2d	; 45
     f10:	07 fe       	sbrs	r0, 7
     f12:	fd cf       	rjmp	.-6      	; 0xf0e <DataflashManager_ResetDataflashProtections+0x3a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f14:	8a e9       	ldi	r24, 0x9A	; 154
     f16:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f18:	0d b4       	in	r0, 0x2d	; 45
     f1a:	07 fe       	sbrs	r0, 7
     f1c:	fd cf       	rjmp	.-6      	; 0xf18 <DataflashManager_ResetDataflashProtections+0x44>
     f1e:	8e b1       	in	r24, 0x0e	; 14
     f20:	83 60       	ori	r24, 0x03	; 3
     f22:	8d 7f       	andi	r24, 0xFD	; 253
     f24:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f26:	87 ed       	ldi	r24, 0xD7	; 215
     f28:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f2a:	0d b4       	in	r0, 0x2d	; 45
     f2c:	07 fe       	sbrs	r0, 7
     f2e:	fd cf       	rjmp	.-6      	; 0xf2a <DataflashManager_ResetDataflashProtections+0x56>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     f30:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     f32:	0d b4       	in	r0, 0x2d	; 45
     f34:	07 fe       	sbrs	r0, 7
     f36:	fd cf       	rjmp	.-6      	; 0xf32 <DataflashManager_ResetDataflashProtections+0x5e>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     f38:	0e b4       	in	r0, 0x2e	; 46
     f3a:	01 fe       	sbrs	r0, 1
     f3c:	15 c0       	rjmp	.+42     	; 0xf68 <DataflashManager_ResetDataflashProtections+0x94>
	{
		Dataflash_ToggleSelectedChipCS();
     f3e:	f6 db       	rcall	.-2068   	; 0x72c <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f40:	8d e3       	ldi	r24, 0x3D	; 61
     f42:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f44:	0d b4       	in	r0, 0x2d	; 45
     f46:	07 fe       	sbrs	r0, 7
     f48:	fd cf       	rjmp	.-6      	; 0xf44 <DataflashManager_ResetDataflashProtections+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f4a:	8a e2       	ldi	r24, 0x2A	; 42
     f4c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f4e:	0d b4       	in	r0, 0x2d	; 45
     f50:	07 fe       	sbrs	r0, 7
     f52:	fd cf       	rjmp	.-6      	; 0xf4e <DataflashManager_ResetDataflashProtections+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f54:	8f e7       	ldi	r24, 0x7F	; 127
     f56:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f58:	0d b4       	in	r0, 0x2d	; 45
     f5a:	07 fe       	sbrs	r0, 7
     f5c:	fd cf       	rjmp	.-6      	; 0xf58 <DataflashManager_ResetDataflashProtections+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f5e:	8a e9       	ldi	r24, 0x9A	; 154
     f60:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f62:	0d b4       	in	r0, 0x2d	; 45
     f64:	07 fe       	sbrs	r0, 7
     f66:	fd cf       	rjmp	.-6      	; 0xf62 <DataflashManager_ResetDataflashProtections+0x8e>
     f68:	8e b1       	in	r24, 0x0e	; 14
     f6a:	83 60       	ori	r24, 0x03	; 3
     f6c:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     f6e:	08 95       	ret

00000f70 <DataflashManager_CheckDataflashOperation>:
     f70:	8e b1       	in	r24, 0x0e	; 14
     f72:	83 60       	ori	r24, 0x03	; 3
     f74:	8e 7f       	andi	r24, 0xFE	; 254
     f76:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f78:	8f e9       	ldi	r24, 0x9F	; 159
     f7a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     f7c:	0d b4       	in	r0, 0x2d	; 45
     f7e:	07 fe       	sbrs	r0, 7
     f80:	fd cf       	rjmp	.-6      	; 0xf7c <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     f82:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     f84:	0d b4       	in	r0, 0x2d	; 45
     f86:	07 fe       	sbrs	r0, 7
     f88:	fd cf       	rjmp	.-6      	; 0xf84 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     f8a:	9e b5       	in	r25, 0x2e	; 46
     f8c:	8e b1       	in	r24, 0x0e	; 14
     f8e:	83 60       	ori	r24, 0x03	; 3
     f90:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     f92:	9f 31       	cpi	r25, 0x1F	; 31
     f94:	b1 f4       	brne	.+44     	; 0xfc2 <DataflashManager_CheckDataflashOperation+0x52>
     f96:	8e b1       	in	r24, 0x0e	; 14
     f98:	83 60       	ori	r24, 0x03	; 3
     f9a:	8d 7f       	andi	r24, 0xFD	; 253
     f9c:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     f9e:	8f e9       	ldi	r24, 0x9F	; 159
     fa0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     fa2:	0d b4       	in	r0, 0x2d	; 45
     fa4:	07 fe       	sbrs	r0, 7
     fa6:	fd cf       	rjmp	.-6      	; 0xfa2 <DataflashManager_CheckDataflashOperation+0x32>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     fa8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     faa:	0d b4       	in	r0, 0x2d	; 45
     fac:	07 fe       	sbrs	r0, 7
     fae:	fd cf       	rjmp	.-6      	; 0xfaa <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     fb0:	9e b5       	in	r25, 0x2e	; 46
     fb2:	8e b1       	in	r24, 0x0e	; 14
     fb4:	83 60       	ori	r24, 0x03	; 3
     fb6:	8e b9       	out	0x0e, r24	; 14

/** Performs a simple test on the attached Dataflash IC(s) to ensure that they are working.
 *
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool DataflashManager_CheckDataflashOperation(void)
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	9f 31       	cpi	r25, 0x1F	; 31
     fbc:	19 f0       	breq	.+6      	; 0xfc4 <DataflashManager_CheckDataflashOperation+0x54>
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	08 95       	ret
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
     fc2:	80 e0       	ldi	r24, 0x00	; 0
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     fc4:	08 95       	ret

00000fc6 <DS1307_SetTimeDate>:
*/

#include "DS1307.h"

bool DS1307_SetTimeDate(const TimeDate_t* NewTimeDate)
{
     fc6:	ef 92       	push	r14
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	28 97       	sbiw	r28, 0x08	; 8
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	fc 01       	movw	r30, r24
#if !defined(DUMMY_RTC)
	DS1307_DateTimeRegs_t NewRegValues;
	const uint8_t         WriteAddress = 0;
     fe2:	19 82       	std	Y+1, r1	; 0x01

	// Convert new time data to the DS1307's time register layout
	NewRegValues.Byte1.Fields.TenSec    = (NewTimeDate->Second / 10);
     fe4:	82 81       	ldd	r24, Z+2	; 0x02
     fe6:	2a e0       	ldi	r18, 0x0A	; 10
     fe8:	62 2f       	mov	r22, r18
     fea:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__udivmodqi4>
     fee:	87 70       	andi	r24, 0x07	; 7
     ff0:	82 95       	swap	r24
     ff2:	80 7f       	andi	r24, 0xF0	; 240
	NewRegValues.Byte1.Fields.Sec       = (NewTimeDate->Second % 10);
	NewRegValues.Byte1.Fields.CH        = false;
     ff4:	89 2b       	or	r24, r25
     ff6:	8a 83       	std	Y+2, r24	; 0x02
	NewRegValues.Byte2.Fields.TenMin    = (NewTimeDate->Minute / 10);
     ff8:	81 81       	ldd	r24, Z+1	; 0x01
     ffa:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__udivmodqi4>
     ffe:	87 70       	andi	r24, 0x07	; 7
    1000:	82 95       	swap	r24
    1002:	80 7f       	andi	r24, 0xF0	; 240
    1004:	3b 81       	ldd	r19, Y+3	; 0x03
    1006:	30 78       	andi	r19, 0x80	; 128
	NewRegValues.Byte2.Fields.Min       = (NewTimeDate->Minute % 10);
    1008:	38 2b       	or	r19, r24
    100a:	39 2b       	or	r19, r25
    100c:	3b 83       	std	Y+3, r19	; 0x03
	NewRegValues.Byte3.Fields.TenHour   = (NewTimeDate->Hour / 10);
    100e:	80 81       	ld	r24, Z
    1010:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__udivmodqi4>
    1014:	83 70       	andi	r24, 0x03	; 3
    1016:	82 95       	swap	r24
    1018:	80 7f       	andi	r24, 0xF0	; 240
    101a:	3c 81       	ldd	r19, Y+4	; 0x04
    101c:	30 7c       	andi	r19, 0xC0	; 192
	NewRegValues.Byte3.Fields.Hour      = (NewTimeDate->Hour % 10);
    101e:	38 2b       	or	r19, r24
    1020:	39 2b       	or	r19, r25
	NewRegValues.Byte3.Fields.TwelveHourMode = false;
    1022:	3f 7b       	andi	r19, 0xBF	; 191
    1024:	3c 83       	std	Y+4, r19	; 0x04

	// Convert new date data to the DS1307's date register layout
	NewRegValues.Byte4.Fields.DayOfWeek = 0;
    1026:	8d 81       	ldd	r24, Y+5	; 0x05
    1028:	88 7f       	andi	r24, 0xF8	; 248
    102a:	8d 83       	std	Y+5, r24	; 0x05
	NewRegValues.Byte5.Fields.TenDay    = (NewTimeDate->Day / 10);
    102c:	83 81       	ldd	r24, Z+3	; 0x03
    102e:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__udivmodqi4>
    1032:	83 70       	andi	r24, 0x03	; 3
    1034:	82 95       	swap	r24
    1036:	80 7f       	andi	r24, 0xF0	; 240
    1038:	3e 81       	ldd	r19, Y+6	; 0x06
    103a:	30 7c       	andi	r19, 0xC0	; 192
	NewRegValues.Byte5.Fields.Day       = (NewTimeDate->Day % 10);
    103c:	38 2b       	or	r19, r24
    103e:	39 2b       	or	r19, r25
    1040:	3e 83       	std	Y+6, r19	; 0x06
	NewRegValues.Byte6.Fields.TenMonth  = (NewTimeDate->Month / 10);
    1042:	84 81       	ldd	r24, Z+4	; 0x04
    1044:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__udivmodqi4>
    1048:	81 70       	andi	r24, 0x01	; 1
    104a:	82 95       	swap	r24
    104c:	80 7f       	andi	r24, 0xF0	; 240
    104e:	3f 81       	ldd	r19, Y+7	; 0x07
    1050:	30 7e       	andi	r19, 0xE0	; 224
	NewRegValues.Byte6.Fields.Month     = (NewTimeDate->Month % 10);
    1052:	38 2b       	or	r19, r24
    1054:	39 2b       	or	r19, r25
    1056:	3f 83       	std	Y+7, r19	; 0x07
	NewRegValues.Byte7.Fields.TenYear   = (NewTimeDate->Year / 10);
    1058:	85 81       	ldd	r24, Z+5	; 0x05
    105a:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__udivmodqi4>
	NewRegValues.Byte7.Fields.Year      = (NewTimeDate->Year % 10);
    105e:	82 95       	swap	r24
    1060:	80 7f       	andi	r24, 0xF0	; 240
    1062:	89 2b       	or	r24, r25
    1064:	88 87       	std	Y+8, r24	; 0x08

	// Write the new Time and Date into the DS1307
	if (TWI_WritePacket(DS1307_ADDRESS, 10, &WriteAddress, sizeof(WriteAddress),
    1066:	80 ed       	ldi	r24, 0xD0	; 208
    1068:	ae 01       	movw	r20, r28
    106a:	4f 5f       	subi	r20, 0xFF	; 255
    106c:	5f 4f       	sbci	r21, 0xFF	; 255
    106e:	21 e0       	ldi	r18, 0x01	; 1
    1070:	8e 01       	movw	r16, r28
    1072:	0e 5f       	subi	r16, 0xFE	; 254
    1074:	1f 4f       	sbci	r17, 0xFF	; 255
    1076:	97 e0       	ldi	r25, 0x07	; 7
    1078:	e9 2e       	mov	r14, r25
    107a:	0e 94 6d 24 	call	0x48da	; 0x48da <TWI_WritePacket>
           www.lufa-lib.org
*/

#include "DS1307.h"

bool DS1307_SetTimeDate(const TimeDate_t* NewTimeDate)
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	81 11       	cpse	r24, r1
    1082:	90 e0       	ldi	r25, 0x00	; 0
		return false;
	}
#endif

	return true;
}
    1084:	89 2f       	mov	r24, r25
    1086:	28 96       	adiw	r28, 0x08	; 8
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	1f 91       	pop	r17
    1098:	0f 91       	pop	r16
    109a:	ef 90       	pop	r14
    109c:	08 95       	ret

0000109e <DS1307_GetTimeDate>:

bool DS1307_GetTimeDate(TimeDate_t* const TimeDate)
{
    109e:	cf 92       	push	r12
    10a0:	df 92       	push	r13
    10a2:	ef 92       	push	r14
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	28 97       	sbiw	r28, 0x08	; 8
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	6c 01       	movw	r12, r24
	TimeDate->Day    = 1;
	TimeDate->Month  = 1;
	TimeDate->Year   = 1;
#else
	DS1307_DateTimeRegs_t CurrentRegValues;
	const uint8_t         ReadAddress = 0;
    10be:	19 82       	std	Y+1, r1	; 0x01

	// Read in the stored Time and Date from the DS1307
	if (TWI_ReadPacket(DS1307_ADDRESS, 10, &ReadAddress, sizeof(ReadAddress),
    10c0:	80 ed       	ldi	r24, 0xD0	; 208
    10c2:	6a e0       	ldi	r22, 0x0A	; 10
    10c4:	ae 01       	movw	r20, r28
    10c6:	4f 5f       	subi	r20, 0xFF	; 255
    10c8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ca:	21 e0       	ldi	r18, 0x01	; 1
    10cc:	8e 01       	movw	r16, r28
    10ce:	0e 5f       	subi	r16, 0xFE	; 254
    10d0:	1f 4f       	sbci	r17, 0xFF	; 255
    10d2:	37 e0       	ldi	r19, 0x07	; 7
    10d4:	e3 2e       	mov	r14, r19
    10d6:	0e 94 21 24 	call	0x4842	; 0x4842 <TWI_ReadPacket>
    10da:	88 23       	and	r24, r24
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <DS1307_GetTimeDate+0x42>
    10de:	50 c0       	rjmp	.+160    	; 0x1180 <DS1307_GetTimeDate+0xe2>
	{
		return false;
	}

	// Convert stored time value into decimal
	TimeDate->Second  = (CurrentRegValues.Byte1.Fields.TenSec  * 10) + CurrentRegValues.Byte1.Fields.Sec;
    10e0:	2a 81       	ldd	r18, Y+2	; 0x02
    10e2:	92 2f       	mov	r25, r18
    10e4:	96 95       	lsr	r25
    10e6:	96 95       	lsr	r25
    10e8:	96 95       	lsr	r25
    10ea:	9e 70       	andi	r25, 0x0E	; 14
    10ec:	89 2f       	mov	r24, r25
    10ee:	88 0f       	add	r24, r24
    10f0:	88 0f       	add	r24, r24
    10f2:	89 0f       	add	r24, r25
    10f4:	2f 70       	andi	r18, 0x0F	; 15
    10f6:	82 0f       	add	r24, r18
    10f8:	f6 01       	movw	r30, r12
    10fa:	82 83       	std	Z+2, r24	; 0x02
	TimeDate->Minute  = (CurrentRegValues.Byte2.Fields.TenMin  * 10) + CurrentRegValues.Byte2.Fields.Min;
    10fc:	2b 81       	ldd	r18, Y+3	; 0x03
    10fe:	92 2f       	mov	r25, r18
    1100:	96 95       	lsr	r25
    1102:	96 95       	lsr	r25
    1104:	96 95       	lsr	r25
    1106:	9e 70       	andi	r25, 0x0E	; 14
    1108:	89 2f       	mov	r24, r25
    110a:	88 0f       	add	r24, r24
    110c:	88 0f       	add	r24, r24
    110e:	89 0f       	add	r24, r25
    1110:	2f 70       	andi	r18, 0x0F	; 15
    1112:	82 0f       	add	r24, r18
    1114:	81 83       	std	Z+1, r24	; 0x01
	TimeDate->Hour    = (CurrentRegValues.Byte3.Fields.TenHour * 10) + CurrentRegValues.Byte3.Fields.Hour;
    1116:	2c 81       	ldd	r18, Y+4	; 0x04
    1118:	92 2f       	mov	r25, r18
    111a:	96 95       	lsr	r25
    111c:	96 95       	lsr	r25
    111e:	96 95       	lsr	r25
    1120:	96 70       	andi	r25, 0x06	; 6
    1122:	89 2f       	mov	r24, r25
    1124:	88 0f       	add	r24, r24
    1126:	88 0f       	add	r24, r24
    1128:	89 0f       	add	r24, r25
    112a:	2f 70       	andi	r18, 0x0F	; 15
    112c:	82 0f       	add	r24, r18
    112e:	80 83       	st	Z, r24

	// Convert stored date value into decimal
	TimeDate->Day    = (CurrentRegValues.Byte5.Fields.TenDay   * 10) + CurrentRegValues.Byte5.Fields.Day;
    1130:	2e 81       	ldd	r18, Y+6	; 0x06
    1132:	92 2f       	mov	r25, r18
    1134:	96 95       	lsr	r25
    1136:	96 95       	lsr	r25
    1138:	96 95       	lsr	r25
    113a:	96 70       	andi	r25, 0x06	; 6
    113c:	89 2f       	mov	r24, r25
    113e:	88 0f       	add	r24, r24
    1140:	88 0f       	add	r24, r24
    1142:	89 0f       	add	r24, r25
    1144:	2f 70       	andi	r18, 0x0F	; 15
    1146:	82 0f       	add	r24, r18
    1148:	83 83       	std	Z+3, r24	; 0x03
	TimeDate->Month  = (CurrentRegValues.Byte6.Fields.TenMonth * 10) + CurrentRegValues.Byte6.Fields.Month;
    114a:	2f 81       	ldd	r18, Y+7	; 0x07
    114c:	92 2f       	mov	r25, r18
    114e:	96 95       	lsr	r25
    1150:	96 95       	lsr	r25
    1152:	96 95       	lsr	r25
    1154:	92 70       	andi	r25, 0x02	; 2
    1156:	89 2f       	mov	r24, r25
    1158:	88 0f       	add	r24, r24
    115a:	88 0f       	add	r24, r24
    115c:	89 0f       	add	r24, r25
    115e:	2f 70       	andi	r18, 0x0F	; 15
    1160:	82 0f       	add	r24, r18
    1162:	84 83       	std	Z+4, r24	; 0x04
	TimeDate->Year   = (CurrentRegValues.Byte7.Fields.TenYear  * 10) + CurrentRegValues.Byte7.Fields.Year;
    1164:	28 85       	ldd	r18, Y+8	; 0x08
    1166:	92 2f       	mov	r25, r18
    1168:	92 95       	swap	r25
    116a:	9f 70       	andi	r25, 0x0F	; 15
    116c:	99 0f       	add	r25, r25
    116e:	89 2f       	mov	r24, r25
    1170:	88 0f       	add	r24, r24
    1172:	88 0f       	add	r24, r24
    1174:	89 0f       	add	r24, r25
    1176:	2f 70       	andi	r18, 0x0F	; 15
    1178:	82 0f       	add	r24, r18
    117a:	85 83       	std	Z+5, r24	; 0x05
#endif

	return true;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	01 c0       	rjmp	.+2      	; 0x1182 <DS1307_GetTimeDate+0xe4>

	// Read in the stored Time and Date from the DS1307
	if (TWI_ReadPacket(DS1307_ADDRESS, 10, &ReadAddress, sizeof(ReadAddress),
	                   (uint8_t*)&CurrentRegValues, sizeof(DS1307_DateTimeRegs_t)) != TWI_ERROR_NoError)
	{
		return false;
    1180:	80 e0       	ldi	r24, 0x00	; 0
	TimeDate->Month  = (CurrentRegValues.Byte6.Fields.TenMonth * 10) + CurrentRegValues.Byte6.Fields.Month;
	TimeDate->Year   = (CurrentRegValues.Byte7.Fields.TenYear  * 10) + CurrentRegValues.Byte7.Fields.Year;
#endif

	return true;
}
    1182:	28 96       	adiw	r28, 0x08	; 8
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	ef 90       	pop	r14
    1198:	df 90       	pop	r13
    119a:	cf 90       	pop	r12
    119c:	08 95       	ret

0000119e <SwapEndian_16>:
			 *
			 *  \return Input data with the individual bytes reversed.
			 */
			static inline uint16_t SwapEndian_16(const uint16_t Word) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
			static inline uint16_t SwapEndian_16(const uint16_t Word)
			{
    119e:	28 2f       	mov	r18, r24
				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
			}
    11a0:	89 2f       	mov	r24, r25
    11a2:	92 2f       	mov	r25, r18
    11a4:	08 95       	ret

000011a6 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
    11a6:	af 92       	push	r10
    11a8:	bf 92       	push	r11
    11aa:	cf 92       	push	r12
    11ac:	df 92       	push	r13
    11ae:	ef 92       	push	r14
    11b0:	ff 92       	push	r15
    11b2:	0f 93       	push	r16
    11b4:	1f 93       	push	r17
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	0f 92       	push	r0
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	5c 01       	movw	r10, r24

		return false;
	}

	/* Load in the 32-bit block address (SCSI uses big-endian, so have to reverse the byte order) */
	BlockAddress = SwapEndian_32(*(uint32_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[2]);
    11c2:	fc 01       	movw	r30, r24
    11c4:	7b 96       	adiw	r30, 0x1b	; 27

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
    11c6:	e5 80       	ldd	r14, Z+5	; 0x05
    11c8:	f4 80       	ldd	r15, Z+4	; 0x04
    11ca:	03 81       	ldd	r16, Z+3	; 0x03
    11cc:	12 81       	ldd	r17, Z+2	; 0x02

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);
    11ce:	87 81       	ldd	r24, Z+7	; 0x07
    11d0:	90 85       	ldd	r25, Z+8	; 0x08
    11d2:	69 83       	std	Y+1, r22	; 0x01
    11d4:	e4 df       	rcall	.-56     	; 0x119e <SwapEndian_16>
    11d6:	6c 01       	movw	r12, r24

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= VIRTUAL_MEMORY_BLOCKS)
    11d8:	69 81       	ldd	r22, Y+1	; 0x01
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	e8 16       	cp	r14, r24
    11de:	80 e8       	ldi	r24, 0x80	; 128
    11e0:	f8 06       	cpc	r15, r24
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	08 07       	cpc	r16, r24
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	18 07       	cpc	r17, r24
    11ea:	68 f0       	brcs	.+26     	; 0x1206 <SCSI_Command_ReadWrite_10+0x60>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    11ec:	80 91 8b 01 	lds	r24, 0x018B
    11f0:	80 7f       	andi	r24, 0xF0	; 240
    11f2:	85 60       	ori	r24, 0x05	; 5
    11f4:	80 93 8b 01 	sts	0x018B, r24
    11f8:	81 e2       	ldi	r24, 0x21	; 33
    11fa:	80 93 95 01 	sts	0x0195, r24
    11fe:	10 92 96 01 	sts	0x0196, r1
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	24 c0       	rjmp	.+72     	; 0x124e <SCSI_Command_ReadWrite_10+0xa8>
	}

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
    1206:	66 23       	and	r22, r22
    1208:	31 f0       	breq	.+12     	; 0x1216 <SCSI_Command_ReadWrite_10+0x70>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    120a:	c5 01       	movw	r24, r10
    120c:	b8 01       	movw	r22, r16
    120e:	a7 01       	movw	r20, r14
    1210:	96 01       	movw	r18, r12
    1212:	f8 db       	rcall	.-2064   	; 0xa04 <DataflashManager_ReadBlocks>
    1214:	05 c0       	rjmp	.+10     	; 0x1220 <SCSI_Command_ReadWrite_10+0x7a>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    1216:	c5 01       	movw	r24, r10
    1218:	b8 01       	movw	r22, r16
    121a:	a7 01       	movw	r20, r14
    121c:	96 01       	movw	r18, r12
    121e:	b7 da       	rcall	.-2706   	; 0x78e <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
    1220:	ee 24       	eor	r14, r14
    1222:	ff 24       	eor	r15, r15
    1224:	89 e0       	ldi	r24, 0x09	; 9
    1226:	cc 0c       	add	r12, r12
    1228:	dd 1c       	adc	r13, r13
    122a:	ee 1c       	adc	r14, r14
    122c:	ff 1c       	adc	r15, r15
    122e:	8a 95       	dec	r24
    1230:	d1 f7       	brne	.-12     	; 0x1226 <SCSI_Command_ReadWrite_10+0x80>
    1232:	f5 01       	movw	r30, r10
    1234:	84 89       	ldd	r24, Z+20	; 0x14
    1236:	95 89       	ldd	r25, Z+21	; 0x15
    1238:	a6 89       	ldd	r26, Z+22	; 0x16
    123a:	b7 89       	ldd	r27, Z+23	; 0x17
    123c:	8c 19       	sub	r24, r12
    123e:	9d 09       	sbc	r25, r13
    1240:	ae 09       	sbc	r26, r14
    1242:	bf 09       	sbc	r27, r15
    1244:	84 8b       	std	Z+20, r24	; 0x14
    1246:	95 8b       	std	Z+21, r25	; 0x15
    1248:	a6 8b       	std	Z+22, r26	; 0x16
    124a:	b7 8b       	std	Z+23, r27	; 0x17

	return true;
    124c:	81 e0       	ldi	r24, 0x01	; 1
}
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	ff 90       	pop	r15
    125a:	ef 90       	pop	r14
    125c:	df 90       	pop	r13
    125e:	cf 90       	pop	r12
    1260:	bf 90       	pop	r11
    1262:	af 90       	pop	r10
    1264:	08 95       	ret

00001266 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1266:	cf 92       	push	r12
    1268:	df 92       	push	r13
    126a:	ef 92       	push	r14
    126c:	ff 92       	push	r15
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	28 97       	sbiw	r28, 0x08	; 8
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    1288:	fc 01       	movw	r30, r24
    128a:	83 8d       	ldd	r24, Z+27	; 0x1b
    128c:	8d 31       	cpi	r24, 0x1D	; 29
    128e:	09 f4       	brne	.+2      	; 0x1292 <SCSI_DecodeSCSICommand+0x2c>
    1290:	b2 c0       	rjmp	.+356    	; 0x13f6 <SCSI_DecodeSCSICommand+0x190>
    1292:	8e 31       	cpi	r24, 0x1E	; 30
    1294:	78 f4       	brcc	.+30     	; 0x12b4 <SCSI_DecodeSCSICommand+0x4e>
    1296:	83 30       	cpi	r24, 0x03	; 3
    1298:	09 f4       	brne	.+2      	; 0x129c <SCSI_DecodeSCSICommand+0x36>
    129a:	58 c0       	rjmp	.+176    	; 0x134c <SCSI_DecodeSCSICommand+0xe6>
    129c:	84 30       	cpi	r24, 0x04	; 4
    129e:	20 f4       	brcc	.+8      	; 0x12a8 <SCSI_DecodeSCSICommand+0x42>
    12a0:	88 23       	and	r24, r24
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <SCSI_DecodeSCSICommand+0x40>
    12a4:	e5 c0       	rjmp	.+458    	; 0x1470 <SCSI_DecodeSCSICommand+0x20a>
    12a6:	ea c0       	rjmp	.+468    	; 0x147c <SCSI_DecodeSCSICommand+0x216>
    12a8:	82 31       	cpi	r24, 0x12	; 18
    12aa:	b9 f0       	breq	.+46     	; 0x12da <SCSI_DecodeSCSICommand+0x74>
    12ac:	8a 31       	cpi	r24, 0x1A	; 26
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <SCSI_DecodeSCSICommand+0x4c>
    12b0:	e5 c0       	rjmp	.+458    	; 0x147c <SCSI_DecodeSCSICommand+0x216>
    12b2:	c4 c0       	rjmp	.+392    	; 0x143c <SCSI_DecodeSCSICommand+0x1d6>
    12b4:	88 32       	cpi	r24, 0x28	; 40
    12b6:	09 f4       	brne	.+2      	; 0x12ba <SCSI_DecodeSCSICommand+0x54>
    12b8:	bb c0       	rjmp	.+374    	; 0x1430 <SCSI_DecodeSCSICommand+0x1ca>
    12ba:	89 32       	cpi	r24, 0x29	; 41
    12bc:	38 f4       	brcc	.+14     	; 0x12cc <SCSI_DecodeSCSICommand+0x66>
    12be:	8e 31       	cpi	r24, 0x1E	; 30
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <SCSI_DecodeSCSICommand+0x5e>
    12c2:	d6 c0       	rjmp	.+428    	; 0x1470 <SCSI_DecodeSCSICommand+0x20a>
    12c4:	85 32       	cpi	r24, 0x25	; 37
    12c6:	09 f0       	breq	.+2      	; 0x12ca <SCSI_DecodeSCSICommand+0x64>
    12c8:	d9 c0       	rjmp	.+434    	; 0x147c <SCSI_DecodeSCSICommand+0x216>
    12ca:	67 c0       	rjmp	.+206    	; 0x139a <SCSI_DecodeSCSICommand+0x134>
    12cc:	8a 32       	cpi	r24, 0x2A	; 42
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <SCSI_DecodeSCSICommand+0x6c>
    12d0:	ac c0       	rjmp	.+344    	; 0x142a <SCSI_DecodeSCSICommand+0x1c4>
    12d2:	8f 32       	cpi	r24, 0x2F	; 47
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <SCSI_DecodeSCSICommand+0x72>
    12d6:	d2 c0       	rjmp	.+420    	; 0x147c <SCSI_DecodeSCSICommand+0x216>
    12d8:	cb c0       	rjmp	.+406    	; 0x1470 <SCSI_DecodeSCSICommand+0x20a>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
    12da:	f8 01       	movw	r30, r16
    12dc:	86 8d       	ldd	r24, Z+30	; 0x1e
    12de:	97 8d       	ldd	r25, Z+31	; 0x1f
    12e0:	5e df       	rcall	.-324    	; 0x119e <SwapEndian_16>
    12e2:	6c 01       	movw	r12, r24
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
    12e4:	f8 01       	movw	r30, r16
    12e6:	84 8d       	ldd	r24, Z+28	; 0x1c
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	83 70       	andi	r24, 0x03	; 3
    12ec:	90 70       	andi	r25, 0x00	; 0
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <SCSI_DecodeSCSICommand+0x8e>
    12f2:	85 c0       	rjmp	.+266    	; 0x13fe <SCSI_DecodeSCSICommand+0x198>
    12f4:	85 8d       	ldd	r24, Z+29	; 0x1d
    12f6:	88 23       	and	r24, r24
    12f8:	09 f0       	breq	.+2      	; 0x12fc <SCSI_DecodeSCSICommand+0x96>
    12fa:	81 c0       	rjmp	.+258    	; 0x13fe <SCSI_DecodeSCSICommand+0x198>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
    12fc:	76 01       	movw	r14, r12
    12fe:	f5 e2       	ldi	r31, 0x25	; 37
    1300:	cf 16       	cp	r12, r31
    1302:	d1 04       	cpc	r13, r1
    1304:	18 f0       	brcs	.+6      	; 0x130c <SCSI_DecodeSCSICommand+0xa6>
    1306:	24 e2       	ldi	r18, 0x24	; 36
    1308:	e2 2e       	mov	r14, r18
    130a:	f1 2c       	mov	r15, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
    130c:	8b e9       	ldi	r24, 0x9B	; 155
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	b7 01       	movw	r22, r14
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	0e 94 2b 1a 	call	0x3456	; 0x3456 <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    131a:	c6 01       	movw	r24, r12
    131c:	8e 19       	sub	r24, r14
    131e:	9f 09       	sbc	r25, r15
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	0e 94 e6 19 	call	0x33cc	; 0x33cc <Endpoint_Null_Stream>
    1328:	80 91 e8 00 	lds	r24, 0x00E8
    132c:	8e 77       	andi	r24, 0x7E	; 126
    132e:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    1332:	97 01       	movw	r18, r14
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	50 e0       	ldi	r21, 0x00	; 0
    1338:	f8 01       	movw	r30, r16
    133a:	84 89       	ldd	r24, Z+20	; 0x14
    133c:	95 89       	ldd	r25, Z+21	; 0x15
    133e:	a6 89       	ldd	r26, Z+22	; 0x16
    1340:	b7 89       	ldd	r27, Z+23	; 0x17
    1342:	82 1b       	sub	r24, r18
    1344:	93 0b       	sbc	r25, r19
    1346:	a4 0b       	sbc	r26, r20
    1348:	b5 0b       	sbc	r27, r21
    134a:	8d c0       	rjmp	.+282    	; 0x1466 <SCSI_DecodeSCSICommand+0x200>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
    134c:	f8 01       	movw	r30, r16
    134e:	c7 8c       	ldd	r12, Z+31	; 0x1f
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
    1350:	ec 2c       	mov	r14, r12
    1352:	fc 2d       	mov	r31, r12
    1354:	f3 31       	cpi	r31, 0x13	; 19
    1356:	10 f0       	brcs	.+4      	; 0x135c <SCSI_DecodeSCSICommand+0xf6>
    1358:	92 e1       	ldi	r25, 0x12	; 18
    135a:	e9 2e       	mov	r14, r25

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
    135c:	89 e8       	ldi	r24, 0x89	; 137
    135e:	91 e0       	ldi	r25, 0x01	; 1
    1360:	6e 2d       	mov	r22, r14
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	40 e0       	ldi	r20, 0x00	; 0
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	0e 94 2b 1a 	call	0x3456	; 0x3456 <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    136c:	8c 2d       	mov	r24, r12
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	8e 19       	sub	r24, r14
    1372:	91 09       	sbc	r25, r1
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	0e 94 e6 19 	call	0x33cc	; 0x33cc <Endpoint_Null_Stream>
    137c:	80 91 e8 00 	lds	r24, 0x00E8
    1380:	8e 77       	andi	r24, 0x7E	; 126
    1382:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    1386:	f8 01       	movw	r30, r16
    1388:	84 89       	ldd	r24, Z+20	; 0x14
    138a:	95 89       	ldd	r25, Z+21	; 0x15
    138c:	a6 89       	ldd	r26, Z+22	; 0x16
    138e:	b7 89       	ldd	r27, Z+23	; 0x17
    1390:	8e 19       	sub	r24, r14
    1392:	91 09       	sbc	r25, r1
    1394:	a1 09       	sbc	r26, r1
    1396:	b1 09       	sbc	r27, r1
    1398:	66 c0       	rjmp	.+204    	; 0x1466 <SCSI_DecodeSCSICommand+0x200>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (VIRTUAL_MEMORY_BLOCKS - 1);
    139a:	8f ef       	ldi	r24, 0xFF	; 255
    139c:	9f e7       	ldi	r25, 0x7F	; 127
    139e:	a0 e0       	ldi	r26, 0x00	; 0
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	9a 83       	std	Y+2, r25	; 0x02
    13a6:	ab 83       	std	Y+3, r26	; 0x03
    13a8:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	92 e0       	ldi	r25, 0x02	; 2
    13ae:	a0 e0       	ldi	r26, 0x00	; 0
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	8d 83       	std	Y+5, r24	; 0x05
    13b4:	9e 83       	std	Y+6, r25	; 0x06
    13b6:	af 83       	std	Y+7, r26	; 0x07
    13b8:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
    13ba:	ce 01       	movw	r24, r28
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	64 e0       	ldi	r22, 0x04	; 4
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	40 e0       	ldi	r20, 0x00	; 0
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	0e 94 88 1a 	call	0x3510	; 0x3510 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
    13ca:	ce 01       	movw	r24, r28
    13cc:	05 96       	adiw	r24, 0x05	; 5
    13ce:	64 e0       	ldi	r22, 0x04	; 4
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	50 e0       	ldi	r21, 0x00	; 0
    13d6:	0e 94 88 1a 	call	0x3510	; 0x3510 <Endpoint_Write_Stream_BE>
    13da:	80 91 e8 00 	lds	r24, 0x00E8
    13de:	8e 77       	andi	r24, 0x7E	; 126
    13e0:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
    13e4:	f8 01       	movw	r30, r16
    13e6:	84 89       	ldd	r24, Z+20	; 0x14
    13e8:	95 89       	ldd	r25, Z+21	; 0x15
    13ea:	a6 89       	ldd	r26, Z+22	; 0x16
    13ec:	b7 89       	ldd	r27, Z+23	; 0x17
    13ee:	08 97       	sbiw	r24, 0x08	; 8
    13f0:	a1 09       	sbc	r26, r1
    13f2:	b1 09       	sbc	r27, r1
    13f4:	38 c0       	rjmp	.+112    	; 0x1466 <SCSI_DecodeSCSICommand+0x200>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
    13f6:	f8 01       	movw	r30, r16
    13f8:	84 8d       	ldd	r24, Z+28	; 0x1c
    13fa:	82 fd       	sbrc	r24, 2
    13fc:	08 c0       	rjmp	.+16     	; 0x140e <SCSI_DecodeSCSICommand+0x1a8>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    13fe:	80 91 8b 01 	lds	r24, 0x018B
    1402:	80 7f       	andi	r24, 0xF0	; 240
    1404:	85 60       	ori	r24, 0x05	; 5
    1406:	80 93 8b 01 	sts	0x018B, r24
    140a:	84 e2       	ldi	r24, 0x24	; 36
    140c:	3e c0       	rjmp	.+124    	; 0x148a <SCSI_DecodeSCSICommand+0x224>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
    140e:	b0 dd       	rcall	.-1184   	; 0xf70 <DataflashManager_CheckDataflashOperation>
    1410:	88 23       	and	r24, r24
    1412:	71 f5       	brne	.+92     	; 0x1470 <SCSI_DecodeSCSICommand+0x20a>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
    1414:	80 91 8b 01 	lds	r24, 0x018B
    1418:	80 7f       	andi	r24, 0xF0	; 240
    141a:	84 60       	ori	r24, 0x04	; 4
    141c:	80 93 8b 01 	sts	0x018B, r24
    1420:	10 92 95 01 	sts	0x0195, r1
    1424:	10 92 96 01 	sts	0x0196, r1
    1428:	3e c0       	rjmp	.+124    	; 0x14a6 <SCSI_DecodeSCSICommand+0x240>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
    142a:	c8 01       	movw	r24, r16
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <SCSI_DecodeSCSICommand+0x1ce>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
    1430:	c8 01       	movw	r24, r16
    1432:	61 e0       	ldi	r22, 0x01	; 1
    1434:	b8 de       	rcall	.-656    	; 0x11a6 <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
    1436:	88 23       	and	r24, r24
    1438:	b1 f1       	breq	.+108    	; 0x14a6 <SCSI_DecodeSCSICommand+0x240>
    143a:	2a c0       	rjmp	.+84     	; 0x1490 <SCSI_DecodeSCSICommand+0x22a>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    143c:	10 92 f1 00 	sts	0x00F1, r1
    1440:	10 92 f1 00 	sts	0x00F1, r1
    1444:	10 92 f1 00 	sts	0x00F1, r1
    1448:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    144c:	80 91 e8 00 	lds	r24, 0x00E8
    1450:	8e 77       	andi	r24, 0x7E	; 126
    1452:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
    1456:	f8 01       	movw	r30, r16
    1458:	84 89       	ldd	r24, Z+20	; 0x14
    145a:	95 89       	ldd	r25, Z+21	; 0x15
    145c:	a6 89       	ldd	r26, Z+22	; 0x16
    145e:	b7 89       	ldd	r27, Z+23	; 0x17
    1460:	04 97       	sbiw	r24, 0x04	; 4
    1462:	a1 09       	sbc	r26, r1
    1464:	b1 09       	sbc	r27, r1
    1466:	84 8b       	std	Z+20, r24	; 0x14
    1468:	95 8b       	std	Z+21, r25	; 0x15
    146a:	a6 8b       	std	Z+22, r26	; 0x16
    146c:	b7 8b       	std	Z+23, r27	; 0x17
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
			break;
    146e:	10 c0       	rjmp	.+32     	; 0x1490 <SCSI_DecodeSCSICommand+0x22a>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    1470:	f8 01       	movw	r30, r16
    1472:	14 8a       	std	Z+20, r1	; 0x14
    1474:	15 8a       	std	Z+21, r1	; 0x15
    1476:	16 8a       	std	Z+22, r1	; 0x16
    1478:	17 8a       	std	Z+23, r1	; 0x17
    147a:	0a c0       	rjmp	.+20     	; 0x1490 <SCSI_DecodeSCSICommand+0x22a>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    147c:	80 91 8b 01 	lds	r24, 0x018B
    1480:	80 7f       	andi	r24, 0xF0	; 240
    1482:	85 60       	ori	r24, 0x05	; 5
    1484:	80 93 8b 01 	sts	0x018B, r24
    1488:	80 e2       	ldi	r24, 0x20	; 32
    148a:	80 93 95 01 	sts	0x0195, r24
    148e:	ca cf       	rjmp	.-108    	; 0x1424 <SCSI_DecodeSCSICommand+0x1be>
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
    1490:	80 91 8b 01 	lds	r24, 0x018B
    1494:	80 7f       	andi	r24, 0xF0	; 240
    1496:	80 93 8b 01 	sts	0x018B, r24
    149a:	10 92 95 01 	sts	0x0195, r1
    149e:	10 92 96 01 	sts	0x0196, r1
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <SCSI_DecodeSCSICommand+0x242>
	}

	return false;
    14a6:	80 e0       	ldi	r24, 0x00	; 0
}
    14a8:	28 96       	adiw	r28, 0x08	; 8
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	ff 90       	pop	r15
    14be:	ef 90       	pop	r14
    14c0:	df 90       	pop	r13
    14c2:	cf 90       	pop	r12
    14c4:	08 95       	ret

000014c6 <disk_initialize>:
DSTATUS disk_initialize (
	BYTE drv				/* Physical drive number (0..) */
)
{
	return FR_OK;
}
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	08 95       	ret

000014ca <disk_status>:
DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0..) */
)
{
	return FR_OK;
}
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	08 95       	ret

000014ce <disk_read>:
	BYTE drv,		/* Physical drive number (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..128) */
)
{
    14ce:	0f 93       	push	r16
    14d0:	fb 01       	movw	r30, r22
    14d2:	ca 01       	movw	r24, r20
    14d4:	b9 01       	movw	r22, r18
    14d6:	40 2f       	mov	r20, r16
	DataflashManager_ReadBlocks_RAM(sector, count, buff);
    14d8:	50 e0       	ldi	r21, 0x00	; 0
    14da:	9f 01       	movw	r18, r30
    14dc:	68 dc       	rcall	.-1840   	; 0xdae <DataflashManager_ReadBlocks_RAM>
	return RES_OK;
}
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	0f 91       	pop	r16
    14e2:	08 95       	ret

000014e4 <disk_write>:
	BYTE drv,			/* Physical drive number (0..) */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..128) */
)
{
    14e4:	0f 93       	push	r16
    14e6:	fb 01       	movw	r30, r22
    14e8:	ca 01       	movw	r24, r20
    14ea:	b9 01       	movw	r22, r18
    14ec:	40 2f       	mov	r20, r16
	DataflashManager_WriteBlocks_RAM(sector, count, buff);
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	9f 01       	movw	r18, r30
    14f2:	91 db       	rcall	.-2270   	; 0xc16 <DataflashManager_WriteBlocks_RAM>
	return RES_OK;
}
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	0f 91       	pop	r16
    14f8:	08 95       	ret

000014fa <disk_ioctl>:
	BYTE drv,		/* Physical drive number (0..) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	if (ctrl == CTRL_SYNC)
    14fa:	66 23       	and	r22, r22
    14fc:	11 f4       	brne	.+4      	; 0x1502 <disk_ioctl+0x8>
	  return RES_OK;
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	08 95       	ret
	else
	  return RES_PARERR;
    1502:	84 e0       	ldi	r24, 0x04	; 4
}
    1504:	08 95       	ret

00001506 <get_fattime>:


DWORD get_fattime (void)
{
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	00 d0       	rcall	.+0      	; 0x150c <get_fattime+0x6>
    150c:	00 d0       	rcall	.+0      	; 0x150e <get_fattime+0x8>
    150e:	00 d0       	rcall	.+0      	; 0x1510 <get_fattime+0xa>
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
	TimeDate_t CurrTimeDate;

	DS1307_GetTimeDate(&CurrTimeDate);
    1514:	ce 01       	movw	r24, r28
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	c2 dd       	rcall	.-1148   	; 0x109e <DS1307_GetTimeDate>


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
	             ((DWORD)CurrTimeDate.Month << 21) |
	               ((DWORD)CurrTimeDate.Day << 16) |
    151a:	2c 81       	ldd	r18, Y+4	; 0x04
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e0       	ldi	r20, 0x00	; 0
    1520:	50 e0       	ldi	r21, 0x00	; 0
    1522:	a9 01       	movw	r20, r18
    1524:	33 27       	eor	r19, r19
    1526:	22 27       	eor	r18, r18

	DS1307_GetTimeDate(&CurrTimeDate);


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
	             ((DWORD)CurrTimeDate.Month << 21) |
    1528:	8d 81       	ldd	r24, Y+5	; 0x05
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a0 e0       	ldi	r26, 0x00	; 0
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	f5 e1       	ldi	r31, 0x15	; 21
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	aa 1f       	adc	r26, r26
    1538:	bb 1f       	adc	r27, r27
    153a:	fa 95       	dec	r31
    153c:	d1 f7       	brne	.-12     	; 0x1532 <get_fattime+0x2c>
	TimeDate_t CurrTimeDate;

	DS1307_GetTimeDate(&CurrTimeDate);


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
    153e:	28 2b       	or	r18, r24
    1540:	39 2b       	or	r19, r25
    1542:	4a 2b       	or	r20, r26
    1544:	5b 2b       	or	r21, r27
	             ((DWORD)CurrTimeDate.Month << 21) |
	               ((DWORD)CurrTimeDate.Day << 16) |
	              ((DWORD)CurrTimeDate.Hour << 11) |
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	a0 e0       	ldi	r26, 0x00	; 0
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	eb e0       	ldi	r30, 0x0B	; 11
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	aa 1f       	adc	r26, r26
    1556:	bb 1f       	adc	r27, r27
    1558:	ea 95       	dec	r30
    155a:	d1 f7       	brne	.-12     	; 0x1550 <get_fattime+0x4a>

	DS1307_GetTimeDate(&CurrTimeDate);


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
	             ((DWORD)CurrTimeDate.Month << 21) |
    155c:	28 2b       	or	r18, r24
    155e:	39 2b       	or	r19, r25
    1560:	4a 2b       	or	r20, r26
    1562:	5b 2b       	or	r21, r27
	               ((DWORD)CurrTimeDate.Day << 16) |
	              ((DWORD)CurrTimeDate.Hour << 11) |
	             ((DWORD)CurrTimeDate.Minute << 5) |
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	a0 e0       	ldi	r26, 0x00	; 0
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	75 e0       	ldi	r23, 0x05	; 5
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	aa 1f       	adc	r26, r26
    1574:	bb 1f       	adc	r27, r27
    1576:	7a 95       	dec	r23
    1578:	d1 f7       	brne	.-12     	; 0x156e <get_fattime+0x68>
	DS1307_GetTimeDate(&CurrTimeDate);


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
	             ((DWORD)CurrTimeDate.Month << 21) |
	               ((DWORD)CurrTimeDate.Day << 16) |
    157a:	28 2b       	or	r18, r24
    157c:	39 2b       	or	r19, r25
    157e:	4a 2b       	or	r20, r26
    1580:	5b 2b       	or	r21, r27
	              ((DWORD)CurrTimeDate.Hour << 11) |
	             ((DWORD)CurrTimeDate.Minute << 5) |
	      (((DWORD)CurrTimeDate.Second >> 1) << 0);
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	86 95       	lsr	r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	a0 e0       	ldi	r26, 0x00	; 0
    158a:	b0 e0       	ldi	r27, 0x00	; 0


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
	             ((DWORD)CurrTimeDate.Month << 21) |
	               ((DWORD)CurrTimeDate.Day << 16) |
	              ((DWORD)CurrTimeDate.Hour << 11) |
    158c:	28 2b       	or	r18, r24
    158e:	39 2b       	or	r19, r25
    1590:	4a 2b       	or	r20, r26
    1592:	5b 2b       	or	r21, r27
	TimeDate_t CurrTimeDate;

	DS1307_GetTimeDate(&CurrTimeDate);


	return ((DWORD)(20 + CurrTimeDate.Year) << 25) |
    1594:	8e 81       	ldd	r24, Y+6	; 0x06
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	44 96       	adiw	r24, 0x14	; 20
    159a:	aa 27       	eor	r26, r26
    159c:	97 fd       	sbrc	r25, 7
    159e:	a0 95       	com	r26
    15a0:	ba 2f       	mov	r27, r26
    15a2:	69 e1       	ldi	r22, 0x19	; 25
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	aa 1f       	adc	r26, r26
    15aa:	bb 1f       	adc	r27, r27
    15ac:	6a 95       	dec	r22
    15ae:	d1 f7       	brne	.-12     	; 0x15a4 <get_fattime+0x9e>
    15b0:	28 2b       	or	r18, r24
    15b2:	39 2b       	or	r19, r25
    15b4:	4a 2b       	or	r20, r26
    15b6:	5b 2b       	or	r21, r27
	             ((DWORD)CurrTimeDate.Month << 21) |
	               ((DWORD)CurrTimeDate.Day << 16) |
	              ((DWORD)CurrTimeDate.Hour << 11) |
	             ((DWORD)CurrTimeDate.Minute << 5) |
	      (((DWORD)CurrTimeDate.Second >> 1) << 0);
}
    15b8:	b9 01       	movw	r22, r18
    15ba:	ca 01       	movw	r24, r20
    15bc:	26 96       	adiw	r28, 0x06	; 6
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
	BYTE *d = (BYTE*)dst;
    15d2:	9c 01       	movw	r18, r24
	const BYTE *s = (const BYTE*)src;
    15d4:	cb 01       	movw	r24, r22
    15d6:	db 01       	movw	r26, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    15d8:	f9 01       	movw	r30, r18
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
    15da:	ba 01       	movw	r22, r20
    15dc:	06 c0       	rjmp	.+12     	; 0x15ea <mem_cpy+0x1c>
		*(int*)d = *(int*)s;
    15de:	cd 91       	ld	r28, X+
    15e0:	dd 91       	ld	r29, X+
    15e2:	c1 93       	st	Z+, r28
    15e4:	d1 93       	st	Z+, r29
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
    15e6:	62 50       	subi	r22, 0x02	; 2
    15e8:	70 40       	sbci	r23, 0x00	; 0
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
    15ea:	62 30       	cpi	r22, 0x02	; 2
    15ec:	71 05       	cpc	r23, r1
    15ee:	b8 f7       	brcc	.-18     	; 0x15de <mem_cpy+0x10>
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    15f0:	ba 01       	movw	r22, r20
    15f2:	6e 7f       	andi	r22, 0xFE	; 254
    15f4:	26 0f       	add	r18, r22
    15f6:	37 1f       	adc	r19, r23
    15f8:	86 0f       	add	r24, r22
    15fa:	97 1f       	adc	r25, r23
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    15fc:	40 ff       	sbrs	r20, 0
    15fe:	04 c0       	rjmp	.+8      	; 0x1608 <mem_cpy+0x3a>
		*d++ = *s++;
    1600:	fc 01       	movw	r30, r24
    1602:	80 81       	ld	r24, Z
    1604:	f9 01       	movw	r30, r18
    1606:	80 83       	st	Z, r24
}
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	08 95       	ret

0000160e <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    160e:	28 2f       	mov	r18, r24
    1610:	39 2f       	mov	r19, r25
    1612:	f9 01       	movw	r30, r18

	while (cnt--)
    1614:	03 c0       	rjmp	.+6      	; 0x161c <mem_set+0xe>
		*d++ = (BYTE)val;
    1616:	61 93       	st	Z+, r22
    1618:	41 50       	subi	r20, 0x01	; 1
    161a:	50 40       	sbci	r21, 0x00	; 0
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    161c:	41 15       	cp	r20, r1
    161e:	51 05       	cpc	r21, r1
    1620:	d1 f7       	brne	.-12     	; 0x1616 <mem_set+0x8>
		*d++ = (BYTE)val;
}
    1622:	08 95       	ret

00001624 <st_clust>:
void st_clust (
	BYTE *dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
    1624:	fc 01       	movw	r30, r24
    1626:	53 8f       	std	Z+27, r21	; 0x1b
    1628:	42 8f       	std	Z+26, r20	; 0x1a
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
    162a:	75 8b       	std	Z+21, r23	; 0x15
    162c:	64 8b       	std	Z+20, r22	; 0x14
}
    162e:	08 95       	ret

00001630 <validate>:
)
{
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
    1630:	fc 01       	movw	r30, r24
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
    1632:	a0 81       	ld	r26, Z
    1634:	b1 81       	ldd	r27, Z+1	; 0x01
    1636:	10 97       	sbiw	r26, 0x00	; 0
    1638:	99 f0       	breq	.+38     	; 0x1660 <validate+0x30>
    163a:	8c 91       	ld	r24, X
    163c:	88 23       	and	r24, r24
    163e:	81 f0       	breq	.+32     	; 0x1660 <validate+0x30>
    1640:	16 96       	adiw	r26, 0x06	; 6
    1642:	2d 91       	ld	r18, X+
    1644:	3c 91       	ld	r19, X
    1646:	17 97       	sbiw	r26, 0x07	; 7
    1648:	82 81       	ldd	r24, Z+2	; 0x02
    164a:	93 81       	ldd	r25, Z+3	; 0x03
    164c:	28 17       	cp	r18, r24
    164e:	39 07       	cpc	r19, r25
    1650:	39 f4       	brne	.+14     	; 0x1660 <validate+0x30>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
    1652:	11 96       	adiw	r26, 0x01	; 1
    1654:	8c 91       	ld	r24, X
    1656:	39 df       	rcall	.-398    	; 0x14ca <disk_status>
    1658:	80 ff       	sbrs	r24, 0
    165a:	04 c0       	rjmp	.+8      	; 0x1664 <validate+0x34>
		return FR_NOT_READY;
    165c:	83 e0       	ldi	r24, 0x03	; 3
    165e:	08 95       	ret
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
    1660:	89 e0       	ldi	r24, 0x09	; 9
    1662:	08 95       	ret
	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
    1664:	80 e0       	ldi	r24, 0x00	; 0
}
    1666:	08 95       	ret

00001668 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    1668:	6f 92       	push	r6
    166a:	7f 92       	push	r7
    166c:	8f 92       	push	r8
    166e:	9f 92       	push	r9
    1670:	af 92       	push	r10
    1672:	bf 92       	push	r11
    1674:	cf 92       	push	r12
    1676:	df 92       	push	r13
    1678:	ef 92       	push	r14
    167a:	ff 92       	push	r15
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	ec 01       	movw	r28, r24
    1686:	4a 01       	movw	r8, r20
    1688:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    168a:	ca a4       	ldd	r12, Y+42	; 0x2a
    168c:	db a4       	ldd	r13, Y+43	; 0x2b
    168e:	ec a4       	ldd	r14, Y+44	; 0x2c
    1690:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    1692:	c4 16       	cp	r12, r20
    1694:	d5 06       	cpc	r13, r21
    1696:	e6 06       	cpc	r14, r22
    1698:	f7 06       	cpc	r15, r23
    169a:	09 f4       	brne	.+2      	; 0x169e <move_window+0x36>
    169c:	49 c0       	rjmp	.+146    	; 0x1730 <move_window+0xc8>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    169e:	8c 81       	ldd	r24, Y+4	; 0x04
    16a0:	88 23       	and	r24, r24
    16a2:	91 f1       	breq	.+100    	; 0x1708 <move_window+0xa0>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    16a4:	8e e2       	ldi	r24, 0x2E	; 46
    16a6:	68 2e       	mov	r6, r24
    16a8:	71 2c       	mov	r7, r1
    16aa:	6c 0e       	add	r6, r28
    16ac:	7d 1e       	adc	r7, r29
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	b3 01       	movw	r22, r6
    16b2:	a7 01       	movw	r20, r14
    16b4:	96 01       	movw	r18, r12
    16b6:	01 e0       	ldi	r16, 0x01	; 1
    16b8:	15 df       	rcall	.-470    	; 0x14e4 <disk_write>
    16ba:	88 23       	and	r24, r24
    16bc:	d9 f5       	brne	.+118    	; 0x1734 <move_window+0xcc>
				return FR_DISK_ERR;
			fs->wflag = 0;
    16be:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    16c0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16c2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16c4:	ac 8d       	ldd	r26, Y+28	; 0x1c
    16c6:	bd 8d       	ldd	r27, Y+29	; 0x1d
    16c8:	2e 8d       	ldd	r18, Y+30	; 0x1e
    16ca:	3f 8d       	ldd	r19, Y+31	; 0x1f
    16cc:	48 a1       	ldd	r20, Y+32	; 0x20
    16ce:	59 a1       	ldd	r21, Y+33	; 0x21
    16d0:	82 0f       	add	r24, r18
    16d2:	93 1f       	adc	r25, r19
    16d4:	a4 1f       	adc	r26, r20
    16d6:	b5 1f       	adc	r27, r21
    16d8:	c8 16       	cp	r12, r24
    16da:	d9 06       	cpc	r13, r25
    16dc:	ea 06       	cpc	r14, r26
    16de:	fb 06       	cpc	r15, r27
    16e0:	98 f4       	brcc	.+38     	; 0x1708 <move_window+0xa0>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    16e2:	1b 81       	ldd	r17, Y+3	; 0x03
    16e4:	0f c0       	rjmp	.+30     	; 0x1704 <move_window+0x9c>
					wsect += fs->fsize;
    16e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16ea:	ac 8d       	ldd	r26, Y+28	; 0x1c
    16ec:	bd 8d       	ldd	r27, Y+29	; 0x1d
    16ee:	c8 0e       	add	r12, r24
    16f0:	d9 1e       	adc	r13, r25
    16f2:	ea 1e       	adc	r14, r26
    16f4:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	b3 01       	movw	r22, r6
    16fa:	a7 01       	movw	r20, r14
    16fc:	96 01       	movw	r18, r12
    16fe:	01 e0       	ldi	r16, 0x01	; 1
    1700:	f1 de       	rcall	.-542    	; 0x14e4 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    1702:	11 50       	subi	r17, 0x01	; 1
    1704:	12 30       	cpi	r17, 0x02	; 2
    1706:	78 f7       	brcc	.-34     	; 0x16e6 <move_window+0x7e>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    1708:	81 14       	cp	r8, r1
    170a:	91 04       	cpc	r9, r1
    170c:	a1 04       	cpc	r10, r1
    170e:	b1 04       	cpc	r11, r1
    1710:	79 f0       	breq	.+30     	; 0x1730 <move_window+0xc8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    1712:	be 01       	movw	r22, r28
    1714:	62 5d       	subi	r22, 0xD2	; 210
    1716:	7f 4f       	sbci	r23, 0xFF	; 255
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	a5 01       	movw	r20, r10
    171c:	94 01       	movw	r18, r8
    171e:	01 e0       	ldi	r16, 0x01	; 1
    1720:	d6 de       	rcall	.-596    	; 0x14ce <disk_read>
    1722:	88 23       	and	r24, r24
    1724:	39 f4       	brne	.+14     	; 0x1734 <move_window+0xcc>
				return FR_DISK_ERR;
			fs->winsect = sector;
    1726:	8a a6       	std	Y+42, r8	; 0x2a
    1728:	9b a6       	std	Y+43, r9	; 0x2b
    172a:	ac a6       	std	Y+44, r10	; 0x2c
    172c:	bd a6       	std	Y+45, r11	; 0x2d
    172e:	03 c0       	rjmp	.+6      	; 0x1736 <move_window+0xce>
		}
	}

	return FR_OK;
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	01 c0       	rjmp	.+2      	; 0x1736 <move_window+0xce>
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
    1734:	81 e0       	ldi	r24, 0x01	; 1
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	ef 90       	pop	r14
    1742:	df 90       	pop	r13
    1744:	cf 90       	pop	r12
    1746:	bf 90       	pop	r11
    1748:	af 90       	pop	r10
    174a:	9f 90       	pop	r9
    174c:	8f 90       	pop	r8
    174e:	7f 90       	pop	r7
    1750:	6f 90       	pop	r6
    1752:	08 95       	ret

00001754 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    1754:	ef 92       	push	r14
    1756:	ff 92       	push	r15
    1758:	0f 93       	push	r16
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	ec 01       	movw	r28, r24
    1760:	9a 01       	movw	r18, r20
    1762:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    1764:	9e e2       	ldi	r25, 0x2E	; 46
    1766:	e9 2e       	mov	r14, r25
    1768:	f1 2c       	mov	r15, r1
    176a:	ec 0e       	add	r14, r28
    176c:	fd 1e       	adc	r15, r29
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	b7 01       	movw	r22, r14
    1772:	01 e0       	ldi	r16, 0x01	; 1
    1774:	ac de       	rcall	.-680    	; 0x14ce <disk_read>
    1776:	88 23       	and	r24, r24
    1778:	41 f5       	brne	.+80     	; 0x17ca <check_fs+0x76>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    177a:	fe 01       	movw	r30, r28
    177c:	e4 5d       	subi	r30, 0xD4	; 212
    177e:	fd 4f       	sbci	r31, 0xFD	; 253
    1780:	80 81       	ld	r24, Z
    1782:	91 81       	ldd	r25, Z+1	; 0x01
    1784:	2a ea       	ldi	r18, 0xAA	; 170
    1786:	85 35       	cpi	r24, 0x55	; 85
    1788:	92 07       	cpc	r25, r18
    178a:	09 f5       	brne	.+66     	; 0x17ce <check_fs+0x7a>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    178c:	f7 01       	movw	r30, r14
    178e:	86 a9       	ldd	r24, Z+54	; 0x36
    1790:	97 a9       	ldd	r25, Z+55	; 0x37
    1792:	a0 ad       	ldd	r26, Z+56	; 0x38
    1794:	b1 ad       	ldd	r27, Z+57	; 0x39
    1796:	b0 70       	andi	r27, 0x00	; 0
    1798:	86 34       	cpi	r24, 0x46	; 70
    179a:	f1 e4       	ldi	r31, 0x41	; 65
    179c:	9f 07       	cpc	r25, r31
    179e:	f4 e5       	ldi	r31, 0x54	; 84
    17a0:	af 07       	cpc	r26, r31
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	bf 07       	cpc	r27, r31
    17a6:	a9 f0       	breq	.+42     	; 0x17d2 <check_fs+0x7e>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    17a8:	c0 58       	subi	r28, 0x80	; 128
    17aa:	df 4f       	sbci	r29, 0xFF	; 255
    17ac:	28 81       	ld	r18, Y
    17ae:	39 81       	ldd	r19, Y+1	; 0x01
    17b0:	4a 81       	ldd	r20, Y+2	; 0x02
    17b2:	5b 81       	ldd	r21, Y+3	; 0x03
    17b4:	50 70       	andi	r21, 0x00	; 0
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	26 34       	cpi	r18, 0x46	; 70
    17ba:	91 e4       	ldi	r25, 0x41	; 65
    17bc:	39 07       	cpc	r19, r25
    17be:	94 e5       	ldi	r25, 0x54	; 84
    17c0:	49 07       	cpc	r20, r25
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	59 07       	cpc	r21, r25
    17c6:	31 f4       	brne	.+12     	; 0x17d4 <check_fs+0x80>
    17c8:	04 c0       	rjmp	.+8      	; 0x17d2 <check_fs+0x7e>
    17ca:	83 e0       	ldi	r24, 0x03	; 3
    17cc:	03 c0       	rjmp	.+6      	; 0x17d4 <check_fs+0x80>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
    17ce:	82 e0       	ldi	r24, 0x02	; 2
    17d0:	01 c0       	rjmp	.+2      	; 0x17d4 <check_fs+0x80>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
    17d2:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	0f 91       	pop	r16
    17da:	ff 90       	pop	r15
    17dc:	ef 90       	pop	r14
    17de:	08 95       	ret

000017e0 <ld_clust.clone.0>:
	BYTE *dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
    17e0:	fb 01       	movw	r30, r22
    17e2:	22 8d       	ldd	r18, Z+26	; 0x1a
    17e4:	33 8d       	ldd	r19, Z+27	; 0x1b
    17e6:	40 e0       	ldi	r20, 0x00	; 0
    17e8:	50 e0       	ldi	r21, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
    17ea:	83 30       	cpi	r24, 0x03	; 3
    17ec:	59 f4       	brne	.+22     	; 0x1804 <ld_clust.clone.0+0x24>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
    17ee:	84 89       	ldd	r24, Z+20	; 0x14
    17f0:	95 89       	ldd	r25, Z+21	; 0x15
    17f2:	a0 e0       	ldi	r26, 0x00	; 0
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	dc 01       	movw	r26, r24
    17f8:	99 27       	eor	r25, r25
    17fa:	88 27       	eor	r24, r24
    17fc:	28 2b       	or	r18, r24
    17fe:	39 2b       	or	r19, r25
    1800:	4a 2b       	or	r20, r26
    1802:	5b 2b       	or	r21, r27

	return cl;
}
    1804:	b9 01       	movw	r22, r18
    1806:	ca 01       	movw	r24, r20
    1808:	08 95       	ret

0000180a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	ec 01       	movw	r28, r24
    1810:	cb 01       	movw	r24, r22
    1812:	ba 01       	movw	r22, r20
	clst -= 2;
    1814:	62 50       	subi	r22, 0x02	; 2
    1816:	70 40       	sbci	r23, 0x00	; 0
    1818:	80 40       	sbci	r24, 0x00	; 0
    181a:	90 40       	sbci	r25, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    181c:	2e 89       	ldd	r18, Y+22	; 0x16
    181e:	3f 89       	ldd	r19, Y+23	; 0x17
    1820:	48 8d       	ldd	r20, Y+24	; 0x18
    1822:	59 8d       	ldd	r21, Y+25	; 0x19
    1824:	22 50       	subi	r18, 0x02	; 2
    1826:	30 40       	sbci	r19, 0x00	; 0
    1828:	40 40       	sbci	r20, 0x00	; 0
    182a:	50 40       	sbci	r21, 0x00	; 0
    182c:	62 17       	cp	r22, r18
    182e:	73 07       	cpc	r23, r19
    1830:	84 07       	cpc	r24, r20
    1832:	95 07       	cpc	r25, r21
    1834:	88 f4       	brcc	.+34     	; 0x1858 <clust2sect+0x4e>
	return clst * fs->csize + fs->database;
    1836:	2a 81       	ldd	r18, Y+2	; 0x02
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e0       	ldi	r20, 0x00	; 0
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__mulsi3>
    1842:	9b 01       	movw	r18, r22
    1844:	ac 01       	movw	r20, r24
    1846:	8e a1       	ldd	r24, Y+38	; 0x26
    1848:	9f a1       	ldd	r25, Y+39	; 0x27
    184a:	a8 a5       	ldd	r26, Y+40	; 0x28
    184c:	b9 a5       	ldd	r27, Y+41	; 0x29
    184e:	28 0f       	add	r18, r24
    1850:	39 1f       	adc	r19, r25
    1852:	4a 1f       	adc	r20, r26
    1854:	5b 1f       	adc	r21, r27
    1856:	03 c0       	rjmp	.+6      	; 0x185e <clust2sect+0x54>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	a9 01       	movw	r20, r18
	return clst * fs->csize + fs->database;
}
    185e:	b9 01       	movw	r22, r18
    1860:	ca 01       	movw	r24, r20
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	08 95       	ret

00001868 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    1868:	bf 92       	push	r11
    186a:	cf 92       	push	r12
    186c:	df 92       	push	r13
    186e:	ef 92       	push	r14
    1870:	ff 92       	push	r15
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	ec 01       	movw	r28, r24
    187c:	6a 01       	movw	r12, r20
    187e:	7b 01       	movw	r14, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
    1880:	42 30       	cpi	r20, 0x02	; 2
    1882:	51 05       	cpc	r21, r1
    1884:	61 05       	cpc	r22, r1
    1886:	71 05       	cpc	r23, r1
    1888:	08 f4       	brcc	.+2      	; 0x188c <get_fat+0x24>
    188a:	9e c0       	rjmp	.+316    	; 0x19c8 <get_fat+0x160>
    188c:	8e 89       	ldd	r24, Y+22	; 0x16
    188e:	9f 89       	ldd	r25, Y+23	; 0x17
    1890:	a8 8d       	ldd	r26, Y+24	; 0x18
    1892:	b9 8d       	ldd	r27, Y+25	; 0x19
    1894:	48 17       	cp	r20, r24
    1896:	59 07       	cpc	r21, r25
    1898:	6a 07       	cpc	r22, r26
    189a:	7b 07       	cpc	r23, r27
    189c:	08 f0       	brcs	.+2      	; 0x18a0 <get_fat+0x38>
    189e:	94 c0       	rjmp	.+296    	; 0x19c8 <get_fat+0x160>
		return 1;

	switch (fs->fs_type) {
    18a0:	88 81       	ld	r24, Y
    18a2:	82 30       	cpi	r24, 0x02	; 2
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <get_fat+0x40>
    18a6:	54 c0       	rjmp	.+168    	; 0x1950 <get_fat+0xe8>
    18a8:	83 30       	cpi	r24, 0x03	; 3
    18aa:	09 f4       	brne	.+2      	; 0x18ae <get_fat+0x46>
    18ac:	6c c0       	rjmp	.+216    	; 0x1986 <get_fat+0x11e>
    18ae:	81 30       	cpi	r24, 0x01	; 1
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <get_fat+0x4c>
    18b2:	8f c0       	rjmp	.+286    	; 0x19d2 <get_fat+0x16a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    18b4:	8a 01       	movw	r16, r20
    18b6:	16 95       	lsr	r17
    18b8:	07 95       	ror	r16
    18ba:	04 0f       	add	r16, r20
    18bc:	15 1f       	adc	r17, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    18be:	a8 01       	movw	r20, r16
    18c0:	45 2f       	mov	r20, r21
    18c2:	55 27       	eor	r21, r21
    18c4:	46 95       	lsr	r20
    18c6:	60 e0       	ldi	r22, 0x00	; 0
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18cc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18ce:	a8 a1       	ldd	r26, Y+32	; 0x20
    18d0:	b9 a1       	ldd	r27, Y+33	; 0x21
    18d2:	48 0f       	add	r20, r24
    18d4:	59 1f       	adc	r21, r25
    18d6:	6a 1f       	adc	r22, r26
    18d8:	7b 1f       	adc	r23, r27
    18da:	ce 01       	movw	r24, r28
    18dc:	c5 de       	rcall	.-630    	; 0x1668 <move_window>
    18de:	88 23       	and	r24, r24
    18e0:	09 f0       	breq	.+2      	; 0x18e4 <get_fat+0x7c>
    18e2:	77 c0       	rjmp	.+238    	; 0x19d2 <get_fat+0x16a>
		wc = fs->win[bc % SS(fs)]; bc++;
    18e4:	f8 01       	movw	r30, r16
    18e6:	f1 70       	andi	r31, 0x01	; 1
    18e8:	ec 0f       	add	r30, r28
    18ea:	fd 1f       	adc	r31, r29
    18ec:	b6 a4       	ldd	r11, Z+46	; 0x2e
    18ee:	0f 5f       	subi	r16, 0xFF	; 255
    18f0:	1f 4f       	sbci	r17, 0xFF	; 255
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    18f2:	a8 01       	movw	r20, r16
    18f4:	45 2f       	mov	r20, r21
    18f6:	55 27       	eor	r21, r21
    18f8:	46 95       	lsr	r20
    18fa:	60 e0       	ldi	r22, 0x00	; 0
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1900:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1902:	a8 a1       	ldd	r26, Y+32	; 0x20
    1904:	b9 a1       	ldd	r27, Y+33	; 0x21
    1906:	48 0f       	add	r20, r24
    1908:	59 1f       	adc	r21, r25
    190a:	6a 1f       	adc	r22, r26
    190c:	7b 1f       	adc	r23, r27
    190e:	ce 01       	movw	r24, r28
    1910:	ab de       	rcall	.-682    	; 0x1668 <move_window>
    1912:	88 23       	and	r24, r24
    1914:	09 f0       	breq	.+2      	; 0x1918 <get_fat+0xb0>
    1916:	5d c0       	rjmp	.+186    	; 0x19d2 <get_fat+0x16a>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    1918:	2b 2d       	mov	r18, r11
    191a:	30 e0       	ldi	r19, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    191c:	11 70       	andi	r17, 0x01	; 1
    191e:	0c 0f       	add	r16, r28
    1920:	1d 1f       	adc	r17, r29
    1922:	f8 01       	movw	r30, r16
    1924:	96 a5       	ldd	r25, Z+46	; 0x2e
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	28 2b       	or	r18, r24
    192a:	39 2b       	or	r19, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    192c:	f1 e0       	ldi	r31, 0x01	; 1
    192e:	cf 22       	and	r12, r31
    1930:	dd 24       	eor	r13, r13
    1932:	c1 14       	cp	r12, r1
    1934:	d1 04       	cpc	r13, r1
    1936:	31 f0       	breq	.+12     	; 0x1944 <get_fat+0xdc>
    1938:	14 e0       	ldi	r17, 0x04	; 4
    193a:	36 95       	lsr	r19
    193c:	27 95       	ror	r18
    193e:	1a 95       	dec	r17
    1940:	e1 f7       	brne	.-8      	; 0x193a <get_fat+0xd2>
    1942:	1e c0       	rjmp	.+60     	; 0x1980 <get_fat+0x118>
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	3f 70       	andi	r19, 0x0F	; 15
    194a:	40 70       	andi	r20, 0x00	; 0
    194c:	50 70       	andi	r21, 0x00	; 0
    194e:	44 c0       	rjmp	.+136    	; 0x19d8 <get_fat+0x170>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    1950:	45 2f       	mov	r20, r21
    1952:	56 2f       	mov	r21, r22
    1954:	67 2f       	mov	r22, r23
    1956:	77 27       	eor	r23, r23
    1958:	8e 8d       	ldd	r24, Y+30	; 0x1e
    195a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    195c:	a8 a1       	ldd	r26, Y+32	; 0x20
    195e:	b9 a1       	ldd	r27, Y+33	; 0x21
    1960:	48 0f       	add	r20, r24
    1962:	59 1f       	adc	r21, r25
    1964:	6a 1f       	adc	r22, r26
    1966:	7b 1f       	adc	r23, r27
    1968:	ce 01       	movw	r24, r28
    196a:	7e de       	rcall	.-772    	; 0x1668 <move_window>
    196c:	88 23       	and	r24, r24
    196e:	89 f5       	brne	.+98     	; 0x19d2 <get_fat+0x16a>
		p = &fs->win[clst * 2 % SS(fs)];
    1970:	f6 01       	movw	r30, r12
    1972:	ee 0f       	add	r30, r30
    1974:	ff 1f       	adc	r31, r31
    1976:	f1 70       	andi	r31, 0x01	; 1
		return LD_WORD(p);
    1978:	ec 0f       	add	r30, r28
    197a:	fd 1f       	adc	r31, r29
    197c:	26 a5       	ldd	r18, Z+46	; 0x2e
    197e:	37 a5       	ldd	r19, Z+47	; 0x2f
    1980:	40 e0       	ldi	r20, 0x00	; 0
    1982:	50 e0       	ldi	r21, 0x00	; 0
    1984:	29 c0       	rjmp	.+82     	; 0x19d8 <get_fat+0x170>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    1986:	e7 e0       	ldi	r30, 0x07	; 7
    1988:	76 95       	lsr	r23
    198a:	67 95       	ror	r22
    198c:	57 95       	ror	r21
    198e:	47 95       	ror	r20
    1990:	ea 95       	dec	r30
    1992:	d1 f7       	brne	.-12     	; 0x1988 <get_fat+0x120>
    1994:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1996:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1998:	a8 a1       	ldd	r26, Y+32	; 0x20
    199a:	b9 a1       	ldd	r27, Y+33	; 0x21
    199c:	48 0f       	add	r20, r24
    199e:	59 1f       	adc	r21, r25
    19a0:	6a 1f       	adc	r22, r26
    19a2:	7b 1f       	adc	r23, r27
    19a4:	ce 01       	movw	r24, r28
    19a6:	60 de       	rcall	.-832    	; 0x1668 <move_window>
    19a8:	88 23       	and	r24, r24
    19aa:	99 f4       	brne	.+38     	; 0x19d2 <get_fat+0x16a>
		p = &fs->win[clst * 4 % SS(fs)];
    19ac:	f6 01       	movw	r30, r12
    19ae:	ee 0f       	add	r30, r30
    19b0:	ff 1f       	adc	r31, r31
    19b2:	ee 0f       	add	r30, r30
    19b4:	ff 1f       	adc	r31, r31
    19b6:	f1 70       	andi	r31, 0x01	; 1
		return LD_DWORD(p) & 0x0FFFFFFF;
    19b8:	ec 0f       	add	r30, r28
    19ba:	fd 1f       	adc	r31, r29
    19bc:	26 a5       	ldd	r18, Z+46	; 0x2e
    19be:	37 a5       	ldd	r19, Z+47	; 0x2f
    19c0:	40 a9       	ldd	r20, Z+48	; 0x30
    19c2:	51 a9       	ldd	r21, Z+49	; 0x31
    19c4:	5f 70       	andi	r21, 0x0F	; 15
    19c6:	08 c0       	rjmp	.+16     	; 0x19d8 <get_fat+0x170>
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
		return 1;
    19c8:	21 e0       	ldi	r18, 0x01	; 1
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e0       	ldi	r20, 0x00	; 0
    19ce:	50 e0       	ldi	r21, 0x00	; 0
    19d0:	03 c0       	rjmp	.+6      	; 0x19d8 <get_fat+0x170>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    19d2:	2f ef       	ldi	r18, 0xFF	; 255
    19d4:	3f ef       	ldi	r19, 0xFF	; 255
    19d6:	a9 01       	movw	r20, r18
}
    19d8:	b9 01       	movw	r22, r18
    19da:	ca 01       	movw	r24, r20
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	1f 91       	pop	r17
    19e2:	0f 91       	pop	r16
    19e4:	ff 90       	pop	r15
    19e6:	ef 90       	pop	r14
    19e8:	df 90       	pop	r13
    19ea:	cf 90       	pop	r12
    19ec:	bf 90       	pop	r11
    19ee:	08 95       	ret

000019f0 <dir_sdi.clone.2>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Set directory index                              */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_sdi (
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	ec 01       	movw	r28, r24
{
	DWORD clst;
	WORD ic;


	dj->index = idx;
    19fa:	1d 82       	std	Y+5, r1	; 0x05
    19fc:	1c 82       	std	Y+4, r1	; 0x04
	clst = dj->sclust;
    19fe:	4e 81       	ldd	r20, Y+6	; 0x06
    1a00:	5f 81       	ldd	r21, Y+7	; 0x07
    1a02:	68 85       	ldd	r22, Y+8	; 0x08
    1a04:	79 85       	ldd	r23, Y+9	; 0x09
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    1a06:	41 30       	cpi	r20, 0x01	; 1
    1a08:	51 05       	cpc	r21, r1
    1a0a:	61 05       	cpc	r22, r1
    1a0c:	71 05       	cpc	r23, r1
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <dir_sdi.clone.2+0x22>
    1a10:	65 c0       	rjmp	.+202    	; 0x1adc <dir_sdi.clone.2+0xec>
    1a12:	08 81       	ld	r16, Y
    1a14:	19 81       	ldd	r17, Y+1	; 0x01
    1a16:	f8 01       	movw	r30, r16
    1a18:	86 89       	ldd	r24, Z+22	; 0x16
    1a1a:	97 89       	ldd	r25, Z+23	; 0x17
    1a1c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a1e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a20:	48 17       	cp	r20, r24
    1a22:	59 07       	cpc	r21, r25
    1a24:	6a 07       	cpc	r22, r26
    1a26:	7b 07       	cpc	r23, r27
    1a28:	08 f0       	brcs	.+2      	; 0x1a2c <dir_sdi.clone.2+0x3c>
    1a2a:	58 c0       	rjmp	.+176    	; 0x1adc <dir_sdi.clone.2+0xec>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1a2c:	41 15       	cp	r20, r1
    1a2e:	51 05       	cpc	r21, r1
    1a30:	61 05       	cpc	r22, r1
    1a32:	71 05       	cpc	r23, r1
    1a34:	f9 f4       	brne	.+62     	; 0x1a74 <dir_sdi.clone.2+0x84>
    1a36:	80 81       	ld	r24, Z
    1a38:	83 30       	cpi	r24, 0x03	; 3
    1a3a:	49 f4       	brne	.+18     	; 0x1a4e <dir_sdi.clone.2+0x5e>
		clst = dj->fs->dirbase;
    1a3c:	42 a1       	ldd	r20, Z+34	; 0x22
    1a3e:	53 a1       	ldd	r21, Z+35	; 0x23
    1a40:	64 a1       	ldd	r22, Z+36	; 0x24
    1a42:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    1a44:	41 15       	cp	r20, r1
    1a46:	51 05       	cpc	r21, r1
    1a48:	61 05       	cpc	r22, r1
    1a4a:	71 05       	cpc	r23, r1
    1a4c:	99 f4       	brne	.+38     	; 0x1a74 <dir_sdi.clone.2+0x84>
		dj->clust = clst;
    1a4e:	1a 86       	std	Y+10, r1	; 0x0a
    1a50:	1b 86       	std	Y+11, r1	; 0x0b
    1a52:	1c 86       	std	Y+12, r1	; 0x0c
    1a54:	1d 86       	std	Y+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1a56:	f8 01       	movw	r30, r16
    1a58:	80 85       	ldd	r24, Z+8	; 0x08
    1a5a:	91 85       	ldd	r25, Z+9	; 0x09
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <dir_sdi.clone.2+0x72>
    1a60:	3d c0       	rjmp	.+122    	; 0x1adc <dir_sdi.clone.2+0xec>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1a62:	82 a1       	ldd	r24, Z+34	; 0x22
    1a64:	93 a1       	ldd	r25, Z+35	; 0x23
    1a66:	a4 a1       	ldd	r26, Z+36	; 0x24
    1a68:	b5 a1       	ldd	r27, Z+37	; 0x25
    1a6a:	8e 87       	std	Y+14, r24	; 0x0e
    1a6c:	9f 87       	std	Y+15, r25	; 0x0f
    1a6e:	a8 8b       	std	Y+16, r26	; 0x10
    1a70:	b9 8b       	std	Y+17, r27	; 0x11
    1a72:	2c c0       	rjmp	.+88     	; 0x1acc <dir_sdi.clone.2+0xdc>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    1a74:	f8 01       	movw	r30, r16
    1a76:	82 81       	ldd	r24, Z+2	; 0x02
		while (idx >= ic) {	/* Follow cluster chain */
    1a78:	88 23       	and	r24, r24
    1a7a:	f1 f4       	brne	.+60     	; 0x1ab8 <dir_sdi.clone.2+0xc8>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1a7c:	88 81       	ld	r24, Y
    1a7e:	99 81       	ldd	r25, Y+1	; 0x01
    1a80:	f3 de       	rcall	.-538    	; 0x1868 <get_fat>
    1a82:	ab 01       	movw	r20, r22
    1a84:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1a86:	4f 3f       	cpi	r20, 0xFF	; 255
    1a88:	ff ef       	ldi	r31, 0xFF	; 255
    1a8a:	5f 07       	cpc	r21, r31
    1a8c:	ff ef       	ldi	r31, 0xFF	; 255
    1a8e:	6f 07       	cpc	r22, r31
    1a90:	ff ef       	ldi	r31, 0xFF	; 255
    1a92:	7f 07       	cpc	r23, r31
    1a94:	09 f1       	breq	.+66     	; 0x1ad8 <dir_sdi.clone.2+0xe8>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    1a96:	42 30       	cpi	r20, 0x02	; 2
    1a98:	51 05       	cpc	r21, r1
    1a9a:	61 05       	cpc	r22, r1
    1a9c:	71 05       	cpc	r23, r1
    1a9e:	f0 f0       	brcs	.+60     	; 0x1adc <dir_sdi.clone.2+0xec>
    1aa0:	e8 81       	ld	r30, Y
    1aa2:	f9 81       	ldd	r31, Y+1	; 0x01
    1aa4:	86 89       	ldd	r24, Z+22	; 0x16
    1aa6:	97 89       	ldd	r25, Z+23	; 0x17
    1aa8:	a0 8d       	ldd	r26, Z+24	; 0x18
    1aaa:	b1 8d       	ldd	r27, Z+25	; 0x19
    1aac:	48 17       	cp	r20, r24
    1aae:	59 07       	cpc	r21, r25
    1ab0:	6a 07       	cpc	r22, r26
    1ab2:	7b 07       	cpc	r23, r27
    1ab4:	18 f3       	brcs	.-58     	; 0x1a7c <dir_sdi.clone.2+0x8c>
    1ab6:	12 c0       	rjmp	.+36     	; 0x1adc <dir_sdi.clone.2+0xec>
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1ab8:	4a 87       	std	Y+10, r20	; 0x0a
    1aba:	5b 87       	std	Y+11, r21	; 0x0b
    1abc:	6c 87       	std	Y+12, r22	; 0x0c
    1abe:	7d 87       	std	Y+13, r23	; 0x0d
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1ac0:	c8 01       	movw	r24, r16
    1ac2:	a3 de       	rcall	.-698    	; 0x180a <clust2sect>
    1ac4:	6e 87       	std	Y+14, r22	; 0x0e
    1ac6:	7f 87       	std	Y+15, r23	; 0x0f
    1ac8:	88 8b       	std	Y+16, r24	; 0x10
    1aca:	99 8b       	std	Y+17, r25	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    1acc:	02 5d       	subi	r16, 0xD2	; 210
    1ace:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad0:	1b 8b       	std	Y+19, r17	; 0x13
    1ad2:	0a 8b       	std	Y+18, r16	; 0x12

	return FR_OK;	/* Seek succeeded */
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	03 c0       	rjmp	.+6      	; 0x1ade <dir_sdi.clone.2+0xee>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	01 c0       	rjmp	.+2      	; 0x1ade <dir_sdi.clone.2+0xee>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
    1adc:	82 e0       	ldi	r24, 0x02	; 2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	1f 91       	pop	r17
    1ae4:	0f 91       	pop	r16
    1ae6:	08 95       	ret

00001ae8 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    1ae8:	8f 92       	push	r8
    1aea:	9f 92       	push	r9
    1aec:	af 92       	push	r10
    1aee:	bf 92       	push	r11
    1af0:	cf 92       	push	r12
    1af2:	df 92       	push	r13
    1af4:	ef 92       	push	r14
    1af6:	ff 92       	push	r15
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	ec 01       	movw	r28, r24
    1b02:	6a 01       	movw	r12, r20
    1b04:	7b 01       	movw	r14, r22
    1b06:	48 01       	movw	r8, r16
    1b08:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1b0a:	42 30       	cpi	r20, 0x02	; 2
    1b0c:	51 05       	cpc	r21, r1
    1b0e:	61 05       	cpc	r22, r1
    1b10:	71 05       	cpc	r23, r1
    1b12:	08 f4       	brcc	.+2      	; 0x1b16 <put_fat+0x2e>
    1b14:	bf c0       	rjmp	.+382    	; 0x1c94 <put_fat+0x1ac>
    1b16:	8e 89       	ldd	r24, Y+22	; 0x16
    1b18:	9f 89       	ldd	r25, Y+23	; 0x17
    1b1a:	a8 8d       	ldd	r26, Y+24	; 0x18
    1b1c:	b9 8d       	ldd	r27, Y+25	; 0x19
    1b1e:	48 17       	cp	r20, r24
    1b20:	59 07       	cpc	r21, r25
    1b22:	6a 07       	cpc	r22, r26
    1b24:	7b 07       	cpc	r23, r27
    1b26:	08 f0       	brcs	.+2      	; 0x1b2a <put_fat+0x42>
    1b28:	b5 c0       	rjmp	.+362    	; 0x1c94 <put_fat+0x1ac>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    1b2a:	88 81       	ld	r24, Y
    1b2c:	82 30       	cpi	r24, 0x02	; 2
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <put_fat+0x4a>
    1b30:	66 c0       	rjmp	.+204    	; 0x1bfe <put_fat+0x116>
    1b32:	83 30       	cpi	r24, 0x03	; 3
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <put_fat+0x50>
    1b36:	7d c0       	rjmp	.+250    	; 0x1c32 <put_fat+0x14a>
    1b38:	81 30       	cpi	r24, 0x01	; 1
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <put_fat+0x56>
    1b3c:	a7 c0       	rjmp	.+334    	; 0x1c8c <put_fat+0x1a4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    1b3e:	8a 01       	movw	r16, r20
    1b40:	16 95       	lsr	r17
    1b42:	07 95       	ror	r16
    1b44:	0c 0d       	add	r16, r12
    1b46:	1d 1d       	adc	r17, r13
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1b48:	a8 01       	movw	r20, r16
    1b4a:	45 2f       	mov	r20, r21
    1b4c:	55 27       	eor	r21, r21
    1b4e:	46 95       	lsr	r20
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	70 e0       	ldi	r23, 0x00	; 0
    1b54:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b56:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b58:	a8 a1       	ldd	r26, Y+32	; 0x20
    1b5a:	b9 a1       	ldd	r27, Y+33	; 0x21
    1b5c:	48 0f       	add	r20, r24
    1b5e:	59 1f       	adc	r21, r25
    1b60:	6a 1f       	adc	r22, r26
    1b62:	7b 1f       	adc	r23, r27
    1b64:	ce 01       	movw	r24, r28
    1b66:	80 dd       	rcall	.-1280   	; 0x1668 <move_window>
			if (res != FR_OK) break;
    1b68:	88 23       	and	r24, r24
    1b6a:	09 f0       	breq	.+2      	; 0x1b6e <put_fat+0x86>
    1b6c:	90 c0       	rjmp	.+288    	; 0x1c8e <put_fat+0x1a6>
			p = &fs->win[bc % SS(fs)];
    1b6e:	c8 01       	movw	r24, r16
    1b70:	91 70       	andi	r25, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1b72:	e1 e0       	ldi	r30, 0x01	; 1
    1b74:	ce 22       	and	r12, r30
    1b76:	dd 24       	eor	r13, r13
    1b78:	c1 14       	cp	r12, r1
    1b7a:	d1 04       	cpc	r13, r1
    1b7c:	51 f0       	breq	.+20     	; 0x1b92 <put_fat+0xaa>
    1b7e:	fe 01       	movw	r30, r28
    1b80:	e8 0f       	add	r30, r24
    1b82:	f9 1f       	adc	r31, r25
    1b84:	36 a5       	ldd	r19, Z+46	; 0x2e
    1b86:	3f 70       	andi	r19, 0x0F	; 15
    1b88:	28 2d       	mov	r18, r8
    1b8a:	22 95       	swap	r18
    1b8c:	20 7f       	andi	r18, 0xF0	; 240
    1b8e:	23 2b       	or	r18, r19
    1b90:	01 c0       	rjmp	.+2      	; 0x1b94 <put_fat+0xac>
    1b92:	28 2d       	mov	r18, r8
    1b94:	8c 0f       	add	r24, r28
    1b96:	9d 1f       	adc	r25, r29
    1b98:	fc 01       	movw	r30, r24
    1b9a:	26 a7       	std	Z+46, r18	; 0x2e
			bc++;
    1b9c:	0f 5f       	subi	r16, 0xFF	; 255
    1b9e:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1ba4:	a8 01       	movw	r20, r16
    1ba6:	45 2f       	mov	r20, r21
    1ba8:	55 27       	eor	r21, r21
    1baa:	46 95       	lsr	r20
    1bac:	60 e0       	ldi	r22, 0x00	; 0
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bb2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bb4:	a8 a1       	ldd	r26, Y+32	; 0x20
    1bb6:	b9 a1       	ldd	r27, Y+33	; 0x21
    1bb8:	48 0f       	add	r20, r24
    1bba:	59 1f       	adc	r21, r25
    1bbc:	6a 1f       	adc	r22, r26
    1bbe:	7b 1f       	adc	r23, r27
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	52 dd       	rcall	.-1372   	; 0x1668 <move_window>
			if (res != FR_OK) break;
    1bc4:	88 23       	and	r24, r24
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <put_fat+0xe2>
    1bc8:	62 c0       	rjmp	.+196    	; 0x1c8e <put_fat+0x1a6>
			p = &fs->win[bc % SS(fs)];
    1bca:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1bcc:	c1 14       	cp	r12, r1
    1bce:	d1 04       	cpc	r13, r1
    1bd0:	49 f0       	breq	.+18     	; 0x1be4 <put_fat+0xfc>
    1bd2:	94 e0       	ldi	r25, 0x04	; 4
    1bd4:	b6 94       	lsr	r11
    1bd6:	a7 94       	ror	r10
    1bd8:	97 94       	ror	r9
    1bda:	87 94       	ror	r8
    1bdc:	9a 95       	dec	r25
    1bde:	d1 f7       	brne	.-12     	; 0x1bd4 <put_fat+0xec>
    1be0:	98 2d       	mov	r25, r8
    1be2:	08 c0       	rjmp	.+16     	; 0x1bf4 <put_fat+0x10c>
    1be4:	fe 01       	movw	r30, r28
    1be6:	e0 0f       	add	r30, r16
    1be8:	f1 1f       	adc	r31, r17
    1bea:	96 a5       	ldd	r25, Z+46	; 0x2e
    1bec:	90 7f       	andi	r25, 0xF0	; 240
    1bee:	29 2d       	mov	r18, r9
    1bf0:	2f 70       	andi	r18, 0x0F	; 15
    1bf2:	92 2b       	or	r25, r18
    1bf4:	0c 0f       	add	r16, r28
    1bf6:	1d 1f       	adc	r17, r29
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	96 a7       	std	Z+46, r25	; 0x2e
			break;
    1bfc:	48 c0       	rjmp	.+144    	; 0x1c8e <put_fat+0x1a6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    1bfe:	45 2f       	mov	r20, r21
    1c00:	56 2f       	mov	r21, r22
    1c02:	67 2f       	mov	r22, r23
    1c04:	77 27       	eor	r23, r23
    1c06:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c08:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c0a:	a8 a1       	ldd	r26, Y+32	; 0x20
    1c0c:	b9 a1       	ldd	r27, Y+33	; 0x21
    1c0e:	48 0f       	add	r20, r24
    1c10:	59 1f       	adc	r21, r25
    1c12:	6a 1f       	adc	r22, r26
    1c14:	7b 1f       	adc	r23, r27
    1c16:	ce 01       	movw	r24, r28
    1c18:	27 dd       	rcall	.-1458   	; 0x1668 <move_window>
			if (res != FR_OK) break;
    1c1a:	88 23       	and	r24, r24
    1c1c:	c1 f5       	brne	.+112    	; 0x1c8e <put_fat+0x1a6>
			p = &fs->win[clst * 2 % SS(fs)];
    1c1e:	f6 01       	movw	r30, r12
    1c20:	ee 0f       	add	r30, r30
    1c22:	ff 1f       	adc	r31, r31
    1c24:	f1 70       	andi	r31, 0x01	; 1
    1c26:	be 96       	adiw	r30, 0x2e	; 46
			ST_WORD(p, (WORD)val);
    1c28:	ec 0f       	add	r30, r28
    1c2a:	fd 1f       	adc	r31, r29
    1c2c:	91 82       	std	Z+1, r9	; 0x01
    1c2e:	80 82       	st	Z, r8
			break;
    1c30:	2e c0       	rjmp	.+92     	; 0x1c8e <put_fat+0x1a6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    1c32:	e7 e0       	ldi	r30, 0x07	; 7
    1c34:	76 95       	lsr	r23
    1c36:	67 95       	ror	r22
    1c38:	57 95       	ror	r21
    1c3a:	47 95       	ror	r20
    1c3c:	ea 95       	dec	r30
    1c3e:	d1 f7       	brne	.-12     	; 0x1c34 <put_fat+0x14c>
    1c40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c42:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c44:	a8 a1       	ldd	r26, Y+32	; 0x20
    1c46:	b9 a1       	ldd	r27, Y+33	; 0x21
    1c48:	48 0f       	add	r20, r24
    1c4a:	59 1f       	adc	r21, r25
    1c4c:	6a 1f       	adc	r22, r26
    1c4e:	7b 1f       	adc	r23, r27
    1c50:	ce 01       	movw	r24, r28
    1c52:	0a dd       	rcall	.-1516   	; 0x1668 <move_window>
			if (res != FR_OK) break;
    1c54:	88 23       	and	r24, r24
    1c56:	d9 f4       	brne	.+54     	; 0x1c8e <put_fat+0x1a6>
			p = &fs->win[clst * 4 % SS(fs)];
    1c58:	f6 01       	movw	r30, r12
    1c5a:	ee 0f       	add	r30, r30
    1c5c:	ff 1f       	adc	r31, r31
    1c5e:	ee 0f       	add	r30, r30
    1c60:	ff 1f       	adc	r31, r31
    1c62:	f1 70       	andi	r31, 0x01	; 1
    1c64:	be 96       	adiw	r30, 0x2e	; 46
    1c66:	ec 0f       	add	r30, r28
    1c68:	fd 1f       	adc	r31, r29
			val |= LD_DWORD(p) & 0xF0000000;
    1c6a:	20 81       	ld	r18, Z
    1c6c:	31 81       	ldd	r19, Z+1	; 0x01
    1c6e:	42 81       	ldd	r20, Z+2	; 0x02
    1c70:	53 81       	ldd	r21, Z+3	; 0x03
    1c72:	20 70       	andi	r18, 0x00	; 0
    1c74:	30 70       	andi	r19, 0x00	; 0
    1c76:	40 70       	andi	r20, 0x00	; 0
    1c78:	50 7f       	andi	r21, 0xF0	; 240
    1c7a:	28 29       	or	r18, r8
    1c7c:	39 29       	or	r19, r9
    1c7e:	4a 29       	or	r20, r10
    1c80:	5b 29       	or	r21, r11
			ST_DWORD(p, val);
    1c82:	20 83       	st	Z, r18
    1c84:	31 83       	std	Z+1, r19	; 0x01
    1c86:	42 83       	std	Z+2, r20	; 0x02
    1c88:	53 83       	std	Z+3, r21	; 0x03
			break;
    1c8a:	01 c0       	rjmp	.+2      	; 0x1c8e <put_fat+0x1a6>

		default :
			res = FR_INT_ERR;
    1c8c:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
    1c8e:	91 e0       	ldi	r25, 0x01	; 1
    1c90:	9c 83       	std	Y+4, r25	; 0x04
    1c92:	01 c0       	rjmp	.+2      	; 0x1c96 <put_fat+0x1ae>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1c94:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
	}

	return res;
}
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	1f 91       	pop	r17
    1c9c:	0f 91       	pop	r16
    1c9e:	ff 90       	pop	r15
    1ca0:	ef 90       	pop	r14
    1ca2:	df 90       	pop	r13
    1ca4:	cf 90       	pop	r12
    1ca6:	bf 90       	pop	r11
    1ca8:	af 90       	pop	r10
    1caa:	9f 90       	pop	r9
    1cac:	8f 90       	pop	r8
    1cae:	08 95       	ret

00001cb0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1cb0:	4f 92       	push	r4
    1cb2:	5f 92       	push	r5
    1cb4:	6f 92       	push	r6
    1cb6:	7f 92       	push	r7
    1cb8:	8f 92       	push	r8
    1cba:	9f 92       	push	r9
    1cbc:	af 92       	push	r10
    1cbe:	bf 92       	push	r11
    1cc0:	cf 92       	push	r12
    1cc2:	df 92       	push	r13
    1cc4:	ef 92       	push	r14
    1cc6:	ff 92       	push	r15
    1cc8:	0f 93       	push	r16
    1cca:	1f 93       	push	r17
    1ccc:	cf 93       	push	r28
    1cce:	df 93       	push	r29
    1cd0:	ec 01       	movw	r28, r24
    1cd2:	2a 01       	movw	r4, r20
    1cd4:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    1cd6:	41 15       	cp	r20, r1
    1cd8:	51 05       	cpc	r21, r1
    1cda:	61 05       	cpc	r22, r1
    1cdc:	71 05       	cpc	r23, r1
    1cde:	99 f4       	brne	.+38     	; 0x1d06 <create_chain+0x56>
		scl = fs->last_clust;			/* Get suggested start point */
    1ce0:	8a 84       	ldd	r8, Y+10	; 0x0a
    1ce2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ce4:	ac 84       	ldd	r10, Y+12	; 0x0c
    1ce6:	bd 84       	ldd	r11, Y+13	; 0x0d
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1ce8:	81 14       	cp	r8, r1
    1cea:	91 04       	cpc	r9, r1
    1cec:	a1 04       	cpc	r10, r1
    1cee:	b1 04       	cpc	r11, r1
    1cf0:	01 f1       	breq	.+64     	; 0x1d32 <create_chain+0x82>
    1cf2:	8e 89       	ldd	r24, Y+22	; 0x16
    1cf4:	9f 89       	ldd	r25, Y+23	; 0x17
    1cf6:	a8 8d       	ldd	r26, Y+24	; 0x18
    1cf8:	b9 8d       	ldd	r27, Y+25	; 0x19
    1cfa:	88 16       	cp	r8, r24
    1cfc:	99 06       	cpc	r9, r25
    1cfe:	aa 06       	cpc	r10, r26
    1d00:	bb 06       	cpc	r11, r27
    1d02:	b8 f4       	brcc	.+46     	; 0x1d32 <create_chain+0x82>
    1d04:	1b c0       	rjmp	.+54     	; 0x1d3c <create_chain+0x8c>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1d06:	b0 dd       	rcall	.-1184   	; 0x1868 <get_fat>
    1d08:	9b 01       	movw	r18, r22
    1d0a:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1d0c:	62 30       	cpi	r22, 0x02	; 2
    1d0e:	71 05       	cpc	r23, r1
    1d10:	81 05       	cpc	r24, r1
    1d12:	91 05       	cpc	r25, r1
    1d14:	08 f4       	brcc	.+2      	; 0x1d18 <create_chain+0x68>
    1d16:	90 c0       	rjmp	.+288    	; 0x1e38 <create_chain+0x188>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    1d18:	8e 89       	ldd	r24, Y+22	; 0x16
    1d1a:	9f 89       	ldd	r25, Y+23	; 0x17
    1d1c:	a8 8d       	ldd	r26, Y+24	; 0x18
    1d1e:	b9 8d       	ldd	r27, Y+25	; 0x19
    1d20:	28 17       	cp	r18, r24
    1d22:	39 07       	cpc	r19, r25
    1d24:	4a 07       	cpc	r20, r26
    1d26:	5b 07       	cpc	r21, r27
    1d28:	08 f4       	brcc	.+2      	; 0x1d2c <create_chain+0x7c>
    1d2a:	8a c0       	rjmp	.+276    	; 0x1e40 <create_chain+0x190>
    1d2c:	53 01       	movw	r10, r6
    1d2e:	42 01       	movw	r8, r4
    1d30:	05 c0       	rjmp	.+10     	; 0x1d3c <create_chain+0x8c>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1d32:	61 e0       	ldi	r22, 0x01	; 1
    1d34:	86 2e       	mov	r8, r22
    1d36:	91 2c       	mov	r9, r1
    1d38:	a1 2c       	mov	r10, r1
    1d3a:	b1 2c       	mov	r11, r1
    1d3c:	75 01       	movw	r14, r10
    1d3e:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1d40:	08 94       	sec
    1d42:	c1 1c       	adc	r12, r1
    1d44:	d1 1c       	adc	r13, r1
    1d46:	e1 1c       	adc	r14, r1
    1d48:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1d4a:	8e 89       	ldd	r24, Y+22	; 0x16
    1d4c:	9f 89       	ldd	r25, Y+23	; 0x17
    1d4e:	a8 8d       	ldd	r26, Y+24	; 0x18
    1d50:	b9 8d       	ldd	r27, Y+25	; 0x19
    1d52:	c8 16       	cp	r12, r24
    1d54:	d9 06       	cpc	r13, r25
    1d56:	ea 06       	cpc	r14, r26
    1d58:	fb 06       	cpc	r15, r27
    1d5a:	60 f0       	brcs	.+24     	; 0x1d74 <create_chain+0xc4>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1d5c:	22 e0       	ldi	r18, 0x02	; 2
    1d5e:	82 16       	cp	r8, r18
    1d60:	91 04       	cpc	r9, r1
    1d62:	a1 04       	cpc	r10, r1
    1d64:	b1 04       	cpc	r11, r1
    1d66:	08 f4       	brcc	.+2      	; 0x1d6a <create_chain+0xba>
    1d68:	60 c0       	rjmp	.+192    	; 0x1e2a <create_chain+0x17a>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    1d6a:	52 e0       	ldi	r21, 0x02	; 2
    1d6c:	c5 2e       	mov	r12, r21
    1d6e:	d1 2c       	mov	r13, r1
    1d70:	e1 2c       	mov	r14, r1
    1d72:	f1 2c       	mov	r15, r1
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1d74:	ce 01       	movw	r24, r28
    1d76:	b7 01       	movw	r22, r14
    1d78:	a6 01       	movw	r20, r12
    1d7a:	76 dd       	rcall	.-1300   	; 0x1868 <get_fat>
    1d7c:	9b 01       	movw	r18, r22
    1d7e:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    1d80:	61 15       	cp	r22, r1
    1d82:	71 05       	cpc	r23, r1
    1d84:	81 05       	cpc	r24, r1
    1d86:	91 05       	cpc	r25, r1
    1d88:	a9 f0       	breq	.+42     	; 0x1db4 <create_chain+0x104>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1d8a:	2f 3f       	cpi	r18, 0xFF	; 255
    1d8c:	8f ef       	ldi	r24, 0xFF	; 255
    1d8e:	38 07       	cpc	r19, r24
    1d90:	8f ef       	ldi	r24, 0xFF	; 255
    1d92:	48 07       	cpc	r20, r24
    1d94:	8f ef       	ldi	r24, 0xFF	; 255
    1d96:	58 07       	cpc	r21, r24
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <create_chain+0xec>
    1d9a:	52 c0       	rjmp	.+164    	; 0x1e40 <create_chain+0x190>
    1d9c:	21 30       	cpi	r18, 0x01	; 1
    1d9e:	31 05       	cpc	r19, r1
    1da0:	41 05       	cpc	r20, r1
    1da2:	51 05       	cpc	r21, r1
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <create_chain+0xf8>
    1da6:	4c c0       	rjmp	.+152    	; 0x1e40 <create_chain+0x190>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1da8:	c8 14       	cp	r12, r8
    1daa:	d9 04       	cpc	r13, r9
    1dac:	ea 04       	cpc	r14, r10
    1dae:	fb 04       	cpc	r15, r11
    1db0:	39 f6       	brne	.-114    	; 0x1d40 <create_chain+0x90>
    1db2:	3b c0       	rjmp	.+118    	; 0x1e2a <create_chain+0x17a>
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
    1db4:	8c 2c       	mov	r8, r12
    1db6:	bd 2c       	mov	r11, r13
    1db8:	ae 2c       	mov	r10, r14
    1dba:	9f 2c       	mov	r9, r15
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    1dbc:	ce 01       	movw	r24, r28
    1dbe:	a6 01       	movw	r20, r12
    1dc0:	b7 01       	movw	r22, r14
    1dc2:	0f ef       	ldi	r16, 0xFF	; 255
    1dc4:	1f ef       	ldi	r17, 0xFF	; 255
    1dc6:	2f ef       	ldi	r18, 0xFF	; 255
    1dc8:	3f e0       	ldi	r19, 0x0F	; 15
    1dca:	8e de       	rcall	.-740    	; 0x1ae8 <put_fat>
	if (res == FR_OK && clst != 0) {
    1dcc:	88 23       	and	r24, r24
    1dce:	39 f5       	brne	.+78     	; 0x1e1e <create_chain+0x16e>
    1dd0:	41 14       	cp	r4, r1
    1dd2:	51 04       	cpc	r5, r1
    1dd4:	61 04       	cpc	r6, r1
    1dd6:	71 04       	cpc	r7, r1
    1dd8:	41 f0       	breq	.+16     	; 0x1dea <create_chain+0x13a>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    1dda:	ce 01       	movw	r24, r28
    1ddc:	b3 01       	movw	r22, r6
    1dde:	a2 01       	movw	r20, r4
    1de0:	86 01       	movw	r16, r12
    1de2:	97 01       	movw	r18, r14
    1de4:	81 de       	rcall	.-766    	; 0x1ae8 <put_fat>
	}
	if (res == FR_OK) {
    1de6:	88 23       	and	r24, r24
    1de8:	d1 f4       	brne	.+52     	; 0x1e1e <create_chain+0x16e>
		fs->last_clust = ncl;			/* Update FSINFO */
    1dea:	8a 86       	std	Y+10, r8	; 0x0a
    1dec:	bb 86       	std	Y+11, r11	; 0x0b
    1dee:	ac 86       	std	Y+12, r10	; 0x0c
    1df0:	9d 86       	std	Y+13, r9	; 0x0d
		if (fs->free_clust != 0xFFFFFFFF) {
    1df2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1df4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1df6:	a8 89       	ldd	r26, Y+16	; 0x10
    1df8:	b9 89       	ldd	r27, Y+17	; 0x11
    1dfa:	8f 3f       	cpi	r24, 0xFF	; 255
    1dfc:	2f ef       	ldi	r18, 0xFF	; 255
    1dfe:	92 07       	cpc	r25, r18
    1e00:	2f ef       	ldi	r18, 0xFF	; 255
    1e02:	a2 07       	cpc	r26, r18
    1e04:	2f ef       	ldi	r18, 0xFF	; 255
    1e06:	b2 07       	cpc	r27, r18
    1e08:	a1 f0       	breq	.+40     	; 0x1e32 <create_chain+0x182>
			fs->free_clust--;
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	a1 09       	sbc	r26, r1
    1e0e:	b1 09       	sbc	r27, r1
    1e10:	8e 87       	std	Y+14, r24	; 0x0e
    1e12:	9f 87       	std	Y+15, r25	; 0x0f
    1e14:	a8 8b       	std	Y+16, r26	; 0x10
    1e16:	b9 8b       	std	Y+17, r27	; 0x11
			fs->fsi_flag = 1;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	8d 83       	std	Y+5, r24	; 0x05
    1e1c:	0a c0       	rjmp	.+20     	; 0x1e32 <create_chain+0x182>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1e1e:	81 30       	cpi	r24, 0x01	; 1
    1e20:	59 f4       	brne	.+22     	; 0x1e38 <create_chain+0x188>
    1e22:	2f ef       	ldi	r18, 0xFF	; 255
    1e24:	3f ef       	ldi	r19, 0xFF	; 255
    1e26:	a9 01       	movw	r20, r18
    1e28:	0b c0       	rjmp	.+22     	; 0x1e40 <create_chain+0x190>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	a9 01       	movw	r20, r18
    1e30:	07 c0       	rjmp	.+14     	; 0x1e40 <create_chain+0x190>
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
    1e32:	a7 01       	movw	r20, r14
    1e34:	96 01       	movw	r18, r12
    1e36:	04 c0       	rjmp	.+8      	; 0x1e40 <create_chain+0x190>
			fs->free_clust--;
			fs->fsi_flag = 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1e38:	21 e0       	ldi	r18, 0x01	; 1
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e0       	ldi	r20, 0x00	; 0
    1e3e:	50 e0       	ldi	r21, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error code */
}
    1e40:	b9 01       	movw	r22, r18
    1e42:	ca 01       	movw	r24, r20
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	1f 91       	pop	r17
    1e4a:	0f 91       	pop	r16
    1e4c:	ff 90       	pop	r15
    1e4e:	ef 90       	pop	r14
    1e50:	df 90       	pop	r13
    1e52:	cf 90       	pop	r12
    1e54:	bf 90       	pop	r11
    1e56:	af 90       	pop	r10
    1e58:	9f 90       	pop	r9
    1e5a:	8f 90       	pop	r8
    1e5c:	7f 90       	pop	r7
    1e5e:	6f 90       	pop	r6
    1e60:	5f 90       	pop	r5
    1e62:	4f 90       	pop	r4
    1e64:	08 95       	ret

00001e66 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    1e66:	8f 92       	push	r8
    1e68:	9f 92       	push	r9
    1e6a:	af 92       	push	r10
    1e6c:	bf 92       	push	r11
    1e6e:	cf 92       	push	r12
    1e70:	df 92       	push	r13
    1e72:	ef 92       	push	r14
    1e74:	ff 92       	push	r15
    1e76:	0f 93       	push	r16
    1e78:	1f 93       	push	r17
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
    1e7e:	ec 01       	movw	r28, r24
    1e80:	5b 01       	movw	r10, r22
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    1e82:	cc 80       	ldd	r12, Y+4	; 0x04
    1e84:	dd 80       	ldd	r13, Y+5	; 0x05
    1e86:	08 94       	sec
    1e88:	c1 1c       	adc	r12, r1
    1e8a:	d1 1c       	adc	r13, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1e8c:	c1 14       	cp	r12, r1
    1e8e:	d1 04       	cpc	r13, r1
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <dir_next+0x2e>
    1e92:	e4 c0       	rjmp	.+456    	; 0x205c <dir_next+0x1f6>
    1e94:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e96:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e98:	a8 89       	ldd	r26, Y+16	; 0x10
    1e9a:	b9 89       	ldd	r27, Y+17	; 0x11
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	a1 05       	cpc	r26, r1
    1ea0:	b1 05       	cpc	r27, r1
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <dir_next+0x40>
    1ea4:	db c0       	rjmp	.+438    	; 0x205c <dir_next+0x1f6>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    1ea6:	1f e0       	ldi	r17, 0x0F	; 15
    1ea8:	81 2e       	mov	r8, r17
    1eaa:	91 2c       	mov	r9, r1
    1eac:	8c 20       	and	r8, r12
    1eae:	9d 20       	and	r9, r13
    1eb0:	81 14       	cp	r8, r1
    1eb2:	91 04       	cpc	r9, r1
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <dir_next+0x52>
    1eb6:	c2 c0       	rjmp	.+388    	; 0x203c <dir_next+0x1d6>
		dj->sect++;					/* Next sector */
    1eb8:	01 96       	adiw	r24, 0x01	; 1
    1eba:	a1 1d       	adc	r26, r1
    1ebc:	b1 1d       	adc	r27, r1
    1ebe:	8e 87       	std	Y+14, r24	; 0x0e
    1ec0:	9f 87       	std	Y+15, r25	; 0x0f
    1ec2:	a8 8b       	std	Y+16, r26	; 0x10
    1ec4:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1ec6:	4a 85       	ldd	r20, Y+10	; 0x0a
    1ec8:	5b 85       	ldd	r21, Y+11	; 0x0b
    1eca:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ecc:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ece:	88 81       	ld	r24, Y
    1ed0:	99 81       	ldd	r25, Y+1	; 0x01
    1ed2:	41 15       	cp	r20, r1
    1ed4:	51 05       	cpc	r21, r1
    1ed6:	61 05       	cpc	r22, r1
    1ed8:	71 05       	cpc	r23, r1
    1eda:	41 f4       	brne	.+16     	; 0x1eec <dir_next+0x86>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1edc:	fc 01       	movw	r30, r24
    1ede:	80 85       	ldd	r24, Z+8	; 0x08
    1ee0:	91 85       	ldd	r25, Z+9	; 0x09
    1ee2:	c8 16       	cp	r12, r24
    1ee4:	d9 06       	cpc	r13, r25
    1ee6:	08 f4       	brcc	.+2      	; 0x1eea <dir_next+0x84>
    1ee8:	a9 c0       	rjmp	.+338    	; 0x203c <dir_next+0x1d6>
    1eea:	b8 c0       	rjmp	.+368    	; 0x205c <dir_next+0x1f6>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1eec:	fc 01       	movw	r30, r24
    1eee:	22 81       	ldd	r18, Z+2	; 0x02
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	21 50       	subi	r18, 0x01	; 1
    1ef4:	30 40       	sbci	r19, 0x00	; 0
    1ef6:	f6 01       	movw	r30, r12
    1ef8:	a4 e0       	ldi	r26, 0x04	; 4
    1efa:	f6 95       	lsr	r31
    1efc:	e7 95       	ror	r30
    1efe:	aa 95       	dec	r26
    1f00:	e1 f7       	brne	.-8      	; 0x1efa <dir_next+0x94>
    1f02:	2e 23       	and	r18, r30
    1f04:	3f 23       	and	r19, r31
    1f06:	21 15       	cp	r18, r1
    1f08:	31 05       	cpc	r19, r1
    1f0a:	09 f0       	breq	.+2      	; 0x1f0e <dir_next+0xa8>
    1f0c:	97 c0       	rjmp	.+302    	; 0x203c <dir_next+0x1d6>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    1f0e:	ac dc       	rcall	.-1704   	; 0x1868 <get_fat>
    1f10:	7b 01       	movw	r14, r22
    1f12:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    1f14:	62 30       	cpi	r22, 0x02	; 2
    1f16:	71 05       	cpc	r23, r1
    1f18:	81 05       	cpc	r24, r1
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	08 f4       	brcc	.+2      	; 0x1f20 <dir_next+0xba>
    1f1e:	a2 c0       	rjmp	.+324    	; 0x2064 <dir_next+0x1fe>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1f20:	8f ef       	ldi	r24, 0xFF	; 255
    1f22:	e8 16       	cp	r14, r24
    1f24:	8f ef       	ldi	r24, 0xFF	; 255
    1f26:	f8 06       	cpc	r15, r24
    1f28:	8f ef       	ldi	r24, 0xFF	; 255
    1f2a:	08 07       	cpc	r16, r24
    1f2c:	8f ef       	ldi	r24, 0xFF	; 255
    1f2e:	18 07       	cpc	r17, r24
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <dir_next+0xce>
    1f32:	9a c0       	rjmp	.+308    	; 0x2068 <dir_next+0x202>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    1f34:	88 81       	ld	r24, Y
    1f36:	99 81       	ldd	r25, Y+1	; 0x01
    1f38:	fc 01       	movw	r30, r24
    1f3a:	26 89       	ldd	r18, Z+22	; 0x16
    1f3c:	37 89       	ldd	r19, Z+23	; 0x17
    1f3e:	40 8d       	ldd	r20, Z+24	; 0x18
    1f40:	51 8d       	ldd	r21, Z+25	; 0x19
    1f42:	e2 16       	cp	r14, r18
    1f44:	f3 06       	cpc	r15, r19
    1f46:	04 07       	cpc	r16, r20
    1f48:	15 07       	cpc	r17, r21
    1f4a:	08 f4       	brcc	.+2      	; 0x1f4e <dir_next+0xe8>
    1f4c:	6a c0       	rjmp	.+212    	; 0x2022 <dir_next+0x1bc>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    1f4e:	a1 14       	cp	r10, r1
    1f50:	b1 04       	cpc	r11, r1
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <dir_next+0xf0>
    1f54:	83 c0       	rjmp	.+262    	; 0x205c <dir_next+0x1f6>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    1f56:	4a 85       	ldd	r20, Y+10	; 0x0a
    1f58:	5b 85       	ldd	r21, Y+11	; 0x0b
    1f5a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f5c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f5e:	a8 de       	rcall	.-688    	; 0x1cb0 <create_chain>
    1f60:	7b 01       	movw	r14, r22
    1f62:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1f64:	61 15       	cp	r22, r1
    1f66:	71 05       	cpc	r23, r1
    1f68:	81 05       	cpc	r24, r1
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <dir_next+0x10a>
    1f6e:	78 c0       	rjmp	.+240    	; 0x2060 <dir_next+0x1fa>
					if (clst == 1) return FR_INT_ERR;
    1f70:	61 30       	cpi	r22, 0x01	; 1
    1f72:	71 05       	cpc	r23, r1
    1f74:	81 05       	cpc	r24, r1
    1f76:	91 05       	cpc	r25, r1
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <dir_next+0x116>
    1f7a:	74 c0       	rjmp	.+232    	; 0x2064 <dir_next+0x1fe>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1f7c:	8f ef       	ldi	r24, 0xFF	; 255
    1f7e:	e8 16       	cp	r14, r24
    1f80:	8f ef       	ldi	r24, 0xFF	; 255
    1f82:	f8 06       	cpc	r15, r24
    1f84:	8f ef       	ldi	r24, 0xFF	; 255
    1f86:	08 07       	cpc	r16, r24
    1f88:	8f ef       	ldi	r24, 0xFF	; 255
    1f8a:	18 07       	cpc	r17, r24
    1f8c:	09 f4       	brne	.+2      	; 0x1f90 <dir_next+0x12a>
    1f8e:	6c c0       	rjmp	.+216    	; 0x2068 <dir_next+0x202>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    1f90:	88 81       	ld	r24, Y
    1f92:	99 81       	ldd	r25, Y+1	; 0x01
    1f94:	40 e0       	ldi	r20, 0x00	; 0
    1f96:	50 e0       	ldi	r21, 0x00	; 0
    1f98:	ba 01       	movw	r22, r20
    1f9a:	66 db       	rcall	.-2356   	; 0x1668 <move_window>
    1f9c:	88 23       	and	r24, r24
    1f9e:	09 f0       	breq	.+2      	; 0x1fa2 <dir_next+0x13c>
    1fa0:	63 c0       	rjmp	.+198    	; 0x2068 <dir_next+0x202>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    1fa2:	88 81       	ld	r24, Y
    1fa4:	99 81       	ldd	r25, Y+1	; 0x01
    1fa6:	8e 96       	adiw	r24, 0x2e	; 46
    1fa8:	60 e0       	ldi	r22, 0x00	; 0
    1faa:	70 e0       	ldi	r23, 0x00	; 0
    1fac:	40 e0       	ldi	r20, 0x00	; 0
    1fae:	52 e0       	ldi	r21, 0x02	; 2
    1fb0:	2e db       	rcall	.-2468   	; 0x160e <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1fb2:	a8 80       	ld	r10, Y
    1fb4:	b9 80       	ldd	r11, Y+1	; 0x01
    1fb6:	c5 01       	movw	r24, r10
    1fb8:	b8 01       	movw	r22, r16
    1fba:	a7 01       	movw	r20, r14
    1fbc:	26 dc       	rcall	.-1972   	; 0x180a <clust2sect>
    1fbe:	f5 01       	movw	r30, r10
    1fc0:	62 a7       	std	Z+42, r22	; 0x2a
    1fc2:	73 a7       	std	Z+43, r23	; 0x2b
    1fc4:	84 a7       	std	Z+44, r24	; 0x2c
    1fc6:	95 a7       	std	Z+45, r25	; 0x2d
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1fc8:	bb 24       	eor	r11, r11
						dj->fs->wflag = 1;
    1fca:	aa 24       	eor	r10, r10
    1fcc:	a3 94       	inc	r10
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1fce:	18 c0       	rjmp	.+48     	; 0x2000 <dir_next+0x19a>
						dj->fs->wflag = 1;
    1fd0:	a4 82       	std	Z+4, r10	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1fd2:	88 81       	ld	r24, Y
    1fd4:	99 81       	ldd	r25, Y+1	; 0x01
    1fd6:	40 e0       	ldi	r20, 0x00	; 0
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	ba 01       	movw	r22, r20
    1fdc:	45 db       	rcall	.-2422   	; 0x1668 <move_window>
    1fde:	88 23       	and	r24, r24
    1fe0:	09 f0       	breq	.+2      	; 0x1fe4 <dir_next+0x17e>
    1fe2:	42 c0       	rjmp	.+132    	; 0x2068 <dir_next+0x202>
						dj->fs->winsect++;
    1fe4:	e8 81       	ld	r30, Y
    1fe6:	f9 81       	ldd	r31, Y+1	; 0x01
    1fe8:	82 a5       	ldd	r24, Z+42	; 0x2a
    1fea:	93 a5       	ldd	r25, Z+43	; 0x2b
    1fec:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1fee:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1ff0:	01 96       	adiw	r24, 0x01	; 1
    1ff2:	a1 1d       	adc	r26, r1
    1ff4:	b1 1d       	adc	r27, r1
    1ff6:	82 a7       	std	Z+42, r24	; 0x2a
    1ff8:	93 a7       	std	Z+43, r25	; 0x2b
    1ffa:	a4 a7       	std	Z+44, r26	; 0x2c
    1ffc:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1ffe:	b3 94       	inc	r11
    2000:	e8 81       	ld	r30, Y
    2002:	f9 81       	ldd	r31, Y+1	; 0x01
    2004:	82 81       	ldd	r24, Z+2	; 0x02
    2006:	b8 16       	cp	r11, r24
    2008:	18 f3       	brcs	.-58     	; 0x1fd0 <dir_next+0x16a>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    200a:	82 a5       	ldd	r24, Z+42	; 0x2a
    200c:	93 a5       	ldd	r25, Z+43	; 0x2b
    200e:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2010:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2012:	8b 19       	sub	r24, r11
    2014:	91 09       	sbc	r25, r1
    2016:	a1 09       	sbc	r26, r1
    2018:	b1 09       	sbc	r27, r1
    201a:	82 a7       	std	Z+42, r24	; 0x2a
    201c:	93 a7       	std	Z+43, r25	; 0x2b
    201e:	a4 a7       	std	Z+44, r26	; 0x2c
    2020:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    2022:	ea 86       	std	Y+10, r14	; 0x0a
    2024:	fb 86       	std	Y+11, r15	; 0x0b
    2026:	0c 87       	std	Y+12, r16	; 0x0c
    2028:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    202a:	88 81       	ld	r24, Y
    202c:	99 81       	ldd	r25, Y+1	; 0x01
    202e:	b8 01       	movw	r22, r16
    2030:	a7 01       	movw	r20, r14
    2032:	eb db       	rcall	.-2090   	; 0x180a <clust2sect>
    2034:	6e 87       	std	Y+14, r22	; 0x0e
    2036:	7f 87       	std	Y+15, r23	; 0x0f
    2038:	88 8b       	std	Y+16, r24	; 0x10
    203a:	99 8b       	std	Y+17, r25	; 0x11
			}
		}
	}

	dj->index = i;
    203c:	dd 82       	std	Y+5, r13	; 0x05
    203e:	cc 82       	std	Y+4, r12	; 0x04
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    2040:	88 81       	ld	r24, Y
    2042:	99 81       	ldd	r25, Y+1	; 0x01
    2044:	8e 96       	adiw	r24, 0x2e	; 46
    2046:	75 e0       	ldi	r23, 0x05	; 5
    2048:	88 0c       	add	r8, r8
    204a:	99 1c       	adc	r9, r9
    204c:	7a 95       	dec	r23
    204e:	e1 f7       	brne	.-8      	; 0x2048 <dir_next+0x1e2>
    2050:	88 0d       	add	r24, r8
    2052:	99 1d       	adc	r25, r9
    2054:	9b 8b       	std	Y+19, r25	; 0x13
    2056:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	07 c0       	rjmp	.+14     	; 0x206a <dir_next+0x204>
				if (clst <= 1) return FR_INT_ERR;
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    205c:	84 e0       	ldi	r24, 0x04	; 4
    205e:	05 c0       	rjmp	.+10     	; 0x206a <dir_next+0x204>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    2060:	87 e0       	ldi	r24, 0x07	; 7
    2062:	03 c0       	rjmp	.+6      	; 0x206a <dir_next+0x204>
					if (clst == 1) return FR_INT_ERR;
    2064:	82 e0       	ldi	r24, 0x02	; 2
    2066:	01 c0       	rjmp	.+2      	; 0x206a <dir_next+0x204>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    2068:	81 e0       	ldi	r24, 0x01	; 1

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	1f 91       	pop	r17
    2070:	0f 91       	pop	r16
    2072:	ff 90       	pop	r15
    2074:	ef 90       	pop	r14
    2076:	df 90       	pop	r13
    2078:	cf 90       	pop	r12
    207a:	bf 90       	pop	r11
    207c:	af 90       	pop	r10
    207e:	9f 90       	pop	r9
    2080:	8f 90       	pop	r8
    2082:	08 95       	ret

00002084 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    2084:	88 23       	and	r24, r24
    2086:	91 f4       	brne	.+36     	; 0x20ac <f_mount+0x28>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
    2088:	e0 91 26 04 	lds	r30, 0x0426
    208c:	f0 91 27 04 	lds	r31, 0x0427

	if (rfs) {
    2090:	30 97       	sbiw	r30, 0x00	; 0
    2092:	09 f0       	breq	.+2      	; 0x2096 <f_mount+0x12>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    2094:	10 82       	st	Z, r1
	}

	if (fs) {
    2096:	61 15       	cp	r22, r1
    2098:	71 05       	cpc	r23, r1
    209a:	11 f0       	breq	.+4      	; 0x20a0 <f_mount+0x1c>
		fs->fs_type = 0;		/* Clear new fs object */
    209c:	fb 01       	movw	r30, r22
    209e:	10 82       	st	Z, r1
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    20a0:	70 93 27 04 	sts	0x0427, r23
    20a4:	60 93 26 04 	sts	0x0426, r22

	return FR_OK;
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	08 95       	ret
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    20ac:	8b e0       	ldi	r24, 0x0B	; 11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    20ae:	08 95       	ret

000020b0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    20b0:	2f 92       	push	r2
    20b2:	3f 92       	push	r3
    20b4:	4f 92       	push	r4
    20b6:	5f 92       	push	r5
    20b8:	6f 92       	push	r6
    20ba:	7f 92       	push	r7
    20bc:	8f 92       	push	r8
    20be:	9f 92       	push	r9
    20c0:	af 92       	push	r10
    20c2:	bf 92       	push	r11
    20c4:	cf 92       	push	r12
    20c6:	df 92       	push	r13
    20c8:	ef 92       	push	r14
    20ca:	ff 92       	push	r15
    20cc:	0f 93       	push	r16
    20ce:	1f 93       	push	r17
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    20d8:	e8 97       	sbiw	r28, 0x38	; 56
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	9c a3       	std	Y+36, r25	; 0x24
    20e6:	8b a3       	std	Y+35, r24	; 0x23
    20e8:	1b 01       	movw	r2, r22
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <f_open+0x40>
    20ee:	a3 c4       	rjmp	.+2374   	; 0x2a36 <__stack+0x937>
	fp->fs = 0;			/* Clear file object */
    20f0:	dc 01       	movw	r26, r24
    20f2:	11 96       	adiw	r26, 0x01	; 1
    20f4:	1c 92       	st	X, r1
    20f6:	1e 92       	st	-X, r1
	const TCHAR *p = *path;
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    20f8:	fb 01       	movw	r30, r22
    20fa:	80 81       	ld	r24, Z
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	c0 97       	sbiw	r24, 0x30	; 48
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    2100:	8a 30       	cpi	r24, 0x0A	; 10
    2102:	91 05       	cpc	r25, r1
    2104:	40 f4       	brcc	.+16     	; 0x2116 <__stack+0x17>
    2106:	21 81       	ldd	r18, Z+1	; 0x01
    2108:	2a 33       	cpi	r18, 0x3A	; 58
    210a:	29 f4       	brne	.+10     	; 0x2116 <__stack+0x17>
		p += 2; *path = p;				/* Return pointer to the path name */
    210c:	22 e0       	ldi	r18, 0x02	; 2
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	22 0e       	add	r2, r18
    2112:	33 1e       	adc	r3, r19
    2114:	02 c0       	rjmp	.+4      	; 0x211a <__stack+0x1b>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	90 e0       	ldi	r25, 0x00	; 0
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    211a:	00 97       	sbiw	r24, 0x00	; 0
    211c:	09 f0       	breq	.+2      	; 0x2120 <__stack+0x21>
    211e:	28 c2       	rjmp	.+1104   	; 0x2570 <__stack+0x471>
		return FR_INVALID_DRIVE;
	fs = FatFs[vol];					/* Get corresponding file system object */
    2120:	e0 90 26 04 	lds	r14, 0x0426
    2124:	f0 90 27 04 	lds	r15, 0x0427
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    2128:	e1 14       	cp	r14, r1
    212a:	f1 04       	cpc	r15, r1
    212c:	09 f4       	brne	.+2      	; 0x2130 <__stack+0x31>
    212e:	22 c2       	rjmp	.+1092   	; 0x2574 <__stack+0x475>

	if (!fp) return FR_INVALID_OBJECT;
	fp->fs = 0;			/* Clear file object */

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    2130:	34 2f       	mov	r19, r20
    2132:	3f 71       	andi	r19, 0x1F	; 31
    2134:	3d a3       	std	Y+37, r19	; 0x25
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    2136:	14 2f       	mov	r17, r20
    2138:	1e 71       	andi	r17, 0x1E	; 30
	fs = FatFs[vol];					/* Get corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */

	ENTER_FF(fs);						/* Lock file system */

	*rfs = fs;							/* Return pointer to the corresponding file system object */
    213a:	fe 86       	std	Y+14, r15	; 0x0e
    213c:	ed 86       	std	Y+13, r14	; 0x0d
	if (fs->fs_type) {					/* If the volume has been mounted */
    213e:	d7 01       	movw	r26, r14
    2140:	8c 91       	ld	r24, X
    2142:	88 23       	and	r24, r24
    2144:	59 f0       	breq	.+22     	; 0x215c <__stack+0x5d>
		stat = disk_status(fs->drv);
    2146:	11 96       	adiw	r26, 0x01	; 1
    2148:	8c 91       	ld	r24, X
    214a:	bf d9       	rcall	.-3202   	; 0x14ca <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    214c:	80 fd       	sbrc	r24, 0
    214e:	06 c0       	rjmp	.+12     	; 0x215c <__stack+0x5d>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
    2150:	11 23       	and	r17, r17
    2152:	09 f4       	brne	.+2      	; 0x2156 <__stack+0x57>
    2154:	a0 c4       	rjmp	.+2368   	; 0x2a96 <__stack+0x997>
    2156:	82 fd       	sbrc	r24, 2
    2158:	11 c2       	rjmp	.+1058   	; 0x257c <__stack+0x47d>
    215a:	9d c4       	rjmp	.+2362   	; 0x2a96 <__stack+0x997>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    215c:	f7 01       	movw	r30, r14
    215e:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    2160:	11 82       	std	Z+1, r1	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	b0 d9       	rcall	.-3232   	; 0x14c6 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    2166:	80 fd       	sbrc	r24, 0
    2168:	07 c2       	rjmp	.+1038   	; 0x2578 <__stack+0x479>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    216a:	11 23       	and	r17, r17
    216c:	11 f0       	breq	.+4      	; 0x2172 <__stack+0x73>
    216e:	82 fd       	sbrc	r24, 2
    2170:	05 c2       	rjmp	.+1034   	; 0x257c <__stack+0x47d>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    2172:	c7 01       	movw	r24, r14
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	50 e0       	ldi	r21, 0x00	; 0
    2178:	ba 01       	movw	r22, r20
    217a:	ec da       	rcall	.-2600   	; 0x1754 <check_fs>
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    217c:	81 30       	cpi	r24, 0x01	; 1
    217e:	b9 f4       	brne	.+46     	; 0x21ae <__stack+0xaf>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
    2180:	f7 01       	movw	r30, r14
    2182:	e0 51       	subi	r30, 0x10	; 16
    2184:	fe 4f       	sbci	r31, 0xFE	; 254
    2186:	80 81       	ld	r24, Z
    2188:	88 23       	and	r24, r24
    218a:	09 f4       	brne	.+2      	; 0x218e <__stack+0x8f>
    218c:	f9 c1       	rjmp	.+1010   	; 0x2580 <__stack+0x481>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    218e:	f7 01       	movw	r30, r14
    2190:	ec 50       	subi	r30, 0x0C	; 12
    2192:	fe 4f       	sbci	r31, 0xFE	; 254
    2194:	20 81       	ld	r18, Z
    2196:	31 81       	ldd	r19, Z+1	; 0x01
    2198:	42 81       	ldd	r20, Z+2	; 0x02
    219a:	53 81       	ldd	r21, Z+3	; 0x03
    219c:	2e a3       	std	Y+38, r18	; 0x26
    219e:	3f a3       	std	Y+39, r19	; 0x27
    21a0:	48 a7       	std	Y+40, r20	; 0x28
    21a2:	59 a7       	std	Y+41, r21	; 0x29
			fmt = check_fs(fs, bsect);		/* Check the partition */
    21a4:	c7 01       	movw	r24, r14
    21a6:	ba 01       	movw	r22, r20
    21a8:	a9 01       	movw	r20, r18
    21aa:	d4 da       	rcall	.-2648   	; 0x1754 <check_fs>
    21ac:	04 c0       	rjmp	.+8      	; 0x21b6 <__stack+0xb7>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    21ae:	1e a2       	std	Y+38, r1	; 0x26
    21b0:	1f a2       	std	Y+39, r1	; 0x27
    21b2:	18 a6       	std	Y+40, r1	; 0x28
    21b4:	19 a6       	std	Y+41, r1	; 0x29
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    21b6:	83 30       	cpi	r24, 0x03	; 3
    21b8:	09 f4       	brne	.+2      	; 0x21bc <__stack+0xbd>
    21ba:	ef c3       	rjmp	.+2014   	; 0x299a <__stack+0x89b>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    21bc:	88 23       	and	r24, r24
    21be:	09 f0       	breq	.+2      	; 0x21c2 <__stack+0xc3>
    21c0:	df c1       	rjmp	.+958    	; 0x2580 <__stack+0x481>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    21c2:	ae e2       	ldi	r26, 0x2E	; 46
    21c4:	ca 2e       	mov	r12, r26
    21c6:	d1 2c       	mov	r13, r1
    21c8:	ce 0c       	add	r12, r14
    21ca:	df 1c       	adc	r13, r15
    21cc:	d6 01       	movw	r26, r12
    21ce:	1b 96       	adiw	r26, 0x0b	; 11
    21d0:	8d 91       	ld	r24, X+
    21d2:	9c 91       	ld	r25, X
    21d4:	1c 97       	sbiw	r26, 0x0c	; 12
    21d6:	b2 e0       	ldi	r27, 0x02	; 2
    21d8:	80 30       	cpi	r24, 0x00	; 0
    21da:	9b 07       	cpc	r25, r27
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <__stack+0xe1>
    21de:	d0 c1       	rjmp	.+928    	; 0x2580 <__stack+0x481>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    21e0:	f6 01       	movw	r30, r12
    21e2:	86 89       	ldd	r24, Z+22	; 0x16
    21e4:	97 89       	ldd	r25, Z+23	; 0x17
    21e6:	9c 01       	movw	r18, r24
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	2a a7       	std	Y+42, r18	; 0x2a
    21ee:	3b a7       	std	Y+43, r19	; 0x2b
    21f0:	4c a7       	std	Y+44, r20	; 0x2c
    21f2:	5d a7       	std	Y+45, r21	; 0x2d
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    21f4:	21 15       	cp	r18, r1
    21f6:	31 05       	cpc	r19, r1
    21f8:	41 05       	cpc	r20, r1
    21fa:	51 05       	cpc	r21, r1
    21fc:	59 f4       	brne	.+22     	; 0x2214 <__stack+0x115>
    21fe:	d6 01       	movw	r26, r12
    2200:	94 96       	adiw	r26, 0x24	; 36
    2202:	8d 91       	ld	r24, X+
    2204:	9d 91       	ld	r25, X+
    2206:	0d 90       	ld	r0, X+
    2208:	bc 91       	ld	r27, X
    220a:	a0 2d       	mov	r26, r0
    220c:	8a a7       	std	Y+42, r24	; 0x2a
    220e:	9b a7       	std	Y+43, r25	; 0x2b
    2210:	ac a7       	std	Y+44, r26	; 0x2c
    2212:	bd a7       	std	Y+45, r27	; 0x2d
	fs->fsize = fasize;
    2214:	2a a5       	ldd	r18, Y+42	; 0x2a
    2216:	3b a5       	ldd	r19, Y+43	; 0x2b
    2218:	4c a5       	ldd	r20, Y+44	; 0x2c
    221a:	5d a5       	ldd	r21, Y+45	; 0x2d
    221c:	d7 01       	movw	r26, r14
    221e:	5a 96       	adiw	r26, 0x1a	; 26
    2220:	2d 93       	st	X+, r18
    2222:	3d 93       	st	X+, r19
    2224:	4d 93       	st	X+, r20
    2226:	5c 93       	st	X, r21
    2228:	5d 97       	sbiw	r26, 0x1d	; 29

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    222a:	de 96       	adiw	r26, 0x3e	; 62
    222c:	2c 91       	ld	r18, X
    222e:	de 97       	sbiw	r26, 0x3e	; 62
    2230:	13 96       	adiw	r26, 0x03	; 3
    2232:	2c 93       	st	X, r18
    2234:	13 97       	sbiw	r26, 0x03	; 3
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    2236:	82 2f       	mov	r24, r18
    2238:	81 50       	subi	r24, 0x01	; 1
    223a:	82 30       	cpi	r24, 0x02	; 2
    223c:	08 f0       	brcs	.+2      	; 0x2240 <__stack+0x141>
    223e:	a0 c1       	rjmp	.+832    	; 0x2580 <__stack+0x481>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    2240:	db 96       	adiw	r26, 0x3b	; 59
    2242:	0c 91       	ld	r16, X
    2244:	db 97       	sbiw	r26, 0x3b	; 59
    2246:	12 96       	adiw	r26, 0x02	; 2
    2248:	0c 93       	st	X, r16
    224a:	12 97       	sbiw	r26, 0x02	; 2
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    224c:	00 23       	and	r16, r16
    224e:	09 f4       	brne	.+2      	; 0x2252 <__stack+0x153>
    2250:	97 c1       	rjmp	.+814    	; 0x2580 <__stack+0x481>
    2252:	40 2f       	mov	r20, r16
    2254:	50 e0       	ldi	r21, 0x00	; 0
    2256:	ca 01       	movw	r24, r20
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	84 23       	and	r24, r20
    225c:	95 23       	and	r25, r21
    225e:	00 97       	sbiw	r24, 0x00	; 0
    2260:	09 f0       	breq	.+2      	; 0x2264 <__stack+0x165>
    2262:	8e c1       	rjmp	.+796    	; 0x2580 <__stack+0x481>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    2264:	f6 01       	movw	r30, r12
    2266:	01 88       	ldd	r0, Z+17	; 0x11
    2268:	f2 89       	ldd	r31, Z+18	; 0x12
    226a:	e0 2d       	mov	r30, r0
    226c:	ff a7       	std	Y+47, r31	; 0x2f
    226e:	ee a7       	std	Y+46, r30	; 0x2e
    2270:	19 96       	adiw	r26, 0x09	; 9
    2272:	fc 93       	st	X, r31
    2274:	ee 93       	st	-X, r30
    2276:	18 97       	sbiw	r26, 0x08	; 8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    2278:	cf 01       	movw	r24, r30
    227a:	8f 70       	andi	r24, 0x0F	; 15
    227c:	90 70       	andi	r25, 0x00	; 0
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	09 f0       	breq	.+2      	; 0x2284 <__stack+0x185>
    2282:	7e c1       	rjmp	.+764    	; 0x2580 <__stack+0x481>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    2284:	d6 01       	movw	r26, r12
    2286:	53 96       	adiw	r26, 0x13	; 19
    2288:	4d 90       	ld	r4, X+
    228a:	5c 90       	ld	r5, X
    228c:	54 97       	sbiw	r26, 0x14	; 20
    228e:	66 24       	eor	r6, r6
    2290:	77 24       	eor	r7, r7
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    2292:	41 14       	cp	r4, r1
    2294:	51 04       	cpc	r5, r1
    2296:	61 04       	cpc	r6, r1
    2298:	71 04       	cpc	r7, r1
    229a:	31 f4       	brne	.+12     	; 0x22a8 <__stack+0x1a9>
    229c:	90 96       	adiw	r26, 0x20	; 32
    229e:	4d 90       	ld	r4, X+
    22a0:	5d 90       	ld	r5, X+
    22a2:	6d 90       	ld	r6, X+
    22a4:	7c 90       	ld	r7, X
    22a6:	93 97       	sbiw	r26, 0x23	; 35

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    22a8:	f6 01       	movw	r30, r12
    22aa:	86 84       	ldd	r8, Z+14	; 0x0e
    22ac:	97 84       	ldd	r9, Z+15	; 0x0f
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    22ae:	81 14       	cp	r8, r1
    22b0:	91 04       	cpc	r9, r1
    22b2:	09 f4       	brne	.+2      	; 0x22b6 <__stack+0x1b7>
    22b4:	65 c1       	rjmp	.+714    	; 0x2580 <__stack+0x481>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	50 e0       	ldi	r21, 0x00	; 0
    22bc:	6a a5       	ldd	r22, Y+42	; 0x2a
    22be:	7b a5       	ldd	r23, Y+43	; 0x2b
    22c0:	8c a5       	ldd	r24, Y+44	; 0x2c
    22c2:	9d a5       	ldd	r25, Y+45	; 0x2d
    22c4:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__mulsi3>
    22c8:	68 ab       	std	Y+48, r22	; 0x30
    22ca:	79 ab       	std	Y+49, r23	; 0x31
    22cc:	8a ab       	std	Y+50, r24	; 0x32
    22ce:	9b ab       	std	Y+51, r25	; 0x33

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    22d0:	94 01       	movw	r18, r8
    22d2:	40 e0       	ldi	r20, 0x00	; 0
    22d4:	50 e0       	ldi	r21, 0x00	; 0
    22d6:	2c ab       	std	Y+52, r18	; 0x34
    22d8:	3d ab       	std	Y+53, r19	; 0x35
    22da:	4e ab       	std	Y+54, r20	; 0x36
    22dc:	5f ab       	std	Y+55, r21	; 0x37
    22de:	8e a4       	ldd	r8, Y+46	; 0x2e
    22e0:	9f a4       	ldd	r9, Y+47	; 0x2f
    22e2:	f4 e0       	ldi	r31, 0x04	; 4
    22e4:	96 94       	lsr	r9
    22e6:	87 94       	ror	r8
    22e8:	fa 95       	dec	r31
    22ea:	e1 f7       	brne	.-8      	; 0x22e4 <__stack+0x1e5>
    22ec:	aa 24       	eor	r10, r10
    22ee:	bb 24       	eor	r11, r11
    22f0:	82 0e       	add	r8, r18
    22f2:	93 1e       	adc	r9, r19
    22f4:	a4 1e       	adc	r10, r20
    22f6:	b5 1e       	adc	r11, r21
    22f8:	86 0e       	add	r8, r22
    22fa:	97 1e       	adc	r9, r23
    22fc:	a8 1e       	adc	r10, r24
    22fe:	b9 1e       	adc	r11, r25
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    2300:	48 14       	cp	r4, r8
    2302:	59 04       	cpc	r5, r9
    2304:	6a 04       	cpc	r6, r10
    2306:	7b 04       	cpc	r7, r11
    2308:	08 f4       	brcc	.+2      	; 0x230c <__stack+0x20d>
    230a:	3a c1       	rjmp	.+628    	; 0x2580 <__stack+0x481>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    230c:	c3 01       	movw	r24, r6
    230e:	b2 01       	movw	r22, r4
    2310:	68 19       	sub	r22, r8
    2312:	79 09       	sbc	r23, r9
    2314:	8a 09       	sbc	r24, r10
    2316:	9b 09       	sbc	r25, r11
    2318:	20 2f       	mov	r18, r16
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	50 e0       	ldi	r21, 0x00	; 0
    2320:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <__udivmodsi4>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    2324:	21 15       	cp	r18, r1
    2326:	31 05       	cpc	r19, r1
    2328:	41 05       	cpc	r20, r1
    232a:	51 05       	cpc	r21, r1
    232c:	09 f4       	brne	.+2      	; 0x2330 <__stack+0x231>
    232e:	28 c1       	rjmp	.+592    	; 0x2580 <__stack+0x481>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    2330:	26 3f       	cpi	r18, 0xF6	; 246
    2332:	8f e0       	ldi	r24, 0x0F	; 15
    2334:	38 07       	cpc	r19, r24
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	48 07       	cpc	r20, r24
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	58 07       	cpc	r21, r24
    233e:	50 f0       	brcs	.+20     	; 0x2354 <__stack+0x255>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    2340:	26 3f       	cpi	r18, 0xF6	; 246
    2342:	9f ef       	ldi	r25, 0xFF	; 255
    2344:	39 07       	cpc	r19, r25
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	49 07       	cpc	r20, r25
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	59 07       	cpc	r21, r25
    234e:	20 f4       	brcc	.+8      	; 0x2358 <__stack+0x259>
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    2350:	12 e0       	ldi	r17, 0x02	; 2
    2352:	03 c0       	rjmp	.+6      	; 0x235a <__stack+0x25b>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
    2354:	11 e0       	ldi	r17, 0x01	; 1
    2356:	01 c0       	rjmp	.+2      	; 0x235a <__stack+0x25b>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    2358:	13 e0       	ldi	r17, 0x03	; 3

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    235a:	2e 5f       	subi	r18, 0xFE	; 254
    235c:	3f 4f       	sbci	r19, 0xFF	; 255
    235e:	4f 4f       	sbci	r20, 0xFF	; 255
    2360:	5f 4f       	sbci	r21, 0xFF	; 255
    2362:	d7 01       	movw	r26, r14
    2364:	56 96       	adiw	r26, 0x16	; 22
    2366:	2d 93       	st	X+, r18
    2368:	3d 93       	st	X+, r19
    236a:	4d 93       	st	X+, r20
    236c:	5c 93       	st	X, r21
    236e:	59 97       	sbiw	r26, 0x19	; 25
	fs->database = bsect + sysect;						/* Data start sector */
    2370:	8e a1       	ldd	r24, Y+38	; 0x26
    2372:	9f a1       	ldd	r25, Y+39	; 0x27
    2374:	a8 a5       	ldd	r26, Y+40	; 0x28
    2376:	b9 a5       	ldd	r27, Y+41	; 0x29
    2378:	88 0e       	add	r8, r24
    237a:	99 1e       	adc	r9, r25
    237c:	aa 1e       	adc	r10, r26
    237e:	bb 1e       	adc	r11, r27
    2380:	d7 01       	movw	r26, r14
    2382:	96 96       	adiw	r26, 0x26	; 38
    2384:	8d 92       	st	X+, r8
    2386:	9d 92       	st	X+, r9
    2388:	ad 92       	st	X+, r10
    238a:	bc 92       	st	X, r11
    238c:	99 97       	sbiw	r26, 0x29	; 41
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    238e:	8e a0       	ldd	r8, Y+38	; 0x26
    2390:	9f a0       	ldd	r9, Y+39	; 0x27
    2392:	a8 a4       	ldd	r10, Y+40	; 0x28
    2394:	b9 a4       	ldd	r11, Y+41	; 0x29
    2396:	8c a9       	ldd	r24, Y+52	; 0x34
    2398:	9d a9       	ldd	r25, Y+53	; 0x35
    239a:	ae a9       	ldd	r26, Y+54	; 0x36
    239c:	bf a9       	ldd	r27, Y+55	; 0x37
    239e:	88 0e       	add	r8, r24
    23a0:	99 1e       	adc	r9, r25
    23a2:	aa 1e       	adc	r10, r26
    23a4:	bb 1e       	adc	r11, r27
    23a6:	d7 01       	movw	r26, r14
    23a8:	5e 96       	adiw	r26, 0x1e	; 30
    23aa:	8d 92       	st	X+, r8
    23ac:	9d 92       	st	X+, r9
    23ae:	ad 92       	st	X+, r10
    23b0:	bc 92       	st	X, r11
    23b2:	91 97       	sbiw	r26, 0x21	; 33
	if (fmt == FS_FAT32) {
    23b4:	13 30       	cpi	r17, 0x03	; 3
    23b6:	c9 f4       	brne	.+50     	; 0x23ea <__stack+0x2eb>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    23b8:	ee a5       	ldd	r30, Y+46	; 0x2e
    23ba:	ff a5       	ldd	r31, Y+47	; 0x2f
    23bc:	30 97       	sbiw	r30, 0x00	; 0
    23be:	09 f0       	breq	.+2      	; 0x23c2 <__stack+0x2c3>
    23c0:	df c0       	rjmp	.+446    	; 0x2580 <__stack+0x481>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    23c2:	f6 01       	movw	r30, r12
    23c4:	84 a5       	ldd	r24, Z+44	; 0x2c
    23c6:	95 a5       	ldd	r25, Z+45	; 0x2d
    23c8:	a6 a5       	ldd	r26, Z+46	; 0x2e
    23ca:	b7 a5       	ldd	r27, Z+47	; 0x2f
    23cc:	f7 01       	movw	r30, r14
    23ce:	82 a3       	std	Z+34, r24	; 0x22
    23d0:	93 a3       	std	Z+35, r25	; 0x23
    23d2:	a4 a3       	std	Z+36, r26	; 0x24
    23d4:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    23d6:	da 01       	movw	r26, r20
    23d8:	c9 01       	movw	r24, r18
    23da:	e2 e0       	ldi	r30, 0x02	; 2
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	aa 1f       	adc	r26, r26
    23e2:	bb 1f       	adc	r27, r27
    23e4:	ea 95       	dec	r30
    23e6:	d1 f7       	brne	.-12     	; 0x23dc <__stack+0x2dd>
    23e8:	2a c0       	rjmp	.+84     	; 0x243e <__stack+0x33f>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    23ea:	8e a5       	ldd	r24, Y+46	; 0x2e
    23ec:	9f a5       	ldd	r25, Y+47	; 0x2f
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	09 f4       	brne	.+2      	; 0x23f4 <__stack+0x2f5>
    23f2:	c6 c0       	rjmp	.+396    	; 0x2580 <__stack+0x481>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    23f4:	88 a9       	ldd	r24, Y+48	; 0x30
    23f6:	99 a9       	ldd	r25, Y+49	; 0x31
    23f8:	aa a9       	ldd	r26, Y+50	; 0x32
    23fa:	bb a9       	ldd	r27, Y+51	; 0x33
    23fc:	88 0d       	add	r24, r8
    23fe:	99 1d       	adc	r25, r9
    2400:	aa 1d       	adc	r26, r10
    2402:	bb 1d       	adc	r27, r11
    2404:	f7 01       	movw	r30, r14
    2406:	82 a3       	std	Z+34, r24	; 0x22
    2408:	93 a3       	std	Z+35, r25	; 0x23
    240a:	a4 a3       	std	Z+36, r26	; 0x24
    240c:	b5 a3       	std	Z+37, r27	; 0x25
    240e:	da 01       	movw	r26, r20
    2410:	c9 01       	movw	r24, r18
    2412:	88 0f       	add	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	aa 1f       	adc	r26, r26
    2418:	bb 1f       	adc	r27, r27
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    241a:	12 30       	cpi	r17, 0x02	; 2
    241c:	81 f0       	breq	.+32     	; 0x243e <__stack+0x33f>
    241e:	82 0f       	add	r24, r18
    2420:	93 1f       	adc	r25, r19
    2422:	a4 1f       	adc	r26, r20
    2424:	b5 1f       	adc	r27, r21
    2426:	b6 95       	lsr	r27
    2428:	a7 95       	ror	r26
    242a:	97 95       	ror	r25
    242c:	87 95       	ror	r24
    242e:	21 70       	andi	r18, 0x01	; 1
    2430:	30 70       	andi	r19, 0x00	; 0
    2432:	40 70       	andi	r20, 0x00	; 0
    2434:	50 70       	andi	r21, 0x00	; 0
    2436:	82 0f       	add	r24, r18
    2438:	93 1f       	adc	r25, r19
    243a:	a4 1f       	adc	r26, r20
    243c:	b5 1f       	adc	r27, r21
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    243e:	81 50       	subi	r24, 0x01	; 1
    2440:	9e 4f       	sbci	r25, 0xFE	; 254
    2442:	af 4f       	sbci	r26, 0xFF	; 255
    2444:	bf 4f       	sbci	r27, 0xFF	; 255
    2446:	29 e0       	ldi	r18, 0x09	; 9
    2448:	b6 95       	lsr	r27
    244a:	a7 95       	ror	r26
    244c:	97 95       	ror	r25
    244e:	87 95       	ror	r24
    2450:	2a 95       	dec	r18
    2452:	d1 f7       	brne	.-12     	; 0x2448 <__stack+0x349>
    2454:	2a a5       	ldd	r18, Y+42	; 0x2a
    2456:	3b a5       	ldd	r19, Y+43	; 0x2b
    2458:	4c a5       	ldd	r20, Y+44	; 0x2c
    245a:	5d a5       	ldd	r21, Y+45	; 0x2d
    245c:	28 17       	cp	r18, r24
    245e:	39 07       	cpc	r19, r25
    2460:	4a 07       	cpc	r20, r26
    2462:	5b 07       	cpc	r21, r27
    2464:	08 f4       	brcc	.+2      	; 0x2468 <__stack+0x369>
    2466:	8c c0       	rjmp	.+280    	; 0x2580 <__stack+0x481>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    2468:	8f ef       	ldi	r24, 0xFF	; 255
    246a:	9f ef       	ldi	r25, 0xFF	; 255
    246c:	dc 01       	movw	r26, r24
    246e:	f7 01       	movw	r30, r14
    2470:	86 87       	std	Z+14, r24	; 0x0e
    2472:	97 87       	std	Z+15, r25	; 0x0f
    2474:	a0 8b       	std	Z+16, r26	; 0x10
    2476:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
    2478:	d7 01       	movw	r26, r14
    247a:	1a 96       	adiw	r26, 0x0a	; 10
    247c:	1d 92       	st	X+, r1
    247e:	1d 92       	st	X+, r1
    2480:	1d 92       	st	X+, r1
    2482:	1c 92       	st	X, r1
    2484:	1d 97       	sbiw	r26, 0x0d	; 13

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    2486:	13 30       	cpi	r17, 0x03	; 3
    2488:	09 f0       	breq	.+2      	; 0x248c <__stack+0x38d>
    248a:	5c c0       	rjmp	.+184    	; 0x2544 <__stack+0x445>
	 	fs->fsi_flag = 0;
    248c:	15 96       	adiw	r26, 0x05	; 5
    248e:	1c 92       	st	X, r1
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    2490:	f6 01       	movw	r30, r12
    2492:	20 a9       	ldd	r18, Z+48	; 0x30
    2494:	31 a9       	ldd	r19, Z+49	; 0x31
    2496:	40 e0       	ldi	r20, 0x00	; 0
    2498:	50 e0       	ldi	r21, 0x00	; 0
    249a:	8e a1       	ldd	r24, Y+38	; 0x26
    249c:	9f a1       	ldd	r25, Y+39	; 0x27
    249e:	a8 a5       	ldd	r26, Y+40	; 0x28
    24a0:	b9 a5       	ldd	r27, Y+41	; 0x29
    24a2:	28 0f       	add	r18, r24
    24a4:	39 1f       	adc	r19, r25
    24a6:	4a 1f       	adc	r20, r26
    24a8:	5b 1f       	adc	r21, r27
    24aa:	d7 01       	movw	r26, r14
    24ac:	52 96       	adiw	r26, 0x12	; 18
    24ae:	2d 93       	st	X+, r18
    24b0:	3d 93       	st	X+, r19
    24b2:	4d 93       	st	X+, r20
    24b4:	5c 93       	st	X, r21
    24b6:	55 97       	sbiw	r26, 0x15	; 21
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    24b8:	b7 01       	movw	r22, r14
    24ba:	62 5d       	subi	r22, 0xD2	; 210
    24bc:	7f 4f       	sbci	r23, 0xFF	; 255
    24be:	11 96       	adiw	r26, 0x01	; 1
    24c0:	8c 91       	ld	r24, X
    24c2:	01 e0       	ldi	r16, 0x01	; 1
    24c4:	04 d8       	rcall	.-4088   	; 0x14ce <disk_read>
    24c6:	88 23       	and	r24, r24
    24c8:	e9 f5       	brne	.+122    	; 0x2544 <__stack+0x445>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    24ca:	f6 01       	movw	r30, r12
    24cc:	e2 50       	subi	r30, 0x02	; 2
    24ce:	fe 4f       	sbci	r31, 0xFE	; 254

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    24d0:	80 81       	ld	r24, Z
    24d2:	91 81       	ldd	r25, Z+1	; 0x01
    24d4:	ba ea       	ldi	r27, 0xAA	; 170
    24d6:	85 35       	cpi	r24, 0x55	; 85
    24d8:	9b 07       	cpc	r25, r27
    24da:	a1 f5       	brne	.+104    	; 0x2544 <__stack+0x445>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    24dc:	f7 01       	movw	r30, r14
    24de:	86 a5       	ldd	r24, Z+46	; 0x2e
    24e0:	97 a5       	ldd	r25, Z+47	; 0x2f
    24e2:	a0 a9       	ldd	r26, Z+48	; 0x30
    24e4:	b1 a9       	ldd	r27, Z+49	; 0x31
    24e6:	82 35       	cpi	r24, 0x52	; 82
    24e8:	f2 e5       	ldi	r31, 0x52	; 82
    24ea:	9f 07       	cpc	r25, r31
    24ec:	f1 e6       	ldi	r31, 0x61	; 97
    24ee:	af 07       	cpc	r26, r31
    24f0:	f1 e4       	ldi	r31, 0x41	; 65
    24f2:	bf 07       	cpc	r27, r31
    24f4:	39 f5       	brne	.+78     	; 0x2544 <__stack+0x445>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    24f6:	f6 01       	movw	r30, r12
    24f8:	ec 51       	subi	r30, 0x1C	; 28
    24fa:	fe 4f       	sbci	r31, 0xFE	; 254
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    24fc:	80 81       	ld	r24, Z
    24fe:	91 81       	ldd	r25, Z+1	; 0x01
    2500:	a2 81       	ldd	r26, Z+2	; 0x02
    2502:	b3 81       	ldd	r27, Z+3	; 0x03
    2504:	82 37       	cpi	r24, 0x72	; 114
    2506:	22 e7       	ldi	r18, 0x72	; 114
    2508:	92 07       	cpc	r25, r18
    250a:	21 e4       	ldi	r18, 0x41	; 65
    250c:	a2 07       	cpc	r26, r18
    250e:	21 e6       	ldi	r18, 0x61	; 97
    2510:	b2 07       	cpc	r27, r18
    2512:	c1 f4       	brne	.+48     	; 0x2544 <__stack+0x445>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    2514:	f6 01       	movw	r30, r12
    2516:	e4 51       	subi	r30, 0x14	; 20
    2518:	fe 4f       	sbci	r31, 0xFE	; 254
    251a:	80 81       	ld	r24, Z
    251c:	91 81       	ldd	r25, Z+1	; 0x01
    251e:	a2 81       	ldd	r26, Z+2	; 0x02
    2520:	b3 81       	ldd	r27, Z+3	; 0x03
    2522:	f7 01       	movw	r30, r14
    2524:	82 87       	std	Z+10, r24	; 0x0a
    2526:	93 87       	std	Z+11, r25	; 0x0b
    2528:	a4 87       	std	Z+12, r26	; 0x0c
    252a:	b5 87       	std	Z+13, r27	; 0x0d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    252c:	f6 01       	movw	r30, r12
    252e:	e8 51       	subi	r30, 0x18	; 24
    2530:	fe 4f       	sbci	r31, 0xFE	; 254
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	a2 81       	ldd	r26, Z+2	; 0x02
    2538:	b3 81       	ldd	r27, Z+3	; 0x03
    253a:	f7 01       	movw	r30, r14
    253c:	86 87       	std	Z+14, r24	; 0x0e
    253e:	97 87       	std	Z+15, r25	; 0x0f
    2540:	a0 8b       	std	Z+16, r26	; 0x10
    2542:	b1 8b       	std	Z+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    2544:	d7 01       	movw	r26, r14
    2546:	1c 93       	st	X, r17
	fs->id = ++Fsid;		/* File system mount ID */
    2548:	80 91 28 04 	lds	r24, 0x0428
    254c:	90 91 29 04 	lds	r25, 0x0429
    2550:	01 96       	adiw	r24, 0x01	; 1
    2552:	90 93 29 04 	sts	0x0429, r25
    2556:	80 93 28 04 	sts	0x0428, r24
    255a:	17 96       	adiw	r26, 0x07	; 7
    255c:	9c 93       	st	X, r25
    255e:	8e 93       	st	-X, r24
    2560:	16 97       	sbiw	r26, 0x06	; 6
	fs->winsect = 0;		/* Invalidate sector cache */
    2562:	f7 01       	movw	r30, r14
    2564:	12 a6       	std	Z+42, r1	; 0x2a
    2566:	13 a6       	std	Z+43, r1	; 0x2b
    2568:	14 a6       	std	Z+44, r1	; 0x2c
    256a:	15 a6       	std	Z+45, r1	; 0x2d
	fs->wflag = 0;
    256c:	14 82       	std	Z+4, r1	; 0x04
    256e:	93 c2       	rjmp	.+1318   	; 0x2a96 <__stack+0x997>
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
    2570:	2b e0       	ldi	r18, 0x0B	; 11
    2572:	64 c2       	rjmp	.+1224   	; 0x2a3c <__stack+0x93d>
	fs = FatFs[vol];					/* Get corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    2574:	2c e0       	ldi	r18, 0x0C	; 12
    2576:	62 c2       	rjmp	.+1220   	; 0x2a3c <__stack+0x93d>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    2578:	23 e0       	ldi	r18, 0x03	; 3
    257a:	60 c2       	rjmp	.+1216   	; 0x2a3c <__stack+0x93d>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    257c:	2a e0       	ldi	r18, 0x0A	; 10
    257e:	5e c2       	rjmp	.+1212   	; 0x2a3c <__stack+0x93d>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;
    2580:	2d e0       	ldi	r18, 0x0D	; 13
    2582:	5c c2       	rjmp	.+1208   	; 0x2a3c <__stack+0x93d>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    2584:	8c 35       	cpi	r24, 0x5C	; 92
    2586:	19 f4       	brne	.+6      	; 0x258e <__stack+0x48f>
		path++;
    2588:	08 94       	sec
    258a:	21 1c       	adc	r2, r1
    258c:	31 1c       	adc	r3, r1
	dj->sclust = 0;						/* Start from the root dir */
    258e:	1b 8a       	std	Y+19, r1	; 0x13
    2590:	1c 8a       	std	Y+20, r1	; 0x14
    2592:	1d 8a       	std	Y+21, r1	; 0x15
    2594:	1e 8a       	std	Y+22, r1	; 0x16
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    2596:	d1 01       	movw	r26, r2
    2598:	8c 91       	ld	r24, X
    259a:	80 32       	cpi	r24, 0x20	; 32
    259c:	38 f4       	brcc	.+14     	; 0x25ac <__stack+0x4ad>
		res = dir_sdi(dj, 0);
    259e:	ce 01       	movw	r24, r28
    25a0:	0d 96       	adiw	r24, 0x0d	; 13
    25a2:	26 da       	rcall	.-2996   	; 0x19f0 <dir_sdi.clone.2>
    25a4:	28 2f       	mov	r18, r24
		dj->dir = 0;
    25a6:	18 a2       	std	Y+32, r1	; 0x20
    25a8:	1f 8e       	std	Y+31, r1	; 0x1f
    25aa:	f8 c0       	rjmp	.+496    	; 0x279c <__stack+0x69d>
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    25ac:	85 e0       	ldi	r24, 0x05	; 5
    25ae:	48 2e       	mov	r4, r24
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
    25b0:	0d e0       	ldi	r16, 0x0D	; 13
    25b2:	80 2e       	mov	r8, r16
    25b4:	91 2c       	mov	r9, r1
    25b6:	8c 0e       	add	r8, r28
    25b8:	9d 1e       	adc	r9, r29
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
		res = dir_sdi(dj, 0);
		dj->dir = 0;
    25ba:	61 01       	movw	r12, r2
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    25bc:	f1 01       	movw	r30, r2
    25be:	80 81       	ld	r24, Z
    25c0:	08 94       	sec
    25c2:	21 1c       	adc	r2, r1
    25c4:	31 1c       	adc	r3, r1
    25c6:	8f 32       	cpi	r24, 0x2F	; 47
    25c8:	c1 f3       	breq	.-16     	; 0x25ba <__stack+0x4bb>
    25ca:	8c 35       	cpi	r24, 0x5C	; 92
    25cc:	b1 f3       	breq	.-20     	; 0x25ba <__stack+0x4bb>
	sfn = dj->fn;
    25ce:	09 a1       	ldd	r16, Y+33	; 0x21
    25d0:	1a a1       	ldd	r17, Y+34	; 0x22
	mem_set(sfn, ' ', 11);
    25d2:	c8 01       	movw	r24, r16
    25d4:	60 e2       	ldi	r22, 0x20	; 32
    25d6:	70 e0       	ldi	r23, 0x00	; 0
    25d8:	4b e0       	ldi	r20, 0x0B	; 11
    25da:	50 e0       	ldi	r21, 0x00	; 0
    25dc:	18 d8       	rcall	.-4048   	; 0x160e <mem_set>
	si = i = b = 0; ni = 8;
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	ee 24       	eor	r14, r14
    25e4:	ff 24       	eor	r15, r15
    25e6:	28 e0       	ldi	r18, 0x08	; 8
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	60 e0       	ldi	r22, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    25ec:	f6 01       	movw	r30, r12
    25ee:	ee 0d       	add	r30, r14
    25f0:	ff 1d       	adc	r31, r15
    25f2:	70 81       	ld	r23, Z
    25f4:	08 94       	sec
    25f6:	e1 1c       	adc	r14, r1
    25f8:	f1 1c       	adc	r15, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    25fa:	71 32       	cpi	r23, 0x21	; 33
    25fc:	08 f4       	brcc	.+2      	; 0x2600 <__stack+0x501>
    25fe:	60 c0       	rjmp	.+192    	; 0x26c0 <__stack+0x5c1>
    2600:	7f 32       	cpi	r23, 0x2F	; 47
    2602:	09 f4       	brne	.+2      	; 0x2606 <__stack+0x507>
    2604:	5f c0       	rjmp	.+190    	; 0x26c4 <__stack+0x5c5>
    2606:	7c 35       	cpi	r23, 0x5C	; 92
    2608:	09 f4       	brne	.+2      	; 0x260c <__stack+0x50d>
    260a:	5c c0       	rjmp	.+184    	; 0x26c4 <__stack+0x5c5>
		if (c == '.' || i >= ni) {
    260c:	7e 32       	cpi	r23, 0x2E	; 46
    260e:	19 f0       	breq	.+6      	; 0x2616 <__stack+0x517>
    2610:	82 17       	cp	r24, r18
    2612:	93 07       	cpc	r25, r19
    2614:	70 f0       	brcs	.+28     	; 0x2632 <__stack+0x533>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    2616:	28 30       	cpi	r18, 0x08	; 8
    2618:	31 05       	cpc	r19, r1
    261a:	09 f0       	breq	.+2      	; 0x261e <__stack+0x51f>
    261c:	ba c0       	rjmp	.+372    	; 0x2792 <__stack+0x693>
    261e:	7e 32       	cpi	r23, 0x2E	; 46
    2620:	09 f0       	breq	.+2      	; 0x2624 <__stack+0x525>
    2622:	b7 c0       	rjmp	.+366    	; 0x2792 <__stack+0x693>
			i = 8; ni = 11;
			b <<= 2; continue;
    2624:	66 0f       	add	r22, r22
    2626:	66 0f       	add	r22, r22
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    2628:	88 e0       	ldi	r24, 0x08	; 8
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	2b e0       	ldi	r18, 0x0B	; 11
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	dd cf       	rjmp	.-70     	; 0x25ec <__stack+0x4ed>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char? */
    2632:	77 fd       	sbrc	r23, 7
			b |= 3;						/* Eliminate NT flag */
    2634:	63 60       	ori	r22, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    2636:	47 2f       	mov	r20, r23
    2638:	41 58       	subi	r20, 0x81	; 129
    263a:	4f 31       	cpi	r20, 0x1F	; 31
    263c:	18 f0       	brcs	.+6      	; 0x2644 <__stack+0x545>
    263e:	4f 55       	subi	r20, 0x5F	; 95
    2640:	4d 31       	cpi	r20, 0x1D	; 29
    2642:	00 f5       	brcc	.+64     	; 0x2684 <__stack+0x585>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    2644:	f6 01       	movw	r30, r12
    2646:	ee 0d       	add	r30, r14
    2648:	ff 1d       	adc	r31, r15
    264a:	a0 81       	ld	r26, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    264c:	4a 2f       	mov	r20, r26
    264e:	40 54       	subi	r20, 0x40	; 64
    2650:	4f 33       	cpi	r20, 0x3F	; 63
    2652:	20 f0       	brcs	.+8      	; 0x265c <__stack+0x55d>
    2654:	40 54       	subi	r20, 0x40	; 64
    2656:	4d 37       	cpi	r20, 0x7D	; 125
    2658:	08 f0       	brcs	.+2      	; 0x265c <__stack+0x55d>
    265a:	9b c0       	rjmp	.+310    	; 0x2792 <__stack+0x693>
    265c:	a9 01       	movw	r20, r18
    265e:	41 50       	subi	r20, 0x01	; 1
    2660:	50 40       	sbci	r21, 0x00	; 0
    2662:	84 17       	cp	r24, r20
    2664:	95 07       	cpc	r25, r21
    2666:	08 f0       	brcs	.+2      	; 0x266a <__stack+0x56b>
    2668:	94 c0       	rjmp	.+296    	; 0x2792 <__stack+0x693>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    266a:	08 94       	sec
    266c:	e1 1c       	adc	r14, r1
    266e:	f1 1c       	adc	r15, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    2670:	f8 01       	movw	r30, r16
    2672:	e8 0f       	add	r30, r24
    2674:	f9 1f       	adc	r31, r25
    2676:	70 83       	st	Z, r23
    2678:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    267a:	f8 01       	movw	r30, r16
    267c:	e8 0f       	add	r30, r24
    267e:	f9 1f       	adc	r31, r25
    2680:	a0 83       	st	Z, r26
    2682:	1c c0       	rjmp	.+56     	; 0x26bc <__stack+0x5bd>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    2684:	a7 2f       	mov	r26, r23
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	ef eb       	ldi	r30, 0xBF	; 191
    268a:	f1 e0       	ldi	r31, 0x01	; 1
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    268c:	41 91       	ld	r20, Z+
    268e:	44 23       	and	r20, r20
    2690:	29 f0       	breq	.+10     	; 0x269c <__stack+0x59d>
    2692:	50 e0       	ldi	r21, 0x00	; 0
    2694:	4a 17       	cp	r20, r26
    2696:	5b 07       	cpc	r21, r27
    2698:	c9 f7       	brne	.-14     	; 0x268c <__stack+0x58d>
    269a:	7b c0       	rjmp	.+246    	; 0x2792 <__stack+0x693>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    269c:	47 2f       	mov	r20, r23
    269e:	41 54       	subi	r20, 0x41	; 65
    26a0:	4a 31       	cpi	r20, 0x1A	; 26
    26a2:	10 f4       	brcc	.+4      	; 0x26a8 <__stack+0x5a9>
				b |= 2;
    26a4:	62 60       	ori	r22, 0x02	; 2
    26a6:	06 c0       	rjmp	.+12     	; 0x26b4 <__stack+0x5b5>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    26a8:	47 2f       	mov	r20, r23
    26aa:	41 56       	subi	r20, 0x61	; 97
    26ac:	4a 31       	cpi	r20, 0x1A	; 26
    26ae:	10 f4       	brcc	.+4      	; 0x26b4 <__stack+0x5b5>
					b |= 1; c -= 0x20;
    26b0:	61 60       	ori	r22, 0x01	; 1
    26b2:	70 52       	subi	r23, 0x20	; 32
				}
			}
			sfn[i++] = c;
    26b4:	f8 01       	movw	r30, r16
    26b6:	e8 0f       	add	r30, r24
    26b8:	f9 1f       	adc	r31, r25
    26ba:	70 83       	st	Z, r23
    26bc:	01 96       	adiw	r24, 0x01	; 1
    26be:	96 cf       	rjmp	.-212    	; 0x25ec <__stack+0x4ed>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    26c0:	44 e0       	ldi	r20, 0x04	; 4
    26c2:	01 c0       	rjmp	.+2      	; 0x26c6 <__stack+0x5c7>
    26c4:	40 e0       	ldi	r20, 0x00	; 0

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	09 f4       	brne	.+2      	; 0x26cc <__stack+0x5cd>
    26ca:	63 c0       	rjmp	.+198    	; 0x2792 <__stack+0x693>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    26cc:	d8 01       	movw	r26, r16
    26ce:	8c 91       	ld	r24, X
    26d0:	85 3e       	cpi	r24, 0xE5	; 229
    26d2:	09 f4       	brne	.+2      	; 0x26d6 <__stack+0x5d7>
    26d4:	4c 92       	st	X, r4

	if (ni == 8) b <<= 2;
    26d6:	28 30       	cpi	r18, 0x08	; 8
    26d8:	31 05       	cpc	r19, r1
    26da:	11 f4       	brne	.+4      	; 0x26e0 <__stack+0x5e1>
    26dc:	66 0f       	add	r22, r22
    26de:	66 0f       	add	r22, r22
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    26e0:	70 e0       	ldi	r23, 0x00	; 0
    26e2:	cb 01       	movw	r24, r22
    26e4:	83 70       	andi	r24, 0x03	; 3
    26e6:	90 70       	andi	r25, 0x00	; 0
    26e8:	81 30       	cpi	r24, 0x01	; 1
    26ea:	91 05       	cpc	r25, r1
    26ec:	09 f4       	brne	.+2      	; 0x26f0 <__stack+0x5f1>
    26ee:	40 61       	ori	r20, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    26f0:	6c 70       	andi	r22, 0x0C	; 12
    26f2:	70 70       	andi	r23, 0x00	; 0
    26f4:	64 30       	cpi	r22, 0x04	; 4
    26f6:	71 05       	cpc	r23, r1
    26f8:	09 f4       	brne	.+2      	; 0x26fc <__stack+0x5fd>
    26fa:	48 60       	ori	r20, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    26fc:	f8 01       	movw	r30, r16
    26fe:	43 87       	std	Z+11, r20	; 0x0b
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    2700:	c4 01       	movw	r24, r8
    2702:	76 d9       	rcall	.-3348   	; 0x19f0 <dir_sdi.clone.2>
	if (res != FR_OK) return res;
    2704:	88 23       	and	r24, r24
    2706:	21 f5       	brne	.+72     	; 0x2750 <__stack+0x651>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    2708:	4b 8d       	ldd	r20, Y+27	; 0x1b
    270a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    270c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    270e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2710:	8d 85       	ldd	r24, Y+13	; 0x0d
    2712:	9e 85       	ldd	r25, Y+14	; 0x0e
    2714:	0e 94 34 0b 	call	0x1668	; 0x1668 <move_window>
		if (res != FR_OK) break;
    2718:	88 23       	and	r24, r24
    271a:	d1 f4       	brne	.+52     	; 0x2750 <__stack+0x651>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    271c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    271e:	f8 a1       	ldd	r31, Y+32	; 0x20
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2720:	90 81       	ld	r25, Z
    2722:	99 23       	and	r25, r25
    2724:	a1 f0       	breq	.+40     	; 0x274e <__stack+0x64f>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    2726:	93 85       	ldd	r25, Z+11	; 0x0b
    2728:	93 fd       	sbrc	r25, 3
    272a:	0c c0       	rjmp	.+24     	; 0x2744 <__stack+0x645>
    272c:	a9 a1       	ldd	r26, Y+33	; 0x21
    272e:	ba a1       	ldd	r27, Y+34	; 0x22

/*-----------------------------------------------------------------------*/
/* Open or Create a File                                                 */
/*-----------------------------------------------------------------------*/

FRESULT f_open (
    2730:	af 01       	movw	r20, r30
    2732:	45 5f       	subi	r20, 0xF5	; 245
    2734:	5f 4f       	sbci	r21, 0xFF	; 255
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    2736:	e4 17       	cp	r30, r20
    2738:	f5 07       	cpc	r31, r21
    273a:	51 f0       	breq	.+20     	; 0x2750 <__stack+0x651>
    273c:	21 91       	ld	r18, Z+
    273e:	9d 91       	ld	r25, X+
    2740:	29 17       	cp	r18, r25
    2742:	c9 f3       	breq	.-14     	; 0x2736 <__stack+0x637>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    2744:	c4 01       	movw	r24, r8
    2746:	60 e0       	ldi	r22, 0x00	; 0
    2748:	70 e0       	ldi	r23, 0x00	; 0
    274a:	8d db       	rcall	.-2278   	; 0x1e66 <dir_next>
    274c:	db cf       	rjmp	.-74     	; 0x2704 <__stack+0x605>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    274e:	84 e0       	ldi	r24, 0x04	; 4
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    2750:	e9 a1       	ldd	r30, Y+33	; 0x21
    2752:	fa a1       	ldd	r31, Y+34	; 0x22
    2754:	93 85       	ldd	r25, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
    2756:	88 23       	and	r24, r24
    2758:	31 f0       	breq	.+12     	; 0x2766 <__stack+0x667>
    275a:	28 2f       	mov	r18, r24
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
    275c:	24 30       	cpi	r18, 0x04	; 4
    275e:	f1 f4       	brne	.+60     	; 0x279c <__stack+0x69d>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    2760:	92 ff       	sbrs	r25, 2
    2762:	19 c0       	rjmp	.+50     	; 0x2796 <__stack+0x697>
    2764:	1b c0       	rjmp	.+54     	; 0x279c <__stack+0x69d>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    2766:	92 fd       	sbrc	r25, 2
    2768:	18 c0       	rjmp	.+48     	; 0x279a <__stack+0x69b>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    276a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    276c:	78 a1       	ldd	r23, Y+32	; 0x20
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    276e:	db 01       	movw	r26, r22
    2770:	1b 96       	adiw	r26, 0x0b	; 11
    2772:	8c 91       	ld	r24, X
    2774:	1b 97       	sbiw	r26, 0x0b	; 11
    2776:	84 ff       	sbrs	r24, 4
    2778:	0e c0       	rjmp	.+28     	; 0x2796 <__stack+0x697>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    277a:	16 01       	movw	r2, r12
    277c:	2e 0c       	add	r2, r14
    277e:	3f 1c       	adc	r3, r15
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    2780:	ed 85       	ldd	r30, Y+13	; 0x0d
    2782:	fe 85       	ldd	r31, Y+14	; 0x0e
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ld_clust(dj->fs, dir);
    2784:	80 81       	ld	r24, Z
    2786:	2c d8       	rcall	.-4008   	; 0x17e0 <ld_clust.clone.0>
    2788:	6b 8b       	std	Y+19, r22	; 0x13
    278a:	7c 8b       	std	Y+20, r23	; 0x14
    278c:	8d 8b       	std	Y+21, r24	; 0x15
    278e:	9e 8b       	std	Y+22, r25	; 0x16
    2790:	14 cf       	rjmp	.-472    	; 0x25ba <__stack+0x4bb>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    2792:	26 e0       	ldi	r18, 0x06	; 6
    2794:	03 c0       	rjmp	.+6      	; 0x279c <__stack+0x69d>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    2796:	25 e0       	ldi	r18, 0x05	; 5
    2798:	01 c0       	rjmp	.+2      	; 0x279c <__stack+0x69d>
    279a:	28 2f       	mov	r18, r24
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
    279c:	ef 8c       	ldd	r14, Y+31	; 0x1f
    279e:	f8 a0       	ldd	r15, Y+32	; 0x20
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    27a0:	22 23       	and	r18, r18
    27a2:	21 f4       	brne	.+8      	; 0x27ac <__stack+0x6ad>
			if (!dir)	/* Current dir itself */
    27a4:	e1 14       	cp	r14, r1
    27a6:	f1 04       	cpc	r15, r1
    27a8:	09 f4       	brne	.+2      	; 0x27ac <__stack+0x6ad>
				res = FR_INVALID_NAME;
    27aa:	26 e0       	ldi	r18, 0x06	; 6
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    27ac:	bd a1       	ldd	r27, Y+37	; 0x25
    27ae:	8b 2f       	mov	r24, r27
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	ac 01       	movw	r20, r24
    27b4:	4c 71       	andi	r20, 0x1C	; 28
    27b6:	50 70       	andi	r21, 0x00	; 0
    27b8:	41 15       	cp	r20, r1
    27ba:	51 05       	cpc	r21, r1
    27bc:	09 f4       	brne	.+2      	; 0x27c0 <__stack+0x6c1>
    27be:	ef c0       	rjmp	.+478    	; 0x299e <__stack+0x89f>
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
    27c0:	22 23       	and	r18, r18
    27c2:	09 f4       	brne	.+2      	; 0x27c6 <__stack+0x6c7>
    27c4:	47 c0       	rjmp	.+142    	; 0x2854 <__stack+0x755>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    27c6:	24 30       	cpi	r18, 0x04	; 4
    27c8:	e1 f5       	brne	.+120    	; 0x2842 <__stack+0x743>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    27ca:	8e 01       	movw	r16, r28
    27cc:	03 5f       	subi	r16, 0xF3	; 243
    27ce:	1f 4f       	sbci	r17, 0xFF	; 255
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    27d0:	c8 01       	movw	r24, r16
    27d2:	0e d9       	rcall	.-3556   	; 0x19f0 <dir_sdi.clone.2>
    27d4:	28 2f       	mov	r18, r24
	if (res == FR_OK) {
    27d6:	88 23       	and	r24, r24
    27d8:	a1 f5       	brne	.+104    	; 0x2842 <__stack+0x743>
			if (res != FR_OK) {					/* No file, create new */
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    27da:	e0 2e       	mov	r14, r16

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
	if (res == FR_OK) {
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    27dc:	4b 8d       	ldd	r20, Y+27	; 0x1b
    27de:	5c 8d       	ldd	r21, Y+28	; 0x1c
    27e0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    27e2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    27e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e8:	0e 94 34 0b 	call	0x1668	; 0x1668 <move_window>
			if (res != FR_OK) break;
    27ec:	88 23       	and	r24, r24
    27ee:	41 f5       	brne	.+80     	; 0x2840 <__stack+0x741>
			c = *dj->dir;
    27f0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    27f2:	f8 a1       	ldd	r31, Y+32	; 0x20
    27f4:	80 81       	ld	r24, Z
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    27f6:	85 3e       	cpi	r24, 0xE5	; 229
    27f8:	09 f4       	brne	.+2      	; 0x27fc <__stack+0x6fd>
    27fa:	3a c1       	rjmp	.+628    	; 0x2a70 <__stack+0x971>
    27fc:	88 23       	and	r24, r24
    27fe:	09 f4       	brne	.+2      	; 0x2802 <__stack+0x703>
    2800:	37 c1       	rjmp	.+622    	; 0x2a70 <__stack+0x971>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    2802:	8e 2d       	mov	r24, r14
    2804:	91 2f       	mov	r25, r17
    2806:	61 e0       	ldi	r22, 0x01	; 1
    2808:	70 e0       	ldi	r23, 0x00	; 0
    280a:	2d db       	rcall	.-2470   	; 0x1e66 <dir_next>
		} while (res == FR_OK);
    280c:	88 23       	and	r24, r24
    280e:	31 f3       	breq	.-52     	; 0x27dc <__stack+0x6dd>
    2810:	17 c0       	rjmp	.+46     	; 0x2840 <__stack+0x741>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    2812:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2814:	18 a1       	ldd	r17, Y+32	; 0x20
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    2816:	c8 01       	movw	r24, r16
    2818:	60 e0       	ldi	r22, 0x00	; 0
    281a:	70 e0       	ldi	r23, 0x00	; 0
    281c:	40 e2       	ldi	r20, 0x20	; 32
    281e:	50 e0       	ldi	r21, 0x00	; 0
    2820:	28 af       	std	Y+56, r18	; 0x38
    2822:	0e 94 07 0b 	call	0x160e	; 0x160e <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    2826:	69 a1       	ldd	r22, Y+33	; 0x21
    2828:	7a a1       	ldd	r23, Y+34	; 0x22
    282a:	c8 01       	movw	r24, r16
    282c:	4b e0       	ldi	r20, 0x0B	; 11
    282e:	50 e0       	ldi	r21, 0x00	; 0
    2830:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    2834:	ed 85       	ldd	r30, Y+13	; 0x0d
    2836:	fe 85       	ldd	r31, Y+14	; 0x0e
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	84 83       	std	Z+4, r24	; 0x04
    283c:	28 ad       	ldd	r18, Y+56	; 0x38
    283e:	01 c0       	rjmp	.+2      	; 0x2842 <__stack+0x743>
    2840:	28 2f       	mov	r18, r24
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
    2842:	ef 8c       	ldd	r14, Y+31	; 0x1f
    2844:	f8 a0       	ldd	r15, Y+32	; 0x20
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    2846:	22 23       	and	r18, r18
    2848:	09 f0       	breq	.+2      	; 0x284c <__stack+0x74d>
    284a:	f8 c0       	rjmp	.+496    	; 0x2a3c <__stack+0x93d>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    284c:	ed a1       	ldd	r30, Y+37	; 0x25
    284e:	e8 60       	ori	r30, 0x08	; 8
    2850:	ed a3       	std	Y+37, r30	; 0x25
    2852:	09 c0       	rjmp	.+18     	; 0x2866 <__stack+0x767>
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    2854:	d7 01       	movw	r26, r14
    2856:	1b 96       	adiw	r26, 0x0b	; 11
    2858:	2c 91       	ld	r18, X
    285a:	1b 97       	sbiw	r26, 0x0b	; 11
    285c:	21 71       	andi	r18, 0x11	; 17
    285e:	09 f0       	breq	.+2      	; 0x2862 <__stack+0x763>
    2860:	18 c1       	rjmp	.+560    	; 0x2a92 <__stack+0x993>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    2862:	82 fd       	sbrc	r24, 2
    2864:	12 c1       	rjmp	.+548    	; 0x2a8a <__stack+0x98b>
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    2866:	bd a1       	ldd	r27, Y+37	; 0x25
    2868:	b3 ff       	sbrs	r27, 3
    286a:	a6 c0       	rjmp	.+332    	; 0x29b8 <__stack+0x8b9>
				dw = get_fattime();					/* Created time */
    286c:	0e 94 83 0a 	call	0x1506	; 0x1506 <get_fattime>
				ST_DWORD(dir+DIR_CrtTime, dw);
    2870:	f7 01       	movw	r30, r14
    2872:	66 87       	std	Z+14, r22	; 0x0e
    2874:	77 87       	std	Z+15, r23	; 0x0f
    2876:	80 8b       	std	Z+16, r24	; 0x10
    2878:	91 8b       	std	Z+17, r25	; 0x11
				dir[DIR_Attr] = 0;					/* Reset attribute */
    287a:	13 86       	std	Z+11, r1	; 0x0b
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    287c:	d7 01       	movw	r26, r14
    287e:	5c 96       	adiw	r26, 0x1c	; 28
    2880:	1d 92       	st	X+, r1
    2882:	1d 92       	st	X+, r1
    2884:	1d 92       	st	X+, r1
    2886:	1c 92       	st	X, r1
    2888:	5f 97       	sbiw	r26, 0x1f	; 31
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    288a:	ed 85       	ldd	r30, Y+13	; 0x0d
    288c:	fe 85       	ldd	r31, Y+14	; 0x0e
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
				dw = get_fattime();					/* Created time */
				ST_DWORD(dir+DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;					/* Reset attribute */
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
    288e:	80 81       	ld	r24, Z
    2890:	b7 01       	movw	r22, r14
    2892:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <ld_clust.clone.0>
    2896:	2b 01       	movw	r4, r22
    2898:	3c 01       	movw	r6, r24
				st_clust(dir, 0);					/* cluster = 0 */
    289a:	c7 01       	movw	r24, r14
    289c:	40 e0       	ldi	r20, 0x00	; 0
    289e:	50 e0       	ldi	r21, 0x00	; 0
    28a0:	ba 01       	movw	r22, r20
    28a2:	0e 94 12 0b 	call	0x1624	; 0x1624 <st_clust>
				dj.fs->wflag = 1;
    28a6:	cd 84       	ldd	r12, Y+13	; 0x0d
    28a8:	de 84       	ldd	r13, Y+14	; 0x0e
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	f6 01       	movw	r30, r12
    28ae:	84 83       	std	Z+4, r24	; 0x04
				if (cl) {							/* Remove the cluster chain if exist */
    28b0:	41 14       	cp	r4, r1
    28b2:	51 04       	cpc	r5, r1
    28b4:	61 04       	cpc	r6, r1
    28b6:	71 04       	cpc	r7, r1
    28b8:	09 f4       	brne	.+2      	; 0x28bc <__stack+0x7bd>
    28ba:	7e c0       	rjmp	.+252    	; 0x29b8 <__stack+0x8b9>
					dw = dj.fs->winsect;
    28bc:	d6 01       	movw	r26, r12
    28be:	9a 96       	adiw	r26, 0x2a	; 42
    28c0:	2d 91       	ld	r18, X+
    28c2:	3d 91       	ld	r19, X+
    28c4:	4d 91       	ld	r20, X+
    28c6:	5c 91       	ld	r21, X
    28c8:	9d 97       	sbiw	r26, 0x2d	; 45
    28ca:	2a a7       	std	Y+42, r18	; 0x2a
    28cc:	3b a7       	std	Y+43, r19	; 0x2b
    28ce:	4c a7       	std	Y+44, r20	; 0x2c
    28d0:	5d a7       	std	Y+45, r21	; 0x2d
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    28d2:	b2 e0       	ldi	r27, 0x02	; 2
    28d4:	4b 16       	cp	r4, r27
    28d6:	51 04       	cpc	r5, r1
    28d8:	61 04       	cpc	r6, r1
    28da:	71 04       	cpc	r7, r1
    28dc:	08 f4       	brcc	.+2      	; 0x28e0 <__stack+0x7e1>
    28de:	5b c0       	rjmp	.+182    	; 0x2996 <__stack+0x897>
    28e0:	86 89       	ldd	r24, Z+22	; 0x16
    28e2:	97 89       	ldd	r25, Z+23	; 0x17
    28e4:	a0 8d       	ldd	r26, Z+24	; 0x18
    28e6:	b1 8d       	ldd	r27, Z+25	; 0x19
    28e8:	48 16       	cp	r4, r24
    28ea:	59 06       	cpc	r5, r25
    28ec:	6a 06       	cpc	r6, r26
    28ee:	7b 06       	cpc	r7, r27
    28f0:	08 f0       	brcs	.+2      	; 0x28f4 <__stack+0x7f5>
    28f2:	51 c0       	rjmp	.+162    	; 0x2996 <__stack+0x897>
    28f4:	53 01       	movw	r10, r6
    28f6:	42 01       	movw	r8, r4
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
				fs->fsi_flag = 1;
    28f8:	22 24       	eor	r2, r2
    28fa:	23 94       	inc	r2
    28fc:	4e a2       	std	Y+38, r4	; 0x26
    28fe:	5f a2       	std	Y+39, r5	; 0x27
    2900:	68 a6       	std	Y+40, r6	; 0x28
    2902:	79 a6       	std	Y+41, r7	; 0x29
    2904:	3c c0       	rjmp	.+120    	; 0x297e <__stack+0x87f>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    2906:	c6 01       	movw	r24, r12
    2908:	b5 01       	movw	r22, r10
    290a:	a4 01       	movw	r20, r8
    290c:	0e 94 34 0c 	call	0x1868	; 0x1868 <get_fat>
    2910:	2b 01       	movw	r4, r22
    2912:	3c 01       	movw	r6, r24
			if (nxt == 0) break;				/* Empty cluster? */
    2914:	61 15       	cp	r22, r1
    2916:	71 05       	cpc	r23, r1
    2918:	81 05       	cpc	r24, r1
    291a:	91 05       	cpc	r25, r1
    291c:	09 f4       	brne	.+2      	; 0x2920 <__stack+0x821>
    291e:	c5 c0       	rjmp	.+394    	; 0x2aaa <__stack+0x9ab>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2920:	61 30       	cpi	r22, 0x01	; 1
    2922:	71 05       	cpc	r23, r1
    2924:	81 05       	cpc	r24, r1
    2926:	91 05       	cpc	r25, r1
    2928:	b1 f1       	breq	.+108    	; 0x2996 <__stack+0x897>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    292a:	6f 3f       	cpi	r22, 0xFF	; 255
    292c:	2f ef       	ldi	r18, 0xFF	; 255
    292e:	72 07       	cpc	r23, r18
    2930:	2f ef       	ldi	r18, 0xFF	; 255
    2932:	82 07       	cpc	r24, r18
    2934:	2f ef       	ldi	r18, 0xFF	; 255
    2936:	92 07       	cpc	r25, r18
    2938:	81 f1       	breq	.+96     	; 0x299a <__stack+0x89b>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    293a:	c6 01       	movw	r24, r12
    293c:	b5 01       	movw	r22, r10
    293e:	a4 01       	movw	r20, r8
    2940:	00 e0       	ldi	r16, 0x00	; 0
    2942:	10 e0       	ldi	r17, 0x00	; 0
    2944:	98 01       	movw	r18, r16
    2946:	d0 d8       	rcall	.-3680   	; 0x1ae8 <put_fat>
			if (res != FR_OK) break;
    2948:	88 23       	and	r24, r24
    294a:	09 f0       	breq	.+2      	; 0x294e <__stack+0x84f>
    294c:	76 c0       	rjmp	.+236    	; 0x2a3a <__stack+0x93b>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    294e:	f6 01       	movw	r30, r12
    2950:	86 85       	ldd	r24, Z+14	; 0x0e
    2952:	97 85       	ldd	r25, Z+15	; 0x0f
    2954:	a0 89       	ldd	r26, Z+16	; 0x10
    2956:	b1 89       	ldd	r27, Z+17	; 0x11
    2958:	8f 3f       	cpi	r24, 0xFF	; 255
    295a:	ff ef       	ldi	r31, 0xFF	; 255
    295c:	9f 07       	cpc	r25, r31
    295e:	ff ef       	ldi	r31, 0xFF	; 255
    2960:	af 07       	cpc	r26, r31
    2962:	ff ef       	ldi	r31, 0xFF	; 255
    2964:	bf 07       	cpc	r27, r31
    2966:	49 f0       	breq	.+18     	; 0x297a <__stack+0x87b>
				fs->free_clust++;
    2968:	01 96       	adiw	r24, 0x01	; 1
    296a:	a1 1d       	adc	r26, r1
    296c:	b1 1d       	adc	r27, r1
    296e:	f6 01       	movw	r30, r12
    2970:	86 87       	std	Z+14, r24	; 0x0e
    2972:	97 87       	std	Z+15, r25	; 0x0f
    2974:	a0 8b       	std	Z+16, r26	; 0x10
    2976:	b1 8b       	std	Z+17, r27	; 0x11
				fs->fsi_flag = 1;
    2978:	25 82       	std	Z+5, r2	; 0x05
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    297a:	53 01       	movw	r10, r6
    297c:	42 01       	movw	r8, r4
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    297e:	f6 01       	movw	r30, r12
    2980:	86 89       	ldd	r24, Z+22	; 0x16
    2982:	97 89       	ldd	r25, Z+23	; 0x17
    2984:	a0 8d       	ldd	r26, Z+24	; 0x18
    2986:	b1 8d       	ldd	r27, Z+25	; 0x19
    2988:	88 16       	cp	r8, r24
    298a:	99 06       	cpc	r9, r25
    298c:	aa 06       	cpc	r10, r26
    298e:	bb 06       	cpc	r11, r27
    2990:	08 f4       	brcc	.+2      	; 0x2994 <__stack+0x895>
    2992:	b9 cf       	rjmp	.-142    	; 0x2906 <__stack+0x807>
    2994:	8a c0       	rjmp	.+276    	; 0x2aaa <__stack+0x9ab>
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2996:	22 e0       	ldi	r18, 0x02	; 2
    2998:	51 c0       	rjmp	.+162    	; 0x2a3c <__stack+0x93d>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    299a:	21 e0       	ldi	r18, 0x01	; 1
    299c:	4f c0       	rjmp	.+158    	; 0x2a3c <__stack+0x93d>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
    299e:	22 23       	and	r18, r18
    29a0:	09 f0       	breq	.+2      	; 0x29a4 <__stack+0x8a5>
    29a2:	4c c0       	rjmp	.+152    	; 0x2a3c <__stack+0x93d>
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    29a4:	d7 01       	movw	r26, r14
    29a6:	1b 96       	adiw	r26, 0x0b	; 11
    29a8:	2c 91       	ld	r18, X
    29aa:	1b 97       	sbiw	r26, 0x0b	; 11
    29ac:	24 fd       	sbrc	r18, 4
    29ae:	6f c0       	rjmp	.+222    	; 0x2a8e <__stack+0x98f>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    29b0:	81 ff       	sbrs	r24, 1
    29b2:	02 c0       	rjmp	.+4      	; 0x29b8 <__stack+0x8b9>
    29b4:	20 fd       	sbrc	r18, 0
    29b6:	6d c0       	rjmp	.+218    	; 0x2a92 <__stack+0x993>
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    29b8:	bd a1       	ldd	r27, Y+37	; 0x25
    29ba:	b3 ff       	sbrs	r27, 3
    29bc:	02 c0       	rjmp	.+4      	; 0x29c2 <__stack+0x8c3>
				mode |= FA__WRITTEN;
    29be:	b0 62       	ori	r27, 0x20	; 32
    29c0:	bd a3       	std	Y+37, r27	; 0x25
			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    29c2:	0d 85       	ldd	r16, Y+13	; 0x0d
    29c4:	1e 85       	ldd	r17, Y+14	; 0x0e
    29c6:	f8 01       	movw	r30, r16
    29c8:	82 a5       	ldd	r24, Z+42	; 0x2a
    29ca:	93 a5       	ldd	r25, Z+43	; 0x2b
    29cc:	a4 a5       	ldd	r26, Z+44	; 0x2c
    29ce:	b5 a5       	ldd	r27, Z+45	; 0x2d
    29d0:	eb a1       	ldd	r30, Y+35	; 0x23
    29d2:	fc a1       	ldd	r31, Y+36	; 0x24
    29d4:	82 8f       	std	Z+26, r24	; 0x1a
    29d6:	93 8f       	std	Z+27, r25	; 0x1b
    29d8:	a4 8f       	std	Z+28, r26	; 0x1c
    29da:	b5 8f       	std	Z+29, r27	; 0x1d
			fp->dir_ptr = dir;
    29dc:	f7 8e       	std	Z+31, r15	; 0x1f
    29de:	e6 8e       	std	Z+30, r14	; 0x1e
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    29e0:	2d a1       	ldd	r18, Y+37	; 0x25
    29e2:	24 83       	std	Z+4, r18	; 0x04
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    29e4:	d8 01       	movw	r26, r16
    29e6:	8c 91       	ld	r24, X
    29e8:	b7 01       	movw	r22, r14
    29ea:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <ld_clust.clone.0>
    29ee:	eb a1       	ldd	r30, Y+35	; 0x23
    29f0:	fc a1       	ldd	r31, Y+36	; 0x24
    29f2:	66 87       	std	Z+14, r22	; 0x0e
    29f4:	77 87       	std	Z+15, r23	; 0x0f
    29f6:	80 8b       	std	Z+16, r24	; 0x10
    29f8:	91 8b       	std	Z+17, r25	; 0x11
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    29fa:	f7 01       	movw	r30, r14
    29fc:	84 8d       	ldd	r24, Z+28	; 0x1c
    29fe:	95 8d       	ldd	r25, Z+29	; 0x1d
    2a00:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2a02:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2a04:	eb a1       	ldd	r30, Y+35	; 0x23
    2a06:	fc a1       	ldd	r31, Y+36	; 0x24
    2a08:	82 87       	std	Z+10, r24	; 0x0a
    2a0a:	93 87       	std	Z+11, r25	; 0x0b
    2a0c:	a4 87       	std	Z+12, r26	; 0x0c
    2a0e:	b5 87       	std	Z+13, r27	; 0x0d
			fp->fptr = 0;						/* File pointer */
    2a10:	16 82       	std	Z+6, r1	; 0x06
    2a12:	17 82       	std	Z+7, r1	; 0x07
    2a14:	10 86       	std	Z+8, r1	; 0x08
    2a16:	11 86       	std	Z+9, r1	; 0x09
			fp->dsect = 0;
    2a18:	16 8a       	std	Z+22, r1	; 0x16
    2a1a:	17 8a       	std	Z+23, r1	; 0x17
    2a1c:	10 8e       	std	Z+24, r1	; 0x18
    2a1e:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    2a20:	11 83       	std	Z+1, r17	; 0x01
    2a22:	00 83       	st	Z, r16
    2a24:	d8 01       	movw	r26, r16
    2a26:	16 96       	adiw	r26, 0x06	; 6
    2a28:	8d 91       	ld	r24, X+
    2a2a:	9c 91       	ld	r25, X
    2a2c:	17 97       	sbiw	r26, 0x07	; 7
    2a2e:	93 83       	std	Z+3, r25	; 0x03
    2a30:	82 83       	std	Z+2, r24	; 0x02
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	03 c0       	rjmp	.+6      	; 0x2a3c <__stack+0x93d>
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    2a36:	29 e0       	ldi	r18, 0x09	; 9
    2a38:	01 c0       	rjmp	.+2      	; 0x2a3c <__stack+0x93d>
    2a3a:	28 2f       	mov	r18, r24
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
		}
	}

	LEAVE_FF(dj.fs, res);
}
    2a3c:	82 2f       	mov	r24, r18
    2a3e:	e8 96       	adiw	r28, 0x38	; 56
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	f8 94       	cli
    2a44:	de bf       	out	0x3e, r29	; 62
    2a46:	0f be       	out	0x3f, r0	; 63
    2a48:	cd bf       	out	0x3d, r28	; 61
    2a4a:	cf 91       	pop	r28
    2a4c:	df 91       	pop	r29
    2a4e:	1f 91       	pop	r17
    2a50:	0f 91       	pop	r16
    2a52:	ff 90       	pop	r15
    2a54:	ef 90       	pop	r14
    2a56:	df 90       	pop	r13
    2a58:	cf 90       	pop	r12
    2a5a:	bf 90       	pop	r11
    2a5c:	af 90       	pop	r10
    2a5e:	9f 90       	pop	r9
    2a60:	8f 90       	pop	r8
    2a62:	7f 90       	pop	r7
    2a64:	6f 90       	pop	r6
    2a66:	5f 90       	pop	r5
    2a68:	4f 90       	pop	r4
    2a6a:	3f 90       	pop	r3
    2a6c:	2f 90       	pop	r2
    2a6e:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    2a70:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2a72:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2a74:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2a76:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2a78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a7c:	0e 94 34 0b 	call	0x1668	; 0x1668 <move_window>
    2a80:	28 2f       	mov	r18, r24
		if (res == FR_OK) {
    2a82:	88 23       	and	r24, r24
    2a84:	09 f0       	breq	.+2      	; 0x2a88 <__stack+0x989>
    2a86:	dd ce       	rjmp	.-582    	; 0x2842 <__stack+0x743>
    2a88:	c4 ce       	rjmp	.-632    	; 0x2812 <__stack+0x713>
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
    2a8a:	28 e0       	ldi	r18, 0x08	; 8
    2a8c:	d7 cf       	rjmp	.-82     	; 0x2a3c <__stack+0x93d>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
    2a8e:	24 e0       	ldi	r18, 0x04	; 4
    2a90:	d5 cf       	rjmp	.-86     	; 0x2a3c <__stack+0x93d>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
    2a92:	27 e0       	ldi	r18, 0x07	; 7
    2a94:	d3 cf       	rjmp	.-90     	; 0x2a3c <__stack+0x93d>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
    2a96:	ce 01       	movw	r24, r28
    2a98:	01 96       	adiw	r24, 0x01	; 1
    2a9a:	9a a3       	std	Y+34, r25	; 0x22
    2a9c:	89 a3       	std	Y+33, r24	; 0x21
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    2a9e:	f1 01       	movw	r30, r2
    2aa0:	80 81       	ld	r24, Z
    2aa2:	8f 32       	cpi	r24, 0x2F	; 47
    2aa4:	09 f0       	breq	.+2      	; 0x2aa8 <__stack+0x9a9>
    2aa6:	6e cd       	rjmp	.-1316   	; 0x2584 <__stack+0x485>
    2aa8:	6f cd       	rjmp	.-1314   	; 0x2588 <__stack+0x489>
    2aaa:	4e a0       	ldd	r4, Y+38	; 0x26
    2aac:	5f a0       	ldd	r5, Y+39	; 0x27
    2aae:	68 a4       	ldd	r6, Y+40	; 0x28
    2ab0:	79 a4       	ldd	r7, Y+41	; 0x29
				dj.fs->wflag = 1;
				if (cl) {							/* Remove the cluster chain if exist */
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
					if (res == FR_OK) {
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab6:	08 94       	sec
    2ab8:	41 08       	sbc	r4, r1
    2aba:	51 08       	sbc	r5, r1
    2abc:	61 08       	sbc	r6, r1
    2abe:	71 08       	sbc	r7, r1
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	1a 96       	adiw	r26, 0x0a	; 10
    2ac4:	4d 92       	st	X+, r4
    2ac6:	5d 92       	st	X+, r5
    2ac8:	6d 92       	st	X+, r6
    2aca:	7c 92       	st	X, r7
    2acc:	1d 97       	sbiw	r26, 0x0d	; 13
						res = move_window(dj.fs, dw);
    2ace:	4a a5       	ldd	r20, Y+42	; 0x2a
    2ad0:	5b a5       	ldd	r21, Y+43	; 0x2b
    2ad2:	6c a5       	ldd	r22, Y+44	; 0x2c
    2ad4:	7d a5       	ldd	r23, Y+45	; 0x2d
    2ad6:	0e 94 34 0b 	call	0x1668	; 0x1668 <move_window>
    2ada:	28 2f       	mov	r18, r24
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    2adc:	88 23       	and	r24, r24
    2ade:	09 f4       	brne	.+2      	; 0x2ae2 <__stack+0x9e3>
    2ae0:	6b cf       	rjmp	.-298    	; 0x29b8 <__stack+0x8b9>
    2ae2:	ac cf       	rjmp	.-168    	; 0x2a3c <__stack+0x93d>

00002ae4 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    2ae4:	2f 92       	push	r2
    2ae6:	3f 92       	push	r3
    2ae8:	4f 92       	push	r4
    2aea:	5f 92       	push	r5
    2aec:	6f 92       	push	r6
    2aee:	7f 92       	push	r7
    2af0:	8f 92       	push	r8
    2af2:	9f 92       	push	r9
    2af4:	af 92       	push	r10
    2af6:	bf 92       	push	r11
    2af8:	cf 92       	push	r12
    2afa:	df 92       	push	r13
    2afc:	ef 92       	push	r14
    2afe:	ff 92       	push	r15
    2b00:	0f 93       	push	r16
    2b02:	1f 93       	push	r17
    2b04:	df 93       	push	r29
    2b06:	cf 93       	push	r28
    2b08:	00 d0       	rcall	.+0      	; 0x2b0a <f_write+0x26>
    2b0a:	00 d0       	rcall	.+0      	; 0x2b0c <f_write+0x28>
    2b0c:	cd b7       	in	r28, 0x3d	; 61
    2b0e:	de b7       	in	r29, 0x3e	; 62
    2b10:	9c 83       	std	Y+4, r25	; 0x04
    2b12:	8b 83       	std	Y+3, r24	; 0x03
    2b14:	5a 01       	movw	r10, r20
    2b16:	19 01       	movw	r2, r18
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    2b18:	d9 01       	movw	r26, r18
    2b1a:	1d 92       	st	X+, r1
    2b1c:	1c 92       	st	X, r1

	res = validate(fp);						/* Check validity */
    2b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b20:	9c 81       	ldd	r25, Y+4	; 0x04
    2b22:	69 83       	std	Y+1, r22	; 0x01
    2b24:	7a 83       	std	Y+2, r23	; 0x02
    2b26:	0e 94 18 0b 	call	0x1630	; 0x1630 <validate>
    2b2a:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2b2c:	69 81       	ldd	r22, Y+1	; 0x01
    2b2e:	7a 81       	ldd	r23, Y+2	; 0x02
    2b30:	88 23       	and	r24, r24
    2b32:	09 f0       	breq	.+2      	; 0x2b36 <f_write+0x52>
    2b34:	bc c1       	rjmp	.+888    	; 0x2eae <f_write+0x3ca>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    2b36:	eb 81       	ldd	r30, Y+3	; 0x03
    2b38:	fc 81       	ldd	r31, Y+4	; 0x04
    2b3a:	84 81       	ldd	r24, Z+4	; 0x04
    2b3c:	87 fd       	sbrc	r24, 7
    2b3e:	b4 c1       	rjmp	.+872    	; 0x2ea8 <f_write+0x3c4>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    2b40:	81 ff       	sbrs	r24, 1
    2b42:	b4 c1       	rjmp	.+872    	; 0x2eac <f_write+0x3c8>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    2b44:	22 85       	ldd	r18, Z+10	; 0x0a
    2b46:	33 85       	ldd	r19, Z+11	; 0x0b
    2b48:	44 85       	ldd	r20, Z+12	; 0x0c
    2b4a:	55 85       	ldd	r21, Z+13	; 0x0d
    2b4c:	c5 01       	movw	r24, r10
    2b4e:	a0 e0       	ldi	r26, 0x00	; 0
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	82 0f       	add	r24, r18
    2b54:	93 1f       	adc	r25, r19
    2b56:	a4 1f       	adc	r26, r20
    2b58:	b5 1f       	adc	r27, r21
    2b5a:	82 17       	cp	r24, r18
    2b5c:	93 07       	cpc	r25, r19
    2b5e:	a4 07       	cpc	r26, r20
    2b60:	b5 07       	cpc	r27, r21
    2b62:	10 f4       	brcc	.+4      	; 0x2b68 <f_write+0x84>
    2b64:	aa 24       	eor	r10, r10
    2b66:	bb 24       	eor	r11, r11
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    2b68:	46 2e       	mov	r4, r22
    2b6a:	57 2e       	mov	r5, r23
    2b6c:	7c c1       	rjmp	.+760    	; 0x2e66 <f_write+0x382>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    2b6e:	ab 81       	ldd	r26, Y+3	; 0x03
    2b70:	bc 81       	ldd	r27, Y+4	; 0x04
    2b72:	16 96       	adiw	r26, 0x06	; 6
    2b74:	2d 91       	ld	r18, X+
    2b76:	3d 91       	ld	r19, X+
    2b78:	4d 91       	ld	r20, X+
    2b7a:	5c 91       	ld	r21, X
    2b7c:	19 97       	sbiw	r26, 0x09	; 9
    2b7e:	da 01       	movw	r26, r20
    2b80:	c9 01       	movw	r24, r18
    2b82:	91 70       	andi	r25, 0x01	; 1
    2b84:	a0 70       	andi	r26, 0x00	; 0
    2b86:	b0 70       	andi	r27, 0x00	; 0
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	a1 05       	cpc	r26, r1
    2b8c:	b1 05       	cpc	r27, r1
    2b8e:	09 f0       	breq	.+2      	; 0x2b92 <f_write+0xae>
    2b90:	0e c1       	rjmp	.+540    	; 0x2dae <f_write+0x2ca>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2b92:	eb 81       	ldd	r30, Y+3	; 0x03
    2b94:	fc 81       	ldd	r31, Y+4	; 0x04
    2b96:	80 81       	ld	r24, Z
    2b98:	91 81       	ldd	r25, Z+1	; 0x01
    2b9a:	69 01       	movw	r12, r18
    2b9c:	7a 01       	movw	r14, r20
    2b9e:	09 e0       	ldi	r16, 0x09	; 9
    2ba0:	f6 94       	lsr	r15
    2ba2:	e7 94       	ror	r14
    2ba4:	d7 94       	ror	r13
    2ba6:	c7 94       	ror	r12
    2ba8:	0a 95       	dec	r16
    2baa:	d1 f7       	brne	.-12     	; 0x2ba0 <f_write+0xbc>
    2bac:	dc 01       	movw	r26, r24
    2bae:	12 96       	adiw	r26, 0x02	; 2
    2bb0:	0c 91       	ld	r16, X
    2bb2:	12 97       	sbiw	r26, 0x02	; 2
    2bb4:	01 50       	subi	r16, 0x01	; 1
    2bb6:	0c 21       	and	r16, r12
			if (!csect) {					/* On the cluster boundary? */
    2bb8:	09 f0       	breq	.+2      	; 0x2bbc <f_write+0xd8>
    2bba:	41 c0       	rjmp	.+130    	; 0x2c3e <f_write+0x15a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    2bbc:	21 15       	cp	r18, r1
    2bbe:	31 05       	cpc	r19, r1
    2bc0:	41 05       	cpc	r20, r1
    2bc2:	51 05       	cpc	r21, r1
    2bc4:	b1 f4       	brne	.+44     	; 0x2bf2 <f_write+0x10e>
					clst = fp->sclust;		/* Follow from the origin */
    2bc6:	26 85       	ldd	r18, Z+14	; 0x0e
    2bc8:	37 85       	ldd	r19, Z+15	; 0x0f
    2bca:	40 89       	ldd	r20, Z+16	; 0x10
    2bcc:	51 89       	ldd	r21, Z+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    2bce:	21 15       	cp	r18, r1
    2bd0:	31 05       	cpc	r19, r1
    2bd2:	41 05       	cpc	r20, r1
    2bd4:	51 05       	cpc	r21, r1
    2bd6:	f1 f4       	brne	.+60     	; 0x2c14 <f_write+0x130>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    2bd8:	40 e0       	ldi	r20, 0x00	; 0
    2bda:	50 e0       	ldi	r21, 0x00	; 0
    2bdc:	ba 01       	movw	r22, r20
    2bde:	68 d8       	rcall	.-3888   	; 0x1cb0 <create_chain>
    2be0:	9b 01       	movw	r18, r22
    2be2:	ac 01       	movw	r20, r24
    2be4:	eb 81       	ldd	r30, Y+3	; 0x03
    2be6:	fc 81       	ldd	r31, Y+4	; 0x04
    2be8:	66 87       	std	Z+14, r22	; 0x0e
    2bea:	77 87       	std	Z+15, r23	; 0x0f
    2bec:	80 8b       	std	Z+16, r24	; 0x10
    2bee:	91 8b       	std	Z+17, r25	; 0x11
    2bf0:	0b c0       	rjmp	.+22     	; 0x2c08 <f_write+0x124>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    2bf2:	ab 81       	ldd	r26, Y+3	; 0x03
    2bf4:	bc 81       	ldd	r27, Y+4	; 0x04
    2bf6:	52 96       	adiw	r26, 0x12	; 18
    2bf8:	4d 91       	ld	r20, X+
    2bfa:	5d 91       	ld	r21, X+
    2bfc:	6d 91       	ld	r22, X+
    2bfe:	7c 91       	ld	r23, X
    2c00:	55 97       	sbiw	r26, 0x15	; 21
    2c02:	56 d8       	rcall	.-3924   	; 0x1cb0 <create_chain>
    2c04:	9b 01       	movw	r18, r22
    2c06:	ac 01       	movw	r20, r24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    2c08:	21 15       	cp	r18, r1
    2c0a:	31 05       	cpc	r19, r1
    2c0c:	41 05       	cpc	r20, r1
    2c0e:	51 05       	cpc	r21, r1
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <f_write+0x130>
    2c12:	2d c1       	rjmp	.+602    	; 0x2e6e <f_write+0x38a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2c14:	21 30       	cpi	r18, 0x01	; 1
    2c16:	31 05       	cpc	r19, r1
    2c18:	41 05       	cpc	r20, r1
    2c1a:	51 05       	cpc	r21, r1
    2c1c:	09 f4       	brne	.+2      	; 0x2c20 <f_write+0x13c>
    2c1e:	3f c0       	rjmp	.+126    	; 0x2c9e <f_write+0x1ba>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2c20:	2f 3f       	cpi	r18, 0xFF	; 255
    2c22:	ff ef       	ldi	r31, 0xFF	; 255
    2c24:	3f 07       	cpc	r19, r31
    2c26:	ff ef       	ldi	r31, 0xFF	; 255
    2c28:	4f 07       	cpc	r20, r31
    2c2a:	ff ef       	ldi	r31, 0xFF	; 255
    2c2c:	5f 07       	cpc	r21, r31
    2c2e:	09 f4       	brne	.+2      	; 0x2c32 <f_write+0x14e>
    2c30:	a6 c0       	rjmp	.+332    	; 0x2d7e <f_write+0x29a>
				fp->clust = clst;			/* Update current cluster */
    2c32:	eb 81       	ldd	r30, Y+3	; 0x03
    2c34:	fc 81       	ldd	r31, Y+4	; 0x04
    2c36:	22 8b       	std	Z+18, r18	; 0x12
    2c38:	33 8b       	std	Z+19, r19	; 0x13
    2c3a:	44 8b       	std	Z+20, r20	; 0x14
    2c3c:	55 8b       	std	Z+21, r21	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    2c3e:	ab 81       	ldd	r26, Y+3	; 0x03
    2c40:	bc 81       	ldd	r27, Y+4	; 0x04
    2c42:	ed 91       	ld	r30, X+
    2c44:	fc 91       	ld	r31, X
    2c46:	11 97       	sbiw	r26, 0x01	; 1
    2c48:	62 a5       	ldd	r22, Z+42	; 0x2a
    2c4a:	73 a5       	ldd	r23, Z+43	; 0x2b
    2c4c:	84 a5       	ldd	r24, Z+44	; 0x2c
    2c4e:	95 a5       	ldd	r25, Z+45	; 0x2d
    2c50:	56 96       	adiw	r26, 0x16	; 22
    2c52:	2d 91       	ld	r18, X+
    2c54:	3d 91       	ld	r19, X+
    2c56:	4d 91       	ld	r20, X+
    2c58:	5c 91       	ld	r21, X
    2c5a:	59 97       	sbiw	r26, 0x19	; 25
    2c5c:	62 17       	cp	r22, r18
    2c5e:	73 07       	cpc	r23, r19
    2c60:	84 07       	cpc	r24, r20
    2c62:	95 07       	cpc	r25, r21
    2c64:	49 f4       	brne	.+18     	; 0x2c78 <f_write+0x194>
    2c66:	cf 01       	movw	r24, r30
    2c68:	40 e0       	ldi	r20, 0x00	; 0
    2c6a:	50 e0       	ldi	r21, 0x00	; 0
    2c6c:	ba 01       	movw	r22, r20
    2c6e:	0e 94 34 0b 	call	0x1668	; 0x1668 <move_window>
    2c72:	88 23       	and	r24, r24
    2c74:	09 f0       	breq	.+2      	; 0x2c78 <f_write+0x194>
    2c76:	af c0       	rjmp	.+350    	; 0x2dd6 <f_write+0x2f2>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    2c78:	ab 81       	ldd	r26, Y+3	; 0x03
    2c7a:	bc 81       	ldd	r27, Y+4	; 0x04
    2c7c:	cd 90       	ld	r12, X+
    2c7e:	dc 90       	ld	r13, X
    2c80:	11 97       	sbiw	r26, 0x01	; 1
    2c82:	52 96       	adiw	r26, 0x12	; 18
    2c84:	4d 91       	ld	r20, X+
    2c86:	5d 91       	ld	r21, X+
    2c88:	6d 91       	ld	r22, X+
    2c8a:	7c 91       	ld	r23, X
    2c8c:	55 97       	sbiw	r26, 0x15	; 21
    2c8e:	c6 01       	movw	r24, r12
    2c90:	0e 94 05 0c 	call	0x180a	; 0x180a <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2c94:	61 15       	cp	r22, r1
    2c96:	71 05       	cpc	r23, r1
    2c98:	81 05       	cpc	r24, r1
    2c9a:	91 05       	cpc	r25, r1
    2c9c:	31 f4       	brne	.+12     	; 0x2caa <f_write+0x1c6>
    2c9e:	eb 81       	ldd	r30, Y+3	; 0x03
    2ca0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ca2:	84 81       	ldd	r24, Z+4	; 0x04
    2ca4:	80 68       	ori	r24, 0x80	; 128
    2ca6:	84 83       	std	Z+4, r24	; 0x04
    2ca8:	ff c0       	rjmp	.+510    	; 0x2ea8 <f_write+0x3c4>
			sect += csect;
    2caa:	3b 01       	movw	r6, r22
    2cac:	4c 01       	movw	r8, r24
    2cae:	60 0e       	add	r6, r16
    2cb0:	71 1c       	adc	r7, r1
    2cb2:	81 1c       	adc	r8, r1
    2cb4:	91 1c       	adc	r9, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    2cb6:	75 01       	movw	r14, r10
    2cb8:	ef 2c       	mov	r14, r15
    2cba:	ff 24       	eor	r15, r15
    2cbc:	e6 94       	lsr	r14
			if (cc) {						/* Write maximum contiguous sectors directly */
    2cbe:	e1 14       	cp	r14, r1
    2cc0:	f1 04       	cpc	r15, r1
    2cc2:	09 f4       	brne	.+2      	; 0x2cc6 <f_write+0x1e2>
    2cc4:	45 c0       	rjmp	.+138    	; 0x2d50 <f_write+0x26c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2cc6:	d6 01       	movw	r26, r12
    2cc8:	12 96       	adiw	r26, 0x02	; 2
    2cca:	2c 91       	ld	r18, X
    2ccc:	12 97       	sbiw	r26, 0x02	; 2
    2cce:	80 2f       	mov	r24, r16
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	a7 01       	movw	r20, r14
    2cd4:	48 0f       	add	r20, r24
    2cd6:	59 1f       	adc	r21, r25
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	24 17       	cp	r18, r20
    2cdc:	35 07       	cpc	r19, r21
    2cde:	18 f4       	brcc	.+6      	; 0x2ce6 <f_write+0x202>
					cc = fp->fs->csize - csect;
    2ce0:	79 01       	movw	r14, r18
    2ce2:	e8 1a       	sub	r14, r24
    2ce4:	f9 0a       	sbc	r15, r25
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    2ce6:	f6 01       	movw	r30, r12
    2ce8:	81 81       	ldd	r24, Z+1	; 0x01
    2cea:	b2 01       	movw	r22, r4
    2cec:	a4 01       	movw	r20, r8
    2cee:	93 01       	movw	r18, r6
    2cf0:	0e 2d       	mov	r16, r14
    2cf2:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <disk_write>
    2cf6:	88 23       	and	r24, r24
    2cf8:	09 f0       	breq	.+2      	; 0x2cfc <f_write+0x218>
    2cfa:	41 c0       	rjmp	.+130    	; 0x2d7e <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    2cfc:	ab 81       	ldd	r26, Y+3	; 0x03
    2cfe:	bc 81       	ldd	r27, Y+4	; 0x04
    2d00:	ed 91       	ld	r30, X+
    2d02:	fc 91       	ld	r31, X
    2d04:	11 97       	sbiw	r26, 0x01	; 1
    2d06:	62 a5       	ldd	r22, Z+42	; 0x2a
    2d08:	73 a5       	ldd	r23, Z+43	; 0x2b
    2d0a:	84 a5       	ldd	r24, Z+44	; 0x2c
    2d0c:	95 a5       	ldd	r25, Z+45	; 0x2d
    2d0e:	66 19       	sub	r22, r6
    2d10:	77 09       	sbc	r23, r7
    2d12:	88 09       	sbc	r24, r8
    2d14:	99 09       	sbc	r25, r9
    2d16:	97 01       	movw	r18, r14
    2d18:	40 e0       	ldi	r20, 0x00	; 0
    2d1a:	50 e0       	ldi	r21, 0x00	; 0
    2d1c:	62 17       	cp	r22, r18
    2d1e:	73 07       	cpc	r23, r19
    2d20:	84 07       	cpc	r24, r20
    2d22:	95 07       	cpc	r25, r21
    2d24:	88 f4       	brcc	.+34     	; 0x2d48 <f_write+0x264>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    2d26:	76 2f       	mov	r23, r22
    2d28:	66 27       	eor	r22, r22
    2d2a:	77 0f       	add	r23, r23
    2d2c:	64 0d       	add	r22, r4
    2d2e:	75 1d       	adc	r23, r5
    2d30:	cf 01       	movw	r24, r30
    2d32:	8e 96       	adiw	r24, 0x2e	; 46
    2d34:	40 e0       	ldi	r20, 0x00	; 0
    2d36:	52 e0       	ldi	r21, 0x02	; 2
    2d38:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <mem_cpy>
					fp->fs->wflag = 0;
    2d3c:	ab 81       	ldd	r26, Y+3	; 0x03
    2d3e:	bc 81       	ldd	r27, Y+4	; 0x04
    2d40:	ed 91       	ld	r30, X+
    2d42:	fc 91       	ld	r31, X
    2d44:	11 97       	sbiw	r26, 0x01	; 1
    2d46:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    2d48:	fe 2c       	mov	r15, r14
    2d4a:	ee 24       	eor	r14, r14
    2d4c:	ff 0c       	add	r15, r15
				continue;
    2d4e:	6d c0       	rjmp	.+218    	; 0x2e2a <f_write+0x346>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    2d50:	eb 81       	ldd	r30, Y+3	; 0x03
    2d52:	fc 81       	ldd	r31, Y+4	; 0x04
    2d54:	26 81       	ldd	r18, Z+6	; 0x06
    2d56:	37 81       	ldd	r19, Z+7	; 0x07
    2d58:	40 85       	ldd	r20, Z+8	; 0x08
    2d5a:	51 85       	ldd	r21, Z+9	; 0x09
    2d5c:	82 85       	ldd	r24, Z+10	; 0x0a
    2d5e:	93 85       	ldd	r25, Z+11	; 0x0b
    2d60:	a4 85       	ldd	r26, Z+12	; 0x0c
    2d62:	b5 85       	ldd	r27, Z+13	; 0x0d
    2d64:	28 17       	cp	r18, r24
    2d66:	39 07       	cpc	r19, r25
    2d68:	4a 07       	cpc	r20, r26
    2d6a:	5b 07       	cpc	r21, r27
    2d6c:	d0 f0       	brcs	.+52     	; 0x2da2 <f_write+0x2be>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    2d6e:	c6 01       	movw	r24, r12
    2d70:	40 e0       	ldi	r20, 0x00	; 0
    2d72:	50 e0       	ldi	r21, 0x00	; 0
    2d74:	ba 01       	movw	r22, r20
    2d76:	0e 94 34 0b 	call	0x1668	; 0x1668 <move_window>
    2d7a:	88 23       	and	r24, r24
    2d7c:	51 f0       	breq	.+20     	; 0x2d92 <f_write+0x2ae>
    2d7e:	ab 81       	ldd	r26, Y+3	; 0x03
    2d80:	bc 81       	ldd	r27, Y+4	; 0x04
    2d82:	14 96       	adiw	r26, 0x04	; 4
    2d84:	8c 91       	ld	r24, X
    2d86:	14 97       	sbiw	r26, 0x04	; 4
    2d88:	80 68       	ori	r24, 0x80	; 128
    2d8a:	14 96       	adiw	r26, 0x04	; 4
    2d8c:	8c 93       	st	X, r24
    2d8e:	14 97       	sbiw	r26, 0x04	; 4
    2d90:	27 c0       	rjmp	.+78     	; 0x2de0 <f_write+0x2fc>
				fp->fs->winsect = sect;
    2d92:	ab 81       	ldd	r26, Y+3	; 0x03
    2d94:	bc 81       	ldd	r27, Y+4	; 0x04
    2d96:	ed 91       	ld	r30, X+
    2d98:	fc 91       	ld	r31, X
    2d9a:	62 a6       	std	Z+42, r6	; 0x2a
    2d9c:	73 a6       	std	Z+43, r7	; 0x2b
    2d9e:	84 a6       	std	Z+44, r8	; 0x2c
    2da0:	95 a6       	std	Z+45, r9	; 0x2d
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    2da2:	eb 81       	ldd	r30, Y+3	; 0x03
    2da4:	fc 81       	ldd	r31, Y+4	; 0x04
    2da6:	66 8a       	std	Z+22, r6	; 0x16
    2da8:	77 8a       	std	Z+23, r7	; 0x17
    2daa:	80 8e       	std	Z+24, r8	; 0x18
    2dac:	91 8e       	std	Z+25, r9	; 0x19
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    2dae:	ab 81       	ldd	r26, Y+3	; 0x03
    2db0:	bc 81       	ldd	r27, Y+4	; 0x04
    2db2:	16 96       	adiw	r26, 0x06	; 6
    2db4:	cd 90       	ld	r12, X+
    2db6:	dd 90       	ld	r13, X+
    2db8:	ed 90       	ld	r14, X+
    2dba:	fc 90       	ld	r15, X
    2dbc:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    2dbe:	56 96       	adiw	r26, 0x16	; 22
    2dc0:	4d 91       	ld	r20, X+
    2dc2:	5d 91       	ld	r21, X+
    2dc4:	6d 91       	ld	r22, X+
    2dc6:	7c 91       	ld	r23, X
    2dc8:	59 97       	sbiw	r26, 0x19	; 25
    2dca:	8d 91       	ld	r24, X+
    2dcc:	9c 91       	ld	r25, X
    2dce:	0e 94 34 0b 	call	0x1668	; 0x1668 <move_window>
    2dd2:	88 23       	and	r24, r24
    2dd4:	39 f0       	breq	.+14     	; 0x2de4 <f_write+0x300>
			ABORT(fp->fs, FR_DISK_ERR);
    2dd6:	eb 81       	ldd	r30, Y+3	; 0x03
    2dd8:	fc 81       	ldd	r31, Y+4	; 0x04
    2dda:	84 81       	ldd	r24, Z+4	; 0x04
    2ddc:	80 68       	ori	r24, 0x80	; 128
    2dde:	84 83       	std	Z+4, r24	; 0x04
    2de0:	11 e0       	ldi	r17, 0x01	; 1
    2de2:	65 c0       	rjmp	.+202    	; 0x2eae <f_write+0x3ca>
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    2de4:	c6 01       	movw	r24, r12
    2de6:	91 70       	andi	r25, 0x01	; 1
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	32 e0       	ldi	r19, 0x02	; 2
    2dec:	28 1b       	sub	r18, r24
    2dee:	39 0b       	sbc	r19, r25
    2df0:	75 01       	movw	r14, r10
    2df2:	2a 15       	cp	r18, r10
    2df4:	3b 05       	cpc	r19, r11
    2df6:	08 f4       	brcc	.+2      	; 0x2dfa <f_write+0x316>
    2df8:	79 01       	movw	r14, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    2dfa:	ab 81       	ldd	r26, Y+3	; 0x03
    2dfc:	bc 81       	ldd	r27, Y+4	; 0x04
    2dfe:	2d 91       	ld	r18, X+
    2e00:	3c 91       	ld	r19, X
    2e02:	11 97       	sbiw	r26, 0x01	; 1
    2e04:	22 5d       	subi	r18, 0xD2	; 210
    2e06:	3f 4f       	sbci	r19, 0xFF	; 255
    2e08:	16 96       	adiw	r26, 0x06	; 6
    2e0a:	8d 91       	ld	r24, X+
    2e0c:	9c 91       	ld	r25, X
    2e0e:	17 97       	sbiw	r26, 0x07	; 7
    2e10:	91 70       	andi	r25, 0x01	; 1
    2e12:	82 0f       	add	r24, r18
    2e14:	93 1f       	adc	r25, r19
    2e16:	b2 01       	movw	r22, r4
    2e18:	a7 01       	movw	r20, r14
    2e1a:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <mem_cpy>
		fp->fs->wflag = 1;
    2e1e:	ab 81       	ldd	r26, Y+3	; 0x03
    2e20:	bc 81       	ldd	r27, Y+4	; 0x04
    2e22:	ed 91       	ld	r30, X+
    2e24:	fc 91       	ld	r31, X
    2e26:	b1 e0       	ldi	r27, 0x01	; 1
    2e28:	b4 83       	std	Z+4, r27	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    2e2a:	4e 0c       	add	r4, r14
    2e2c:	5f 1c       	adc	r5, r15
    2e2e:	97 01       	movw	r18, r14
    2e30:	40 e0       	ldi	r20, 0x00	; 0
    2e32:	50 e0       	ldi	r21, 0x00	; 0
    2e34:	eb 81       	ldd	r30, Y+3	; 0x03
    2e36:	fc 81       	ldd	r31, Y+4	; 0x04
    2e38:	86 81       	ldd	r24, Z+6	; 0x06
    2e3a:	97 81       	ldd	r25, Z+7	; 0x07
    2e3c:	a0 85       	ldd	r26, Z+8	; 0x08
    2e3e:	b1 85       	ldd	r27, Z+9	; 0x09
    2e40:	82 0f       	add	r24, r18
    2e42:	93 1f       	adc	r25, r19
    2e44:	a4 1f       	adc	r26, r20
    2e46:	b5 1f       	adc	r27, r21
    2e48:	86 83       	std	Z+6, r24	; 0x06
    2e4a:	97 83       	std	Z+7, r25	; 0x07
    2e4c:	a0 87       	std	Z+8, r26	; 0x08
    2e4e:	b1 87       	std	Z+9, r27	; 0x09
    2e50:	d1 01       	movw	r26, r2
    2e52:	8d 91       	ld	r24, X+
    2e54:	9c 91       	ld	r25, X
    2e56:	11 97       	sbiw	r26, 0x01	; 1
    2e58:	8e 0d       	add	r24, r14
    2e5a:	9f 1d       	adc	r25, r15
    2e5c:	11 96       	adiw	r26, 0x01	; 1
    2e5e:	9c 93       	st	X, r25
    2e60:	8e 93       	st	-X, r24
    2e62:	ae 18       	sub	r10, r14
    2e64:	bf 08       	sbc	r11, r15
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    2e66:	a1 14       	cp	r10, r1
    2e68:	b1 04       	cpc	r11, r1
    2e6a:	09 f0       	breq	.+2      	; 0x2e6e <f_write+0x38a>
    2e6c:	80 ce       	rjmp	.-768    	; 0x2b6e <f_write+0x8a>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    2e6e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e70:	fc 81       	ldd	r31, Y+4	; 0x04
    2e72:	86 81       	ldd	r24, Z+6	; 0x06
    2e74:	97 81       	ldd	r25, Z+7	; 0x07
    2e76:	a0 85       	ldd	r26, Z+8	; 0x08
    2e78:	b1 85       	ldd	r27, Z+9	; 0x09
    2e7a:	22 85       	ldd	r18, Z+10	; 0x0a
    2e7c:	33 85       	ldd	r19, Z+11	; 0x0b
    2e7e:	44 85       	ldd	r20, Z+12	; 0x0c
    2e80:	55 85       	ldd	r21, Z+13	; 0x0d
    2e82:	28 17       	cp	r18, r24
    2e84:	39 07       	cpc	r19, r25
    2e86:	4a 07       	cpc	r20, r26
    2e88:	5b 07       	cpc	r21, r27
    2e8a:	20 f4       	brcc	.+8      	; 0x2e94 <f_write+0x3b0>
    2e8c:	82 87       	std	Z+10, r24	; 0x0a
    2e8e:	93 87       	std	Z+11, r25	; 0x0b
    2e90:	a4 87       	std	Z+12, r26	; 0x0c
    2e92:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    2e94:	ab 81       	ldd	r26, Y+3	; 0x03
    2e96:	bc 81       	ldd	r27, Y+4	; 0x04
    2e98:	14 96       	adiw	r26, 0x04	; 4
    2e9a:	8c 91       	ld	r24, X
    2e9c:	14 97       	sbiw	r26, 0x04	; 4
    2e9e:	80 62       	ori	r24, 0x20	; 32
    2ea0:	14 96       	adiw	r26, 0x04	; 4
    2ea2:	8c 93       	st	X, r24
    2ea4:	14 97       	sbiw	r26, 0x04	; 4

	LEAVE_FF(fp->fs, FR_OK);
    2ea6:	03 c0       	rjmp	.+6      	; 0x2eae <f_write+0x3ca>
	*bw = 0;	/* Clear write byte counter */

	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2ea8:	12 e0       	ldi	r17, 0x02	; 2
    2eaa:	01 c0       	rjmp	.+2      	; 0x2eae <f_write+0x3ca>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    2eac:	17 e0       	ldi	r17, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    2eae:	81 2f       	mov	r24, r17
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
    2eb6:	0f 90       	pop	r0
    2eb8:	cf 91       	pop	r28
    2eba:	df 91       	pop	r29
    2ebc:	1f 91       	pop	r17
    2ebe:	0f 91       	pop	r16
    2ec0:	ff 90       	pop	r15
    2ec2:	ef 90       	pop	r14
    2ec4:	df 90       	pop	r13
    2ec6:	cf 90       	pop	r12
    2ec8:	bf 90       	pop	r11
    2eca:	af 90       	pop	r10
    2ecc:	9f 90       	pop	r9
    2ece:	8f 90       	pop	r8
    2ed0:	7f 90       	pop	r7
    2ed2:	6f 90       	pop	r6
    2ed4:	5f 90       	pop	r5
    2ed6:	4f 90       	pop	r4
    2ed8:	3f 90       	pop	r3
    2eda:	2f 90       	pop	r2
    2edc:	08 95       	ret

00002ede <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    2ede:	0f 93       	push	r16
    2ee0:	1f 93       	push	r17
    2ee2:	cf 93       	push	r28
    2ee4:	df 93       	push	r29
    2ee6:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    2ee8:	0e 94 18 0b 	call	0x1630	; 0x1630 <validate>
    2eec:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2eee:	88 23       	and	r24, r24
    2ef0:	09 f0       	breq	.+2      	; 0x2ef4 <f_sync+0x16>
    2ef2:	9b c0       	rjmp	.+310    	; 0x302a <f_sync+0x14c>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    2ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef6:	85 ff       	sbrs	r24, 5
    2ef8:	98 c0       	rjmp	.+304    	; 0x302a <f_sync+0x14c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    2efa:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2efc:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2efe:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2f00:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2f02:	88 81       	ld	r24, Y
    2f04:	99 81       	ldd	r25, Y+1	; 0x01
    2f06:	0e 94 34 0b 	call	0x1668	; 0x1668 <move_window>
    2f0a:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    2f0c:	88 23       	and	r24, r24
    2f0e:	09 f0       	breq	.+2      	; 0x2f12 <f_sync+0x34>
    2f10:	8c c0       	rjmp	.+280    	; 0x302a <f_sync+0x14c>
				dir = fp->dir_ptr;
    2f12:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2f14:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    2f16:	f8 01       	movw	r30, r16
    2f18:	83 85       	ldd	r24, Z+11	; 0x0b
    2f1a:	80 62       	ori	r24, 0x20	; 32
    2f1c:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    2f1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f20:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f22:	ac 85       	ldd	r26, Y+12	; 0x0c
    2f24:	bd 85       	ldd	r27, Y+13	; 0x0d
    2f26:	84 8f       	std	Z+28, r24	; 0x1c
    2f28:	95 8f       	std	Z+29, r25	; 0x1d
    2f2a:	a6 8f       	std	Z+30, r26	; 0x1e
    2f2c:	b7 8f       	std	Z+31, r27	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    2f2e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2f30:	5f 85       	ldd	r21, Y+15	; 0x0f
    2f32:	68 89       	ldd	r22, Y+16	; 0x10
    2f34:	79 89       	ldd	r23, Y+17	; 0x11
    2f36:	c8 01       	movw	r24, r16
    2f38:	0e 94 12 0b 	call	0x1624	; 0x1624 <st_clust>
				tim = get_fattime();						/* Update updated time */
    2f3c:	0e 94 83 0a 	call	0x1506	; 0x1506 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    2f40:	f8 01       	movw	r30, r16
    2f42:	66 8b       	std	Z+22, r22	; 0x16
    2f44:	77 8b       	std	Z+23, r23	; 0x17
    2f46:	80 8f       	std	Z+24, r24	; 0x18
    2f48:	91 8f       	std	Z+25, r25	; 0x19
				ST_WORD(dir+DIR_LstAccDate, 0);
    2f4a:	13 8a       	std	Z+19, r1	; 0x13
    2f4c:	12 8a       	std	Z+18, r1	; 0x12
				fp->flag &= ~FA__WRITTEN;
    2f4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f50:	8f 7d       	andi	r24, 0xDF	; 223
    2f52:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    2f54:	e8 81       	ld	r30, Y
    2f56:	f9 81       	ldd	r31, Y+1	; 0x01
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    2f5c:	09 90       	ld	r0, Y+
    2f5e:	d8 81       	ld	r29, Y
    2f60:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = move_window(fs, 0);
    2f62:	ce 01       	movw	r24, r28
    2f64:	40 e0       	ldi	r20, 0x00	; 0
    2f66:	50 e0       	ldi	r21, 0x00	; 0
    2f68:	ba 01       	movw	r22, r20
    2f6a:	0e 94 34 0b 	call	0x1668	; 0x1668 <move_window>
    2f6e:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2f70:	88 23       	and	r24, r24
    2f72:	09 f0       	breq	.+2      	; 0x2f76 <f_sync+0x98>
    2f74:	5a c0       	rjmp	.+180    	; 0x302a <f_sync+0x14c>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    2f76:	88 81       	ld	r24, Y
    2f78:	83 30       	cpi	r24, 0x03	; 3
    2f7a:	09 f0       	breq	.+2      	; 0x2f7e <f_sync+0xa0>
    2f7c:	4c c0       	rjmp	.+152    	; 0x3016 <f_sync+0x138>
    2f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f80:	88 23       	and	r24, r24
    2f82:	09 f4       	brne	.+2      	; 0x2f86 <f_sync+0xa8>
    2f84:	48 c0       	rjmp	.+144    	; 0x3016 <f_sync+0x138>
			fs->winsect = 0;
    2f86:	1a a6       	std	Y+42, r1	; 0x2a
    2f88:	1b a6       	std	Y+43, r1	; 0x2b
    2f8a:	1c a6       	std	Y+44, r1	; 0x2c
    2f8c:	1d a6       	std	Y+45, r1	; 0x2d
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    2f8e:	8e 01       	movw	r16, r28
    2f90:	02 5d       	subi	r16, 0xD2	; 210
    2f92:	1f 4f       	sbci	r17, 0xFF	; 255
    2f94:	c8 01       	movw	r24, r16
    2f96:	60 e0       	ldi	r22, 0x00	; 0
    2f98:	70 e0       	ldi	r23, 0x00	; 0
    2f9a:	40 e0       	ldi	r20, 0x00	; 0
    2f9c:	52 e0       	ldi	r21, 0x02	; 2
    2f9e:	0e 94 07 0b 	call	0x160e	; 0x160e <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e4 5d       	subi	r30, 0xD4	; 212
    2fa6:	fd 4f       	sbci	r31, 0xFD	; 253
    2fa8:	85 e5       	ldi	r24, 0x55	; 85
    2faa:	9a ea       	ldi	r25, 0xAA	; 170
    2fac:	91 83       	std	Z+1, r25	; 0x01
    2fae:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    2fb0:	82 e5       	ldi	r24, 0x52	; 82
    2fb2:	92 e5       	ldi	r25, 0x52	; 82
    2fb4:	a1 e6       	ldi	r26, 0x61	; 97
    2fb6:	b1 e4       	ldi	r27, 0x41	; 65
    2fb8:	8e a7       	std	Y+46, r24	; 0x2e
    2fba:	9f a7       	std	Y+47, r25	; 0x2f
    2fbc:	a8 ab       	std	Y+48, r26	; 0x30
    2fbe:	b9 ab       	std	Y+49, r27	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	ee 5e       	subi	r30, 0xEE	; 238
    2fc4:	fd 4f       	sbci	r31, 0xFD	; 253
    2fc6:	82 e7       	ldi	r24, 0x72	; 114
    2fc8:	92 e7       	ldi	r25, 0x72	; 114
    2fca:	a1 e4       	ldi	r26, 0x41	; 65
    2fcc:	b1 e6       	ldi	r27, 0x61	; 97
    2fce:	80 83       	st	Z, r24
    2fd0:	91 83       	std	Z+1, r25	; 0x01
    2fd2:	a2 83       	std	Z+2, r26	; 0x02
    2fd4:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	ea 5e       	subi	r30, 0xEA	; 234
    2fda:	fd 4f       	sbci	r31, 0xFD	; 253
    2fdc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fde:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fe0:	a8 89       	ldd	r26, Y+16	; 0x10
    2fe2:	b9 89       	ldd	r27, Y+17	; 0x11
    2fe4:	80 83       	st	Z, r24
    2fe6:	91 83       	std	Z+1, r25	; 0x01
    2fe8:	a2 83       	std	Z+2, r26	; 0x02
    2fea:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    2fec:	fe 01       	movw	r30, r28
    2fee:	e6 5e       	subi	r30, 0xE6	; 230
    2ff0:	fd 4f       	sbci	r31, 0xFD	; 253
    2ff2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ff4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ff6:	ac 85       	ldd	r26, Y+12	; 0x0c
    2ff8:	bd 85       	ldd	r27, Y+13	; 0x0d
    2ffa:	80 83       	st	Z, r24
    2ffc:	91 83       	std	Z+1, r25	; 0x01
    2ffe:	a2 83       	std	Z+2, r26	; 0x02
    3000:	b3 83       	std	Z+3, r27	; 0x03
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    3002:	2a 89       	ldd	r18, Y+18	; 0x12
    3004:	3b 89       	ldd	r19, Y+19	; 0x13
    3006:	4c 89       	ldd	r20, Y+20	; 0x14
    3008:	5d 89       	ldd	r21, Y+21	; 0x15
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	b8 01       	movw	r22, r16
    300e:	01 e0       	ldi	r16, 0x01	; 1
    3010:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <disk_write>
			fs->fsi_flag = 0;
    3014:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	60 e0       	ldi	r22, 0x00	; 0
    301a:	40 e0       	ldi	r20, 0x00	; 0
    301c:	50 e0       	ldi	r21, 0x00	; 0
    301e:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <disk_ioctl>
    3022:	91 e0       	ldi	r25, 0x01	; 1
    3024:	88 23       	and	r24, r24
    3026:	09 f4       	brne	.+2      	; 0x302a <f_sync+0x14c>
    3028:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    302a:	89 2f       	mov	r24, r25
    302c:	df 91       	pop	r29
    302e:	cf 91       	pop	r28
    3030:	1f 91       	pop	r17
    3032:	0f 91       	pop	r16
    3034:	08 95       	ret

00003036 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    3036:	cf 93       	push	r28
    3038:	df 93       	push	r29
    303a:	ec 01       	movw	r28, r24
#endif
		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
		LEAVE_FF(fs, res);
	}
#else
	res = f_sync(fp);		/* Flush cached data */
    303c:	50 df       	rcall	.-352    	; 0x2ede <f_sync>
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    303e:	88 23       	and	r24, r24
    3040:	11 f4       	brne	.+4      	; 0x3046 <f_close+0x10>
    3042:	19 82       	std	Y+1, r1	; 0x01
    3044:	18 82       	st	Y, r1
	return res;
#endif
}
    3046:	df 91       	pop	r29
    3048:	cf 91       	pop	r28
    304a:	08 95       	ret

0000304c <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    304c:	2f 92       	push	r2
    304e:	3f 92       	push	r3
    3050:	4f 92       	push	r4
    3052:	5f 92       	push	r5
    3054:	6f 92       	push	r6
    3056:	7f 92       	push	r7
    3058:	9f 92       	push	r9
    305a:	af 92       	push	r10
    305c:	bf 92       	push	r11
    305e:	cf 92       	push	r12
    3060:	df 92       	push	r13
    3062:	ef 92       	push	r14
    3064:	ff 92       	push	r15
    3066:	0f 93       	push	r16
    3068:	1f 93       	push	r17
    306a:	df 93       	push	r29
    306c:	cf 93       	push	r28
    306e:	00 d0       	rcall	.+0      	; 0x3070 <f_lseek+0x24>
    3070:	00 d0       	rcall	.+0      	; 0x3072 <f_lseek+0x26>
    3072:	00 d0       	rcall	.+0      	; 0x3074 <f_lseek+0x28>
    3074:	cd b7       	in	r28, 0x3d	; 61
    3076:	de b7       	in	r29, 0x3e	; 62
    3078:	9e 83       	std	Y+6, r25	; 0x06
    307a:	8d 83       	std	Y+5, r24	; 0x05
    307c:	7a 01       	movw	r14, r20
    307e:	8b 01       	movw	r16, r22
	FRESULT res;


	res = validate(fp);					/* Check validity of the object */
    3080:	0e 94 18 0b 	call	0x1630	; 0x1630 <validate>
    3084:	98 2e       	mov	r9, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3086:	88 23       	and	r24, r24
    3088:	09 f0       	breq	.+2      	; 0x308c <f_lseek+0x40>
    308a:	87 c1       	rjmp	.+782    	; 0x339a <f_lseek+0x34e>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    308c:	ad 81       	ldd	r26, Y+5	; 0x05
    308e:	be 81       	ldd	r27, Y+6	; 0x06
    3090:	14 96       	adiw	r26, 0x04	; 4
    3092:	2c 91       	ld	r18, X
    3094:	14 97       	sbiw	r26, 0x04	; 4
    3096:	27 fd       	sbrc	r18, 7
    3098:	7e c1       	rjmp	.+764    	; 0x3396 <f_lseek+0x34a>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    309a:	1a 96       	adiw	r26, 0x0a	; 10
    309c:	8d 91       	ld	r24, X+
    309e:	9d 91       	ld	r25, X+
    30a0:	0d 90       	ld	r0, X+
    30a2:	bc 91       	ld	r27, X
    30a4:	a0 2d       	mov	r26, r0
    30a6:	8e 15       	cp	r24, r14
    30a8:	9f 05       	cpc	r25, r15
    30aa:	a0 07       	cpc	r26, r16
    30ac:	b1 07       	cpc	r27, r17
    30ae:	20 f4       	brcc	.+8      	; 0x30b8 <f_lseek+0x6c>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    30b0:	21 fd       	sbrc	r18, 1
    30b2:	02 c0       	rjmp	.+4      	; 0x30b8 <f_lseek+0x6c>
    30b4:	7c 01       	movw	r14, r24
    30b6:	8d 01       	movw	r16, r26
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    30b8:	ed 81       	ldd	r30, Y+5	; 0x05
    30ba:	fe 81       	ldd	r31, Y+6	; 0x06
    30bc:	86 81       	ldd	r24, Z+6	; 0x06
    30be:	97 81       	ldd	r25, Z+7	; 0x07
    30c0:	a0 85       	ldd	r26, Z+8	; 0x08
    30c2:	b1 85       	ldd	r27, Z+9	; 0x09
		fp->fptr = nsect = 0;
    30c4:	16 82       	std	Z+6, r1	; 0x06
    30c6:	17 82       	std	Z+7, r1	; 0x07
    30c8:	10 86       	std	Z+8, r1	; 0x08
    30ca:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    30cc:	e1 14       	cp	r14, r1
    30ce:	f1 04       	cpc	r15, r1
    30d0:	01 05       	cpc	r16, r1
    30d2:	11 05       	cpc	r17, r1
    30d4:	09 f4       	brne	.+2      	; 0x30d8 <f_lseek+0x8c>
    30d6:	2d c1       	rjmp	.+602    	; 0x3332 <f_lseek+0x2e6>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    30d8:	20 80       	ld	r2, Z
    30da:	31 80       	ldd	r3, Z+1	; 0x01
    30dc:	f1 01       	movw	r30, r2
    30de:	a2 80       	ldd	r10, Z+2	; 0x02
    30e0:	bb 24       	eor	r11, r11
    30e2:	cc 24       	eor	r12, r12
    30e4:	dd 24       	eor	r13, r13
    30e6:	39 e0       	ldi	r19, 0x09	; 9
    30e8:	aa 0c       	add	r10, r10
    30ea:	bb 1c       	adc	r11, r11
    30ec:	cc 1c       	adc	r12, r12
    30ee:	dd 1c       	adc	r13, r13
    30f0:	3a 95       	dec	r19
    30f2:	d1 f7       	brne	.-12     	; 0x30e8 <f_lseek+0x9c>
			if (ifptr > 0 &&
    30f4:	00 97       	sbiw	r24, 0x00	; 0
    30f6:	a1 05       	cpc	r26, r1
    30f8:	b1 05       	cpc	r27, r1
    30fa:	f1 f1       	breq	.+124    	; 0x3178 <f_lseek+0x12c>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    30fc:	2c 01       	movw	r4, r24
    30fe:	3d 01       	movw	r6, r26
    3100:	08 94       	sec
    3102:	41 08       	sbc	r4, r1
    3104:	51 08       	sbc	r5, r1
    3106:	61 08       	sbc	r6, r1
    3108:	71 08       	sbc	r7, r1
    310a:	c8 01       	movw	r24, r16
    310c:	b7 01       	movw	r22, r14
    310e:	61 50       	subi	r22, 0x01	; 1
    3110:	70 40       	sbci	r23, 0x00	; 0
    3112:	80 40       	sbci	r24, 0x00	; 0
    3114:	90 40       	sbci	r25, 0x00	; 0
    3116:	a6 01       	movw	r20, r12
    3118:	95 01       	movw	r18, r10
    311a:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <__udivmodsi4>
    311e:	29 83       	std	Y+1, r18	; 0x01
    3120:	3a 83       	std	Y+2, r19	; 0x02
    3122:	4b 83       	std	Y+3, r20	; 0x03
    3124:	5c 83       	std	Y+4, r21	; 0x04
    3126:	c3 01       	movw	r24, r6
    3128:	b2 01       	movw	r22, r4
    312a:	a6 01       	movw	r20, r12
    312c:	95 01       	movw	r18, r10
    312e:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	9a 81       	ldd	r25, Y+2	; 0x02
    3136:	ab 81       	ldd	r26, Y+3	; 0x03
    3138:	bc 81       	ldd	r27, Y+4	; 0x04
    313a:	82 17       	cp	r24, r18
    313c:	93 07       	cpc	r25, r19
    313e:	a4 07       	cpc	r26, r20
    3140:	b5 07       	cpc	r27, r21
    3142:	d0 f0       	brcs	.+52     	; 0x3178 <f_lseek+0x12c>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    3144:	88 27       	eor	r24, r24
    3146:	99 27       	eor	r25, r25
    3148:	dc 01       	movw	r26, r24
    314a:	8a 19       	sub	r24, r10
    314c:	9b 09       	sbc	r25, r11
    314e:	ac 09       	sbc	r26, r12
    3150:	bd 09       	sbc	r27, r13
    3152:	84 21       	and	r24, r4
    3154:	95 21       	and	r25, r5
    3156:	a6 21       	and	r26, r6
    3158:	b7 21       	and	r27, r7
    315a:	ed 81       	ldd	r30, Y+5	; 0x05
    315c:	fe 81       	ldd	r31, Y+6	; 0x06
    315e:	86 83       	std	Z+6, r24	; 0x06
    3160:	97 83       	std	Z+7, r25	; 0x07
    3162:	a0 87       	std	Z+8, r26	; 0x08
    3164:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    3166:	e8 1a       	sub	r14, r24
    3168:	f9 0a       	sbc	r15, r25
    316a:	0a 0b       	sbc	r16, r26
    316c:	1b 0b       	sbc	r17, r27
				clst = fp->clust;
    316e:	42 89       	ldd	r20, Z+18	; 0x12
    3170:	53 89       	ldd	r21, Z+19	; 0x13
    3172:	64 89       	ldd	r22, Z+20	; 0x14
    3174:	75 89       	ldd	r23, Z+21	; 0x15
    3176:	36 c0       	rjmp	.+108    	; 0x31e4 <f_lseek+0x198>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    3178:	ad 81       	ldd	r26, Y+5	; 0x05
    317a:	be 81       	ldd	r27, Y+6	; 0x06
    317c:	1e 96       	adiw	r26, 0x0e	; 14
    317e:	4d 91       	ld	r20, X+
    3180:	5d 91       	ld	r21, X+
    3182:	6d 91       	ld	r22, X+
    3184:	7c 91       	ld	r23, X
    3186:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    3188:	41 15       	cp	r20, r1
    318a:	51 05       	cpc	r21, r1
    318c:	61 05       	cpc	r22, r1
    318e:	71 05       	cpc	r23, r1
    3190:	09 f5       	brne	.+66     	; 0x31d4 <f_lseek+0x188>
					clst = create_chain(fp->fs, 0);
    3192:	c1 01       	movw	r24, r2
    3194:	40 e0       	ldi	r20, 0x00	; 0
    3196:	50 e0       	ldi	r21, 0x00	; 0
    3198:	ba 01       	movw	r22, r20
    319a:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <create_chain>
    319e:	ab 01       	movw	r20, r22
    31a0:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    31a2:	41 30       	cpi	r20, 0x01	; 1
    31a4:	51 05       	cpc	r21, r1
    31a6:	61 05       	cpc	r22, r1
    31a8:	71 05       	cpc	r23, r1
    31aa:	19 f4       	brne	.+6      	; 0x31b2 <f_lseek+0x166>
    31ac:	ed 81       	ldd	r30, Y+5	; 0x05
    31ae:	fe 81       	ldd	r31, Y+6	; 0x06
    31b0:	5f c0       	rjmp	.+190    	; 0x3270 <f_lseek+0x224>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    31b2:	4f 3f       	cpi	r20, 0xFF	; 255
    31b4:	ff ef       	ldi	r31, 0xFF	; 255
    31b6:	5f 07       	cpc	r21, r31
    31b8:	ff ef       	ldi	r31, 0xFF	; 255
    31ba:	6f 07       	cpc	r22, r31
    31bc:	ff ef       	ldi	r31, 0xFF	; 255
    31be:	7f 07       	cpc	r23, r31
    31c0:	19 f4       	brne	.+6      	; 0x31c8 <f_lseek+0x17c>
    31c2:	ad 81       	ldd	r26, Y+5	; 0x05
    31c4:	be 81       	ldd	r27, Y+6	; 0x06
    31c6:	36 c0       	rjmp	.+108    	; 0x3234 <f_lseek+0x1e8>
					fp->sclust = clst;
    31c8:	ed 81       	ldd	r30, Y+5	; 0x05
    31ca:	fe 81       	ldd	r31, Y+6	; 0x06
    31cc:	46 87       	std	Z+14, r20	; 0x0e
    31ce:	57 87       	std	Z+15, r21	; 0x0f
    31d0:	60 8b       	std	Z+16, r22	; 0x10
    31d2:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->clust = clst;
    31d4:	ad 81       	ldd	r26, Y+5	; 0x05
    31d6:	be 81       	ldd	r27, Y+6	; 0x06
    31d8:	52 96       	adiw	r26, 0x12	; 18
    31da:	4d 93       	st	X+, r20
    31dc:	5d 93       	st	X+, r21
    31de:	6d 93       	st	X+, r22
    31e0:	7c 93       	st	X, r23
    31e2:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    31e4:	41 15       	cp	r20, r1
    31e6:	51 05       	cpc	r21, r1
    31e8:	61 05       	cpc	r22, r1
    31ea:	71 05       	cpc	r23, r1
    31ec:	09 f4       	brne	.+2      	; 0x31f0 <f_lseek+0x1a4>
    31ee:	a1 c0       	rjmp	.+322    	; 0x3332 <f_lseek+0x2e6>
    31f0:	4d 80       	ldd	r4, Y+5	; 0x05
    31f2:	5e 80       	ldd	r5, Y+6	; 0x06
    31f4:	5b c0       	rjmp	.+182    	; 0x32ac <f_lseek+0x260>
				while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    31f6:	f2 01       	movw	r30, r4
    31f8:	24 81       	ldd	r18, Z+4	; 0x04
    31fa:	80 81       	ld	r24, Z
    31fc:	91 81       	ldd	r25, Z+1	; 0x01
    31fe:	21 ff       	sbrs	r18, 1
    3200:	0a c0       	rjmp	.+20     	; 0x3216 <f_lseek+0x1ca>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    3202:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <create_chain>
    3206:	ab 01       	movw	r20, r22
    3208:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    320a:	41 15       	cp	r20, r1
    320c:	51 05       	cpc	r21, r1
    320e:	61 05       	cpc	r22, r1
    3210:	71 05       	cpc	r23, r1
    3212:	29 f4       	brne	.+10     	; 0x321e <f_lseek+0x1d2>
    3214:	54 c0       	rjmp	.+168    	; 0x32be <f_lseek+0x272>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3216:	0e 94 34 0c 	call	0x1868	; 0x1868 <get_fat>
    321a:	ab 01       	movw	r20, r22
    321c:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    321e:	4f 3f       	cpi	r20, 0xFF	; 255
    3220:	ff ef       	ldi	r31, 0xFF	; 255
    3222:	5f 07       	cpc	r21, r31
    3224:	ff ef       	ldi	r31, 0xFF	; 255
    3226:	6f 07       	cpc	r22, r31
    3228:	ff ef       	ldi	r31, 0xFF	; 255
    322a:	7f 07       	cpc	r23, r31
    322c:	69 f4       	brne	.+26     	; 0x3248 <f_lseek+0x1fc>
    322e:	5e 82       	std	Y+6, r5	; 0x06
    3230:	4d 82       	std	Y+5, r4	; 0x05
    3232:	d2 01       	movw	r26, r4
    3234:	14 96       	adiw	r26, 0x04	; 4
    3236:	8c 91       	ld	r24, X
    3238:	14 97       	sbiw	r26, 0x04	; 4
    323a:	80 68       	ori	r24, 0x80	; 128
    323c:	14 96       	adiw	r26, 0x04	; 4
    323e:	8c 93       	st	X, r24
    3240:	14 97       	sbiw	r26, 0x04	; 4
    3242:	99 24       	eor	r9, r9
    3244:	93 94       	inc	r9
    3246:	a9 c0       	rjmp	.+338    	; 0x339a <f_lseek+0x34e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    3248:	42 30       	cpi	r20, 0x02	; 2
    324a:	51 05       	cpc	r21, r1
    324c:	61 05       	cpc	r22, r1
    324e:	71 05       	cpc	r23, r1
    3250:	60 f0       	brcs	.+24     	; 0x326a <f_lseek+0x21e>
    3252:	d2 01       	movw	r26, r4
    3254:	ed 91       	ld	r30, X+
    3256:	fc 91       	ld	r31, X
    3258:	86 89       	ldd	r24, Z+22	; 0x16
    325a:	97 89       	ldd	r25, Z+23	; 0x17
    325c:	a0 8d       	ldd	r26, Z+24	; 0x18
    325e:	b1 8d       	ldd	r27, Z+25	; 0x19
    3260:	48 17       	cp	r20, r24
    3262:	59 07       	cpc	r21, r25
    3264:	6a 07       	cpc	r22, r26
    3266:	7b 07       	cpc	r23, r27
    3268:	38 f0       	brcs	.+14     	; 0x3278 <f_lseek+0x22c>
    326a:	5e 82       	std	Y+6, r5	; 0x06
    326c:	4d 82       	std	Y+5, r4	; 0x05
    326e:	f2 01       	movw	r30, r4
    3270:	84 81       	ldd	r24, Z+4	; 0x04
    3272:	80 68       	ori	r24, 0x80	; 128
    3274:	84 83       	std	Z+4, r24	; 0x04
    3276:	8f c0       	rjmp	.+286    	; 0x3396 <f_lseek+0x34a>
					fp->clust = clst;
    3278:	d2 01       	movw	r26, r4
    327a:	52 96       	adiw	r26, 0x12	; 18
    327c:	4d 93       	st	X+, r20
    327e:	5d 93       	st	X+, r21
    3280:	6d 93       	st	X+, r22
    3282:	7c 93       	st	X, r23
    3284:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    3286:	16 96       	adiw	r26, 0x06	; 6
    3288:	8d 91       	ld	r24, X+
    328a:	9d 91       	ld	r25, X+
    328c:	0d 90       	ld	r0, X+
    328e:	bc 91       	ld	r27, X
    3290:	a0 2d       	mov	r26, r0
    3292:	8a 0d       	add	r24, r10
    3294:	9b 1d       	adc	r25, r11
    3296:	ac 1d       	adc	r26, r12
    3298:	bd 1d       	adc	r27, r13
    329a:	f2 01       	movw	r30, r4
    329c:	86 83       	std	Z+6, r24	; 0x06
    329e:	97 83       	std	Z+7, r25	; 0x07
    32a0:	a0 87       	std	Z+8, r26	; 0x08
    32a2:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    32a4:	ea 18       	sub	r14, r10
    32a6:	fb 08       	sbc	r15, r11
    32a8:	0c 09       	sbc	r16, r12
    32aa:	1d 09       	sbc	r17, r13
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    32ac:	ae 14       	cp	r10, r14
    32ae:	bf 04       	cpc	r11, r15
    32b0:	c0 06       	cpc	r12, r16
    32b2:	d1 06       	cpc	r13, r17
    32b4:	08 f4       	brcc	.+2      	; 0x32b8 <f_lseek+0x26c>
    32b6:	9f cf       	rjmp	.-194    	; 0x31f6 <f_lseek+0x1aa>
    32b8:	5e 82       	std	Y+6, r5	; 0x06
    32ba:	4d 82       	std	Y+5, r4	; 0x05
    32bc:	04 c0       	rjmp	.+8      	; 0x32c6 <f_lseek+0x27a>
    32be:	5e 82       	std	Y+6, r5	; 0x06
    32c0:	4d 82       	std	Y+5, r4	; 0x05
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
    32c2:	86 01       	movw	r16, r12
    32c4:	75 01       	movw	r14, r10
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    32c6:	ed 81       	ldd	r30, Y+5	; 0x05
    32c8:	fe 81       	ldd	r31, Y+6	; 0x06
    32ca:	86 81       	ldd	r24, Z+6	; 0x06
    32cc:	97 81       	ldd	r25, Z+7	; 0x07
    32ce:	a0 85       	ldd	r26, Z+8	; 0x08
    32d0:	b1 85       	ldd	r27, Z+9	; 0x09
    32d2:	8e 0d       	add	r24, r14
    32d4:	9f 1d       	adc	r25, r15
    32d6:	a0 1f       	adc	r26, r16
    32d8:	b1 1f       	adc	r27, r17
    32da:	86 83       	std	Z+6, r24	; 0x06
    32dc:	97 83       	std	Z+7, r25	; 0x07
    32de:	a0 87       	std	Z+8, r26	; 0x08
    32e0:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    32e2:	d8 01       	movw	r26, r16
    32e4:	c7 01       	movw	r24, r14
    32e6:	91 70       	andi	r25, 0x01	; 1
    32e8:	a0 70       	andi	r26, 0x00	; 0
    32ea:	b0 70       	andi	r27, 0x00	; 0
    32ec:	00 97       	sbiw	r24, 0x00	; 0
    32ee:	a1 05       	cpc	r26, r1
    32f0:	b1 05       	cpc	r27, r1
    32f2:	f9 f0       	breq	.+62     	; 0x3332 <f_lseek+0x2e6>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    32f4:	80 81       	ld	r24, Z
    32f6:	91 81       	ldd	r25, Z+1	; 0x01
    32f8:	0e 94 05 0c 	call	0x180a	; 0x180a <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    32fc:	61 15       	cp	r22, r1
    32fe:	71 05       	cpc	r23, r1
    3300:	81 05       	cpc	r24, r1
    3302:	91 05       	cpc	r25, r1
    3304:	51 f4       	brne	.+20     	; 0x331a <f_lseek+0x2ce>
    3306:	ad 81       	ldd	r26, Y+5	; 0x05
    3308:	be 81       	ldd	r27, Y+6	; 0x06
    330a:	14 96       	adiw	r26, 0x04	; 4
    330c:	8c 91       	ld	r24, X
    330e:	14 97       	sbiw	r26, 0x04	; 4
    3310:	80 68       	ori	r24, 0x80	; 128
    3312:	14 96       	adiw	r26, 0x04	; 4
    3314:	8c 93       	st	X, r24
    3316:	14 97       	sbiw	r26, 0x04	; 4
    3318:	3e c0       	rjmp	.+124    	; 0x3396 <f_lseek+0x34a>
					nsect += ofs / SS(fp->fs);
    331a:	29 e0       	ldi	r18, 0x09	; 9
    331c:	16 95       	lsr	r17
    331e:	07 95       	ror	r16
    3320:	f7 94       	ror	r15
    3322:	e7 94       	ror	r14
    3324:	2a 95       	dec	r18
    3326:	d1 f7       	brne	.-12     	; 0x331c <f_lseek+0x2d0>
    3328:	e6 0e       	add	r14, r22
    332a:	f7 1e       	adc	r15, r23
    332c:	08 1f       	adc	r16, r24
    332e:	19 1f       	adc	r17, r25
    3330:	03 c0       	rjmp	.+6      	; 0x3338 <f_lseek+0x2ec>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    3332:	ee 24       	eor	r14, r14
    3334:	ff 24       	eor	r15, r15
    3336:	87 01       	movw	r16, r14
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    3338:	ed 81       	ldd	r30, Y+5	; 0x05
    333a:	fe 81       	ldd	r31, Y+6	; 0x06
    333c:	26 81       	ldd	r18, Z+6	; 0x06
    333e:	37 81       	ldd	r19, Z+7	; 0x07
    3340:	40 85       	ldd	r20, Z+8	; 0x08
    3342:	51 85       	ldd	r21, Z+9	; 0x09
    3344:	da 01       	movw	r26, r20
    3346:	c9 01       	movw	r24, r18
    3348:	91 70       	andi	r25, 0x01	; 1
    334a:	a0 70       	andi	r26, 0x00	; 0
    334c:	b0 70       	andi	r27, 0x00	; 0
    334e:	00 97       	sbiw	r24, 0x00	; 0
    3350:	a1 05       	cpc	r26, r1
    3352:	b1 05       	cpc	r27, r1
    3354:	69 f0       	breq	.+26     	; 0x3370 <f_lseek+0x324>
    3356:	86 89       	ldd	r24, Z+22	; 0x16
    3358:	97 89       	ldd	r25, Z+23	; 0x17
    335a:	a0 8d       	ldd	r26, Z+24	; 0x18
    335c:	b1 8d       	ldd	r27, Z+25	; 0x19
    335e:	e8 16       	cp	r14, r24
    3360:	f9 06       	cpc	r15, r25
    3362:	0a 07       	cpc	r16, r26
    3364:	1b 07       	cpc	r17, r27
    3366:	21 f0       	breq	.+8      	; 0x3370 <f_lseek+0x324>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    3368:	e6 8a       	std	Z+22, r14	; 0x16
    336a:	f7 8a       	std	Z+23, r15	; 0x17
    336c:	00 8f       	std	Z+24, r16	; 0x18
    336e:	11 8f       	std	Z+25, r17	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    3370:	ed 81       	ldd	r30, Y+5	; 0x05
    3372:	fe 81       	ldd	r31, Y+6	; 0x06
    3374:	82 85       	ldd	r24, Z+10	; 0x0a
    3376:	93 85       	ldd	r25, Z+11	; 0x0b
    3378:	a4 85       	ldd	r26, Z+12	; 0x0c
    337a:	b5 85       	ldd	r27, Z+13	; 0x0d
    337c:	82 17       	cp	r24, r18
    337e:	93 07       	cpc	r25, r19
    3380:	a4 07       	cpc	r26, r20
    3382:	b5 07       	cpc	r27, r21
    3384:	50 f4       	brcc	.+20     	; 0x339a <f_lseek+0x34e>
			fp->fsize = fp->fptr;
    3386:	22 87       	std	Z+10, r18	; 0x0a
    3388:	33 87       	std	Z+11, r19	; 0x0b
    338a:	44 87       	std	Z+12, r20	; 0x0c
    338c:	55 87       	std	Z+13, r21	; 0x0d
			fp->flag |= FA__WRITTEN;
    338e:	84 81       	ldd	r24, Z+4	; 0x04
    3390:	80 62       	ori	r24, 0x20	; 32
    3392:	84 83       	std	Z+4, r24	; 0x04
    3394:	02 c0       	rjmp	.+4      	; 0x339a <f_lseek+0x34e>


	res = validate(fp);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    3396:	82 e0       	ldi	r24, 0x02	; 2
    3398:	98 2e       	mov	r9, r24
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    339a:	89 2d       	mov	r24, r9
    339c:	26 96       	adiw	r28, 0x06	; 6
    339e:	0f b6       	in	r0, 0x3f	; 63
    33a0:	f8 94       	cli
    33a2:	de bf       	out	0x3e, r29	; 62
    33a4:	0f be       	out	0x3f, r0	; 63
    33a6:	cd bf       	out	0x3d, r28	; 61
    33a8:	cf 91       	pop	r28
    33aa:	df 91       	pop	r29
    33ac:	1f 91       	pop	r17
    33ae:	0f 91       	pop	r16
    33b0:	ff 90       	pop	r15
    33b2:	ef 90       	pop	r14
    33b4:	df 90       	pop	r13
    33b6:	cf 90       	pop	r12
    33b8:	bf 90       	pop	r11
    33ba:	af 90       	pop	r10
    33bc:	9f 90       	pop	r9
    33be:	7f 90       	pop	r7
    33c0:	6f 90       	pop	r6
    33c2:	5f 90       	pop	r5
    33c4:	4f 90       	pop	r4
    33c6:	3f 90       	pop	r3
    33c8:	2f 90       	pop	r2
    33ca:	08 95       	ret

000033cc <Endpoint_Null_Stream>:

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    33cc:	df 92       	push	r13
    33ce:	ef 92       	push	r14
    33d0:	ff 92       	push	r15
    33d2:	0f 93       	push	r16
    33d4:	1f 93       	push	r17
    33d6:	cf 93       	push	r28
    33d8:	df 93       	push	r29
    33da:	ec 01       	movw	r28, r24
    33dc:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
    33de:	da d2       	rcall	.+1460   	; 0x3994 <Endpoint_WaitUntilReady>
    33e0:	d8 2e       	mov	r13, r24
    33e2:	88 23       	and	r24, r24
    33e4:	79 f5       	brne	.+94     	; 0x3444 <Endpoint_Null_Stream+0x78>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
    33e6:	01 15       	cp	r16, r1
    33e8:	11 05       	cpc	r17, r1
    33ea:	29 f0       	breq	.+10     	; 0x33f6 <Endpoint_Null_Stream+0x2a>
	  Length -= *BytesProcessed;
    33ec:	f8 01       	movw	r30, r16
    33ee:	20 81       	ld	r18, Z
    33f0:	31 81       	ldd	r19, Z+1	; 0x01
    33f2:	c2 1b       	sub	r28, r18
    33f4:	d3 0b       	sbc	r29, r19
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    33f6:	ee 24       	eor	r14, r14
    33f8:	ff 24       	eor	r15, r15
    33fa:	20 c0       	rjmp	.+64     	; 0x343c <Endpoint_Null_Stream+0x70>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    33fc:	80 91 e8 00 	lds	r24, 0x00E8
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    3400:	85 fd       	sbrc	r24, 5
    3402:	16 c0       	rjmp	.+44     	; 0x3430 <Endpoint_Null_Stream+0x64>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3404:	80 91 e8 00 	lds	r24, 0x00E8
    3408:	8e 77       	andi	r24, 0x7E	; 126
    340a:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
    340e:	01 15       	cp	r16, r1
    3410:	11 05       	cpc	r17, r1
    3412:	51 f0       	breq	.+20     	; 0x3428 <Endpoint_Null_Stream+0x5c>
			{
				*BytesProcessed += BytesInTransfer;
    3414:	f8 01       	movw	r30, r16
    3416:	80 81       	ld	r24, Z
    3418:	91 81       	ldd	r25, Z+1	; 0x01
    341a:	8e 0d       	add	r24, r14
    341c:	9f 1d       	adc	r25, r15
    341e:	91 83       	std	Z+1, r25	; 0x01
    3420:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    3422:	95 e0       	ldi	r25, 0x05	; 5
    3424:	d9 2e       	mov	r13, r25
    3426:	0e c0       	rjmp	.+28     	; 0x3444 <Endpoint_Null_Stream+0x78>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3428:	b5 d2       	rcall	.+1386   	; 0x3994 <Endpoint_WaitUntilReady>
    342a:	88 23       	and	r24, r24
    342c:	39 f0       	breq	.+14     	; 0x343c <Endpoint_Null_Stream+0x70>
    342e:	09 c0       	rjmp	.+18     	; 0x3442 <Endpoint_Null_Stream+0x76>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3430:	10 92 f1 00 	sts	0x00F1, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
    3434:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    3436:	08 94       	sec
    3438:	e1 1c       	adc	r14, r1
    343a:	f1 1c       	adc	r15, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    343c:	20 97       	sbiw	r28, 0x00	; 0
    343e:	f1 f6       	brne	.-68     	; 0x33fc <Endpoint_Null_Stream+0x30>
    3440:	01 c0       	rjmp	.+2      	; 0x3444 <Endpoint_Null_Stream+0x78>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3442:	d8 2e       	mov	r13, r24
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
    3444:	8d 2d       	mov	r24, r13
    3446:	df 91       	pop	r29
    3448:	cf 91       	pop	r28
    344a:	1f 91       	pop	r17
    344c:	0f 91       	pop	r16
    344e:	ff 90       	pop	r15
    3450:	ef 90       	pop	r14
    3452:	df 90       	pop	r13
    3454:	08 95       	ret

00003456 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    3456:	8f 92       	push	r8
    3458:	9f 92       	push	r9
    345a:	bf 92       	push	r11
    345c:	cf 92       	push	r12
    345e:	df 92       	push	r13
    3460:	ef 92       	push	r14
    3462:	ff 92       	push	r15
    3464:	0f 93       	push	r16
    3466:	1f 93       	push	r17
    3468:	df 93       	push	r29
    346a:	cf 93       	push	r28
    346c:	0f 92       	push	r0
    346e:	cd b7       	in	r28, 0x3d	; 61
    3470:	de b7       	in	r29, 0x3e	; 62
    3472:	e8 2e       	mov	r14, r24
    3474:	4b 01       	movw	r8, r22
    3476:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    3478:	99 83       	std	Y+1, r25	; 0x01
    347a:	8c d2       	rcall	.+1304   	; 0x3994 <Endpoint_WaitUntilReady>
    347c:	b8 2e       	mov	r11, r24
    347e:	99 81       	ldd	r25, Y+1	; 0x01
    3480:	88 23       	and	r24, r24
    3482:	c1 f5       	brne	.+112    	; 0x34f4 <Endpoint_Write_Stream_LE+0x9e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3484:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    3486:	01 15       	cp	r16, r1
    3488:	11 05       	cpc	r17, r1
    348a:	39 f0       	breq	.+14     	; 0x349a <Endpoint_Write_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
    348c:	f8 01       	movw	r30, r16
    348e:	20 81       	ld	r18, Z
    3490:	31 81       	ldd	r19, Z+1	; 0x01
    3492:	82 1a       	sub	r8, r18
    3494:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    3496:	e2 0e       	add	r14, r18
    3498:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    349a:	cc 24       	eor	r12, r12
    349c:	dd 24       	eor	r13, r13
    349e:	25 c0       	rjmp	.+74     	; 0x34ea <Endpoint_Write_Stream_LE+0x94>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    34a0:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    34a4:	85 fd       	sbrc	r24, 5
    34a6:	16 c0       	rjmp	.+44     	; 0x34d4 <Endpoint_Write_Stream_LE+0x7e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    34a8:	80 91 e8 00 	lds	r24, 0x00E8
    34ac:	8e 77       	andi	r24, 0x7E	; 126
    34ae:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    34b2:	01 15       	cp	r16, r1
    34b4:	11 05       	cpc	r17, r1
    34b6:	51 f0       	breq	.+20     	; 0x34cc <Endpoint_Write_Stream_LE+0x76>
			{
				*BytesProcessed += BytesInTransfer;
    34b8:	f8 01       	movw	r30, r16
    34ba:	80 81       	ld	r24, Z
    34bc:	91 81       	ldd	r25, Z+1	; 0x01
    34be:	8c 0d       	add	r24, r12
    34c0:	9d 1d       	adc	r25, r13
    34c2:	91 83       	std	Z+1, r25	; 0x01
    34c4:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    34c6:	25 e0       	ldi	r18, 0x05	; 5
    34c8:	b2 2e       	mov	r11, r18
    34ca:	14 c0       	rjmp	.+40     	; 0x34f4 <Endpoint_Write_Stream_LE+0x9e>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    34cc:	63 d2       	rcall	.+1222   	; 0x3994 <Endpoint_WaitUntilReady>
    34ce:	88 23       	and	r24, r24
    34d0:	61 f0       	breq	.+24     	; 0x34ea <Endpoint_Write_Stream_LE+0x94>
    34d2:	0f c0       	rjmp	.+30     	; 0x34f2 <Endpoint_Write_Stream_LE+0x9c>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    34d4:	f7 01       	movw	r30, r14
    34d6:	81 91       	ld	r24, Z+
    34d8:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    34da:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    34de:	08 94       	sec
    34e0:	81 08       	sbc	r8, r1
    34e2:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    34e4:	08 94       	sec
    34e6:	c1 1c       	adc	r12, r1
    34e8:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    34ea:	81 14       	cp	r8, r1
    34ec:	91 04       	cpc	r9, r1
    34ee:	c1 f6       	brne	.-80     	; 0x34a0 <Endpoint_Write_Stream_LE+0x4a>
    34f0:	01 c0       	rjmp	.+2      	; 0x34f4 <Endpoint_Write_Stream_LE+0x9e>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    34f2:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    34f4:	8b 2d       	mov	r24, r11
    34f6:	0f 90       	pop	r0
    34f8:	cf 91       	pop	r28
    34fa:	df 91       	pop	r29
    34fc:	1f 91       	pop	r17
    34fe:	0f 91       	pop	r16
    3500:	ff 90       	pop	r15
    3502:	ef 90       	pop	r14
    3504:	df 90       	pop	r13
    3506:	cf 90       	pop	r12
    3508:	bf 90       	pop	r11
    350a:	9f 90       	pop	r9
    350c:	8f 90       	pop	r8
    350e:	08 95       	ret

00003510 <Endpoint_Write_Stream_BE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    3510:	bf 92       	push	r11
    3512:	cf 92       	push	r12
    3514:	df 92       	push	r13
    3516:	ef 92       	push	r14
    3518:	ff 92       	push	r15
    351a:	0f 93       	push	r16
    351c:	1f 93       	push	r17
    351e:	cf 93       	push	r28
    3520:	df 93       	push	r29
    3522:	6c 01       	movw	r12, r24
    3524:	eb 01       	movw	r28, r22
    3526:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    3528:	35 d2       	rcall	.+1130   	; 0x3994 <Endpoint_WaitUntilReady>
    352a:	b8 2e       	mov	r11, r24
    352c:	88 23       	and	r24, r24
    352e:	d1 f5       	brne	.+116    	; 0x35a4 <Endpoint_Write_Stream_BE+0x94>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3530:	8e 01       	movw	r16, r28
    3532:	01 50       	subi	r16, 0x01	; 1
    3534:	10 40       	sbci	r17, 0x00	; 0
    3536:	0c 0d       	add	r16, r12
    3538:	1d 1d       	adc	r17, r13
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    353a:	e1 14       	cp	r14, r1
    353c:	f1 04       	cpc	r15, r1
    353e:	39 f0       	breq	.+14     	; 0x354e <Endpoint_Write_Stream_BE+0x3e>
	{
		Length -= *BytesProcessed;
    3540:	f7 01       	movw	r30, r14
    3542:	20 81       	ld	r18, Z
    3544:	31 81       	ldd	r19, Z+1	; 0x01
    3546:	c2 1b       	sub	r28, r18
    3548:	d3 0b       	sbc	r29, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    354a:	02 1b       	sub	r16, r18
    354c:	13 0b       	sbc	r17, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    354e:	cc 24       	eor	r12, r12
    3550:	dd 24       	eor	r13, r13
    3552:	24 c0       	rjmp	.+72     	; 0x359c <Endpoint_Write_Stream_BE+0x8c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3554:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    3558:	85 fd       	sbrc	r24, 5
    355a:	16 c0       	rjmp	.+44     	; 0x3588 <Endpoint_Write_Stream_BE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    355c:	80 91 e8 00 	lds	r24, 0x00E8
    3560:	8e 77       	andi	r24, 0x7E	; 126
    3562:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    3566:	e1 14       	cp	r14, r1
    3568:	f1 04       	cpc	r15, r1
    356a:	51 f0       	breq	.+20     	; 0x3580 <Endpoint_Write_Stream_BE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    356c:	f7 01       	movw	r30, r14
    356e:	80 81       	ld	r24, Z
    3570:	91 81       	ldd	r25, Z+1	; 0x01
    3572:	8c 0d       	add	r24, r12
    3574:	9d 1d       	adc	r25, r13
    3576:	91 83       	std	Z+1, r25	; 0x01
    3578:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    357a:	35 e0       	ldi	r19, 0x05	; 5
    357c:	b3 2e       	mov	r11, r19
    357e:	12 c0       	rjmp	.+36     	; 0x35a4 <Endpoint_Write_Stream_BE+0x94>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3580:	09 d2       	rcall	.+1042   	; 0x3994 <Endpoint_WaitUntilReady>
    3582:	88 23       	and	r24, r24
    3584:	59 f0       	breq	.+22     	; 0x359c <Endpoint_Write_Stream_BE+0x8c>
    3586:	0d c0       	rjmp	.+26     	; 0x35a2 <Endpoint_Write_Stream_BE+0x92>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    3588:	f8 01       	movw	r30, r16
    358a:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    358c:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    3590:	01 50       	subi	r16, 0x01	; 1
    3592:	10 40       	sbci	r17, 0x00	; 0
			Length--;
    3594:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    3596:	08 94       	sec
    3598:	c1 1c       	adc	r12, r1
    359a:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    359c:	20 97       	sbiw	r28, 0x00	; 0
    359e:	d1 f6       	brne	.-76     	; 0x3554 <Endpoint_Write_Stream_BE+0x44>
    35a0:	01 c0       	rjmp	.+2      	; 0x35a4 <Endpoint_Write_Stream_BE+0x94>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    35a2:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    35a4:	8b 2d       	mov	r24, r11
    35a6:	df 91       	pop	r29
    35a8:	cf 91       	pop	r28
    35aa:	1f 91       	pop	r17
    35ac:	0f 91       	pop	r16
    35ae:	ff 90       	pop	r15
    35b0:	ef 90       	pop	r14
    35b2:	df 90       	pop	r13
    35b4:	cf 90       	pop	r12
    35b6:	bf 90       	pop	r11
    35b8:	08 95       	ret

000035ba <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    35ba:	8f 92       	push	r8
    35bc:	9f 92       	push	r9
    35be:	bf 92       	push	r11
    35c0:	cf 92       	push	r12
    35c2:	df 92       	push	r13
    35c4:	ef 92       	push	r14
    35c6:	ff 92       	push	r15
    35c8:	0f 93       	push	r16
    35ca:	1f 93       	push	r17
    35cc:	df 93       	push	r29
    35ce:	cf 93       	push	r28
    35d0:	0f 92       	push	r0
    35d2:	cd b7       	in	r28, 0x3d	; 61
    35d4:	de b7       	in	r29, 0x3e	; 62
    35d6:	e8 2e       	mov	r14, r24
    35d8:	4b 01       	movw	r8, r22
    35da:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    35dc:	99 83       	std	Y+1, r25	; 0x01
    35de:	da d1       	rcall	.+948    	; 0x3994 <Endpoint_WaitUntilReady>
    35e0:	b8 2e       	mov	r11, r24
    35e2:	99 81       	ldd	r25, Y+1	; 0x01
    35e4:	88 23       	and	r24, r24
    35e6:	c1 f5       	brne	.+112    	; 0x3658 <Endpoint_Read_Stream_LE+0x9e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    35e8:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    35ea:	01 15       	cp	r16, r1
    35ec:	11 05       	cpc	r17, r1
    35ee:	39 f0       	breq	.+14     	; 0x35fe <Endpoint_Read_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
    35f0:	f8 01       	movw	r30, r16
    35f2:	20 81       	ld	r18, Z
    35f4:	31 81       	ldd	r19, Z+1	; 0x01
    35f6:	82 1a       	sub	r8, r18
    35f8:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    35fa:	e2 0e       	add	r14, r18
    35fc:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    35fe:	cc 24       	eor	r12, r12
    3600:	dd 24       	eor	r13, r13
    3602:	25 c0       	rjmp	.+74     	; 0x364e <Endpoint_Read_Stream_LE+0x94>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3604:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    3608:	85 fd       	sbrc	r24, 5
    360a:	16 c0       	rjmp	.+44     	; 0x3638 <Endpoint_Read_Stream_LE+0x7e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    360c:	80 91 e8 00 	lds	r24, 0x00E8
    3610:	8b 77       	andi	r24, 0x7B	; 123
    3612:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    3616:	01 15       	cp	r16, r1
    3618:	11 05       	cpc	r17, r1
    361a:	51 f0       	breq	.+20     	; 0x3630 <Endpoint_Read_Stream_LE+0x76>
			{
				*BytesProcessed += BytesInTransfer;
    361c:	f8 01       	movw	r30, r16
    361e:	80 81       	ld	r24, Z
    3620:	91 81       	ldd	r25, Z+1	; 0x01
    3622:	8c 0d       	add	r24, r12
    3624:	9d 1d       	adc	r25, r13
    3626:	91 83       	std	Z+1, r25	; 0x01
    3628:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    362a:	45 e0       	ldi	r20, 0x05	; 5
    362c:	b4 2e       	mov	r11, r20
    362e:	14 c0       	rjmp	.+40     	; 0x3658 <Endpoint_Read_Stream_LE+0x9e>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3630:	b1 d1       	rcall	.+866    	; 0x3994 <Endpoint_WaitUntilReady>
    3632:	88 23       	and	r24, r24
    3634:	61 f0       	breq	.+24     	; 0x364e <Endpoint_Read_Stream_LE+0x94>
    3636:	0f c0       	rjmp	.+30     	; 0x3656 <Endpoint_Read_Stream_LE+0x9c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3638:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    363c:	f7 01       	movw	r30, r14
    363e:	81 93       	st	Z+, r24
    3640:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    3642:	08 94       	sec
    3644:	81 08       	sbc	r8, r1
    3646:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    3648:	08 94       	sec
    364a:	c1 1c       	adc	r12, r1
    364c:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    364e:	81 14       	cp	r8, r1
    3650:	91 04       	cpc	r9, r1
    3652:	c1 f6       	brne	.-80     	; 0x3604 <Endpoint_Read_Stream_LE+0x4a>
    3654:	01 c0       	rjmp	.+2      	; 0x3658 <Endpoint_Read_Stream_LE+0x9e>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3656:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    3658:	8b 2d       	mov	r24, r11
    365a:	0f 90       	pop	r0
    365c:	cf 91       	pop	r28
    365e:	df 91       	pop	r29
    3660:	1f 91       	pop	r17
    3662:	0f 91       	pop	r16
    3664:	ff 90       	pop	r15
    3666:	ef 90       	pop	r14
    3668:	df 90       	pop	r13
    366a:	cf 90       	pop	r12
    366c:	bf 90       	pop	r11
    366e:	9f 90       	pop	r9
    3670:	8f 90       	pop	r8
    3672:	08 95       	ret

00003674 <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3674:	28 2f       	mov	r18, r24
    3676:	39 2f       	mov	r19, r25
    3678:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    367a:	80 91 34 04 	lds	r24, 0x0434
    367e:	90 91 35 04 	lds	r25, 0x0435
    3682:	86 17       	cp	r24, r22
    3684:	97 07       	cpc	r25, r23
    3686:	18 f4       	brcc	.+6      	; 0x368e <Endpoint_Write_Control_Stream_LE+0x1a>
    3688:	bc 01       	movw	r22, r24
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	35 c0       	rjmp	.+106    	; 0x36f8 <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    368e:	61 15       	cp	r22, r1
    3690:	71 05       	cpc	r23, r1
    3692:	d9 f7       	brne	.-10     	; 0x368a <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3694:	80 91 e8 00 	lds	r24, 0x00E8
    3698:	8e 77       	andi	r24, 0x7E	; 126
    369a:	80 93 e8 00 	sts	0x00E8, r24
    369e:	f5 cf       	rjmp	.-22     	; 0x368a <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    36a0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    36a2:	88 23       	and	r24, r24
    36a4:	f1 f1       	breq	.+124    	; 0x3722 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    36a6:	85 30       	cpi	r24, 0x05	; 5
    36a8:	c1 f1       	breq	.+112    	; 0x371a <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    36aa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    36ae:	83 fd       	sbrc	r24, 3
    36b0:	36 c0       	rjmp	.+108    	; 0x371e <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    36b2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    36b6:	82 fd       	sbrc	r24, 2
    36b8:	2a c0       	rjmp	.+84     	; 0x370e <Endpoint_Write_Control_Stream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    36ba:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    36be:	80 ff       	sbrs	r24, 0
    36c0:	1b c0       	rjmp	.+54     	; 0x36f8 <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    36c2:	80 91 f2 00 	lds	r24, 0x00F2
    36c6:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    36ca:	06 c0       	rjmp	.+12     	; 0x36d8 <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    36cc:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    36ce:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    36d2:	61 50       	subi	r22, 0x01	; 1
    36d4:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    36d6:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    36d8:	61 15       	cp	r22, r1
    36da:	71 05       	cpc	r23, r1
    36dc:	19 f0       	breq	.+6      	; 0x36e4 <Endpoint_Write_Control_Stream_LE+0x70>
    36de:	88 30       	cpi	r24, 0x08	; 8
    36e0:	91 05       	cpc	r25, r1
    36e2:	a0 f3       	brcs	.-24     	; 0x36cc <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    36e4:	21 e0       	ldi	r18, 0x01	; 1
    36e6:	88 30       	cpi	r24, 0x08	; 8
    36e8:	91 05       	cpc	r25, r1
    36ea:	09 f0       	breq	.+2      	; 0x36ee <Endpoint_Write_Control_Stream_LE+0x7a>
    36ec:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    36ee:	80 91 e8 00 	lds	r24, 0x00E8
    36f2:	8e 77       	andi	r24, 0x7E	; 126
    36f4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    36f8:	61 15       	cp	r22, r1
    36fa:	71 05       	cpc	r23, r1
    36fc:	89 f6       	brne	.-94     	; 0x36a0 <Endpoint_Write_Control_Stream_LE+0x2c>
    36fe:	22 23       	and	r18, r18
    3700:	79 f6       	brne	.-98     	; 0x36a0 <Endpoint_Write_Control_Stream_LE+0x2c>
    3702:	05 c0       	rjmp	.+10     	; 0x370e <Endpoint_Write_Control_Stream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3704:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3706:	88 23       	and	r24, r24
    3708:	61 f0       	breq	.+24     	; 0x3722 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    370a:	85 30       	cpi	r24, 0x05	; 5
    370c:	61 f0       	breq	.+24     	; 0x3726 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    370e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3712:	82 ff       	sbrs	r24, 2
    3714:	f7 cf       	rjmp	.-18     	; 0x3704 <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    371a:	83 e0       	ldi	r24, 0x03	; 3
    371c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    3722:	82 e0       	ldi	r24, 0x02	; 2
    3724:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    3726:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3728:	08 95       	ret

0000372a <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    372a:	61 15       	cp	r22, r1
    372c:	71 05       	cpc	r23, r1
    372e:	29 f5       	brne	.+74     	; 0x377a <Endpoint_Read_Control_Stream_LE+0x50>
    3730:	1f c0       	rjmp	.+62     	; 0x3770 <Endpoint_Read_Control_Stream_LE+0x46>
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3732:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3734:	22 23       	and	r18, r18
    3736:	a1 f1       	breq	.+104    	; 0x37a0 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3738:	25 30       	cpi	r18, 0x05	; 5
    373a:	71 f1       	breq	.+92     	; 0x3798 <Endpoint_Read_Control_Stream_LE+0x6e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    373c:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3740:	23 fd       	sbrc	r18, 3
    3742:	2c c0       	rjmp	.+88     	; 0x379c <Endpoint_Read_Control_Stream_LE+0x72>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3744:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    3748:	22 ff       	sbrs	r18, 2
    374a:	f3 cf       	rjmp	.-26     	; 0x3732 <Endpoint_Read_Control_Stream_LE+0x8>
    374c:	e8 2f       	mov	r30, r24
    374e:	f9 2f       	mov	r31, r25
    3750:	07 c0       	rjmp	.+14     	; 0x3760 <Endpoint_Read_Control_Stream_LE+0x36>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3752:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3756:	81 93       	st	Z+, r24
    3758:	cf 01       	movw	r24, r30
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    375a:	61 50       	subi	r22, 0x01	; 1
    375c:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    375e:	41 f0       	breq	.+16     	; 0x3770 <Endpoint_Read_Control_Stream_LE+0x46>
    3760:	cf 01       	movw	r24, r30
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    3762:	20 91 f2 00 	lds	r18, 0x00F2
    3766:	30 91 f3 00 	lds	r19, 0x00F3
    376a:	21 15       	cp	r18, r1
    376c:	31 05       	cpc	r19, r1
    376e:	89 f7       	brne	.-30     	; 0x3752 <Endpoint_Read_Control_Stream_LE+0x28>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3770:	20 91 e8 00 	lds	r18, 0x00E8
    3774:	2b 77       	andi	r18, 0x7B	; 123
    3776:	20 93 e8 00 	sts	0x00E8, r18
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    377a:	61 15       	cp	r22, r1
    377c:	71 05       	cpc	r23, r1
    377e:	c9 f6       	brne	.-78     	; 0x3732 <Endpoint_Read_Control_Stream_LE+0x8>
    3780:	05 c0       	rjmp	.+10     	; 0x378c <Endpoint_Read_Control_Stream_LE+0x62>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3782:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3784:	88 23       	and	r24, r24
    3786:	61 f0       	breq	.+24     	; 0x37a0 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3788:	85 30       	cpi	r24, 0x05	; 5
    378a:	61 f0       	breq	.+24     	; 0x37a4 <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    378c:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    3790:	80 ff       	sbrs	r24, 0
    3792:	f7 cf       	rjmp	.-18     	; 0x3782 <Endpoint_Read_Control_Stream_LE+0x58>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    3794:	80 e0       	ldi	r24, 0x00	; 0
    3796:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    3798:	83 e0       	ldi	r24, 0x03	; 3
    379a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    379c:	81 e0       	ldi	r24, 0x01	; 1
    379e:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    37a0:	82 e0       	ldi	r24, 0x02	; 2
    37a2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    37a4:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    37a6:	08 95       	ret

000037a8 <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    37a8:	e8 2f       	mov	r30, r24
    37aa:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    37ac:	80 91 34 04 	lds	r24, 0x0434
    37b0:	90 91 35 04 	lds	r25, 0x0435
    37b4:	86 17       	cp	r24, r22
    37b6:	97 07       	cpc	r25, r23
    37b8:	18 f4       	brcc	.+6      	; 0x37c0 <Endpoint_Write_Control_PStream_LE+0x18>
    37ba:	bc 01       	movw	r22, r24
    37bc:	20 e0       	ldi	r18, 0x00	; 0
    37be:	37 c0       	rjmp	.+110    	; 0x382e <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    37c0:	61 15       	cp	r22, r1
    37c2:	71 05       	cpc	r23, r1
    37c4:	d9 f7       	brne	.-10     	; 0x37bc <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    37c6:	80 91 e8 00 	lds	r24, 0x00E8
    37ca:	8e 77       	andi	r24, 0x7E	; 126
    37cc:	80 93 e8 00 	sts	0x00E8, r24
    37d0:	f5 cf       	rjmp	.-22     	; 0x37bc <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    37d2:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    37d4:	88 23       	and	r24, r24
    37d6:	09 f4       	brne	.+2      	; 0x37da <Endpoint_Write_Control_PStream_LE+0x32>
    37d8:	3f c0       	rjmp	.+126    	; 0x3858 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    37da:	85 30       	cpi	r24, 0x05	; 5
    37dc:	c9 f1       	breq	.+114    	; 0x3850 <Endpoint_Write_Control_PStream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    37de:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    37e2:	83 fd       	sbrc	r24, 3
    37e4:	37 c0       	rjmp	.+110    	; 0x3854 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    37e6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    37ea:	82 fd       	sbrc	r24, 2
    37ec:	2b c0       	rjmp	.+86     	; 0x3844 <Endpoint_Write_Control_PStream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    37ee:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    37f2:	80 ff       	sbrs	r24, 0
    37f4:	1c c0       	rjmp	.+56     	; 0x382e <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    37f6:	80 91 f2 00 	lds	r24, 0x00F2
    37fa:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    37fe:	07 c0       	rjmp	.+14     	; 0x380e <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3800:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3802:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    3806:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    3808:	61 50       	subi	r22, 0x01	; 1
    380a:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    380c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    380e:	61 15       	cp	r22, r1
    3810:	71 05       	cpc	r23, r1
    3812:	19 f0       	breq	.+6      	; 0x381a <Endpoint_Write_Control_PStream_LE+0x72>
    3814:	88 30       	cpi	r24, 0x08	; 8
    3816:	91 05       	cpc	r25, r1
    3818:	98 f3       	brcs	.-26     	; 0x3800 <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    381a:	21 e0       	ldi	r18, 0x01	; 1
    381c:	88 30       	cpi	r24, 0x08	; 8
    381e:	91 05       	cpc	r25, r1
    3820:	09 f0       	breq	.+2      	; 0x3824 <Endpoint_Write_Control_PStream_LE+0x7c>
    3822:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3824:	80 91 e8 00 	lds	r24, 0x00E8
    3828:	8e 77       	andi	r24, 0x7E	; 126
    382a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    382e:	61 15       	cp	r22, r1
    3830:	71 05       	cpc	r23, r1
    3832:	79 f6       	brne	.-98     	; 0x37d2 <Endpoint_Write_Control_PStream_LE+0x2a>
    3834:	22 23       	and	r18, r18
    3836:	69 f6       	brne	.-102    	; 0x37d2 <Endpoint_Write_Control_PStream_LE+0x2a>
    3838:	05 c0       	rjmp	.+10     	; 0x3844 <Endpoint_Write_Control_PStream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    383a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    383c:	88 23       	and	r24, r24
    383e:	61 f0       	breq	.+24     	; 0x3858 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3840:	85 30       	cpi	r24, 0x05	; 5
    3842:	61 f0       	breq	.+24     	; 0x385c <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3844:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3848:	82 ff       	sbrs	r24, 2
    384a:	f7 cf       	rjmp	.-18     	; 0x383a <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    384c:	80 e0       	ldi	r24, 0x00	; 0
    384e:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    3850:	83 e0       	ldi	r24, 0x03	; 3
    3852:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    3858:	82 e0       	ldi	r24, 0x02	; 2
    385a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    385c:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    385e:	08 95       	ret

00003860 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    3860:	98 2f       	mov	r25, r24
    3862:	2c c0       	rjmp	.+88     	; 0x38bc <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3864:	29 2f       	mov	r18, r25
    3866:	2f 70       	andi	r18, 0x0F	; 15
    3868:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    386c:	98 17       	cp	r25, r24
    386e:	39 f0       	breq	.+14     	; 0x387e <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    3870:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    3874:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    3878:	50 91 f0 00 	lds	r21, 0x00F0
    387c:	03 c0       	rjmp	.+6      	; 0x3884 <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    387e:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    3880:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    3882:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    3884:	21 ff       	sbrs	r18, 1
    3886:	19 c0       	rjmp	.+50     	; 0x38ba <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    3888:	30 91 eb 00 	lds	r19, 0x00EB
    388c:	3e 7f       	andi	r19, 0xFE	; 254
    388e:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    3892:	30 91 ed 00 	lds	r19, 0x00ED
    3896:	3d 7f       	andi	r19, 0xFD	; 253
    3898:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    389c:	30 91 eb 00 	lds	r19, 0x00EB
    38a0:	31 60       	ori	r19, 0x01	; 1
    38a2:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    38a6:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    38aa:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    38ae:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    38b2:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    38b6:	27 ff       	sbrs	r18, 7
    38b8:	08 c0       	rjmp	.+16     	; 0x38ca <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    38ba:	9f 5f       	subi	r25, 0xFF	; 255
    38bc:	97 30       	cpi	r25, 0x07	; 7
    38be:	90 f2       	brcs	.-92     	; 0x3864 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    38c0:	8f 70       	andi	r24, 0x0F	; 15
    38c2:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    38ca:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    38cc:	08 95       	ret

000038ce <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    38ce:	ef 92       	push	r14
    38d0:	ff 92       	push	r15
    38d2:	0f 93       	push	r16
    38d4:	1f 93       	push	r17
    38d6:	cf 93       	push	r28
    38d8:	df 93       	push	r29
    38da:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    38dc:	e8 2e       	mov	r14, r24
    38de:	e7 01       	movw	r28, r14
    38e0:	7e 01       	movw	r14, r28
    38e2:	f9 2e       	mov	r15, r25
    38e4:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    38e6:	00 e0       	ldi	r16, 0x00	; 0
    38e8:	2a c0       	rjmp	.+84     	; 0x393e <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
    38ea:	98 81       	ld	r25, Y
    38ec:	99 23       	and	r25, r25
    38ee:	29 f1       	breq	.+74     	; 0x393a <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    38f0:	6b 81       	ldd	r22, Y+3	; 0x03
    38f2:	e9 81       	ldd	r30, Y+1	; 0x01
    38f4:	fa 81       	ldd	r31, Y+2	; 0x02
    38f6:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    38f8:	89 2f       	mov	r24, r25
    38fa:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    38fc:	87 30       	cpi	r24, 0x07	; 7
    38fe:	18 f5       	brcc	.+70     	; 0x3946 <Endpoint_ConfigureEndpointTable+0x78>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    3900:	62 95       	swap	r22
    3902:	66 0f       	add	r22, r22
    3904:	66 0f       	add	r22, r22
    3906:	60 7c       	andi	r22, 0xC0	; 192
    3908:	99 1f       	adc	r25, r25
    390a:	99 27       	eor	r25, r25
    390c:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    390e:	69 2b       	or	r22, r25
    3910:	22 30       	cpi	r18, 0x02	; 2
    3912:	10 f0       	brcs	.+4      	; 0x3918 <Endpoint_ConfigureEndpointTable+0x4a>
    3914:	96 e0       	ldi	r25, 0x06	; 6
    3916:	01 c0       	rjmp	.+2      	; 0x391a <Endpoint_ConfigureEndpointTable+0x4c>
    3918:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    391a:	28 e0       	ldi	r18, 0x08	; 8
    391c:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    391e:	40 e0       	ldi	r20, 0x00	; 0
    3920:	03 c0       	rjmp	.+6      	; 0x3928 <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    3922:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    3924:	22 0f       	add	r18, r18
    3926:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    3928:	2e 17       	cp	r18, r30
    392a:	3f 07       	cpc	r19, r31
    392c:	d0 f3       	brcs	.-12     	; 0x3922 <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    392e:	42 95       	swap	r20
    3930:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3932:	49 2b       	or	r20, r25
    3934:	95 df       	rcall	.-214    	; 0x3860 <Endpoint_ConfigureEndpoint_Prv>
    3936:	88 23       	and	r24, r24
    3938:	31 f0       	breq	.+12     	; 0x3946 <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    393a:	0f 5f       	subi	r16, 0xFF	; 255
    393c:	25 96       	adiw	r28, 0x05	; 5
    393e:	01 17       	cp	r16, r17
    3940:	a0 f2       	brcs	.-88     	; 0x38ea <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	01 c0       	rjmp	.+2      	; 0x3948 <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    3946:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
    3948:	df 91       	pop	r29
    394a:	cf 91       	pop	r28
    394c:	1f 91       	pop	r17
    394e:	0f 91       	pop	r16
    3950:	ff 90       	pop	r15
    3952:	ef 90       	pop	r14
    3954:	08 95       	ret

00003956 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    3956:	80 91 2e 04 	lds	r24, 0x042E
    395a:	87 ff       	sbrs	r24, 7
    395c:	11 c0       	rjmp	.+34     	; 0x3980 <Endpoint_ClearStatusStage+0x2a>
    395e:	03 c0       	rjmp	.+6      	; 0x3966 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3960:	8e b3       	in	r24, 0x1e	; 30
    3962:	88 23       	and	r24, r24
    3964:	b1 f0       	breq	.+44     	; 0x3992 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3966:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    396a:	82 ff       	sbrs	r24, 2
    396c:	f9 cf       	rjmp	.-14     	; 0x3960 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    396e:	80 91 e8 00 	lds	r24, 0x00E8
    3972:	8b 77       	andi	r24, 0x7B	; 123
    3974:	80 93 e8 00 	sts	0x00E8, r24
    3978:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    397a:	8e b3       	in	r24, 0x1e	; 30
    397c:	88 23       	and	r24, r24
    397e:	49 f0       	breq	.+18     	; 0x3992 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3980:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    3984:	80 ff       	sbrs	r24, 0
    3986:	f9 cf       	rjmp	.-14     	; 0x397a <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3988:	80 91 e8 00 	lds	r24, 0x00E8
    398c:	8e 77       	andi	r24, 0x7E	; 126
    398e:	80 93 e8 00 	sts	0x00E8, r24
    3992:	08 95       	ret

00003994 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    3994:	80 91 e4 00 	lds	r24, 0x00E4
    3998:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    399c:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    399e:	20 91 ec 00 	lds	r18, 0x00EC
    39a2:	20 ff       	sbrs	r18, 0
    39a4:	25 c0       	rjmp	.+74     	; 0x39f0 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    39a6:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    39aa:	20 fd       	sbrc	r18, 0
    39ac:	15 c0       	rjmp	.+42     	; 0x39d8 <Endpoint_WaitUntilReady+0x44>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    39ae:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    39b0:	22 23       	and	r18, r18
    39b2:	a1 f0       	breq	.+40     	; 0x39dc <Endpoint_WaitUntilReady+0x48>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    39b4:	25 30       	cpi	r18, 0x05	; 5
    39b6:	a1 f0       	breq	.+40     	; 0x39e0 <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    39b8:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    39bc:	25 fd       	sbrc	r18, 5
    39be:	12 c0       	rjmp	.+36     	; 0x39e4 <Endpoint_WaitUntilReady+0x50>
    39c0:	20 91 e4 00 	lds	r18, 0x00E4
    39c4:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    39c8:	28 17       	cp	r18, r24
    39ca:	39 07       	cpc	r19, r25
    39cc:	41 f3       	breq	.-48     	; 0x399e <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    39ce:	44 23       	and	r20, r20
    39d0:	59 f0       	breq	.+22     	; 0x39e8 <Endpoint_WaitUntilReady+0x54>
    39d2:	41 50       	subi	r20, 0x01	; 1
    39d4:	c9 01       	movw	r24, r18
    39d6:	e3 cf       	rjmp	.-58     	; 0x399e <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    39d8:	80 e0       	ldi	r24, 0x00	; 0
    39da:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    39dc:	82 e0       	ldi	r24, 0x02	; 2
    39de:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    39e0:	83 e0       	ldi	r24, 0x03	; 3
    39e2:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    39e4:	81 e0       	ldi	r24, 0x01	; 1
    39e6:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    39e8:	84 e0       	ldi	r24, 0x04	; 4
    39ea:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    39ec:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    39ee:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    39f0:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    39f4:	22 ff       	sbrs	r18, 2
    39f6:	db cf       	rjmp	.-74     	; 0x39ae <Endpoint_WaitUntilReady+0x1a>
    39f8:	f9 cf       	rjmp	.-14     	; 0x39ec <Endpoint_WaitUntilReady+0x58>

000039fa <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    39fa:	0f 93       	push	r16
    39fc:	1f 93       	push	r17
    39fe:	cf 93       	push	r28
    3a00:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    3a02:	4d d0       	rcall	.+154    	; 0x3a9e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3a04:	54 d0       	rcall	.+168    	; 0x3aae <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    3a06:	c8 ed       	ldi	r28, 0xD8	; 216
    3a08:	d0 e0       	ldi	r29, 0x00	; 0
    3a0a:	88 81       	ld	r24, Y
    3a0c:	8f 77       	andi	r24, 0x7F	; 127
    3a0e:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    3a10:	88 81       	ld	r24, Y
    3a12:	80 68       	ori	r24, 0x80	; 128
    3a14:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3a16:	88 81       	ld	r24, Y
    3a18:	8f 7d       	andi	r24, 0xDF	; 223
    3a1a:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    3a1c:	e7 ed       	ldi	r30, 0xD7	; 215
    3a1e:	f0 e0       	ldi	r31, 0x00	; 0
    3a20:	80 81       	ld	r24, Z
    3a22:	80 68       	ori	r24, 0x80	; 128
    3a24:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3a26:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    3a28:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
    3a2a:	10 92 2a 04 	sts	0x042A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    3a2e:	10 92 2c 04 	sts	0x042C, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    3a32:	10 92 2b 04 	sts	0x042B, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    3a36:	00 ee       	ldi	r16, 0xE0	; 224
    3a38:	10 e0       	ldi	r17, 0x00	; 0
    3a3a:	f8 01       	movw	r30, r16
    3a3c:	80 81       	ld	r24, Z
    3a3e:	8b 7f       	andi	r24, 0xFB	; 251
    3a40:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    3a42:	88 81       	ld	r24, Y
    3a44:	81 60       	ori	r24, 0x01	; 1
    3a46:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3a48:	80 e0       	ldi	r24, 0x00	; 0
    3a4a:	60 e0       	ldi	r22, 0x00	; 0
    3a4c:	42 e0       	ldi	r20, 0x02	; 2
    3a4e:	08 df       	rcall	.-496    	; 0x3860 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3a50:	e1 ee       	ldi	r30, 0xE1	; 225
    3a52:	f0 e0       	ldi	r31, 0x00	; 0
    3a54:	80 81       	ld	r24, Z
    3a56:	8e 7f       	andi	r24, 0xFE	; 254
    3a58:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3a5a:	e2 ee       	ldi	r30, 0xE2	; 226
    3a5c:	f0 e0       	ldi	r31, 0x00	; 0
    3a5e:	80 81       	ld	r24, Z
    3a60:	81 60       	ori	r24, 0x01	; 1
    3a62:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    3a64:	80 81       	ld	r24, Z
    3a66:	88 60       	ori	r24, 0x08	; 8
    3a68:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    3a6a:	f8 01       	movw	r30, r16
    3a6c:	80 81       	ld	r24, Z
    3a6e:	8e 7f       	andi	r24, 0xFE	; 254
    3a70:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    3a72:	88 81       	ld	r24, Y
    3a74:	80 61       	ori	r24, 0x10	; 16
    3a76:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    3a78:	df 91       	pop	r29
    3a7a:	cf 91       	pop	r28
    3a7c:	1f 91       	pop	r17
    3a7e:	0f 91       	pop	r16
    3a80:	08 95       	ret

00003a82 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    3a82:	e8 ed       	ldi	r30, 0xD8	; 216
    3a84:	f0 e0       	ldi	r31, 0x00	; 0
    3a86:	80 81       	ld	r24, Z
    3a88:	8f 7e       	andi	r24, 0xEF	; 239
    3a8a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    3a8c:	e7 ed       	ldi	r30, 0xD7	; 215
    3a8e:	f0 e0       	ldi	r31, 0x00	; 0
    3a90:	80 81       	ld	r24, Z
    3a92:	81 60       	ori	r24, 0x01	; 1
    3a94:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    3a96:	81 e0       	ldi	r24, 0x01	; 1
    3a98:	80 93 2d 04 	sts	0x042D, r24

	USB_ResetInterface();
}
    3a9c:	ae cf       	rjmp	.-164    	; 0x39fa <USB_ResetInterface>

00003a9e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    3a9e:	e8 ed       	ldi	r30, 0xD8	; 216
    3aa0:	f0 e0       	ldi	r31, 0x00	; 0
    3aa2:	80 81       	ld	r24, Z
    3aa4:	8c 7f       	andi	r24, 0xFC	; 252
    3aa6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    3aa8:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    3aac:	08 95       	ret

00003aae <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    3aae:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    3ab2:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    3ab6:	08 95       	ret

00003ab8 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    3ab8:	1f 92       	push	r1
    3aba:	0f 92       	push	r0
    3abc:	0f b6       	in	r0, 0x3f	; 63
    3abe:	0f 92       	push	r0
    3ac0:	0b b6       	in	r0, 0x3b	; 59
    3ac2:	0f 92       	push	r0
    3ac4:	11 24       	eor	r1, r1
    3ac6:	2f 93       	push	r18
    3ac8:	3f 93       	push	r19
    3aca:	4f 93       	push	r20
    3acc:	5f 93       	push	r21
    3ace:	6f 93       	push	r22
    3ad0:	7f 93       	push	r23
    3ad2:	8f 93       	push	r24
    3ad4:	9f 93       	push	r25
    3ad6:	af 93       	push	r26
    3ad8:	bf 93       	push	r27
    3ada:	ef 93       	push	r30
    3adc:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    3ade:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    3ae2:	82 ff       	sbrs	r24, 2
    3ae4:	0a c0       	rjmp	.+20     	; 0x3afa <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    3ae6:	80 91 e2 00 	lds	r24, 0x00E2
    3aea:	82 ff       	sbrs	r24, 2
    3aec:	06 c0       	rjmp	.+12     	; 0x3afa <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    3aee:	80 91 e1 00 	lds	r24, 0x00E1
    3af2:	8b 7f       	andi	r24, 0xFB	; 251
    3af4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    3af8:	4c d2       	rcall	.+1176   	; 0x3f92 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    3afa:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    3afe:	80 ff       	sbrs	r24, 0
    3b00:	1d c0       	rjmp	.+58     	; 0x3b3c <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    3b02:	80 91 d8 00 	lds	r24, 0x00D8
    3b06:	80 ff       	sbrs	r24, 0
    3b08:	19 c0       	rjmp	.+50     	; 0x3b3c <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    3b0a:	80 91 da 00 	lds	r24, 0x00DA
    3b0e:	8e 7f       	andi	r24, 0xFE	; 254
    3b10:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    3b14:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    3b18:	80 ff       	sbrs	r24, 0
    3b1a:	0c c0       	rjmp	.+24     	; 0x3b34 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3b1c:	8c e0       	ldi	r24, 0x0C	; 12
    3b1e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3b20:	8e e0       	ldi	r24, 0x0E	; 14
    3b22:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    3b24:	09 b4       	in	r0, 0x29	; 41
    3b26:	00 fe       	sbrs	r0, 0
    3b28:	fd cf       	rjmp	.-6      	; 0x3b24 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    3b2a:	81 e0       	ldi	r24, 0x01	; 1
    3b2c:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    3b2e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <EVENT_USB_Device_Connect>
    3b32:	04 c0       	rjmp	.+8      	; 0x3b3c <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3b34:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    3b36:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    3b38:	0e 94 db 02 	call	0x5b6	; 0x5b6 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    3b3c:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    3b40:	80 ff       	sbrs	r24, 0
    3b42:	17 c0       	rjmp	.+46     	; 0x3b72 <__vector_10+0xba>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    3b44:	80 91 e2 00 	lds	r24, 0x00E2
    3b48:	80 ff       	sbrs	r24, 0
    3b4a:	13 c0       	rjmp	.+38     	; 0x3b72 <__vector_10+0xba>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3b4c:	80 91 e2 00 	lds	r24, 0x00E2
    3b50:	8e 7f       	andi	r24, 0xFE	; 254
    3b52:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3b56:	80 91 e2 00 	lds	r24, 0x00E2
    3b5a:	80 61       	ori	r24, 0x10	; 16
    3b5c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    3b60:	80 91 d8 00 	lds	r24, 0x00D8
    3b64:	80 62       	ori	r24, 0x20	; 32
    3b66:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3b6a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    3b6c:	85 e0       	ldi	r24, 0x05	; 5
    3b6e:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
    3b70:	10 d2       	rcall	.+1056   	; 0x3f92 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    3b72:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    3b76:	84 ff       	sbrs	r24, 4
    3b78:	2c c0       	rjmp	.+88     	; 0x3bd2 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    3b7a:	80 91 e2 00 	lds	r24, 0x00E2
    3b7e:	84 ff       	sbrs	r24, 4
    3b80:	28 c0       	rjmp	.+80     	; 0x3bd2 <__vector_10+0x11a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3b82:	8c e0       	ldi	r24, 0x0C	; 12
    3b84:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3b86:	8e e0       	ldi	r24, 0x0E	; 14
    3b88:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3b8a:	09 b4       	in	r0, 0x29	; 41
    3b8c:	00 fe       	sbrs	r0, 0
    3b8e:	fd cf       	rjmp	.-6      	; 0x3b8a <__vector_10+0xd2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3b90:	80 91 d8 00 	lds	r24, 0x00D8
    3b94:	8f 7d       	andi	r24, 0xDF	; 223
    3b96:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    3b9a:	80 91 e1 00 	lds	r24, 0x00E1
    3b9e:	8f 7e       	andi	r24, 0xEF	; 239
    3ba0:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    3ba4:	80 91 e2 00 	lds	r24, 0x00E2
    3ba8:	8f 7e       	andi	r24, 0xEF	; 239
    3baa:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3bae:	80 91 e2 00 	lds	r24, 0x00E2
    3bb2:	81 60       	ori	r24, 0x01	; 1
    3bb4:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    3bb8:	80 91 2a 04 	lds	r24, 0x042A
    3bbc:	88 23       	and	r24, r24
    3bbe:	21 f4       	brne	.+8      	; 0x3bc8 <__vector_10+0x110>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3bc0:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3bc4:	87 ff       	sbrs	r24, 7
    3bc6:	02 c0       	rjmp	.+4      	; 0x3bcc <__vector_10+0x114>
    3bc8:	84 e0       	ldi	r24, 0x04	; 4
    3bca:	01 c0       	rjmp	.+2      	; 0x3bce <__vector_10+0x116>
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
    3bce:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    3bd0:	e0 d1       	rcall	.+960    	; 0x3f92 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    3bd2:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    3bd6:	83 ff       	sbrs	r24, 3
    3bd8:	26 c0       	rjmp	.+76     	; 0x3c26 <__vector_10+0x16e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    3bda:	80 91 e2 00 	lds	r24, 0x00E2
    3bde:	83 ff       	sbrs	r24, 3
    3be0:	22 c0       	rjmp	.+68     	; 0x3c26 <__vector_10+0x16e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    3be2:	80 91 e1 00 	lds	r24, 0x00E1
    3be6:	87 7f       	andi	r24, 0xF7	; 247
    3be8:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    3bec:	82 e0       	ldi	r24, 0x02	; 2
    3bee:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    3bf0:	10 92 2a 04 	sts	0x042A, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3bf4:	80 91 e1 00 	lds	r24, 0x00E1
    3bf8:	8e 7f       	andi	r24, 0xFE	; 254
    3bfa:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3bfe:	80 91 e2 00 	lds	r24, 0x00E2
    3c02:	8e 7f       	andi	r24, 0xFE	; 254
    3c04:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3c08:	80 91 e2 00 	lds	r24, 0x00E2
    3c0c:	80 61       	ori	r24, 0x10	; 16
    3c0e:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3c12:	80 e0       	ldi	r24, 0x00	; 0
    3c14:	60 e0       	ldi	r22, 0x00	; 0
    3c16:	42 e0       	ldi	r20, 0x02	; 2
    3c18:	23 de       	rcall	.-954    	; 0x3860 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    3c1a:	80 91 f0 00 	lds	r24, 0x00F0
    3c1e:	88 60       	ori	r24, 0x08	; 8
    3c20:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    3c24:	b6 d1       	rcall	.+876    	; 0x3f92 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    3c26:	ff 91       	pop	r31
    3c28:	ef 91       	pop	r30
    3c2a:	bf 91       	pop	r27
    3c2c:	af 91       	pop	r26
    3c2e:	9f 91       	pop	r25
    3c30:	8f 91       	pop	r24
    3c32:	7f 91       	pop	r23
    3c34:	6f 91       	pop	r22
    3c36:	5f 91       	pop	r21
    3c38:	4f 91       	pop	r20
    3c3a:	3f 91       	pop	r19
    3c3c:	2f 91       	pop	r18
    3c3e:	0f 90       	pop	r0
    3c40:	0b be       	out	0x3b, r0	; 59
    3c42:	0f 90       	pop	r0
    3c44:	0f be       	out	0x3f, r0	; 63
    3c46:	0f 90       	pop	r0
    3c48:	1f 90       	pop	r1
    3c4a:	18 95       	reti

00003c4c <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    3c4c:	1f 92       	push	r1
    3c4e:	0f 92       	push	r0
    3c50:	0f b6       	in	r0, 0x3f	; 63
    3c52:	0f 92       	push	r0
    3c54:	0b b6       	in	r0, 0x3b	; 59
    3c56:	0f 92       	push	r0
    3c58:	11 24       	eor	r1, r1
    3c5a:	1f 93       	push	r17
    3c5c:	2f 93       	push	r18
    3c5e:	3f 93       	push	r19
    3c60:	4f 93       	push	r20
    3c62:	5f 93       	push	r21
    3c64:	6f 93       	push	r22
    3c66:	7f 93       	push	r23
    3c68:	8f 93       	push	r24
    3c6a:	9f 93       	push	r25
    3c6c:	af 93       	push	r26
    3c6e:	bf 93       	push	r27
    3c70:	ef 93       	push	r30
    3c72:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3c74:	10 91 e9 00 	lds	r17, 0x00E9
    3c78:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3c7a:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3c7e:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    3c82:	80 91 f0 00 	lds	r24, 0x00F0
    3c86:	87 7f       	andi	r24, 0xF7	; 247
    3c88:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    3c8c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    3c8e:	1d d0       	rcall	.+58     	; 0x3cca <USB_Device_ProcessControlRequest>
    3c90:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    3c94:	80 91 f0 00 	lds	r24, 0x00F0
    3c98:	88 60       	ori	r24, 0x08	; 8
    3c9a:	80 93 f0 00 	sts	0x00F0, r24
    3c9e:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    3ca2:	ff 91       	pop	r31
    3ca4:	ef 91       	pop	r30
    3ca6:	bf 91       	pop	r27
    3ca8:	af 91       	pop	r26
    3caa:	9f 91       	pop	r25
    3cac:	8f 91       	pop	r24
    3cae:	7f 91       	pop	r23
    3cb0:	6f 91       	pop	r22
    3cb2:	5f 91       	pop	r21
    3cb4:	4f 91       	pop	r20
    3cb6:	3f 91       	pop	r19
    3cb8:	2f 91       	pop	r18
    3cba:	1f 91       	pop	r17
    3cbc:	0f 90       	pop	r0
    3cbe:	0b be       	out	0x3b, r0	; 59
    3cc0:	0f 90       	pop	r0
    3cc2:	0f be       	out	0x3f, r0	; 63
    3cc4:	0f 90       	pop	r0
    3cc6:	1f 90       	pop	r1
    3cc8:	18 95       	reti

00003cca <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    3cca:	1f 93       	push	r17
    3ccc:	df 93       	push	r29
    3cce:	cf 93       	push	r28
    3cd0:	cd b7       	in	r28, 0x3d	; 61
    3cd2:	de b7       	in	r29, 0x3e	; 62
    3cd4:	ac 97       	sbiw	r28, 0x2c	; 44
    3cd6:	0f b6       	in	r0, 0x3f	; 63
    3cd8:	f8 94       	cli
    3cda:	de bf       	out	0x3e, r29	; 62
    3cdc:	0f be       	out	0x3f, r0	; 63
    3cde:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    3ce0:	ee e2       	ldi	r30, 0x2E	; 46
    3ce2:	f4 e0       	ldi	r31, 0x04	; 4
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3ce4:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    3ce8:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    3cea:	24 e0       	ldi	r18, 0x04	; 4
    3cec:	e6 33       	cpi	r30, 0x36	; 54
    3cee:	f2 07       	cpc	r31, r18
    3cf0:	c9 f7       	brne	.-14     	; 0x3ce4 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    3cf2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3cf6:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    3cfa:	83 ff       	sbrs	r24, 3
    3cfc:	32 c1       	rjmp	.+612    	; 0x3f62 <USB_Device_ProcessControlRequest+0x298>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3cfe:	80 91 2e 04 	lds	r24, 0x042E

		switch (USB_ControlRequest.bRequest)
    3d02:	20 91 2f 04 	lds	r18, 0x042F
    3d06:	25 30       	cpi	r18, 0x05	; 5
    3d08:	09 f4       	brne	.+2      	; 0x3d0c <USB_Device_ProcessControlRequest+0x42>
    3d0a:	84 c0       	rjmp	.+264    	; 0x3e14 <USB_Device_ProcessControlRequest+0x14a>
    3d0c:	26 30       	cpi	r18, 0x06	; 6
    3d0e:	40 f4       	brcc	.+16     	; 0x3d20 <USB_Device_ProcessControlRequest+0x56>
    3d10:	21 30       	cpi	r18, 0x01	; 1
    3d12:	a1 f1       	breq	.+104    	; 0x3d7c <USB_Device_ProcessControlRequest+0xb2>
    3d14:	21 30       	cpi	r18, 0x01	; 1
    3d16:	70 f0       	brcs	.+28     	; 0x3d34 <USB_Device_ProcessControlRequest+0x6a>
    3d18:	23 30       	cpi	r18, 0x03	; 3
    3d1a:	09 f0       	breq	.+2      	; 0x3d1e <USB_Device_ProcessControlRequest+0x54>
    3d1c:	22 c1       	rjmp	.+580    	; 0x3f62 <USB_Device_ProcessControlRequest+0x298>
    3d1e:	2e c0       	rjmp	.+92     	; 0x3d7c <USB_Device_ProcessControlRequest+0xb2>
    3d20:	28 30       	cpi	r18, 0x08	; 8
    3d22:	09 f4       	brne	.+2      	; 0x3d26 <USB_Device_ProcessControlRequest+0x5c>
    3d24:	f0 c0       	rjmp	.+480    	; 0x3f06 <USB_Device_ProcessControlRequest+0x23c>
    3d26:	29 30       	cpi	r18, 0x09	; 9
    3d28:	09 f4       	brne	.+2      	; 0x3d2c <USB_Device_ProcessControlRequest+0x62>
    3d2a:	ff c0       	rjmp	.+510    	; 0x3f2a <USB_Device_ProcessControlRequest+0x260>
    3d2c:	26 30       	cpi	r18, 0x06	; 6
    3d2e:	09 f0       	breq	.+2      	; 0x3d32 <USB_Device_ProcessControlRequest+0x68>
    3d30:	18 c1       	rjmp	.+560    	; 0x3f62 <USB_Device_ProcessControlRequest+0x298>
    3d32:	92 c0       	rjmp	.+292    	; 0x3e58 <USB_Device_ProcessControlRequest+0x18e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3d34:	80 38       	cpi	r24, 0x80	; 128
    3d36:	21 f0       	breq	.+8      	; 0x3d40 <USB_Device_ProcessControlRequest+0x76>
    3d38:	82 38       	cpi	r24, 0x82	; 130
    3d3a:	09 f0       	breq	.+2      	; 0x3d3e <USB_Device_ProcessControlRequest+0x74>
    3d3c:	12 c1       	rjmp	.+548    	; 0x3f62 <USB_Device_ProcessControlRequest+0x298>
    3d3e:	08 c0       	rjmp	.+16     	; 0x3d50 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    3d40:	80 91 2b 04 	lds	r24, 0x042B
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    3d44:	90 91 2c 04 	lds	r25, 0x042C
    3d48:	99 23       	and	r25, r25
    3d4a:	71 f0       	breq	.+28     	; 0x3d68 <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    3d4c:	82 60       	ori	r24, 0x02	; 2
    3d4e:	0c c0       	rjmp	.+24     	; 0x3d68 <USB_Device_ProcessControlRequest+0x9e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3d50:	80 91 32 04 	lds	r24, 0x0432
    3d54:	8f 70       	andi	r24, 0x0F	; 15
    3d56:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3d5a:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    3d5e:	81 e0       	ldi	r24, 0x01	; 1
    3d60:	95 ff       	sbrs	r25, 5
    3d62:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3d64:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3d68:	90 91 e8 00 	lds	r25, 0x00E8
    3d6c:	97 7f       	andi	r25, 0xF7	; 247
    3d6e:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    3d72:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    3d76:	10 92 f1 00 	sts	0x00F1, r1
    3d7a:	d0 c0       	rjmp	.+416    	; 0x3f1c <USB_Device_ProcessControlRequest+0x252>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3d7c:	88 23       	and	r24, r24
    3d7e:	19 f0       	breq	.+6      	; 0x3d86 <USB_Device_ProcessControlRequest+0xbc>
    3d80:	82 30       	cpi	r24, 0x02	; 2
    3d82:	09 f0       	breq	.+2      	; 0x3d86 <USB_Device_ProcessControlRequest+0xbc>
    3d84:	ee c0       	rjmp	.+476    	; 0x3f62 <USB_Device_ProcessControlRequest+0x298>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	8f 71       	andi	r24, 0x1F	; 31
    3d8a:	90 70       	andi	r25, 0x00	; 0
    3d8c:	00 97       	sbiw	r24, 0x00	; 0
    3d8e:	29 f0       	breq	.+10     	; 0x3d9a <USB_Device_ProcessControlRequest+0xd0>
    3d90:	82 30       	cpi	r24, 0x02	; 2
    3d92:	91 05       	cpc	r25, r1
    3d94:	09 f0       	breq	.+2      	; 0x3d98 <USB_Device_ProcessControlRequest+0xce>
    3d96:	e5 c0       	rjmp	.+458    	; 0x3f62 <USB_Device_ProcessControlRequest+0x298>
    3d98:	0b c0       	rjmp	.+22     	; 0x3db0 <USB_Device_ProcessControlRequest+0xe6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    3d9a:	80 91 30 04 	lds	r24, 0x0430
    3d9e:	81 30       	cpi	r24, 0x01	; 1
    3da0:	09 f0       	breq	.+2      	; 0x3da4 <USB_Device_ProcessControlRequest+0xda>
    3da2:	df c0       	rjmp	.+446    	; 0x3f62 <USB_Device_ProcessControlRequest+0x298>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    3da4:	23 30       	cpi	r18, 0x03	; 3
    3da6:	09 f0       	breq	.+2      	; 0x3daa <USB_Device_ProcessControlRequest+0xe0>
    3da8:	80 e0       	ldi	r24, 0x00	; 0
    3daa:	80 93 2c 04 	sts	0x042C, r24
    3dae:	2c c0       	rjmp	.+88     	; 0x3e08 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    3db0:	80 91 30 04 	lds	r24, 0x0430
    3db4:	88 23       	and	r24, r24
    3db6:	41 f5       	brne	.+80     	; 0x3e08 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3db8:	20 91 32 04 	lds	r18, 0x0432
    3dbc:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    3dbe:	09 f4       	brne	.+2      	; 0x3dc2 <USB_Device_ProcessControlRequest+0xf8>
    3dc0:	d0 c0       	rjmp	.+416    	; 0x3f62 <USB_Device_ProcessControlRequest+0x298>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3dc2:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    3dc6:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    3dca:	80 ff       	sbrs	r24, 0
    3dcc:	1d c0       	rjmp	.+58     	; 0x3e08 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    3dce:	80 91 2f 04 	lds	r24, 0x042F
    3dd2:	83 30       	cpi	r24, 0x03	; 3
    3dd4:	21 f4       	brne	.+8      	; 0x3dde <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3dd6:	80 91 eb 00 	lds	r24, 0x00EB
    3dda:	80 62       	ori	r24, 0x20	; 32
    3ddc:	13 c0       	rjmp	.+38     	; 0x3e04 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    3dde:	80 91 eb 00 	lds	r24, 0x00EB
    3de2:	80 61       	ori	r24, 0x10	; 16
    3de4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	02 c0       	rjmp	.+4      	; 0x3df2 <USB_Device_ProcessControlRequest+0x128>
    3dee:	88 0f       	add	r24, r24
    3df0:	99 1f       	adc	r25, r25
    3df2:	2a 95       	dec	r18
    3df4:	e2 f7       	brpl	.-8      	; 0x3dee <USB_Device_ProcessControlRequest+0x124>
    3df6:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    3dfa:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    3dfe:	80 91 eb 00 	lds	r24, 0x00EB
    3e02:	88 60       	ori	r24, 0x08	; 8
    3e04:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3e08:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3e0c:	80 91 e8 00 	lds	r24, 0x00E8
    3e10:	87 7f       	andi	r24, 0xF7	; 247
    3e12:	87 c0       	rjmp	.+270    	; 0x3f22 <USB_Device_ProcessControlRequest+0x258>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3e14:	88 23       	and	r24, r24
    3e16:	09 f0       	breq	.+2      	; 0x3e1a <USB_Device_ProcessControlRequest+0x150>
    3e18:	a4 c0       	rjmp	.+328    	; 0x3f62 <USB_Device_ProcessControlRequest+0x298>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3e1a:	10 91 30 04 	lds	r17, 0x0430
    3e1e:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    3e20:	80 91 e3 00 	lds	r24, 0x00E3
    3e24:	80 78       	andi	r24, 0x80	; 128
    3e26:	81 2b       	or	r24, r17
    3e28:	80 93 e3 00 	sts	0x00E3, r24
    3e2c:	80 91 e8 00 	lds	r24, 0x00E8
    3e30:	87 7f       	andi	r24, 0xF7	; 247
    3e32:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    3e36:	8f dd       	rcall	.-1250   	; 0x3956 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3e38:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    3e3c:	80 ff       	sbrs	r24, 0
    3e3e:	fc cf       	rjmp	.-8      	; 0x3e38 <USB_Device_ProcessControlRequest+0x16e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    3e40:	80 91 e3 00 	lds	r24, 0x00E3
    3e44:	80 68       	ori	r24, 0x80	; 128
    3e46:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3e4a:	11 23       	and	r17, r17
    3e4c:	11 f0       	breq	.+4      	; 0x3e52 <USB_Device_ProcessControlRequest+0x188>
    3e4e:	83 e0       	ldi	r24, 0x03	; 3
    3e50:	01 c0       	rjmp	.+2      	; 0x3e54 <USB_Device_ProcessControlRequest+0x18a>
    3e52:	82 e0       	ldi	r24, 0x02	; 2
    3e54:	8e bb       	out	0x1e, r24	; 30
    3e56:	85 c0       	rjmp	.+266    	; 0x3f62 <USB_Device_ProcessControlRequest+0x298>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3e58:	80 58       	subi	r24, 0x80	; 128
    3e5a:	82 30       	cpi	r24, 0x02	; 2
    3e5c:	08 f0       	brcs	.+2      	; 0x3e60 <USB_Device_ProcessControlRequest+0x196>
    3e5e:	81 c0       	rjmp	.+258    	; 0x3f62 <USB_Device_ProcessControlRequest+0x298>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    3e60:	80 91 30 04 	lds	r24, 0x0430
    3e64:	90 91 31 04 	lds	r25, 0x0431
    3e68:	23 e0       	ldi	r18, 0x03	; 3
    3e6a:	8c 3d       	cpi	r24, 0xDC	; 220
    3e6c:	92 07       	cpc	r25, r18
    3e6e:	91 f5       	brne	.+100    	; 0x3ed4 <USB_Device_ProcessControlRequest+0x20a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    3e70:	83 e0       	ldi	r24, 0x03	; 3
    3e72:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    3e74:	8a e2       	ldi	r24, 0x2A	; 42
    3e76:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    3e78:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    3e7a:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    3e7c:	de 01       	movw	r26, r28
    3e7e:	15 96       	adiw	r26, 0x05	; 5
    3e80:	80 e0       	ldi	r24, 0x00	; 0
    3e82:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    3e84:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    3e86:	61 e2       	ldi	r22, 0x21	; 33
    3e88:	e4 2f       	mov	r30, r20
    3e8a:	f0 e0       	ldi	r31, 0x00	; 0
    3e8c:	60 93 57 00 	sts	0x0057, r22
    3e90:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
    3e92:	80 ff       	sbrs	r24, 0
    3e94:	03 c0       	rjmp	.+6      	; 0x3e9c <USB_Device_ProcessControlRequest+0x1d2>
					{
						SerialByte >>= 4;
    3e96:	e2 95       	swap	r30
    3e98:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    3e9a:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    3e9c:	ef 70       	andi	r30, 0x0F	; 15
    3e9e:	2e 2f       	mov	r18, r30
    3ea0:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3ea2:	ea 30       	cpi	r30, 0x0A	; 10
    3ea4:	18 f0       	brcs	.+6      	; 0x3eac <USB_Device_ProcessControlRequest+0x1e2>
    3ea6:	29 5c       	subi	r18, 0xC9	; 201
    3ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    3eaa:	02 c0       	rjmp	.+4      	; 0x3eb0 <USB_Device_ProcessControlRequest+0x1e6>
    3eac:	20 5d       	subi	r18, 0xD0	; 208
    3eae:	3f 4f       	sbci	r19, 0xFF	; 255
    3eb0:	2d 93       	st	X+, r18
    3eb2:	3d 93       	st	X+, r19
    3eb4:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3eb6:	84 31       	cpi	r24, 0x14	; 20
    3eb8:	91 05       	cpc	r25, r1
    3eba:	31 f7       	brne	.-52     	; 0x3e88 <USB_Device_ProcessControlRequest+0x1be>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    3ebc:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3ebe:	80 91 e8 00 	lds	r24, 0x00E8
    3ec2:	87 7f       	andi	r24, 0xF7	; 247
    3ec4:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    3ec8:	ce 01       	movw	r24, r28
    3eca:	03 96       	adiw	r24, 0x03	; 3
    3ecc:	6a e2       	ldi	r22, 0x2A	; 42
    3ece:	70 e0       	ldi	r23, 0x00	; 0
    3ed0:	d1 db       	rcall	.-2142   	; 0x3674 <Endpoint_Write_Control_Stream_LE>
    3ed2:	13 c0       	rjmp	.+38     	; 0x3efa <USB_Device_ProcessControlRequest+0x230>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    3ed4:	60 91 32 04 	lds	r22, 0x0432
    3ed8:	ae 01       	movw	r20, r28
    3eda:	4f 5f       	subi	r20, 0xFF	; 255
    3edc:	5f 4f       	sbci	r21, 0xFF	; 255
    3ede:	0e 94 45 03 	call	0x68a	; 0x68a <CALLBACK_USB_GetDescriptor>
    3ee2:	bc 01       	movw	r22, r24
    3ee4:	00 97       	sbiw	r24, 0x00	; 0
    3ee6:	09 f4       	brne	.+2      	; 0x3eea <USB_Device_ProcessControlRequest+0x220>
    3ee8:	3c c0       	rjmp	.+120    	; 0x3f62 <USB_Device_ProcessControlRequest+0x298>
    3eea:	80 91 e8 00 	lds	r24, 0x00E8
    3eee:	87 7f       	andi	r24, 0xF7	; 247
    3ef0:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    3ef4:	89 81       	ldd	r24, Y+1	; 0x01
    3ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef8:	57 dc       	rcall	.-1874   	; 0x37a8 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3efa:	80 91 e8 00 	lds	r24, 0x00E8
    3efe:	8b 77       	andi	r24, 0x7B	; 123
    3f00:	80 93 e8 00 	sts	0x00E8, r24
    3f04:	2e c0       	rjmp	.+92     	; 0x3f62 <USB_Device_ProcessControlRequest+0x298>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3f06:	80 38       	cpi	r24, 0x80	; 128
    3f08:	61 f5       	brne	.+88     	; 0x3f62 <USB_Device_ProcessControlRequest+0x298>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3f0a:	80 91 e8 00 	lds	r24, 0x00E8
    3f0e:	87 7f       	andi	r24, 0xF7	; 247
    3f10:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    3f14:	80 91 2a 04 	lds	r24, 0x042A
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3f18:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3f1c:	80 91 e8 00 	lds	r24, 0x00E8
    3f20:	8e 77       	andi	r24, 0x7E	; 126
    3f22:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    3f26:	17 dd       	rcall	.-1490   	; 0x3956 <Endpoint_ClearStatusStage>
    3f28:	1c c0       	rjmp	.+56     	; 0x3f62 <USB_Device_ProcessControlRequest+0x298>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3f2a:	88 23       	and	r24, r24
    3f2c:	d1 f4       	brne	.+52     	; 0x3f62 <USB_Device_ProcessControlRequest+0x298>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    3f2e:	90 91 30 04 	lds	r25, 0x0430
    3f32:	92 30       	cpi	r25, 0x02	; 2
    3f34:	b0 f4       	brcc	.+44     	; 0x3f62 <USB_Device_ProcessControlRequest+0x298>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3f36:	80 91 e8 00 	lds	r24, 0x00E8
    3f3a:	87 7f       	andi	r24, 0xF7	; 247
    3f3c:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3f40:	90 93 2a 04 	sts	0x042A, r25

	Endpoint_ClearStatusStage();
    3f44:	08 dd       	rcall	.-1520   	; 0x3956 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    3f46:	80 91 2a 04 	lds	r24, 0x042A
    3f4a:	88 23       	and	r24, r24
    3f4c:	21 f4       	brne	.+8      	; 0x3f56 <USB_Device_ProcessControlRequest+0x28c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3f4e:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3f52:	87 ff       	sbrs	r24, 7
    3f54:	02 c0       	rjmp	.+4      	; 0x3f5a <USB_Device_ProcessControlRequest+0x290>
    3f56:	84 e0       	ldi	r24, 0x04	; 4
    3f58:	01 c0       	rjmp	.+2      	; 0x3f5c <USB_Device_ProcessControlRequest+0x292>
    3f5a:	81 e0       	ldi	r24, 0x01	; 1
    3f5c:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    3f5e:	0e 94 de 02 	call	0x5bc	; 0x5bc <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3f62:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    3f66:	83 ff       	sbrs	r24, 3
    3f68:	0a c0       	rjmp	.+20     	; 0x3f7e <USB_Device_ProcessControlRequest+0x2b4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3f6a:	80 91 e8 00 	lds	r24, 0x00E8
    3f6e:	87 7f       	andi	r24, 0xF7	; 247
    3f70:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3f74:	80 91 eb 00 	lds	r24, 0x00EB
    3f78:	80 62       	ori	r24, 0x20	; 32
    3f7a:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    3f7e:	ac 96       	adiw	r28, 0x2c	; 44
    3f80:	0f b6       	in	r0, 0x3f	; 63
    3f82:	f8 94       	cli
    3f84:	de bf       	out	0x3e, r29	; 62
    3f86:	0f be       	out	0x3f, r0	; 63
    3f88:	cd bf       	out	0x3d, r28	; 61
    3f8a:	cf 91       	pop	r28
    3f8c:	df 91       	pop	r29
    3f8e:	1f 91       	pop	r17
    3f90:	08 95       	ret

00003f92 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    3f92:	08 95       	ret

00003f94 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    3f94:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    3f96:	8e b3       	in	r24, 0x1e	; 30
    3f98:	88 23       	and	r24, r24
    3f9a:	a9 f0       	breq	.+42     	; 0x3fc6 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3f9c:	80 91 e9 00 	lds	r24, 0x00E9
    3fa0:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3fa2:	90 91 ec 00 	lds	r25, 0x00EC
    3fa6:	90 ff       	sbrs	r25, 0
    3fa8:	02 c0       	rjmp	.+4      	; 0x3fae <USB_USBTask+0x1a>
    3faa:	10 e8       	ldi	r17, 0x80	; 128
    3fac:	01 c0       	rjmp	.+2      	; 0x3fb0 <USB_USBTask+0x1c>
    3fae:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3fb0:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3fb2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3fb6:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    3fba:	83 ff       	sbrs	r24, 3
    3fbc:	01 c0       	rjmp	.+2      	; 0x3fc0 <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
    3fbe:	85 de       	rcall	.-758    	; 0x3cca <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3fc0:	1f 70       	andi	r17, 0x0F	; 15
    3fc2:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    3fc6:	1f 91       	pop	r17
    3fc8:	08 95       	ret

00003fca <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    3fca:	6f 92       	push	r6
    3fcc:	7f 92       	push	r7
    3fce:	8f 92       	push	r8
    3fd0:	9f 92       	push	r9
    3fd2:	af 92       	push	r10
    3fd4:	bf 92       	push	r11
    3fd6:	cf 92       	push	r12
    3fd8:	df 92       	push	r13
    3fda:	ef 92       	push	r14
    3fdc:	ff 92       	push	r15
    3fde:	0f 93       	push	r16
    3fe0:	1f 93       	push	r17
    3fe2:	df 93       	push	r29
    3fe4:	cf 93       	push	r28
    3fe6:	00 d0       	rcall	.+0      	; 0x3fe8 <HID_Device_ProcessControlRequest+0x1e>
    3fe8:	0f 92       	push	r0
    3fea:	cd b7       	in	r28, 0x3d	; 61
    3fec:	de b7       	in	r29, 0x3e	; 62
    3fee:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    3ff0:	6d b6       	in	r6, 0x3d	; 61
    3ff2:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3ff4:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    3ff8:	83 ff       	sbrs	r24, 3
    3ffa:	0f c1       	rjmp	.+542    	; 0x421a <HID_Device_ProcessControlRequest+0x250>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    3ffc:	f7 01       	movw	r30, r14
    3ffe:	80 81       	ld	r24, Z
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	20 91 32 04 	lds	r18, 0x0432
    4006:	30 91 33 04 	lds	r19, 0x0433
    400a:	28 17       	cp	r18, r24
    400c:	39 07       	cpc	r19, r25
    400e:	09 f0       	breq	.+2      	; 0x4012 <HID_Device_ProcessControlRequest+0x48>
    4010:	04 c1       	rjmp	.+520    	; 0x421a <HID_Device_ProcessControlRequest+0x250>
	  return;

	switch (USB_ControlRequest.bRequest)
    4012:	80 91 2f 04 	lds	r24, 0x042F
    4016:	83 30       	cpi	r24, 0x03	; 3
    4018:	09 f4       	brne	.+2      	; 0x401c <HID_Device_ProcessControlRequest+0x52>
    401a:	a6 c0       	rjmp	.+332    	; 0x4168 <HID_Device_ProcessControlRequest+0x19e>
    401c:	84 30       	cpi	r24, 0x04	; 4
    401e:	30 f4       	brcc	.+12     	; 0x402c <HID_Device_ProcessControlRequest+0x62>
    4020:	81 30       	cpi	r24, 0x01	; 1
    4022:	71 f0       	breq	.+28     	; 0x4040 <HID_Device_ProcessControlRequest+0x76>
    4024:	82 30       	cpi	r24, 0x02	; 2
    4026:	09 f0       	breq	.+2      	; 0x402a <HID_Device_ProcessControlRequest+0x60>
    4028:	f8 c0       	rjmp	.+496    	; 0x421a <HID_Device_ProcessControlRequest+0x250>
    402a:	db c0       	rjmp	.+438    	; 0x41e2 <HID_Device_ProcessControlRequest+0x218>
    402c:	8a 30       	cpi	r24, 0x0A	; 10
    402e:	09 f4       	brne	.+2      	; 0x4032 <HID_Device_ProcessControlRequest+0x68>
    4030:	c0 c0       	rjmp	.+384    	; 0x41b2 <HID_Device_ProcessControlRequest+0x1e8>
    4032:	8b 30       	cpi	r24, 0x0B	; 11
    4034:	09 f4       	brne	.+2      	; 0x4038 <HID_Device_ProcessControlRequest+0x6e>
    4036:	a9 c0       	rjmp	.+338    	; 0x418a <HID_Device_ProcessControlRequest+0x1c0>
    4038:	89 30       	cpi	r24, 0x09	; 9
    403a:	09 f0       	breq	.+2      	; 0x403e <HID_Device_ProcessControlRequest+0x74>
    403c:	ee c0       	rjmp	.+476    	; 0x421a <HID_Device_ProcessControlRequest+0x250>
    403e:	4d c0       	rjmp	.+154    	; 0x40da <HID_Device_ProcessControlRequest+0x110>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    4040:	80 91 2e 04 	lds	r24, 0x042E
    4044:	81 3a       	cpi	r24, 0xA1	; 161
    4046:	09 f0       	breq	.+2      	; 0x404a <HID_Device_ProcessControlRequest+0x80>
    4048:	e8 c0       	rjmp	.+464    	; 0x421a <HID_Device_ProcessControlRequest+0x250>
    404a:	cd b6       	in	r12, 0x3d	; 61
    404c:	de b6       	in	r13, 0x3e	; 62
    404e:	9d b6       	in	r9, 0x3d	; 61
    4050:	8d 2c       	mov	r8, r13
			{
				uint16_t ReportSize = 0;
    4052:	1b 82       	std	Y+3, r1	; 0x03
    4054:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    4056:	80 91 30 04 	lds	r24, 0x0430
    405a:	00 91 31 04 	lds	r16, 0x0431
    405e:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    4060:	f7 01       	movw	r30, r14
    4062:	40 85       	ldd	r20, Z+8	; 0x08
    4064:	c4 1a       	sub	r12, r20
    4066:	d1 08       	sbc	r13, r1
    4068:	0f b6       	in	r0, 0x3f	; 63
    406a:	f8 94       	cli
    406c:	de be       	out	0x3e, r13	; 62
    406e:	0f be       	out	0x3f, r0	; 63
    4070:	cd be       	out	0x3d, r12	; 61
    4072:	08 94       	sec
    4074:	c1 1c       	adc	r12, r1
    4076:	d1 1c       	adc	r13, r1
    4078:	bc 2c       	mov	r11, r12
    407a:	ad 2c       	mov	r10, r13

				memset(ReportData, 0, sizeof(ReportData));
    407c:	c6 01       	movw	r24, r12
    407e:	60 e0       	ldi	r22, 0x00	; 0
    4080:	70 e0       	ldi	r23, 0x00	; 0
    4082:	50 e0       	ldi	r21, 0x00	; 0
    4084:	03 d5       	rcall	.+2566   	; 0x4a8c <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    4086:	40 2f       	mov	r20, r16
    4088:	41 50       	subi	r20, 0x01	; 1
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    408a:	c7 01       	movw	r24, r14
    408c:	be 01       	movw	r22, r28
    408e:	6f 5f       	subi	r22, 0xFF	; 255
    4090:	7f 4f       	sbci	r23, 0xFF	; 255
    4092:	96 01       	movw	r18, r12
    4094:	8e 01       	movw	r16, r28
    4096:	0e 5f       	subi	r16, 0xFE	; 254
    4098:	1f 4f       	sbci	r17, 0xFF	; 255
    409a:	0e 94 0d 03 	call	0x61a	; 0x61a <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    409e:	f7 01       	movw	r30, r14
    40a0:	26 81       	ldd	r18, Z+6	; 0x06
    40a2:	37 81       	ldd	r19, Z+7	; 0x07
    40a4:	21 15       	cp	r18, r1
    40a6:	31 05       	cpc	r19, r1
    40a8:	29 f0       	breq	.+10     	; 0x40b4 <HID_Device_ProcessControlRequest+0xea>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    40aa:	40 85       	ldd	r20, Z+8	; 0x08
    40ac:	c9 01       	movw	r24, r18
    40ae:	b6 01       	movw	r22, r12
    40b0:	50 e0       	ldi	r21, 0x00	; 0
    40b2:	e3 d4       	rcall	.+2502   	; 0x4a7a <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    40b4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    40b8:	80 91 e8 00 	lds	r24, 0x00E8
    40bc:	87 7f       	andi	r24, 0xF7	; 247
    40be:	80 93 e8 00 	sts	0x00E8, r24
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    40c2:	6a 81       	ldd	r22, Y+2	; 0x02
    40c4:	7b 81       	ldd	r23, Y+3	; 0x03
    40c6:	8b 2d       	mov	r24, r11
    40c8:	9a 2d       	mov	r25, r10
    40ca:	d4 da       	rcall	.-2648   	; 0x3674 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    40cc:	80 91 e8 00 	lds	r24, 0x00E8
    40d0:	8b 77       	andi	r24, 0x7B	; 123
    40d2:	80 93 e8 00 	sts	0x00E8, r24
    40d6:	94 01       	movw	r18, r8
    40d8:	3f c0       	rjmp	.+126    	; 0x4158 <HID_Device_ProcessControlRequest+0x18e>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    40da:	80 91 2e 04 	lds	r24, 0x042E
    40de:	81 32       	cpi	r24, 0x21	; 33
    40e0:	09 f0       	breq	.+2      	; 0x40e4 <HID_Device_ProcessControlRequest+0x11a>
    40e2:	9b c0       	rjmp	.+310    	; 0x421a <HID_Device_ProcessControlRequest+0x250>
    40e4:	cd b6       	in	r12, 0x3d	; 61
    40e6:	de b6       	in	r13, 0x3e	; 62
    40e8:	bd b6       	in	r11, 0x3d	; 61
    40ea:	9d 2c       	mov	r9, r13
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    40ec:	00 91 34 04 	lds	r16, 0x0434
    40f0:	10 91 35 04 	lds	r17, 0x0435
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    40f4:	a0 90 30 04 	lds	r10, 0x0430
    40f8:	80 90 31 04 	lds	r8, 0x0431
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    40fc:	8d b7       	in	r24, 0x3d	; 61
    40fe:	9e b7       	in	r25, 0x3e	; 62
    4100:	80 1b       	sub	r24, r16
    4102:	91 0b       	sbc	r25, r17
    4104:	0f b6       	in	r0, 0x3f	; 63
    4106:	f8 94       	cli
    4108:	9e bf       	out	0x3e, r25	; 62
    410a:	0f be       	out	0x3f, r0	; 63
    410c:	8d bf       	out	0x3d, r24	; 61
    410e:	cd b6       	in	r12, 0x3d	; 61
    4110:	de b6       	in	r13, 0x3e	; 62
    4112:	08 94       	sec
    4114:	c1 1c       	adc	r12, r1
    4116:	d1 1c       	adc	r13, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4118:	80 91 e8 00 	lds	r24, 0x00E8
    411c:	87 7f       	andi	r24, 0xF7	; 247
    411e:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    4122:	c6 01       	movw	r24, r12
    4124:	b8 01       	movw	r22, r16
    4126:	01 db       	rcall	.-2558   	; 0x372a <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4128:	80 91 e8 00 	lds	r24, 0x00E8
    412c:	8e 77       	andi	r24, 0x7E	; 126
    412e:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    4132:	81 e0       	ldi	r24, 0x01	; 1
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	aa 20       	and	r10, r10
    4138:	11 f4       	brne	.+4      	; 0x413e <HID_Device_ProcessControlRequest+0x174>
    413a:	80 e0       	ldi	r24, 0x00	; 0
    413c:	90 e0       	ldi	r25, 0x00	; 0
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    413e:	48 2d       	mov	r20, r8
    4140:	41 50       	subi	r20, 0x01	; 1

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    4142:	96 01       	movw	r18, r12
    4144:	28 0f       	add	r18, r24
    4146:	39 1f       	adc	r19, r25
    4148:	08 1b       	sub	r16, r24
    414a:	19 0b       	sbc	r17, r25
    414c:	c7 01       	movw	r24, r14
    414e:	6a 2d       	mov	r22, r10
    4150:	0e 94 2a 03 	call	0x654	; 0x654 <CALLBACK_HID_Device_ProcessHIDReport>
    4154:	3b 2d       	mov	r19, r11
    4156:	29 2d       	mov	r18, r9
    4158:	83 2f       	mov	r24, r19
    415a:	92 2f       	mov	r25, r18
    415c:	0f b6       	in	r0, 0x3f	; 63
    415e:	f8 94       	cli
    4160:	9e bf       	out	0x3e, r25	; 62
    4162:	0f be       	out	0x3f, r0	; 63
    4164:	8d bf       	out	0x3d, r24	; 61
    4166:	59 c0       	rjmp	.+178    	; 0x421a <HID_Device_ProcessControlRequest+0x250>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    4168:	80 91 2e 04 	lds	r24, 0x042E
    416c:	81 3a       	cpi	r24, 0xA1	; 161
    416e:	09 f0       	breq	.+2      	; 0x4172 <HID_Device_ProcessControlRequest+0x1a8>
    4170:	54 c0       	rjmp	.+168    	; 0x421a <HID_Device_ProcessControlRequest+0x250>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4172:	80 91 e8 00 	lds	r24, 0x00E8
    4176:	87 7f       	andi	r24, 0xF7	; 247
    4178:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    417c:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    4180:	80 ff       	sbrs	r24, 0
    4182:	fc cf       	rjmp	.-8      	; 0x417c <HID_Device_ProcessControlRequest+0x1b2>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    4184:	f7 01       	movw	r30, r14
    4186:	81 85       	ldd	r24, Z+9	; 0x09
    4188:	40 c0       	rjmp	.+128    	; 0x420a <HID_Device_ProcessControlRequest+0x240>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    418a:	80 91 2e 04 	lds	r24, 0x042E
    418e:	81 32       	cpi	r24, 0x21	; 33
    4190:	09 f0       	breq	.+2      	; 0x4194 <HID_Device_ProcessControlRequest+0x1ca>
    4192:	43 c0       	rjmp	.+134    	; 0x421a <HID_Device_ProcessControlRequest+0x250>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4194:	80 91 e8 00 	lds	r24, 0x00E8
    4198:	87 7f       	andi	r24, 0xF7	; 247
    419a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    419e:	db db       	rcall	.-2122   	; 0x3956 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    41a0:	90 91 30 04 	lds	r25, 0x0430
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	99 23       	and	r25, r25
    41a8:	09 f4       	brne	.+2      	; 0x41ac <HID_Device_ProcessControlRequest+0x1e2>
    41aa:	80 e0       	ldi	r24, 0x00	; 0
    41ac:	f7 01       	movw	r30, r14
    41ae:	81 87       	std	Z+9, r24	; 0x09
    41b0:	34 c0       	rjmp	.+104    	; 0x421a <HID_Device_ProcessControlRequest+0x250>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    41b2:	80 91 2e 04 	lds	r24, 0x042E
    41b6:	81 32       	cpi	r24, 0x21	; 33
    41b8:	81 f5       	brne	.+96     	; 0x421a <HID_Device_ProcessControlRequest+0x250>
    41ba:	80 91 e8 00 	lds	r24, 0x00E8
    41be:	87 7f       	andi	r24, 0xF7	; 247
    41c0:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    41c4:	c8 db       	rcall	.-2160   	; 0x3956 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    41c6:	80 91 30 04 	lds	r24, 0x0430
    41ca:	90 91 31 04 	lds	r25, 0x0431
    41ce:	80 70       	andi	r24, 0x00	; 0
    41d0:	36 e0       	ldi	r19, 0x06	; 6
    41d2:	96 95       	lsr	r25
    41d4:	87 95       	ror	r24
    41d6:	3a 95       	dec	r19
    41d8:	e1 f7       	brne	.-8      	; 0x41d2 <HID_Device_ProcessControlRequest+0x208>
    41da:	f7 01       	movw	r30, r14
    41dc:	95 87       	std	Z+13, r25	; 0x0d
    41de:	84 87       	std	Z+12, r24	; 0x0c
    41e0:	1c c0       	rjmp	.+56     	; 0x421a <HID_Device_ProcessControlRequest+0x250>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    41e2:	80 91 2e 04 	lds	r24, 0x042E
    41e6:	81 3a       	cpi	r24, 0xA1	; 161
    41e8:	c1 f4       	brne	.+48     	; 0x421a <HID_Device_ProcessControlRequest+0x250>
    41ea:	80 91 e8 00 	lds	r24, 0x00E8
    41ee:	87 7f       	andi	r24, 0xF7	; 247
    41f0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    41f4:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    41f8:	80 ff       	sbrs	r24, 0
    41fa:	fc cf       	rjmp	.-8      	; 0x41f4 <HID_Device_ProcessControlRequest+0x22a>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    41fc:	f7 01       	movw	r30, r14
    41fe:	84 85       	ldd	r24, Z+12	; 0x0c
    4200:	95 85       	ldd	r25, Z+13	; 0x0d
    4202:	96 95       	lsr	r25
    4204:	87 95       	ror	r24
    4206:	96 95       	lsr	r25
    4208:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    420a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    420e:	80 91 e8 00 	lds	r24, 0x00E8
    4212:	8e 77       	andi	r24, 0x7E	; 126
    4214:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    4218:	9e db       	rcall	.-2244   	; 0x3956 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    421a:	0f b6       	in	r0, 0x3f	; 63
    421c:	f8 94       	cli
    421e:	7e be       	out	0x3e, r7	; 62
    4220:	0f be       	out	0x3f, r0	; 63
    4222:	6d be       	out	0x3d, r6	; 61
    4224:	0f 90       	pop	r0
    4226:	0f 90       	pop	r0
    4228:	0f 90       	pop	r0
    422a:	cf 91       	pop	r28
    422c:	df 91       	pop	r29
    422e:	1f 91       	pop	r17
    4230:	0f 91       	pop	r16
    4232:	ff 90       	pop	r15
    4234:	ef 90       	pop	r14
    4236:	df 90       	pop	r13
    4238:	cf 90       	pop	r12
    423a:	bf 90       	pop	r11
    423c:	af 90       	pop	r10
    423e:	9f 90       	pop	r9
    4240:	8f 90       	pop	r8
    4242:	7f 90       	pop	r7
    4244:	6f 90       	pop	r6
    4246:	08 95       	ret

00004248 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    4248:	cf 93       	push	r28
    424a:	df 93       	push	r29
    424c:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    424e:	09 96       	adiw	r24, 0x09	; 9
    4250:	dc 01       	movw	r26, r24
    4252:	87 e0       	ldi	r24, 0x07	; 7
    4254:	ed 01       	movw	r28, r26
    4256:	19 92       	st	Y+, r1
    4258:	8a 95       	dec	r24
    425a:	e9 f7       	brne	.-6      	; 0x4256 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    425c:	81 e0       	ldi	r24, 0x01	; 1
    425e:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    4260:	84 ef       	ldi	r24, 0xF4	; 244
    4262:	91 e0       	ldi	r25, 0x01	; 1
    4264:	95 87       	std	Z+13, r25	; 0x0d
    4266:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    4268:	83 e0       	ldi	r24, 0x03	; 3
    426a:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    426c:	cf 01       	movw	r24, r30
    426e:	01 96       	adiw	r24, 0x01	; 1
    4270:	61 e0       	ldi	r22, 0x01	; 1
    4272:	2d db       	rcall	.-2470   	; 0x38ce <Endpoint_ConfigureEndpointTable>
	  return false;	
	
	return true;
}
    4274:	df 91       	pop	r29
    4276:	cf 91       	pop	r28
    4278:	08 95       	ret

0000427a <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    427a:	5f 92       	push	r5
    427c:	6f 92       	push	r6
    427e:	7f 92       	push	r7
    4280:	8f 92       	push	r8
    4282:	9f 92       	push	r9
    4284:	af 92       	push	r10
    4286:	bf 92       	push	r11
    4288:	cf 92       	push	r12
    428a:	df 92       	push	r13
    428c:	ef 92       	push	r14
    428e:	ff 92       	push	r15
    4290:	0f 93       	push	r16
    4292:	1f 93       	push	r17
    4294:	df 93       	push	r29
    4296:	cf 93       	push	r28
    4298:	00 d0       	rcall	.+0      	; 0x429a <HID_Device_USBTask+0x20>
    429a:	00 d0       	rcall	.+0      	; 0x429c <HID_Device_USBTask+0x22>
    429c:	cd b7       	in	r28, 0x3d	; 61
    429e:	de b7       	in	r29, 0x3e	; 62
    42a0:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    42a2:	6d b6       	in	r6, 0x3d	; 61
    42a4:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    42a6:	8e b3       	in	r24, 0x1e	; 30
    42a8:	84 30       	cpi	r24, 0x04	; 4
    42aa:	09 f0       	breq	.+2      	; 0x42ae <HID_Device_USBTask+0x34>
    42ac:	99 c0       	rjmp	.+306    	; 0x43e0 <HID_Device_USBTask+0x166>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    42ae:	80 91 e4 00 	lds	r24, 0x00E4
    42b2:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    42b6:	f7 01       	movw	r30, r14
    42b8:	22 85       	ldd	r18, Z+10	; 0x0a
    42ba:	33 85       	ldd	r19, Z+11	; 0x0b
    42bc:	28 17       	cp	r18, r24
    42be:	39 07       	cpc	r19, r25
    42c0:	09 f4       	brne	.+2      	; 0x42c4 <HID_Device_USBTask+0x4a>
    42c2:	8e c0       	rjmp	.+284    	; 0x43e0 <HID_Device_USBTask+0x166>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    42c4:	81 81       	ldd	r24, Z+1	; 0x01
    42c6:	8f 70       	andi	r24, 0x0F	; 15
    42c8:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    42cc:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    42d0:	85 ff       	sbrs	r24, 5
    42d2:	86 c0       	rjmp	.+268    	; 0x43e0 <HID_Device_USBTask+0x166>
    42d4:	8d b6       	in	r8, 0x3d	; 61
    42d6:	57 2c       	mov	r5, r7
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    42d8:	40 85       	ldd	r20, Z+8	; 0x08
    42da:	cd b6       	in	r12, 0x3d	; 61
    42dc:	de b6       	in	r13, 0x3e	; 62
    42de:	c4 1a       	sub	r12, r20
    42e0:	d1 08       	sbc	r13, r1
    42e2:	0f b6       	in	r0, 0x3f	; 63
    42e4:	f8 94       	cli
    42e6:	de be       	out	0x3e, r13	; 62
    42e8:	0f be       	out	0x3f, r0	; 63
    42ea:	cd be       	out	0x3d, r12	; 61
    42ec:	0d b7       	in	r16, 0x3d	; 61
    42ee:	1e b7       	in	r17, 0x3e	; 62
    42f0:	0f 5f       	subi	r16, 0xFF	; 255
    42f2:	1f 4f       	sbci	r17, 0xFF	; 255
    42f4:	b0 2e       	mov	r11, r16
    42f6:	a1 2e       	mov	r10, r17
		uint8_t  ReportID     = 0;
    42f8:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    42fa:	1b 82       	std	Y+3, r1	; 0x03
    42fc:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    42fe:	c8 01       	movw	r24, r16
    4300:	60 e0       	ldi	r22, 0x00	; 0
    4302:	70 e0       	ldi	r23, 0x00	; 0
    4304:	50 e0       	ldi	r21, 0x00	; 0
    4306:	c2 d3       	rcall	.+1924   	; 0x4a8c <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    4308:	c7 01       	movw	r24, r14
    430a:	be 01       	movw	r22, r28
    430c:	6f 5f       	subi	r22, 0xFF	; 255
    430e:	7f 4f       	sbci	r23, 0xFF	; 255
    4310:	40 e0       	ldi	r20, 0x00	; 0
    4312:	98 01       	movw	r18, r16
    4314:	8e 01       	movw	r16, r28
    4316:	0e 5f       	subi	r16, 0xFE	; 254
    4318:	1f 4f       	sbci	r17, 0xFF	; 255
    431a:	0e 94 0d 03 	call	0x61a	; 0x61a <CALLBACK_HID_Device_CreateHIDReport>
    431e:	98 2e       	mov	r9, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    4320:	f7 01       	movw	r30, r14
    4322:	84 85       	ldd	r24, Z+12	; 0x0c
    4324:	95 85       	ldd	r25, Z+13	; 0x0d
    4326:	00 97       	sbiw	r24, 0x00	; 0
    4328:	59 f0       	breq	.+22     	; 0x4340 <HID_Device_USBTask+0xc6>
	  return false;	
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
    432a:	81 e0       	ldi	r24, 0x01	; 1
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	26 85       	ldd	r18, Z+14	; 0x0e
    4330:	37 85       	ldd	r19, Z+15	; 0x0f
    4332:	21 15       	cp	r18, r1
    4334:	31 05       	cpc	r19, r1
    4336:	11 f0       	breq	.+4      	; 0x433c <HID_Device_USBTask+0xc2>
    4338:	80 e0       	ldi	r24, 0x00	; 0
    433a:	90 e0       	ldi	r25, 0x00	; 0
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    433c:	6c 01       	movw	r12, r24
    433e:	02 c0       	rjmp	.+4      	; 0x4344 <HID_Device_USBTask+0xca>
    4340:	cc 24       	eor	r12, r12
    4342:	dd 24       	eor	r13, r13

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    4344:	f7 01       	movw	r30, r14
    4346:	06 81       	ldd	r16, Z+6	; 0x06
    4348:	17 81       	ldd	r17, Z+7	; 0x07
    434a:	01 15       	cp	r16, r1
    434c:	11 05       	cpc	r17, r1
    434e:	a1 f0       	breq	.+40     	; 0x4378 <HID_Device_USBTask+0xfe>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    4350:	4a 81       	ldd	r20, Y+2	; 0x02
    4352:	5b 81       	ldd	r21, Y+3	; 0x03
    4354:	8b 2d       	mov	r24, r11
    4356:	9a 2d       	mov	r25, r10
    4358:	b8 01       	movw	r22, r16
    435a:	82 d3       	rcall	.+1796   	; 0x4a60 <memcmp>
    435c:	21 e0       	ldi	r18, 0x01	; 1
    435e:	00 97       	sbiw	r24, 0x00	; 0
    4360:	09 f4       	brne	.+2      	; 0x4364 <HID_Device_USBTask+0xea>
    4362:	20 e0       	ldi	r18, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    4364:	f7 01       	movw	r30, r14
    4366:	40 85       	ldd	r20, Z+8	; 0x08
    4368:	c8 01       	movw	r24, r16
    436a:	6b 2d       	mov	r22, r11
    436c:	7a 2d       	mov	r23, r10
    436e:	50 e0       	ldi	r21, 0x00	; 0
    4370:	2c 83       	std	Y+4, r18	; 0x04
    4372:	83 d3       	rcall	.+1798   	; 0x4a7a <memcpy>
    4374:	2c 81       	ldd	r18, Y+4	; 0x04
    4376:	01 c0       	rjmp	.+2      	; 0x437a <HID_Device_USBTask+0x100>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    4378:	20 e0       	ldi	r18, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    437a:	8a 81       	ldd	r24, Y+2	; 0x02
    437c:	9b 81       	ldd	r25, Y+3	; 0x03
    437e:	00 97       	sbiw	r24, 0x00	; 0
    4380:	09 f1       	breq	.+66     	; 0x43c4 <HID_Device_USBTask+0x14a>
    4382:	99 20       	and	r9, r9
    4384:	29 f4       	brne	.+10     	; 0x4390 <HID_Device_USBTask+0x116>
    4386:	22 23       	and	r18, r18
    4388:	19 f4       	brne	.+6      	; 0x4390 <HID_Device_USBTask+0x116>
    438a:	c1 14       	cp	r12, r1
    438c:	d1 04       	cpc	r13, r1
    438e:	d1 f0       	breq	.+52     	; 0x43c4 <HID_Device_USBTask+0x14a>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    4390:	f7 01       	movw	r30, r14
    4392:	84 85       	ldd	r24, Z+12	; 0x0c
    4394:	95 85       	ldd	r25, Z+13	; 0x0d
    4396:	97 87       	std	Z+15, r25	; 0x0f
    4398:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    439a:	81 81       	ldd	r24, Z+1	; 0x01
    439c:	8f 70       	andi	r24, 0x0F	; 15
    439e:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    43a2:	89 81       	ldd	r24, Y+1	; 0x01
    43a4:	88 23       	and	r24, r24
    43a6:	11 f0       	breq	.+4      	; 0x43ac <HID_Device_USBTask+0x132>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    43a8:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    43ac:	6a 81       	ldd	r22, Y+2	; 0x02
    43ae:	7b 81       	ldd	r23, Y+3	; 0x03
    43b0:	8b 2d       	mov	r24, r11
    43b2:	9a 2d       	mov	r25, r10
    43b4:	40 e0       	ldi	r20, 0x00	; 0
    43b6:	50 e0       	ldi	r21, 0x00	; 0
    43b8:	4e d8       	rcall	.-3940   	; 0x3456 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    43ba:	80 91 e8 00 	lds	r24, 0x00E8
    43be:	8e 77       	andi	r24, 0x7E	; 126
    43c0:	80 93 e8 00 	sts	0x00E8, r24
    43c4:	80 91 e4 00 	lds	r24, 0x00E4
    43c8:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    43cc:	f7 01       	movw	r30, r14
    43ce:	93 87       	std	Z+11, r25	; 0x0b
    43d0:	82 87       	std	Z+10, r24	; 0x0a
    43d2:	88 2d       	mov	r24, r8
    43d4:	95 2d       	mov	r25, r5
    43d6:	0f b6       	in	r0, 0x3f	; 63
    43d8:	f8 94       	cli
    43da:	9e bf       	out	0x3e, r25	; 62
    43dc:	0f be       	out	0x3f, r0	; 63
    43de:	8d bf       	out	0x3d, r24	; 61
	}
}
    43e0:	0f b6       	in	r0, 0x3f	; 63
    43e2:	f8 94       	cli
    43e4:	7e be       	out	0x3e, r7	; 62
    43e6:	0f be       	out	0x3f, r0	; 63
    43e8:	6d be       	out	0x3d, r6	; 61
    43ea:	0f 90       	pop	r0
    43ec:	0f 90       	pop	r0
    43ee:	0f 90       	pop	r0
    43f0:	0f 90       	pop	r0
    43f2:	cf 91       	pop	r28
    43f4:	df 91       	pop	r29
    43f6:	1f 91       	pop	r17
    43f8:	0f 91       	pop	r16
    43fa:	ff 90       	pop	r15
    43fc:	ef 90       	pop	r14
    43fe:	df 90       	pop	r13
    4400:	cf 90       	pop	r12
    4402:	bf 90       	pop	r11
    4404:	af 90       	pop	r10
    4406:	9f 90       	pop	r9
    4408:	8f 90       	pop	r8
    440a:	7f 90       	pop	r7
    440c:	6f 90       	pop	r6
    440e:	5f 90       	pop	r5
    4410:	08 95       	ret

00004412 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    4412:	cf 93       	push	r28
    4414:	df 93       	push	r29
    4416:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4418:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    441c:	83 ff       	sbrs	r24, 3
    441e:	33 c0       	rjmp	.+102    	; 0x4486 <MS_Device_ProcessControlRequest+0x74>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    4420:	88 81       	ld	r24, Y
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	20 91 32 04 	lds	r18, 0x0432
    4428:	30 91 33 04 	lds	r19, 0x0433
    442c:	28 17       	cp	r18, r24
    442e:	39 07       	cpc	r19, r25
    4430:	51 f5       	brne	.+84     	; 0x4486 <MS_Device_ProcessControlRequest+0x74>
	  return;

	switch (USB_ControlRequest.bRequest)
    4432:	80 91 2f 04 	lds	r24, 0x042F
    4436:	8e 3f       	cpi	r24, 0xFE	; 254
    4438:	79 f0       	breq	.+30     	; 0x4458 <MS_Device_ProcessControlRequest+0x46>
    443a:	8f 3f       	cpi	r24, 0xFF	; 255
    443c:	21 f5       	brne	.+72     	; 0x4486 <MS_Device_ProcessControlRequest+0x74>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    443e:	80 91 2e 04 	lds	r24, 0x042E
    4442:	81 32       	cpi	r24, 0x21	; 33
    4444:	01 f5       	brne	.+64     	; 0x4486 <MS_Device_ProcessControlRequest+0x74>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4446:	80 91 e8 00 	lds	r24, 0x00E8
    444a:	87 7f       	andi	r24, 0xF7	; 247
    444c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    4450:	82 da       	rcall	.-2812   	; 0x3956 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    4452:	81 e0       	ldi	r24, 0x01	; 1
    4454:	88 af       	std	Y+56, r24	; 0x38
    4456:	17 c0       	rjmp	.+46     	; 0x4486 <MS_Device_ProcessControlRequest+0x74>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    4458:	80 91 2e 04 	lds	r24, 0x042E
    445c:	81 3a       	cpi	r24, 0xA1	; 161
    445e:	99 f4       	brne	.+38     	; 0x4486 <MS_Device_ProcessControlRequest+0x74>
    4460:	80 91 e8 00 	lds	r24, 0x00E8
    4464:	87 7f       	andi	r24, 0xF7	; 247
    4466:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    446a:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    446e:	80 ff       	sbrs	r24, 0
    4470:	fc cf       	rjmp	.-8      	; 0x446a <MS_Device_ProcessControlRequest+0x58>
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    4472:	8b 85       	ldd	r24, Y+11	; 0x0b
    4474:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    4476:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    447a:	80 91 e8 00 	lds	r24, 0x00E8
    447e:	8e 77       	andi	r24, 0x7E	; 126
    4480:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    4484:	68 da       	rcall	.-2864   	; 0x3956 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    4486:	df 91       	pop	r29
    4488:	cf 91       	pop	r28
    448a:	08 95       	ret

0000448c <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    448c:	cf 93       	push	r28
    448e:	df 93       	push	r29
    4490:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    4492:	0c 96       	adiw	r24, 0x0c	; 12
    4494:	fc 01       	movw	r30, r24
    4496:	8d e2       	ldi	r24, 0x2D	; 45
    4498:	df 01       	movw	r26, r30
    449a:	1d 92       	st	X+, r1
    449c:	8a 95       	dec	r24
    449e:	e9 f7       	brne	.-6      	; 0x449a <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    44a0:	82 e0       	ldi	r24, 0x02	; 2
    44a2:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    44a4:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    44a6:	ce 01       	movw	r24, r28
    44a8:	01 96       	adiw	r24, 0x01	; 1
    44aa:	61 e0       	ldi	r22, 0x01	; 1
    44ac:	10 da       	rcall	.-3040   	; 0x38ce <Endpoint_ConfigureEndpointTable>
    44ae:	88 23       	and	r24, r24
    44b0:	29 f0       	breq	.+10     	; 0x44bc <MS_Device_ConfigureEndpoints+0x30>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    44b2:	ce 01       	movw	r24, r28
    44b4:	06 96       	adiw	r24, 0x06	; 6
    44b6:	61 e0       	ldi	r22, 0x01	; 1
    44b8:	0a da       	rcall	.-3052   	; 0x38ce <Endpoint_ConfigureEndpointTable>
    44ba:	01 c0       	rjmp	.+2      	; 0x44be <MS_Device_ConfigureEndpoints+0x32>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;
    44bc:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	return true;
}
    44be:	df 91       	pop	r29
    44c0:	cf 91       	pop	r28
    44c2:	08 95       	ret

000044c4 <MS_Device_USBTask>:

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    44c4:	cf 92       	push	r12
    44c6:	df 92       	push	r13
    44c8:	ef 92       	push	r14
    44ca:	ff 92       	push	r15
    44cc:	0f 93       	push	r16
    44ce:	1f 93       	push	r17
    44d0:	df 93       	push	r29
    44d2:	cf 93       	push	r28
    44d4:	00 d0       	rcall	.+0      	; 0x44d6 <MS_Device_USBTask+0x12>
    44d6:	cd b7       	in	r28, 0x3d	; 61
    44d8:	de b7       	in	r29, 0x3e	; 62
    44da:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    44dc:	8e b3       	in	r24, 0x1e	; 30
    44de:	84 30       	cpi	r24, 0x04	; 4
    44e0:	09 f0       	breq	.+2      	; 0x44e4 <MS_Device_USBTask+0x20>
    44e2:	16 c1       	rjmp	.+556    	; 0x4710 <MS_Device_USBTask+0x24c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    44e4:	f8 01       	movw	r30, r16
    44e6:	86 81       	ldd	r24, Z+6	; 0x06
    44e8:	8f 70       	andi	r24, 0x0F	; 15
    44ea:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    44ee:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    44f2:	82 ff       	sbrs	r24, 2
    44f4:	d3 c0       	rjmp	.+422    	; 0x469c <MS_Device_USBTask+0x1d8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    44f6:	86 81       	ldd	r24, Z+6	; 0x06
    44f8:	8f 70       	andi	r24, 0x0F	; 15
    44fa:	80 93 e9 00 	sts	0x00E9, r24
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
    44fe:	1a 82       	std	Y+2, r1	; 0x02
    4500:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    4502:	2c e0       	ldi	r18, 0x0C	; 12
    4504:	c2 2e       	mov	r12, r18
    4506:	d1 2c       	mov	r13, r1
    4508:	c0 0e       	add	r12, r16
    450a:	d1 1e       	adc	r13, r17
    450c:	7e 01       	movw	r14, r28
    450e:	08 94       	sec
    4510:	e1 1c       	adc	r14, r1
    4512:	f1 1c       	adc	r15, r1
    4514:	05 c0       	rjmp	.+10     	; 0x4520 <MS_Device_USBTask+0x5c>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    4516:	f8 01       	movw	r30, r16
    4518:	80 ad       	ldd	r24, Z+56	; 0x38
    451a:	88 23       	and	r24, r24
    451c:	09 f0       	breq	.+2      	; 0x4520 <MS_Device_USBTask+0x5c>
    451e:	be c0       	rjmp	.+380    	; 0x469c <MS_Device_USBTask+0x1d8>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    4520:	c6 01       	movw	r24, r12
    4522:	6f e0       	ldi	r22, 0x0F	; 15
    4524:	70 e0       	ldi	r23, 0x00	; 0
    4526:	a7 01       	movw	r20, r14
    4528:	48 d8       	rcall	.-3952   	; 0x35ba <Endpoint_Read_Stream_LE>
    452a:	85 30       	cpi	r24, 0x05	; 5
    452c:	a1 f3       	breq	.-24     	; 0x4516 <MS_Device_USBTask+0x52>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    452e:	f8 01       	movw	r30, r16
    4530:	84 85       	ldd	r24, Z+12	; 0x0c
    4532:	95 85       	ldd	r25, Z+13	; 0x0d
    4534:	a6 85       	ldd	r26, Z+14	; 0x0e
    4536:	b7 85       	ldd	r27, Z+15	; 0x0f
    4538:	85 35       	cpi	r24, 0x55	; 85
    453a:	f3 e5       	ldi	r31, 0x53	; 83
    453c:	9f 07       	cpc	r25, r31
    453e:	f2 e4       	ldi	r31, 0x42	; 66
    4540:	af 07       	cpc	r26, r31
    4542:	f3 e4       	ldi	r31, 0x43	; 67
    4544:	bf 07       	cpc	r27, r31
    4546:	81 f4       	brne	.+32     	; 0x4568 <MS_Device_USBTask+0xa4>
    4548:	f8 01       	movw	r30, r16
    454a:	91 8d       	ldd	r25, Z+25	; 0x19
    454c:	83 85       	ldd	r24, Z+11	; 0x0b
    454e:	98 17       	cp	r25, r24
    4550:	58 f4       	brcc	.+22     	; 0x4568 <MS_Device_USBTask+0xa4>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    4552:	80 8d       	ldd	r24, Z+24	; 0x18
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	8f 71       	andi	r24, 0x1F	; 31
    4558:	90 70       	andi	r25, 0x00	; 0
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    455a:	00 97       	sbiw	r24, 0x00	; 0
    455c:	29 f4       	brne	.+10     	; 0x4568 <MS_Device_USBTask+0xa4>
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    455e:	82 8d       	ldd	r24, Z+26	; 0x1a
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    4560:	88 23       	and	r24, r24
    4562:	11 f0       	breq	.+4      	; 0x4568 <MS_Device_USBTask+0xa4>
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    4564:	81 31       	cpi	r24, 0x11	; 17
    4566:	80 f0       	brcs	.+32     	; 0x4588 <MS_Device_USBTask+0xc4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    4568:	80 91 eb 00 	lds	r24, 0x00EB
    456c:	80 62       	ori	r24, 0x20	; 32
    456e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4572:	f8 01       	movw	r30, r16
    4574:	81 81       	ldd	r24, Z+1	; 0x01
    4576:	8f 70       	andi	r24, 0x0F	; 15
    4578:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    457c:	80 91 eb 00 	lds	r24, 0x00EB
    4580:	80 62       	ori	r24, 0x20	; 32
    4582:	80 93 eb 00 	sts	0x00EB, r24
    4586:	8a c0       	rjmp	.+276    	; 0x469c <MS_Device_USBTask+0x1d8>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    4588:	1a 82       	std	Y+2, r1	; 0x02
    458a:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    458c:	9b e1       	ldi	r25, 0x1B	; 27
    458e:	c9 2e       	mov	r12, r25
    4590:	d1 2c       	mov	r13, r1
    4592:	c0 0e       	add	r12, r16
    4594:	d1 1e       	adc	r13, r17
    4596:	7e 01       	movw	r14, r28
    4598:	08 94       	sec
    459a:	e1 1c       	adc	r14, r1
    459c:	f1 1c       	adc	r15, r1
    459e:	05 c0       	rjmp	.+10     	; 0x45aa <MS_Device_USBTask+0xe6>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    45a0:	f8 01       	movw	r30, r16
    45a2:	80 ad       	ldd	r24, Z+56	; 0x38
    45a4:	88 23       	and	r24, r24
    45a6:	09 f0       	breq	.+2      	; 0x45aa <MS_Device_USBTask+0xe6>
    45a8:	79 c0       	rjmp	.+242    	; 0x469c <MS_Device_USBTask+0x1d8>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    45aa:	f8 01       	movw	r30, r16
    45ac:	62 8d       	ldd	r22, Z+26	; 0x1a
    45ae:	c6 01       	movw	r24, r12
    45b0:	70 e0       	ldi	r23, 0x00	; 0
    45b2:	a7 01       	movw	r20, r14
    45b4:	02 d8       	rcall	.-4092   	; 0x35ba <Endpoint_Read_Stream_LE>
    45b6:	85 30       	cpi	r24, 0x05	; 5
    45b8:	99 f3       	breq	.-26     	; 0x45a0 <MS_Device_USBTask+0xdc>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    45ba:	80 91 e8 00 	lds	r24, 0x00E8
    45be:	8b 77       	andi	r24, 0x7B	; 123
    45c0:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    45c4:	f8 01       	movw	r30, r16
    45c6:	80 8d       	ldd	r24, Z+24	; 0x18
    45c8:	87 ff       	sbrs	r24, 7
    45ca:	04 c0       	rjmp	.+8      	; 0x45d4 <MS_Device_USBTask+0x110>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    45cc:	81 81       	ldd	r24, Z+1	; 0x01
    45ce:	8f 70       	andi	r24, 0x0F	; 15
    45d0:	80 93 e9 00 	sts	0x00E9, r24
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    45d4:	c8 01       	movw	r24, r16
    45d6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <CALLBACK_MS_Device_SCSICommandReceived>
	  return false;

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
    45da:	91 e0       	ldi	r25, 0x01	; 1
    45dc:	98 27       	eor	r25, r24
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    45de:	f8 01       	movw	r30, r16
    45e0:	97 ab       	std	Z+55, r25	; 0x37
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    45e2:	25 e5       	ldi	r18, 0x55	; 85
    45e4:	33 e5       	ldi	r19, 0x53	; 83
    45e6:	42 e4       	ldi	r20, 0x42	; 66
    45e8:	53 e5       	ldi	r21, 0x53	; 83
    45ea:	23 a7       	std	Z+43, r18	; 0x2b
    45ec:	34 a7       	std	Z+44, r19	; 0x2c
    45ee:	45 a7       	std	Z+45, r20	; 0x2d
    45f0:	56 a7       	std	Z+46, r21	; 0x2e
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    45f2:	20 89       	ldd	r18, Z+16	; 0x10
    45f4:	31 89       	ldd	r19, Z+17	; 0x11
    45f6:	42 89       	ldd	r20, Z+18	; 0x12
    45f8:	53 89       	ldd	r21, Z+19	; 0x13
    45fa:	27 a7       	std	Z+47, r18	; 0x2f
    45fc:	30 ab       	std	Z+48, r19	; 0x30
    45fe:	41 ab       	std	Z+49, r20	; 0x31
    4600:	52 ab       	std	Z+50, r21	; 0x32
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    4602:	24 89       	ldd	r18, Z+20	; 0x14
    4604:	35 89       	ldd	r19, Z+21	; 0x15
    4606:	46 89       	ldd	r20, Z+22	; 0x16
    4608:	57 89       	ldd	r21, Z+23	; 0x17
    460a:	23 ab       	std	Z+51, r18	; 0x33
    460c:	34 ab       	std	Z+52, r19	; 0x34
    460e:	45 ab       	std	Z+53, r20	; 0x35
    4610:	56 ab       	std	Z+54, r21	; 0x36

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    4612:	88 23       	and	r24, r24
    4614:	51 f4       	brne	.+20     	; 0x462a <MS_Device_USBTask+0x166>
    4616:	21 15       	cp	r18, r1
    4618:	31 05       	cpc	r19, r1
    461a:	41 05       	cpc	r20, r1
    461c:	51 05       	cpc	r21, r1
    461e:	29 f0       	breq	.+10     	; 0x462a <MS_Device_USBTask+0x166>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    4620:	80 91 eb 00 	lds	r24, 0x00EB
    4624:	80 62       	ori	r24, 0x20	; 32
    4626:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    462a:	f8 01       	movw	r30, r16
    462c:	86 81       	ldd	r24, Z+6	; 0x06
    462e:	8f 70       	andi	r24, 0x0F	; 15
    4630:	80 93 e9 00 	sts	0x00E9, r24
    4634:	04 c0       	rjmp	.+8      	; 0x463e <MS_Device_USBTask+0x17a>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    4636:	f8 01       	movw	r30, r16
    4638:	80 ad       	ldd	r24, Z+56	; 0x38
    463a:	88 23       	and	r24, r24
    463c:	79 f5       	brne	.+94     	; 0x469c <MS_Device_USBTask+0x1d8>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    463e:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    4642:	85 fd       	sbrc	r24, 5
    4644:	f8 cf       	rjmp	.-16     	; 0x4636 <MS_Device_USBTask+0x172>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4646:	f8 01       	movw	r30, r16
    4648:	81 81       	ldd	r24, Z+1	; 0x01
    464a:	8f 70       	andi	r24, 0x0F	; 15
    464c:	80 93 e9 00 	sts	0x00E9, r24
    4650:	04 c0       	rjmp	.+8      	; 0x465a <MS_Device_USBTask+0x196>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    4652:	f8 01       	movw	r30, r16
    4654:	80 ad       	ldd	r24, Z+56	; 0x38
    4656:	88 23       	and	r24, r24
    4658:	09 f5       	brne	.+66     	; 0x469c <MS_Device_USBTask+0x1d8>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    465a:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    465e:	85 fd       	sbrc	r24, 5
    4660:	f8 cf       	rjmp	.-16     	; 0x4652 <MS_Device_USBTask+0x18e>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    4662:	1a 82       	std	Y+2, r1	; 0x02
    4664:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    4666:	8b e2       	ldi	r24, 0x2B	; 43
    4668:	c8 2e       	mov	r12, r24
    466a:	d1 2c       	mov	r13, r1
    466c:	c0 0e       	add	r12, r16
    466e:	d1 1e       	adc	r13, r17
    4670:	7e 01       	movw	r14, r28
    4672:	08 94       	sec
    4674:	e1 1c       	adc	r14, r1
    4676:	f1 1c       	adc	r15, r1
    4678:	04 c0       	rjmp	.+8      	; 0x4682 <MS_Device_USBTask+0x1be>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    467a:	f8 01       	movw	r30, r16
    467c:	80 ad       	ldd	r24, Z+56	; 0x38
    467e:	88 23       	and	r24, r24
    4680:	69 f4       	brne	.+26     	; 0x469c <MS_Device_USBTask+0x1d8>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    4682:	c6 01       	movw	r24, r12
    4684:	6d e0       	ldi	r22, 0x0D	; 13
    4686:	70 e0       	ldi	r23, 0x00	; 0
    4688:	a7 01       	movw	r20, r14
    468a:	0e 94 2b 1a 	call	0x3456	; 0x3456 <Endpoint_Write_Stream_LE>
    468e:	85 30       	cpi	r24, 0x05	; 5
    4690:	a1 f3       	breq	.-24     	; 0x467a <MS_Device_USBTask+0x1b6>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4692:	80 91 e8 00 	lds	r24, 0x00E8
    4696:	8e 77       	andi	r24, 0x7E	; 126
    4698:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    469c:	f8 01       	movw	r30, r16
    469e:	80 ad       	ldd	r24, Z+56	; 0x38
    46a0:	88 23       	and	r24, r24
    46a2:	b1 f1       	breq	.+108    	; 0x4710 <MS_Device_USBTask+0x24c>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    46a4:	26 81       	ldd	r18, Z+6	; 0x06
    46a6:	2f 70       	andi	r18, 0x0F	; 15
    46a8:	81 e0       	ldi	r24, 0x01	; 1
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	ac 01       	movw	r20, r24
    46ae:	02 c0       	rjmp	.+4      	; 0x46b4 <MS_Device_USBTask+0x1f0>
    46b0:	44 0f       	add	r20, r20
    46b2:	55 1f       	adc	r21, r21
    46b4:	2a 95       	dec	r18
    46b6:	e2 f7       	brpl	.-8      	; 0x46b0 <MS_Device_USBTask+0x1ec>
    46b8:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
    46bc:	10 92 ea 00 	sts	0x00EA, r1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    46c0:	21 81       	ldd	r18, Z+1	; 0x01
    46c2:	2f 70       	andi	r18, 0x0F	; 15
    46c4:	02 c0       	rjmp	.+4      	; 0x46ca <MS_Device_USBTask+0x206>
    46c6:	88 0f       	add	r24, r24
    46c8:	99 1f       	adc	r25, r25
    46ca:	2a 95       	dec	r18
    46cc:	e2 f7       	brpl	.-8      	; 0x46c6 <MS_Device_USBTask+0x202>
    46ce:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    46d2:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    46d6:	86 81       	ldd	r24, Z+6	; 0x06
    46d8:	8f 70       	andi	r24, 0x0F	; 15
    46da:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    46de:	80 91 eb 00 	lds	r24, 0x00EB
    46e2:	80 61       	ori	r24, 0x10	; 16
    46e4:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    46e8:	80 91 eb 00 	lds	r24, 0x00EB
    46ec:	88 60       	ori	r24, 0x08	; 8
    46ee:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    46f2:	81 81       	ldd	r24, Z+1	; 0x01
    46f4:	8f 70       	andi	r24, 0x0F	; 15
    46f6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    46fa:	80 91 eb 00 	lds	r24, 0x00EB
    46fe:	80 61       	ori	r24, 0x10	; 16
    4700:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    4704:	80 91 eb 00 	lds	r24, 0x00EB
    4708:	88 60       	ori	r24, 0x08	; 8
    470a:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    470e:	10 ae       	std	Z+56, r1	; 0x38
	}
}
    4710:	0f 90       	pop	r0
    4712:	0f 90       	pop	r0
    4714:	cf 91       	pop	r28
    4716:	df 91       	pop	r29
    4718:	1f 91       	pop	r17
    471a:	0f 91       	pop	r16
    471c:	ff 90       	pop	r15
    471e:	ef 90       	pop	r14
    4720:	df 90       	pop	r13
    4722:	cf 90       	pop	r12
    4724:	08 95       	ret

00004726 <TWI_StartTransmission>:
	for (;;)
	{
		bool     BusCaptured = false;
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    4726:	94 ea       	ldi	r25, 0xA4	; 164
    4728:	90 93 bc 00 	sts	0x00BC, r25

		TimeoutRemaining = (TimeoutMS * 100);
    472c:	94 e6       	ldi	r25, 0x64	; 100
    472e:	69 9f       	mul	r22, r25
    4730:	b0 01       	movw	r22, r0
    4732:	11 24       	eor	r1, r1
    4734:	ab 01       	movw	r20, r22
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress,
                              const uint8_t TimeoutMS)
{
	for (;;)
	{
		bool     BusCaptured = false;
    4736:	90 e0       	ldi	r25, 0x00	; 0
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    4738:	e4 ea       	ldi	r30, 0xA4	; 164
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining && !(BusCaptured))
    473a:	22 c0       	rjmp	.+68     	; 0x4780 <TWI_StartTransmission+0x5a>
		{
			if (TWCR & (1 << TWINT))
    473c:	20 91 bc 00 	lds	r18, 0x00BC
    4740:	27 ff       	sbrs	r18, 7
    4742:	18 c0       	rjmp	.+48     	; 0x4774 <TWI_StartTransmission+0x4e>
			{
				switch (TWSR & TW_STATUS_MASK)
    4744:	20 91 b9 00 	lds	r18, 0x00B9
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	28 7f       	andi	r18, 0xF8	; 248
    474c:	30 70       	andi	r19, 0x00	; 0
    474e:	20 31       	cpi	r18, 0x10	; 16
    4750:	31 05       	cpc	r19, r1
    4752:	79 f0       	breq	.+30     	; 0x4772 <TWI_StartTransmission+0x4c>
    4754:	28 33       	cpi	r18, 0x38	; 56
    4756:	31 05       	cpc	r19, r1
    4758:	21 f0       	breq	.+8      	; 0x4762 <TWI_StartTransmission+0x3c>
    475a:	28 30       	cpi	r18, 0x08	; 8
    475c:	31 05       	cpc	r19, r1
    475e:	21 f4       	brne	.+8      	; 0x4768 <TWI_StartTransmission+0x42>
    4760:	08 c0       	rjmp	.+16     	; 0x4772 <TWI_StartTransmission+0x4c>
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    4762:	e0 93 bc 00 	sts	0x00BC, r30
						continue;
    4766:	0c c0       	rjmp	.+24     	; 0x4780 <TWI_StartTransmission+0x5a>
					default:
						TWCR = (1 << TWEN);
    4768:	84 e0       	ldi	r24, 0x04	; 4
    476a:	80 93 bc 00 	sts	0x00BC, r24
						return TWI_ERROR_BusFault;
    476e:	81 e0       	ldi	r24, 0x01	; 1
    4770:	08 95       	ret
			{
				switch (TWSR & TW_STATUS_MASK)
				{
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
    4772:	91 e0       	ldi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4774:	2a e1       	ldi	r18, 0x1A	; 26
    4776:	2a 95       	dec	r18
    4778:	f1 f7       	brne	.-4      	; 0x4776 <TWI_StartTransmission+0x50>
    477a:	00 c0       	rjmp	.+0      	; 0x477c <TWI_StartTransmission+0x56>
						return TWI_ERROR_BusFault;
				}
			}

			_delay_us(10);
			TimeoutRemaining--;
    477c:	41 50       	subi	r20, 0x01	; 1
    477e:	50 40       	sbci	r21, 0x00	; 0
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining && !(BusCaptured))
    4780:	41 15       	cp	r20, r1
    4782:	51 05       	cpc	r21, r1
    4784:	19 f0       	breq	.+6      	; 0x478c <TWI_StartTransmission+0x66>
    4786:	99 23       	and	r25, r25
    4788:	c9 f2       	breq	.-78     	; 0x473c <TWI_StartTransmission+0x16>
    478a:	26 c0       	rjmp	.+76     	; 0x47d8 <TWI_StartTransmission+0xb2>
			TimeoutRemaining--;
		}

		if (!(TimeoutRemaining))
		{
			TWCR = (1 << TWEN);
    478c:	84 e0       	ldi	r24, 0x04	; 4
    478e:	80 93 bc 00 	sts	0x00BC, r24
			return TWI_ERROR_BusCaptureTimeout;
    4792:	82 e0       	ldi	r24, 0x02	; 2
    4794:	08 95       	ret
		TWCR = ((1 << TWINT) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining)
		{
			if (TWCR & (1 << TWINT))
    4796:	80 91 bc 00 	lds	r24, 0x00BC
    479a:	87 fd       	sbrc	r24, 7
    479c:	0b c0       	rjmp	.+22     	; 0x47b4 <TWI_StartTransmission+0x8e>
    479e:	8a e1       	ldi	r24, 0x1A	; 26
    47a0:	8a 95       	dec	r24
    47a2:	f1 f7       	brne	.-4      	; 0x47a0 <TWI_StartTransmission+0x7a>
    47a4:	00 c0       	rjmp	.+0      	; 0x47a6 <TWI_StartTransmission+0x80>
			  break;

			_delay_us(10);
			TimeoutRemaining--;
    47a6:	61 50       	subi	r22, 0x01	; 1
    47a8:	70 40       	sbci	r23, 0x00	; 0

		TWDR = SlaveAddress;
		TWCR = ((1 << TWINT) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining)
    47aa:	61 15       	cp	r22, r1
    47ac:	71 05       	cpc	r23, r1
    47ae:	99 f7       	brne	.-26     	; 0x4796 <TWI_StartTransmission+0x70>
			_delay_us(10);
			TimeoutRemaining--;
		}

		if (!(TimeoutRemaining))
		  return TWI_ERROR_SlaveResponseTimeout;
    47b0:	83 e0       	ldi	r24, 0x03	; 3
    47b2:	08 95       	ret

		switch (TWSR & TW_STATUS_MASK)
    47b4:	80 91 b9 00 	lds	r24, 0x00B9
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	88 7f       	andi	r24, 0xF8	; 248
    47bc:	90 70       	andi	r25, 0x00	; 0
    47be:	88 31       	cpi	r24, 0x18	; 24
    47c0:	91 05       	cpc	r25, r1
    47c2:	41 f0       	breq	.+16     	; 0x47d4 <TWI_StartTransmission+0xae>
    47c4:	80 34       	cpi	r24, 0x40	; 64
    47c6:	91 05       	cpc	r25, r1
    47c8:	29 f0       	breq	.+10     	; 0x47d4 <TWI_StartTransmission+0xae>
		{
			case TW_MT_SLA_ACK:
			case TW_MR_SLA_ACK:
				return TWI_ERROR_NoError;
			default:
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    47ca:	84 e9       	ldi	r24, 0x94	; 148
    47cc:	80 93 bc 00 	sts	0x00BC, r24
				return TWI_ERROR_SlaveNotReady;
    47d0:	84 e0       	ldi	r24, 0x04	; 4
    47d2:	08 95       	ret

		switch (TWSR & TW_STATUS_MASK)
		{
			case TW_MT_SLA_ACK:
			case TW_MR_SLA_ACK:
				return TWI_ERROR_NoError;
    47d4:	80 e0       	ldi	r24, 0x00	; 0
			default:
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
				return TWI_ERROR_SlaveNotReady;
		}
	}
}
    47d6:	08 95       	ret
		{
			TWCR = (1 << TWEN);
			return TWI_ERROR_BusCaptureTimeout;
		}

		TWDR = SlaveAddress;
    47d8:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = ((1 << TWINT) | (1 << TWEN));
    47dc:	84 e8       	ldi	r24, 0x84	; 132
    47de:	80 93 bc 00 	sts	0x00BC, r24

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining)
    47e2:	e3 cf       	rjmp	.-58     	; 0x47aa <TWI_StartTransmission+0x84>

000047e4 <TWI_SendByte>:
	}
}

bool TWI_SendByte(const uint8_t Byte)
{
	TWDR = Byte;
    47e4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = ((1 << TWINT) | (1 << TWEN));
    47e8:	84 e8       	ldi	r24, 0x84	; 132
    47ea:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1 << TWINT)));
    47ee:	80 91 bc 00 	lds	r24, 0x00BC
    47f2:	87 ff       	sbrs	r24, 7
    47f4:	fc cf       	rjmp	.-8      	; 0x47ee <TWI_SendByte+0xa>

	return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    47f6:	90 91 b9 00 	lds	r25, 0x00B9
    47fa:	98 7f       	andi	r25, 0xF8	; 248
    47fc:	81 e0       	ldi	r24, 0x01	; 1
    47fe:	98 32       	cpi	r25, 0x28	; 40
    4800:	09 f0       	breq	.+2      	; 0x4804 <TWI_SendByte+0x20>
    4802:	80 e0       	ldi	r24, 0x00	; 0
}
    4804:	08 95       	ret

00004806 <TWI_ReceiveByte>:
bool TWI_ReceiveByte(uint8_t* const Byte,
					 const bool LastByte)
{
	uint8_t TWCRMask;

	if (LastByte)
    4806:	66 23       	and	r22, r22
    4808:	11 f0       	breq	.+4      	; 0x480e <TWI_ReceiveByte+0x8>
	  TWCRMask = ((1 << TWINT) | (1 << TWEN));
    480a:	24 e8       	ldi	r18, 0x84	; 132
    480c:	01 c0       	rjmp	.+2      	; 0x4810 <TWI_ReceiveByte+0xa>
	else
	  TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    480e:	24 ec       	ldi	r18, 0xC4	; 196

	TWCR = TWCRMask;
    4810:	20 93 bc 00 	sts	0x00BC, r18
	while (!(TWCR & (1 << TWINT)));
    4814:	20 91 bc 00 	lds	r18, 0x00BC
    4818:	27 ff       	sbrs	r18, 7
    481a:	fc cf       	rjmp	.-8      	; 0x4814 <TWI_ReceiveByte+0xe>
	*Byte = TWDR;
    481c:	20 91 bb 00 	lds	r18, 0x00BB
    4820:	fc 01       	movw	r30, r24
    4822:	20 83       	st	Z, r18

	uint8_t Status = (TWSR & TW_STATUS_MASK);
    4824:	90 91 b9 00 	lds	r25, 0x00B9
    4828:	98 7f       	andi	r25, 0xF8	; 248

	return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    482a:	66 23       	and	r22, r22
    482c:	29 f0       	breq	.+10     	; 0x4838 <TWI_ReceiveByte+0x32>
    482e:	81 e0       	ldi	r24, 0x01	; 1
    4830:	98 35       	cpi	r25, 0x58	; 88
    4832:	31 f0       	breq	.+12     	; 0x4840 <TWI_ReceiveByte+0x3a>
    4834:	80 e0       	ldi	r24, 0x00	; 0
    4836:	08 95       	ret
    4838:	81 e0       	ldi	r24, 0x01	; 1
    483a:	90 35       	cpi	r25, 0x50	; 80
    483c:	09 f0       	breq	.+2      	; 0x4840 <TWI_ReceiveByte+0x3a>
    483e:	80 e0       	ldi	r24, 0x00	; 0
}
    4840:	08 95       	ret

00004842 <TWI_ReadPacket>:
                       const uint8_t TimeoutMS,
                       const uint8_t* InternalAddress,
                       uint8_t InternalAddressLen,
                       uint8_t* Buffer,
                       uint8_t Length)
{
    4842:	af 92       	push	r10
    4844:	bf 92       	push	r11
    4846:	cf 92       	push	r12
    4848:	df 92       	push	r13
    484a:	ef 92       	push	r14
    484c:	ff 92       	push	r15
    484e:	0f 93       	push	r16
    4850:	1f 93       	push	r17
    4852:	df 93       	push	r29
    4854:	cf 93       	push	r28
    4856:	00 d0       	rcall	.+0      	; 0x4858 <TWI_ReadPacket+0x16>
    4858:	cd b7       	in	r28, 0x3d	; 61
    485a:	de b7       	in	r29, 0x3e	; 62
    485c:	d8 2e       	mov	r13, r24
    485e:	f6 2e       	mov	r15, r22
    4860:	c2 2e       	mov	r12, r18
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    4862:	8e 7f       	andi	r24, 0xFE	; 254
    4864:	49 83       	std	Y+1, r20	; 0x01
    4866:	5a 83       	std	Y+2, r21	; 0x02
    4868:	5e df       	rcall	.-324    	; 0x4726 <TWI_StartTransmission>
    486a:	b8 2e       	mov	r11, r24
    486c:	49 81       	ldd	r20, Y+1	; 0x01
    486e:	5a 81       	ldd	r21, Y+2	; 0x02
    4870:	88 23       	and	r24, r24
    4872:	29 f5       	brne	.+74     	; 0x48be <TWI_ReadPacket+0x7c>
    4874:	5a 01       	movw	r10, r20
    4876:	07 c0       	rjmp	.+14     	; 0x4886 <TWI_ReadPacket+0x44>
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
		{
			if (!(TWI_SendByte(*(InternalAddress++))))
    4878:	f5 01       	movw	r30, r10
    487a:	81 91       	ld	r24, Z+
    487c:	5f 01       	movw	r10, r30
    487e:	b2 df       	rcall	.-156    	; 0x47e4 <TWI_SendByte>
    4880:	ca 94       	dec	r12
    4882:	88 23       	and	r24, r24
    4884:	11 f0       	breq	.+4      	; 0x488a <TWI_ReadPacket+0x48>
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
    4886:	cc 20       	and	r12, r12
    4888:	b9 f7       	brne	.-18     	; 0x4878 <TWI_ReadPacket+0x36>
				ErrorCode = TWI_ERROR_SlaveNAK;
				break;
			}
		}

		if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    488a:	8d 2d       	mov	r24, r13
    488c:	81 60       	ori	r24, 0x01	; 1
    488e:	6f 2d       	mov	r22, r15
    4890:	4a df       	rcall	.-364    	; 0x4726 <TWI_StartTransmission>
    4892:	b8 2e       	mov	r11, r24
    4894:	88 23       	and	r24, r24
    4896:	59 f0       	breq	.+22     	; 0x48ae <TWI_ReadPacket+0x6c>
    4898:	12 c0       	rjmp	.+36     	; 0x48be <TWI_ReadPacket+0x7c>
											   TimeoutMS)) == TWI_ERROR_NoError)
		{
			while (Length--)
    489a:	ea 94       	dec	r14
			{
				if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    489c:	61 e0       	ldi	r22, 0x01	; 1
    489e:	09 f0       	breq	.+2      	; 0x48a2 <TWI_ReadPacket+0x60>
    48a0:	60 e0       	ldi	r22, 0x00	; 0
    48a2:	c8 01       	movw	r24, r16
    48a4:	b0 df       	rcall	.-160    	; 0x4806 <TWI_ReceiveByte>
    48a6:	88 23       	and	r24, r24
    48a8:	29 f0       	breq	.+10     	; 0x48b4 <TWI_ReadPacket+0x72>
    48aa:	0f 5f       	subi	r16, 0xFF	; 255
    48ac:	1f 4f       	sbci	r17, 0xFF	; 255
		}

		if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
											   TimeoutMS)) == TWI_ERROR_NoError)
		{
			while (Length--)
    48ae:	ee 20       	and	r14, r14
    48b0:	a1 f7       	brne	.-24     	; 0x489a <TWI_ReadPacket+0x58>
    48b2:	02 c0       	rjmp	.+4      	; 0x48b8 <TWI_ReadPacket+0x76>
			{
				if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
				{
					ErrorCode = TWI_ERROR_SlaveNAK;
    48b4:	85 e0       	ldi	r24, 0x05	; 5
    48b6:	b8 2e       	mov	r11, r24

			/** Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
			static inline void TWI_StopTransmission(void) ATTR_ALWAYS_INLINE;
			static inline void TWI_StopTransmission(void)
			{
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    48b8:	84 e9       	ldi	r24, 0x94	; 148
    48ba:	80 93 bc 00 	sts	0x00BC, r24
			TWI_StopTransmission();
		}
	}

	return ErrorCode;
}
    48be:	8b 2d       	mov	r24, r11
    48c0:	0f 90       	pop	r0
    48c2:	0f 90       	pop	r0
    48c4:	cf 91       	pop	r28
    48c6:	df 91       	pop	r29
    48c8:	1f 91       	pop	r17
    48ca:	0f 91       	pop	r16
    48cc:	ff 90       	pop	r15
    48ce:	ef 90       	pop	r14
    48d0:	df 90       	pop	r13
    48d2:	cf 90       	pop	r12
    48d4:	bf 90       	pop	r11
    48d6:	af 90       	pop	r10
    48d8:	08 95       	ret

000048da <TWI_WritePacket>:
                        const uint8_t TimeoutMS,
                        const uint8_t* InternalAddress,
                        uint8_t InternalAddressLen,
                        const uint8_t* Buffer,
                        uint8_t Length)
{
    48da:	af 92       	push	r10
    48dc:	bf 92       	push	r11
    48de:	df 92       	push	r13
    48e0:	ef 92       	push	r14
    48e2:	ff 92       	push	r15
    48e4:	0f 93       	push	r16
    48e6:	1f 93       	push	r17
    48e8:	df 93       	push	r29
    48ea:	cf 93       	push	r28
    48ec:	00 d0       	rcall	.+0      	; 0x48ee <TWI_WritePacket+0x14>
    48ee:	cd b7       	in	r28, 0x3d	; 61
    48f0:	de b7       	in	r29, 0x3e	; 62
    48f2:	f2 2e       	mov	r15, r18
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    48f4:	8e 7f       	andi	r24, 0xFE	; 254
    48f6:	49 83       	std	Y+1, r20	; 0x01
    48f8:	5a 83       	std	Y+2, r21	; 0x02
    48fa:	15 df       	rcall	.-470    	; 0x4726 <TWI_StartTransmission>
    48fc:	d8 2e       	mov	r13, r24
    48fe:	49 81       	ldd	r20, Y+1	; 0x01
    4900:	5a 81       	ldd	r21, Y+2	; 0x02
    4902:	88 23       	and	r24, r24
    4904:	09 f5       	brne	.+66     	; 0x4948 <TWI_WritePacket+0x6e>
    4906:	5a 01       	movw	r10, r20
    4908:	07 c0       	rjmp	.+14     	; 0x4918 <TWI_WritePacket+0x3e>
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
		{
			if (!(TWI_SendByte(*(InternalAddress++))))
    490a:	f5 01       	movw	r30, r10
    490c:	81 91       	ld	r24, Z+
    490e:	5f 01       	movw	r10, r30
    4910:	69 df       	rcall	.-302    	; 0x47e4 <TWI_SendByte>
    4912:	fa 94       	dec	r15
    4914:	88 23       	and	r24, r24
    4916:	59 f0       	breq	.+22     	; 0x492e <TWI_WritePacket+0x54>
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
    4918:	ff 20       	and	r15, r15
    491a:	b9 f7       	brne	.-18     	; 0x490a <TWI_WritePacket+0x30>
    491c:	0a c0       	rjmp	.+20     	; 0x4932 <TWI_WritePacket+0x58>
			}
		}

		while (Length--)
		{
			if (!(TWI_SendByte(*(Buffer++))))
    491e:	f8 01       	movw	r30, r16
    4920:	81 91       	ld	r24, Z+
    4922:	8f 01       	movw	r16, r30
    4924:	5f df       	rcall	.-322    	; 0x47e4 <TWI_SendByte>
    4926:	ea 94       	dec	r14
    4928:	88 23       	and	r24, r24
    492a:	31 f4       	brne	.+12     	; 0x4938 <TWI_WritePacket+0x5e>
    492c:	08 c0       	rjmp	.+16     	; 0x493e <TWI_WritePacket+0x64>
	{
		while (InternalAddressLen--)
		{
			if (!(TWI_SendByte(*(InternalAddress++))))
			{
				ErrorCode = TWI_ERROR_SlaveNAK;
    492e:	25 e0       	ldi	r18, 0x05	; 5
    4930:	d2 2e       	mov	r13, r18
			}
		}

		while (Length--)
		{
			if (!(TWI_SendByte(*(Buffer++))))
    4932:	40 2f       	mov	r20, r16
    4934:	51 2f       	mov	r21, r17
    4936:	8a 01       	movw	r16, r20
				ErrorCode = TWI_ERROR_SlaveNAK;
				break;
			}
		}

		while (Length--)
    4938:	ee 20       	and	r14, r14
    493a:	89 f7       	brne	.-30     	; 0x491e <TWI_WritePacket+0x44>
    493c:	02 c0       	rjmp	.+4      	; 0x4942 <TWI_WritePacket+0x68>
		{
			if (!(TWI_SendByte(*(Buffer++))))
			{
				ErrorCode = TWI_ERROR_SlaveNAK;
    493e:	95 e0       	ldi	r25, 0x05	; 5
    4940:	d9 2e       	mov	r13, r25
    4942:	84 e9       	ldi	r24, 0x94	; 148
    4944:	80 93 bc 00 	sts	0x00BC, r24

		TWI_StopTransmission();
	}

	return ErrorCode;
}
    4948:	8d 2d       	mov	r24, r13
    494a:	0f 90       	pop	r0
    494c:	0f 90       	pop	r0
    494e:	cf 91       	pop	r28
    4950:	df 91       	pop	r29
    4952:	1f 91       	pop	r17
    4954:	0f 91       	pop	r16
    4956:	ff 90       	pop	r15
    4958:	ef 90       	pop	r14
    495a:	df 90       	pop	r13
    495c:	bf 90       	pop	r11
    495e:	af 90       	pop	r10
    4960:	08 95       	ret

00004962 <Temperature_GetTemperature>:
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
    4962:	80 e4       	ldi	r24, 0x40	; 64
    4964:	80 93 7c 00 	sts	0x007C, r24
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
    4968:	80 91 7a 00 	lds	r24, 0x007A
    496c:	80 64       	ori	r24, 0x40	; 64
    496e:	80 93 7a 00 	sts	0x007A, r24
			 *          complete and ready to be read out with \ref ADC_GetResult().
			 */
			static inline bool ADC_IsReadingComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool ADC_IsReadingComplete(void)
			{
				return ((ADCSRA & (1 << ADIF)) ? true : false);
    4972:	80 91 7a 00 	lds	r24, 0x007A
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask) ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask)
			{
				ADC_StartReading(MUXMask);

				while (!(ADC_IsReadingComplete()));
    4976:	84 ff       	sbrs	r24, 4
    4978:	fc cf       	rjmp	.-8      	; 0x4972 <Temperature_GetTemperature+0x10>
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
    497a:	80 91 7a 00 	lds	r24, 0x007A
    497e:	80 61       	ori	r24, 0x10	; 16
    4980:	80 93 7a 00 	sts	0x007A, r24
				return ADC;
    4984:	20 91 78 00 	lds	r18, 0x0078
    4988:	30 91 79 00 	lds	r19, 0x0079

int8_t Temperature_GetTemperature(void)
{
	uint16_t Temp_ADC = ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | TEMP_ADC_CHANNEL_MASK);

	if (Temp_ADC > pgm_read_word(&Temperature_Lookup[0]))
    498c:	e1 e5       	ldi	r30, 0x51	; 81
    498e:	f1 e0       	ldi	r31, 0x01	; 1
    4990:	85 91       	lpm	r24, Z+
    4992:	94 91       	lpm	r25, Z+
    4994:	82 17       	cp	r24, r18
    4996:	93 07       	cpc	r25, r19
    4998:	a0 f0       	brcs	.+40     	; 0x49c2 <Temperature_GetTemperature+0x60>
    499a:	80 e0       	ldi	r24, 0x00	; 0
    499c:	90 e0       	ldi	r25, 0x00	; 0
	  return TEMP_MIN_TEMP;

	for (uint16_t Index = 0; Index < TEMP_TABLE_SIZE; Index++)
	{
		if (Temp_ADC > pgm_read_word(&Temperature_Lookup[Index]))
    499e:	fc 01       	movw	r30, r24
    49a0:	ee 0f       	add	r30, r30
    49a2:	ff 1f       	adc	r31, r31
    49a4:	ef 5a       	subi	r30, 0xAF	; 175
    49a6:	fe 4f       	sbci	r31, 0xFE	; 254
    49a8:	45 91       	lpm	r20, Z+
    49aa:	54 91       	lpm	r21, Z+
    49ac:	42 17       	cp	r20, r18
    49ae:	53 07       	cpc	r21, r19
    49b0:	10 f4       	brcc	.+4      	; 0x49b6 <Temperature_GetTemperature+0x54>
		  return (Index + TEMP_TABLE_OFFSET_DEGREES);
    49b2:	85 51       	subi	r24, 0x15	; 21
    49b4:	08 95       	ret
	uint16_t Temp_ADC = ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | TEMP_ADC_CHANNEL_MASK);

	if (Temp_ADC > pgm_read_word(&Temperature_Lookup[0]))
	  return TEMP_MIN_TEMP;

	for (uint16_t Index = 0; Index < TEMP_TABLE_SIZE; Index++)
    49b6:	01 96       	adiw	r24, 0x01	; 1
    49b8:	88 37       	cpi	r24, 0x78	; 120
    49ba:	91 05       	cpc	r25, r1
    49bc:	81 f7       	brne	.-32     	; 0x499e <Temperature_GetTemperature+0x3c>
	{
		if (Temp_ADC > pgm_read_word(&Temperature_Lookup[Index]))
		  return (Index + TEMP_TABLE_OFFSET_DEGREES);
	}

	return TEMP_MAX_TEMP;
    49be:	82 e6       	ldi	r24, 0x62	; 98
    49c0:	08 95       	ret
int8_t Temperature_GetTemperature(void)
{
	uint16_t Temp_ADC = ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | TEMP_ADC_CHANNEL_MASK);

	if (Temp_ADC > pgm_read_word(&Temperature_Lookup[0]))
	  return TEMP_MIN_TEMP;
    49c2:	8b ee       	ldi	r24, 0xEB	; 235
		if (Temp_ADC > pgm_read_word(&Temperature_Lookup[Index]))
		  return (Index + TEMP_TABLE_OFFSET_DEGREES);
	}

	return TEMP_MAX_TEMP;
}
    49c4:	08 95       	ret

000049c6 <__mulsi3>:
    49c6:	62 9f       	mul	r22, r18
    49c8:	d0 01       	movw	r26, r0
    49ca:	73 9f       	mul	r23, r19
    49cc:	f0 01       	movw	r30, r0
    49ce:	82 9f       	mul	r24, r18
    49d0:	e0 0d       	add	r30, r0
    49d2:	f1 1d       	adc	r31, r1
    49d4:	64 9f       	mul	r22, r20
    49d6:	e0 0d       	add	r30, r0
    49d8:	f1 1d       	adc	r31, r1
    49da:	92 9f       	mul	r25, r18
    49dc:	f0 0d       	add	r31, r0
    49de:	83 9f       	mul	r24, r19
    49e0:	f0 0d       	add	r31, r0
    49e2:	74 9f       	mul	r23, r20
    49e4:	f0 0d       	add	r31, r0
    49e6:	65 9f       	mul	r22, r21
    49e8:	f0 0d       	add	r31, r0
    49ea:	99 27       	eor	r25, r25
    49ec:	72 9f       	mul	r23, r18
    49ee:	b0 0d       	add	r27, r0
    49f0:	e1 1d       	adc	r30, r1
    49f2:	f9 1f       	adc	r31, r25
    49f4:	63 9f       	mul	r22, r19
    49f6:	b0 0d       	add	r27, r0
    49f8:	e1 1d       	adc	r30, r1
    49fa:	f9 1f       	adc	r31, r25
    49fc:	bd 01       	movw	r22, r26
    49fe:	cf 01       	movw	r24, r30
    4a00:	11 24       	eor	r1, r1
    4a02:	08 95       	ret

00004a04 <__udivmodqi4>:
    4a04:	99 1b       	sub	r25, r25
    4a06:	79 e0       	ldi	r23, 0x09	; 9
    4a08:	04 c0       	rjmp	.+8      	; 0x4a12 <__udivmodqi4_ep>

00004a0a <__udivmodqi4_loop>:
    4a0a:	99 1f       	adc	r25, r25
    4a0c:	96 17       	cp	r25, r22
    4a0e:	08 f0       	brcs	.+2      	; 0x4a12 <__udivmodqi4_ep>
    4a10:	96 1b       	sub	r25, r22

00004a12 <__udivmodqi4_ep>:
    4a12:	88 1f       	adc	r24, r24
    4a14:	7a 95       	dec	r23
    4a16:	c9 f7       	brne	.-14     	; 0x4a0a <__udivmodqi4_loop>
    4a18:	80 95       	com	r24
    4a1a:	08 95       	ret

00004a1c <__udivmodsi4>:
    4a1c:	a1 e2       	ldi	r26, 0x21	; 33
    4a1e:	1a 2e       	mov	r1, r26
    4a20:	aa 1b       	sub	r26, r26
    4a22:	bb 1b       	sub	r27, r27
    4a24:	fd 01       	movw	r30, r26
    4a26:	0d c0       	rjmp	.+26     	; 0x4a42 <__udivmodsi4_ep>

00004a28 <__udivmodsi4_loop>:
    4a28:	aa 1f       	adc	r26, r26
    4a2a:	bb 1f       	adc	r27, r27
    4a2c:	ee 1f       	adc	r30, r30
    4a2e:	ff 1f       	adc	r31, r31
    4a30:	a2 17       	cp	r26, r18
    4a32:	b3 07       	cpc	r27, r19
    4a34:	e4 07       	cpc	r30, r20
    4a36:	f5 07       	cpc	r31, r21
    4a38:	20 f0       	brcs	.+8      	; 0x4a42 <__udivmodsi4_ep>
    4a3a:	a2 1b       	sub	r26, r18
    4a3c:	b3 0b       	sbc	r27, r19
    4a3e:	e4 0b       	sbc	r30, r20
    4a40:	f5 0b       	sbc	r31, r21

00004a42 <__udivmodsi4_ep>:
    4a42:	66 1f       	adc	r22, r22
    4a44:	77 1f       	adc	r23, r23
    4a46:	88 1f       	adc	r24, r24
    4a48:	99 1f       	adc	r25, r25
    4a4a:	1a 94       	dec	r1
    4a4c:	69 f7       	brne	.-38     	; 0x4a28 <__udivmodsi4_loop>
    4a4e:	60 95       	com	r22
    4a50:	70 95       	com	r23
    4a52:	80 95       	com	r24
    4a54:	90 95       	com	r25
    4a56:	9b 01       	movw	r18, r22
    4a58:	ac 01       	movw	r20, r24
    4a5a:	bd 01       	movw	r22, r26
    4a5c:	cf 01       	movw	r24, r30
    4a5e:	08 95       	ret

00004a60 <memcmp>:
    4a60:	fb 01       	movw	r30, r22
    4a62:	dc 01       	movw	r26, r24
    4a64:	04 c0       	rjmp	.+8      	; 0x4a6e <memcmp+0xe>
    4a66:	8d 91       	ld	r24, X+
    4a68:	01 90       	ld	r0, Z+
    4a6a:	80 19       	sub	r24, r0
    4a6c:	21 f4       	brne	.+8      	; 0x4a76 <memcmp+0x16>
    4a6e:	41 50       	subi	r20, 0x01	; 1
    4a70:	50 40       	sbci	r21, 0x00	; 0
    4a72:	c8 f7       	brcc	.-14     	; 0x4a66 <memcmp+0x6>
    4a74:	88 1b       	sub	r24, r24
    4a76:	99 0b       	sbc	r25, r25
    4a78:	08 95       	ret

00004a7a <memcpy>:
    4a7a:	fb 01       	movw	r30, r22
    4a7c:	dc 01       	movw	r26, r24
    4a7e:	02 c0       	rjmp	.+4      	; 0x4a84 <memcpy+0xa>
    4a80:	01 90       	ld	r0, Z+
    4a82:	0d 92       	st	X+, r0
    4a84:	41 50       	subi	r20, 0x01	; 1
    4a86:	50 40       	sbci	r21, 0x00	; 0
    4a88:	d8 f7       	brcc	.-10     	; 0x4a80 <memcpy+0x6>
    4a8a:	08 95       	ret

00004a8c <memset>:
    4a8c:	dc 01       	movw	r26, r24
    4a8e:	01 c0       	rjmp	.+2      	; 0x4a92 <memset+0x6>
    4a90:	6d 93       	st	X+, r22
    4a92:	41 50       	subi	r20, 0x01	; 1
    4a94:	50 40       	sbci	r21, 0x00	; 0
    4a96:	e0 f7       	brcc	.-8      	; 0x4a90 <memset+0x4>
    4a98:	08 95       	ret

00004a9a <sprintf>:
    4a9a:	0f 93       	push	r16
    4a9c:	1f 93       	push	r17
    4a9e:	df 93       	push	r29
    4aa0:	cf 93       	push	r28
    4aa2:	cd b7       	in	r28, 0x3d	; 61
    4aa4:	de b7       	in	r29, 0x3e	; 62
    4aa6:	2e 97       	sbiw	r28, 0x0e	; 14
    4aa8:	0f b6       	in	r0, 0x3f	; 63
    4aaa:	f8 94       	cli
    4aac:	de bf       	out	0x3e, r29	; 62
    4aae:	0f be       	out	0x3f, r0	; 63
    4ab0:	cd bf       	out	0x3d, r28	; 61
    4ab2:	0d 89       	ldd	r16, Y+21	; 0x15
    4ab4:	1e 89       	ldd	r17, Y+22	; 0x16
    4ab6:	86 e0       	ldi	r24, 0x06	; 6
    4ab8:	8c 83       	std	Y+4, r24	; 0x04
    4aba:	1a 83       	std	Y+2, r17	; 0x02
    4abc:	09 83       	std	Y+1, r16	; 0x01
    4abe:	8f ef       	ldi	r24, 0xFF	; 255
    4ac0:	9f e7       	ldi	r25, 0x7F	; 127
    4ac2:	9e 83       	std	Y+6, r25	; 0x06
    4ac4:	8d 83       	std	Y+5, r24	; 0x05
    4ac6:	9e 01       	movw	r18, r28
    4ac8:	27 5e       	subi	r18, 0xE7	; 231
    4aca:	3f 4f       	sbci	r19, 0xFF	; 255
    4acc:	ce 01       	movw	r24, r28
    4ace:	01 96       	adiw	r24, 0x01	; 1
    4ad0:	6f 89       	ldd	r22, Y+23	; 0x17
    4ad2:	78 8d       	ldd	r23, Y+24	; 0x18
    4ad4:	a9 01       	movw	r20, r18
    4ad6:	10 d0       	rcall	.+32     	; 0x4af8 <vfprintf>
    4ad8:	ef 81       	ldd	r30, Y+7	; 0x07
    4ada:	f8 85       	ldd	r31, Y+8	; 0x08
    4adc:	e0 0f       	add	r30, r16
    4ade:	f1 1f       	adc	r31, r17
    4ae0:	10 82       	st	Z, r1
    4ae2:	2e 96       	adiw	r28, 0x0e	; 14
    4ae4:	0f b6       	in	r0, 0x3f	; 63
    4ae6:	f8 94       	cli
    4ae8:	de bf       	out	0x3e, r29	; 62
    4aea:	0f be       	out	0x3f, r0	; 63
    4aec:	cd bf       	out	0x3d, r28	; 61
    4aee:	cf 91       	pop	r28
    4af0:	df 91       	pop	r29
    4af2:	1f 91       	pop	r17
    4af4:	0f 91       	pop	r16
    4af6:	08 95       	ret

00004af8 <vfprintf>:
    4af8:	2f 92       	push	r2
    4afa:	3f 92       	push	r3
    4afc:	4f 92       	push	r4
    4afe:	5f 92       	push	r5
    4b00:	6f 92       	push	r6
    4b02:	7f 92       	push	r7
    4b04:	8f 92       	push	r8
    4b06:	9f 92       	push	r9
    4b08:	af 92       	push	r10
    4b0a:	bf 92       	push	r11
    4b0c:	cf 92       	push	r12
    4b0e:	df 92       	push	r13
    4b10:	ef 92       	push	r14
    4b12:	ff 92       	push	r15
    4b14:	0f 93       	push	r16
    4b16:	1f 93       	push	r17
    4b18:	df 93       	push	r29
    4b1a:	cf 93       	push	r28
    4b1c:	cd b7       	in	r28, 0x3d	; 61
    4b1e:	de b7       	in	r29, 0x3e	; 62
    4b20:	2c 97       	sbiw	r28, 0x0c	; 12
    4b22:	0f b6       	in	r0, 0x3f	; 63
    4b24:	f8 94       	cli
    4b26:	de bf       	out	0x3e, r29	; 62
    4b28:	0f be       	out	0x3f, r0	; 63
    4b2a:	cd bf       	out	0x3d, r28	; 61
    4b2c:	6c 01       	movw	r12, r24
    4b2e:	1b 01       	movw	r2, r22
    4b30:	8a 01       	movw	r16, r20
    4b32:	fc 01       	movw	r30, r24
    4b34:	17 82       	std	Z+7, r1	; 0x07
    4b36:	16 82       	std	Z+6, r1	; 0x06
    4b38:	83 81       	ldd	r24, Z+3	; 0x03
    4b3a:	81 ff       	sbrs	r24, 1
    4b3c:	c4 c1       	rjmp	.+904    	; 0x4ec6 <vfprintf+0x3ce>
    4b3e:	2e 01       	movw	r4, r28
    4b40:	08 94       	sec
    4b42:	41 1c       	adc	r4, r1
    4b44:	51 1c       	adc	r5, r1
    4b46:	f6 01       	movw	r30, r12
    4b48:	93 81       	ldd	r25, Z+3	; 0x03
    4b4a:	f1 01       	movw	r30, r2
    4b4c:	93 fd       	sbrc	r25, 3
    4b4e:	85 91       	lpm	r24, Z+
    4b50:	93 ff       	sbrs	r25, 3
    4b52:	81 91       	ld	r24, Z+
    4b54:	1f 01       	movw	r2, r30
    4b56:	88 23       	and	r24, r24
    4b58:	09 f4       	brne	.+2      	; 0x4b5c <vfprintf+0x64>
    4b5a:	b1 c1       	rjmp	.+866    	; 0x4ebe <vfprintf+0x3c6>
    4b5c:	85 32       	cpi	r24, 0x25	; 37
    4b5e:	39 f4       	brne	.+14     	; 0x4b6e <vfprintf+0x76>
    4b60:	93 fd       	sbrc	r25, 3
    4b62:	85 91       	lpm	r24, Z+
    4b64:	93 ff       	sbrs	r25, 3
    4b66:	81 91       	ld	r24, Z+
    4b68:	1f 01       	movw	r2, r30
    4b6a:	85 32       	cpi	r24, 0x25	; 37
    4b6c:	21 f4       	brne	.+8      	; 0x4b76 <vfprintf+0x7e>
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	b6 01       	movw	r22, r12
    4b72:	f5 d1       	rcall	.+1002   	; 0x4f5e <fputc>
    4b74:	e8 cf       	rjmp	.-48     	; 0x4b46 <vfprintf+0x4e>
    4b76:	ee 24       	eor	r14, r14
    4b78:	ff 24       	eor	r15, r15
    4b7a:	20 e0       	ldi	r18, 0x00	; 0
    4b7c:	20 32       	cpi	r18, 0x20	; 32
    4b7e:	b0 f4       	brcc	.+44     	; 0x4bac <vfprintf+0xb4>
    4b80:	8b 32       	cpi	r24, 0x2B	; 43
    4b82:	69 f0       	breq	.+26     	; 0x4b9e <vfprintf+0xa6>
    4b84:	8c 32       	cpi	r24, 0x2C	; 44
    4b86:	28 f4       	brcc	.+10     	; 0x4b92 <vfprintf+0x9a>
    4b88:	80 32       	cpi	r24, 0x20	; 32
    4b8a:	51 f0       	breq	.+20     	; 0x4ba0 <vfprintf+0xa8>
    4b8c:	83 32       	cpi	r24, 0x23	; 35
    4b8e:	71 f4       	brne	.+28     	; 0x4bac <vfprintf+0xb4>
    4b90:	0b c0       	rjmp	.+22     	; 0x4ba8 <vfprintf+0xb0>
    4b92:	8d 32       	cpi	r24, 0x2D	; 45
    4b94:	39 f0       	breq	.+14     	; 0x4ba4 <vfprintf+0xac>
    4b96:	80 33       	cpi	r24, 0x30	; 48
    4b98:	49 f4       	brne	.+18     	; 0x4bac <vfprintf+0xb4>
    4b9a:	21 60       	ori	r18, 0x01	; 1
    4b9c:	2c c0       	rjmp	.+88     	; 0x4bf6 <vfprintf+0xfe>
    4b9e:	22 60       	ori	r18, 0x02	; 2
    4ba0:	24 60       	ori	r18, 0x04	; 4
    4ba2:	29 c0       	rjmp	.+82     	; 0x4bf6 <vfprintf+0xfe>
    4ba4:	28 60       	ori	r18, 0x08	; 8
    4ba6:	27 c0       	rjmp	.+78     	; 0x4bf6 <vfprintf+0xfe>
    4ba8:	20 61       	ori	r18, 0x10	; 16
    4baa:	25 c0       	rjmp	.+74     	; 0x4bf6 <vfprintf+0xfe>
    4bac:	27 fd       	sbrc	r18, 7
    4bae:	2c c0       	rjmp	.+88     	; 0x4c08 <vfprintf+0x110>
    4bb0:	38 2f       	mov	r19, r24
    4bb2:	30 53       	subi	r19, 0x30	; 48
    4bb4:	3a 30       	cpi	r19, 0x0A	; 10
    4bb6:	98 f4       	brcc	.+38     	; 0x4bde <vfprintf+0xe6>
    4bb8:	26 ff       	sbrs	r18, 6
    4bba:	08 c0       	rjmp	.+16     	; 0x4bcc <vfprintf+0xd4>
    4bbc:	8e 2d       	mov	r24, r14
    4bbe:	88 0f       	add	r24, r24
    4bc0:	e8 2e       	mov	r14, r24
    4bc2:	ee 0c       	add	r14, r14
    4bc4:	ee 0c       	add	r14, r14
    4bc6:	e8 0e       	add	r14, r24
    4bc8:	e3 0e       	add	r14, r19
    4bca:	15 c0       	rjmp	.+42     	; 0x4bf6 <vfprintf+0xfe>
    4bcc:	8f 2d       	mov	r24, r15
    4bce:	88 0f       	add	r24, r24
    4bd0:	f8 2e       	mov	r15, r24
    4bd2:	ff 0c       	add	r15, r15
    4bd4:	ff 0c       	add	r15, r15
    4bd6:	f8 0e       	add	r15, r24
    4bd8:	f3 0e       	add	r15, r19
    4bda:	20 62       	ori	r18, 0x20	; 32
    4bdc:	0c c0       	rjmp	.+24     	; 0x4bf6 <vfprintf+0xfe>
    4bde:	8e 32       	cpi	r24, 0x2E	; 46
    4be0:	21 f4       	brne	.+8      	; 0x4bea <vfprintf+0xf2>
    4be2:	26 fd       	sbrc	r18, 6
    4be4:	6c c1       	rjmp	.+728    	; 0x4ebe <vfprintf+0x3c6>
    4be6:	20 64       	ori	r18, 0x40	; 64
    4be8:	06 c0       	rjmp	.+12     	; 0x4bf6 <vfprintf+0xfe>
    4bea:	8c 36       	cpi	r24, 0x6C	; 108
    4bec:	11 f4       	brne	.+4      	; 0x4bf2 <vfprintf+0xfa>
    4bee:	20 68       	ori	r18, 0x80	; 128
    4bf0:	02 c0       	rjmp	.+4      	; 0x4bf6 <vfprintf+0xfe>
    4bf2:	88 36       	cpi	r24, 0x68	; 104
    4bf4:	49 f4       	brne	.+18     	; 0x4c08 <vfprintf+0x110>
    4bf6:	f1 01       	movw	r30, r2
    4bf8:	93 fd       	sbrc	r25, 3
    4bfa:	85 91       	lpm	r24, Z+
    4bfc:	93 ff       	sbrs	r25, 3
    4bfe:	81 91       	ld	r24, Z+
    4c00:	1f 01       	movw	r2, r30
    4c02:	88 23       	and	r24, r24
    4c04:	09 f0       	breq	.+2      	; 0x4c08 <vfprintf+0x110>
    4c06:	ba cf       	rjmp	.-140    	; 0x4b7c <vfprintf+0x84>
    4c08:	98 2f       	mov	r25, r24
    4c0a:	95 54       	subi	r25, 0x45	; 69
    4c0c:	93 30       	cpi	r25, 0x03	; 3
    4c0e:	18 f0       	brcs	.+6      	; 0x4c16 <vfprintf+0x11e>
    4c10:	90 52       	subi	r25, 0x20	; 32
    4c12:	93 30       	cpi	r25, 0x03	; 3
    4c14:	28 f4       	brcc	.+10     	; 0x4c20 <vfprintf+0x128>
    4c16:	0c 5f       	subi	r16, 0xFC	; 252
    4c18:	1f 4f       	sbci	r17, 0xFF	; 255
    4c1a:	ff e3       	ldi	r31, 0x3F	; 63
    4c1c:	f9 83       	std	Y+1, r31	; 0x01
    4c1e:	0d c0       	rjmp	.+26     	; 0x4c3a <vfprintf+0x142>
    4c20:	83 36       	cpi	r24, 0x63	; 99
    4c22:	31 f0       	breq	.+12     	; 0x4c30 <vfprintf+0x138>
    4c24:	83 37       	cpi	r24, 0x73	; 115
    4c26:	71 f0       	breq	.+28     	; 0x4c44 <vfprintf+0x14c>
    4c28:	83 35       	cpi	r24, 0x53	; 83
    4c2a:	09 f0       	breq	.+2      	; 0x4c2e <vfprintf+0x136>
    4c2c:	5c c0       	rjmp	.+184    	; 0x4ce6 <vfprintf+0x1ee>
    4c2e:	21 c0       	rjmp	.+66     	; 0x4c72 <vfprintf+0x17a>
    4c30:	f8 01       	movw	r30, r16
    4c32:	80 81       	ld	r24, Z
    4c34:	89 83       	std	Y+1, r24	; 0x01
    4c36:	0e 5f       	subi	r16, 0xFE	; 254
    4c38:	1f 4f       	sbci	r17, 0xFF	; 255
    4c3a:	42 01       	movw	r8, r4
    4c3c:	71 e0       	ldi	r23, 0x01	; 1
    4c3e:	a7 2e       	mov	r10, r23
    4c40:	b1 2c       	mov	r11, r1
    4c42:	15 c0       	rjmp	.+42     	; 0x4c6e <vfprintf+0x176>
    4c44:	62 e0       	ldi	r22, 0x02	; 2
    4c46:	66 2e       	mov	r6, r22
    4c48:	71 2c       	mov	r7, r1
    4c4a:	60 0e       	add	r6, r16
    4c4c:	71 1e       	adc	r7, r17
    4c4e:	f8 01       	movw	r30, r16
    4c50:	80 80       	ld	r8, Z
    4c52:	91 80       	ldd	r9, Z+1	; 0x01
    4c54:	26 ff       	sbrs	r18, 6
    4c56:	03 c0       	rjmp	.+6      	; 0x4c5e <vfprintf+0x166>
    4c58:	6e 2d       	mov	r22, r14
    4c5a:	70 e0       	ldi	r23, 0x00	; 0
    4c5c:	02 c0       	rjmp	.+4      	; 0x4c62 <vfprintf+0x16a>
    4c5e:	6f ef       	ldi	r22, 0xFF	; 255
    4c60:	7f ef       	ldi	r23, 0xFF	; 255
    4c62:	c4 01       	movw	r24, r8
    4c64:	2c 87       	std	Y+12, r18	; 0x0c
    4c66:	70 d1       	rcall	.+736    	; 0x4f48 <strnlen>
    4c68:	5c 01       	movw	r10, r24
    4c6a:	83 01       	movw	r16, r6
    4c6c:	2c 85       	ldd	r18, Y+12	; 0x0c
    4c6e:	2f 77       	andi	r18, 0x7F	; 127
    4c70:	16 c0       	rjmp	.+44     	; 0x4c9e <vfprintf+0x1a6>
    4c72:	52 e0       	ldi	r21, 0x02	; 2
    4c74:	65 2e       	mov	r6, r21
    4c76:	71 2c       	mov	r7, r1
    4c78:	60 0e       	add	r6, r16
    4c7a:	71 1e       	adc	r7, r17
    4c7c:	f8 01       	movw	r30, r16
    4c7e:	80 80       	ld	r8, Z
    4c80:	91 80       	ldd	r9, Z+1	; 0x01
    4c82:	26 ff       	sbrs	r18, 6
    4c84:	03 c0       	rjmp	.+6      	; 0x4c8c <vfprintf+0x194>
    4c86:	6e 2d       	mov	r22, r14
    4c88:	70 e0       	ldi	r23, 0x00	; 0
    4c8a:	02 c0       	rjmp	.+4      	; 0x4c90 <vfprintf+0x198>
    4c8c:	6f ef       	ldi	r22, 0xFF	; 255
    4c8e:	7f ef       	ldi	r23, 0xFF	; 255
    4c90:	c4 01       	movw	r24, r8
    4c92:	2c 87       	std	Y+12, r18	; 0x0c
    4c94:	4e d1       	rcall	.+668    	; 0x4f32 <strnlen_P>
    4c96:	5c 01       	movw	r10, r24
    4c98:	2c 85       	ldd	r18, Y+12	; 0x0c
    4c9a:	20 68       	ori	r18, 0x80	; 128
    4c9c:	83 01       	movw	r16, r6
    4c9e:	23 fd       	sbrc	r18, 3
    4ca0:	1e c0       	rjmp	.+60     	; 0x4cde <vfprintf+0x1e6>
    4ca2:	07 c0       	rjmp	.+14     	; 0x4cb2 <vfprintf+0x1ba>
    4ca4:	80 e2       	ldi	r24, 0x20	; 32
    4ca6:	90 e0       	ldi	r25, 0x00	; 0
    4ca8:	b6 01       	movw	r22, r12
    4caa:	2c 87       	std	Y+12, r18	; 0x0c
    4cac:	58 d1       	rcall	.+688    	; 0x4f5e <fputc>
    4cae:	fa 94       	dec	r15
    4cb0:	2c 85       	ldd	r18, Y+12	; 0x0c
    4cb2:	8f 2d       	mov	r24, r15
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	a8 16       	cp	r10, r24
    4cb8:	b9 06       	cpc	r11, r25
    4cba:	a0 f3       	brcs	.-24     	; 0x4ca4 <vfprintf+0x1ac>
    4cbc:	10 c0       	rjmp	.+32     	; 0x4cde <vfprintf+0x1e6>
    4cbe:	f4 01       	movw	r30, r8
    4cc0:	27 fd       	sbrc	r18, 7
    4cc2:	85 91       	lpm	r24, Z+
    4cc4:	27 ff       	sbrs	r18, 7
    4cc6:	81 91       	ld	r24, Z+
    4cc8:	4f 01       	movw	r8, r30
    4cca:	90 e0       	ldi	r25, 0x00	; 0
    4ccc:	b6 01       	movw	r22, r12
    4cce:	2c 87       	std	Y+12, r18	; 0x0c
    4cd0:	46 d1       	rcall	.+652    	; 0x4f5e <fputc>
    4cd2:	2c 85       	ldd	r18, Y+12	; 0x0c
    4cd4:	f1 10       	cpse	r15, r1
    4cd6:	fa 94       	dec	r15
    4cd8:	08 94       	sec
    4cda:	a1 08       	sbc	r10, r1
    4cdc:	b1 08       	sbc	r11, r1
    4cde:	a1 14       	cp	r10, r1
    4ce0:	b1 04       	cpc	r11, r1
    4ce2:	69 f7       	brne	.-38     	; 0x4cbe <vfprintf+0x1c6>
    4ce4:	e9 c0       	rjmp	.+466    	; 0x4eb8 <vfprintf+0x3c0>
    4ce6:	84 36       	cpi	r24, 0x64	; 100
    4ce8:	11 f0       	breq	.+4      	; 0x4cee <vfprintf+0x1f6>
    4cea:	89 36       	cpi	r24, 0x69	; 105
    4cec:	41 f5       	brne	.+80     	; 0x4d3e <vfprintf+0x246>
    4cee:	27 ff       	sbrs	r18, 7
    4cf0:	08 c0       	rjmp	.+16     	; 0x4d02 <vfprintf+0x20a>
    4cf2:	f8 01       	movw	r30, r16
    4cf4:	60 81       	ld	r22, Z
    4cf6:	71 81       	ldd	r23, Z+1	; 0x01
    4cf8:	82 81       	ldd	r24, Z+2	; 0x02
    4cfa:	93 81       	ldd	r25, Z+3	; 0x03
    4cfc:	0c 5f       	subi	r16, 0xFC	; 252
    4cfe:	1f 4f       	sbci	r17, 0xFF	; 255
    4d00:	09 c0       	rjmp	.+18     	; 0x4d14 <vfprintf+0x21c>
    4d02:	f8 01       	movw	r30, r16
    4d04:	60 81       	ld	r22, Z
    4d06:	71 81       	ldd	r23, Z+1	; 0x01
    4d08:	88 27       	eor	r24, r24
    4d0a:	77 fd       	sbrc	r23, 7
    4d0c:	80 95       	com	r24
    4d0e:	98 2f       	mov	r25, r24
    4d10:	0e 5f       	subi	r16, 0xFE	; 254
    4d12:	1f 4f       	sbci	r17, 0xFF	; 255
    4d14:	4f e6       	ldi	r20, 0x6F	; 111
    4d16:	b4 2e       	mov	r11, r20
    4d18:	b2 22       	and	r11, r18
    4d1a:	97 ff       	sbrs	r25, 7
    4d1c:	09 c0       	rjmp	.+18     	; 0x4d30 <vfprintf+0x238>
    4d1e:	90 95       	com	r25
    4d20:	80 95       	com	r24
    4d22:	70 95       	com	r23
    4d24:	61 95       	neg	r22
    4d26:	7f 4f       	sbci	r23, 0xFF	; 255
    4d28:	8f 4f       	sbci	r24, 0xFF	; 255
    4d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    4d2c:	f0 e8       	ldi	r31, 0x80	; 128
    4d2e:	bf 2a       	or	r11, r31
    4d30:	a2 01       	movw	r20, r4
    4d32:	2a e0       	ldi	r18, 0x0A	; 10
    4d34:	30 e0       	ldi	r19, 0x00	; 0
    4d36:	3f d1       	rcall	.+638    	; 0x4fb6 <__ultoa_invert>
    4d38:	78 2e       	mov	r7, r24
    4d3a:	74 18       	sub	r7, r4
    4d3c:	44 c0       	rjmp	.+136    	; 0x4dc6 <vfprintf+0x2ce>
    4d3e:	85 37       	cpi	r24, 0x75	; 117
    4d40:	31 f4       	brne	.+12     	; 0x4d4e <vfprintf+0x256>
    4d42:	3f ee       	ldi	r19, 0xEF	; 239
    4d44:	b3 2e       	mov	r11, r19
    4d46:	b2 22       	and	r11, r18
    4d48:	2a e0       	ldi	r18, 0x0A	; 10
    4d4a:	30 e0       	ldi	r19, 0x00	; 0
    4d4c:	25 c0       	rjmp	.+74     	; 0x4d98 <vfprintf+0x2a0>
    4d4e:	99 ef       	ldi	r25, 0xF9	; 249
    4d50:	b9 2e       	mov	r11, r25
    4d52:	b2 22       	and	r11, r18
    4d54:	8f 36       	cpi	r24, 0x6F	; 111
    4d56:	c1 f0       	breq	.+48     	; 0x4d88 <vfprintf+0x290>
    4d58:	80 37       	cpi	r24, 0x70	; 112
    4d5a:	20 f4       	brcc	.+8      	; 0x4d64 <vfprintf+0x26c>
    4d5c:	88 35       	cpi	r24, 0x58	; 88
    4d5e:	09 f0       	breq	.+2      	; 0x4d62 <vfprintf+0x26a>
    4d60:	ae c0       	rjmp	.+348    	; 0x4ebe <vfprintf+0x3c6>
    4d62:	0d c0       	rjmp	.+26     	; 0x4d7e <vfprintf+0x286>
    4d64:	80 37       	cpi	r24, 0x70	; 112
    4d66:	21 f0       	breq	.+8      	; 0x4d70 <vfprintf+0x278>
    4d68:	88 37       	cpi	r24, 0x78	; 120
    4d6a:	09 f0       	breq	.+2      	; 0x4d6e <vfprintf+0x276>
    4d6c:	a8 c0       	rjmp	.+336    	; 0x4ebe <vfprintf+0x3c6>
    4d6e:	02 c0       	rjmp	.+4      	; 0x4d74 <vfprintf+0x27c>
    4d70:	20 e1       	ldi	r18, 0x10	; 16
    4d72:	b2 2a       	or	r11, r18
    4d74:	b4 fe       	sbrs	r11, 4
    4d76:	0b c0       	rjmp	.+22     	; 0x4d8e <vfprintf+0x296>
    4d78:	84 e0       	ldi	r24, 0x04	; 4
    4d7a:	b8 2a       	or	r11, r24
    4d7c:	08 c0       	rjmp	.+16     	; 0x4d8e <vfprintf+0x296>
    4d7e:	b4 fe       	sbrs	r11, 4
    4d80:	09 c0       	rjmp	.+18     	; 0x4d94 <vfprintf+0x29c>
    4d82:	e6 e0       	ldi	r30, 0x06	; 6
    4d84:	be 2a       	or	r11, r30
    4d86:	06 c0       	rjmp	.+12     	; 0x4d94 <vfprintf+0x29c>
    4d88:	28 e0       	ldi	r18, 0x08	; 8
    4d8a:	30 e0       	ldi	r19, 0x00	; 0
    4d8c:	05 c0       	rjmp	.+10     	; 0x4d98 <vfprintf+0x2a0>
    4d8e:	20 e1       	ldi	r18, 0x10	; 16
    4d90:	30 e0       	ldi	r19, 0x00	; 0
    4d92:	02 c0       	rjmp	.+4      	; 0x4d98 <vfprintf+0x2a0>
    4d94:	20 e1       	ldi	r18, 0x10	; 16
    4d96:	32 e0       	ldi	r19, 0x02	; 2
    4d98:	b7 fe       	sbrs	r11, 7
    4d9a:	08 c0       	rjmp	.+16     	; 0x4dac <vfprintf+0x2b4>
    4d9c:	f8 01       	movw	r30, r16
    4d9e:	60 81       	ld	r22, Z
    4da0:	71 81       	ldd	r23, Z+1	; 0x01
    4da2:	82 81       	ldd	r24, Z+2	; 0x02
    4da4:	93 81       	ldd	r25, Z+3	; 0x03
    4da6:	0c 5f       	subi	r16, 0xFC	; 252
    4da8:	1f 4f       	sbci	r17, 0xFF	; 255
    4daa:	07 c0       	rjmp	.+14     	; 0x4dba <vfprintf+0x2c2>
    4dac:	f8 01       	movw	r30, r16
    4dae:	60 81       	ld	r22, Z
    4db0:	71 81       	ldd	r23, Z+1	; 0x01
    4db2:	80 e0       	ldi	r24, 0x00	; 0
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	0e 5f       	subi	r16, 0xFE	; 254
    4db8:	1f 4f       	sbci	r17, 0xFF	; 255
    4dba:	a2 01       	movw	r20, r4
    4dbc:	fc d0       	rcall	.+504    	; 0x4fb6 <__ultoa_invert>
    4dbe:	78 2e       	mov	r7, r24
    4dc0:	74 18       	sub	r7, r4
    4dc2:	ff e7       	ldi	r31, 0x7F	; 127
    4dc4:	bf 22       	and	r11, r31
    4dc6:	b6 fe       	sbrs	r11, 6
    4dc8:	0b c0       	rjmp	.+22     	; 0x4de0 <vfprintf+0x2e8>
    4dca:	2e ef       	ldi	r18, 0xFE	; 254
    4dcc:	b2 22       	and	r11, r18
    4dce:	7e 14       	cp	r7, r14
    4dd0:	38 f4       	brcc	.+14     	; 0x4de0 <vfprintf+0x2e8>
    4dd2:	b4 fe       	sbrs	r11, 4
    4dd4:	07 c0       	rjmp	.+14     	; 0x4de4 <vfprintf+0x2ec>
    4dd6:	b2 fc       	sbrc	r11, 2
    4dd8:	05 c0       	rjmp	.+10     	; 0x4de4 <vfprintf+0x2ec>
    4dda:	8f ee       	ldi	r24, 0xEF	; 239
    4ddc:	b8 22       	and	r11, r24
    4dde:	02 c0       	rjmp	.+4      	; 0x4de4 <vfprintf+0x2ec>
    4de0:	a7 2c       	mov	r10, r7
    4de2:	01 c0       	rjmp	.+2      	; 0x4de6 <vfprintf+0x2ee>
    4de4:	ae 2c       	mov	r10, r14
    4de6:	8b 2d       	mov	r24, r11
    4de8:	90 e0       	ldi	r25, 0x00	; 0
    4dea:	b4 fe       	sbrs	r11, 4
    4dec:	0d c0       	rjmp	.+26     	; 0x4e08 <vfprintf+0x310>
    4dee:	fe 01       	movw	r30, r28
    4df0:	e7 0d       	add	r30, r7
    4df2:	f1 1d       	adc	r31, r1
    4df4:	20 81       	ld	r18, Z
    4df6:	20 33       	cpi	r18, 0x30	; 48
    4df8:	19 f4       	brne	.+6      	; 0x4e00 <vfprintf+0x308>
    4dfa:	e9 ee       	ldi	r30, 0xE9	; 233
    4dfc:	be 22       	and	r11, r30
    4dfe:	09 c0       	rjmp	.+18     	; 0x4e12 <vfprintf+0x31a>
    4e00:	a3 94       	inc	r10
    4e02:	b2 fe       	sbrs	r11, 2
    4e04:	06 c0       	rjmp	.+12     	; 0x4e12 <vfprintf+0x31a>
    4e06:	04 c0       	rjmp	.+8      	; 0x4e10 <vfprintf+0x318>
    4e08:	86 78       	andi	r24, 0x86	; 134
    4e0a:	90 70       	andi	r25, 0x00	; 0
    4e0c:	00 97       	sbiw	r24, 0x00	; 0
    4e0e:	09 f0       	breq	.+2      	; 0x4e12 <vfprintf+0x31a>
    4e10:	a3 94       	inc	r10
    4e12:	8b 2c       	mov	r8, r11
    4e14:	99 24       	eor	r9, r9
    4e16:	b3 fc       	sbrc	r11, 3
    4e18:	13 c0       	rjmp	.+38     	; 0x4e40 <vfprintf+0x348>
    4e1a:	b0 fe       	sbrs	r11, 0
    4e1c:	0e c0       	rjmp	.+28     	; 0x4e3a <vfprintf+0x342>
    4e1e:	af 14       	cp	r10, r15
    4e20:	28 f4       	brcc	.+10     	; 0x4e2c <vfprintf+0x334>
    4e22:	e7 2c       	mov	r14, r7
    4e24:	ef 0c       	add	r14, r15
    4e26:	ea 18       	sub	r14, r10
    4e28:	af 2c       	mov	r10, r15
    4e2a:	07 c0       	rjmp	.+14     	; 0x4e3a <vfprintf+0x342>
    4e2c:	e7 2c       	mov	r14, r7
    4e2e:	05 c0       	rjmp	.+10     	; 0x4e3a <vfprintf+0x342>
    4e30:	80 e2       	ldi	r24, 0x20	; 32
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	b6 01       	movw	r22, r12
    4e36:	93 d0       	rcall	.+294    	; 0x4f5e <fputc>
    4e38:	a3 94       	inc	r10
    4e3a:	af 14       	cp	r10, r15
    4e3c:	c8 f3       	brcs	.-14     	; 0x4e30 <vfprintf+0x338>
    4e3e:	04 c0       	rjmp	.+8      	; 0x4e48 <vfprintf+0x350>
    4e40:	af 14       	cp	r10, r15
    4e42:	10 f4       	brcc	.+4      	; 0x4e48 <vfprintf+0x350>
    4e44:	fa 18       	sub	r15, r10
    4e46:	01 c0       	rjmp	.+2      	; 0x4e4a <vfprintf+0x352>
    4e48:	ff 24       	eor	r15, r15
    4e4a:	84 fe       	sbrs	r8, 4
    4e4c:	0e c0       	rjmp	.+28     	; 0x4e6a <vfprintf+0x372>
    4e4e:	80 e3       	ldi	r24, 0x30	; 48
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	b6 01       	movw	r22, r12
    4e54:	84 d0       	rcall	.+264    	; 0x4f5e <fputc>
    4e56:	82 fe       	sbrs	r8, 2
    4e58:	1d c0       	rjmp	.+58     	; 0x4e94 <vfprintf+0x39c>
    4e5a:	81 fe       	sbrs	r8, 1
    4e5c:	03 c0       	rjmp	.+6      	; 0x4e64 <vfprintf+0x36c>
    4e5e:	88 e5       	ldi	r24, 0x58	; 88
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	10 c0       	rjmp	.+32     	; 0x4e84 <vfprintf+0x38c>
    4e64:	88 e7       	ldi	r24, 0x78	; 120
    4e66:	90 e0       	ldi	r25, 0x00	; 0
    4e68:	0d c0       	rjmp	.+26     	; 0x4e84 <vfprintf+0x38c>
    4e6a:	c4 01       	movw	r24, r8
    4e6c:	86 78       	andi	r24, 0x86	; 134
    4e6e:	90 70       	andi	r25, 0x00	; 0
    4e70:	00 97       	sbiw	r24, 0x00	; 0
    4e72:	81 f0       	breq	.+32     	; 0x4e94 <vfprintf+0x39c>
    4e74:	81 fc       	sbrc	r8, 1
    4e76:	02 c0       	rjmp	.+4      	; 0x4e7c <vfprintf+0x384>
    4e78:	80 e2       	ldi	r24, 0x20	; 32
    4e7a:	01 c0       	rjmp	.+2      	; 0x4e7e <vfprintf+0x386>
    4e7c:	8b e2       	ldi	r24, 0x2B	; 43
    4e7e:	b7 fc       	sbrc	r11, 7
    4e80:	8d e2       	ldi	r24, 0x2D	; 45
    4e82:	90 e0       	ldi	r25, 0x00	; 0
    4e84:	b6 01       	movw	r22, r12
    4e86:	6b d0       	rcall	.+214    	; 0x4f5e <fputc>
    4e88:	05 c0       	rjmp	.+10     	; 0x4e94 <vfprintf+0x39c>
    4e8a:	80 e3       	ldi	r24, 0x30	; 48
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	b6 01       	movw	r22, r12
    4e90:	66 d0       	rcall	.+204    	; 0x4f5e <fputc>
    4e92:	ea 94       	dec	r14
    4e94:	7e 14       	cp	r7, r14
    4e96:	c8 f3       	brcs	.-14     	; 0x4e8a <vfprintf+0x392>
    4e98:	7a 94       	dec	r7
    4e9a:	f2 01       	movw	r30, r4
    4e9c:	e7 0d       	add	r30, r7
    4e9e:	f1 1d       	adc	r31, r1
    4ea0:	80 81       	ld	r24, Z
    4ea2:	90 e0       	ldi	r25, 0x00	; 0
    4ea4:	b6 01       	movw	r22, r12
    4ea6:	5b d0       	rcall	.+182    	; 0x4f5e <fputc>
    4ea8:	77 20       	and	r7, r7
    4eaa:	b1 f7       	brne	.-20     	; 0x4e98 <vfprintf+0x3a0>
    4eac:	05 c0       	rjmp	.+10     	; 0x4eb8 <vfprintf+0x3c0>
    4eae:	80 e2       	ldi	r24, 0x20	; 32
    4eb0:	90 e0       	ldi	r25, 0x00	; 0
    4eb2:	b6 01       	movw	r22, r12
    4eb4:	54 d0       	rcall	.+168    	; 0x4f5e <fputc>
    4eb6:	fa 94       	dec	r15
    4eb8:	ff 20       	and	r15, r15
    4eba:	c9 f7       	brne	.-14     	; 0x4eae <vfprintf+0x3b6>
    4ebc:	44 ce       	rjmp	.-888    	; 0x4b46 <vfprintf+0x4e>
    4ebe:	f6 01       	movw	r30, r12
    4ec0:	26 81       	ldd	r18, Z+6	; 0x06
    4ec2:	37 81       	ldd	r19, Z+7	; 0x07
    4ec4:	02 c0       	rjmp	.+4      	; 0x4eca <vfprintf+0x3d2>
    4ec6:	2f ef       	ldi	r18, 0xFF	; 255
    4ec8:	3f ef       	ldi	r19, 0xFF	; 255
    4eca:	c9 01       	movw	r24, r18
    4ecc:	2c 96       	adiw	r28, 0x0c	; 12
    4ece:	0f b6       	in	r0, 0x3f	; 63
    4ed0:	f8 94       	cli
    4ed2:	de bf       	out	0x3e, r29	; 62
    4ed4:	0f be       	out	0x3f, r0	; 63
    4ed6:	cd bf       	out	0x3d, r28	; 61
    4ed8:	cf 91       	pop	r28
    4eda:	df 91       	pop	r29
    4edc:	1f 91       	pop	r17
    4ede:	0f 91       	pop	r16
    4ee0:	ff 90       	pop	r15
    4ee2:	ef 90       	pop	r14
    4ee4:	df 90       	pop	r13
    4ee6:	cf 90       	pop	r12
    4ee8:	bf 90       	pop	r11
    4eea:	af 90       	pop	r10
    4eec:	9f 90       	pop	r9
    4eee:	8f 90       	pop	r8
    4ef0:	7f 90       	pop	r7
    4ef2:	6f 90       	pop	r6
    4ef4:	5f 90       	pop	r5
    4ef6:	4f 90       	pop	r4
    4ef8:	3f 90       	pop	r3
    4efa:	2f 90       	pop	r2
    4efc:	08 95       	ret

00004efe <__eerd_byte_usb1287>:
    4efe:	f9 99       	sbic	0x1f, 1	; 31
    4f00:	fe cf       	rjmp	.-4      	; 0x4efe <__eerd_byte_usb1287>
    4f02:	92 bd       	out	0x22, r25	; 34
    4f04:	81 bd       	out	0x21, r24	; 33
    4f06:	f8 9a       	sbi	0x1f, 0	; 31
    4f08:	99 27       	eor	r25, r25
    4f0a:	80 b5       	in	r24, 0x20	; 32
    4f0c:	08 95       	ret

00004f0e <__eeupd_byte_usb1287>:
    4f0e:	26 2f       	mov	r18, r22

00004f10 <__eeupd_r18_usb1287>:
    4f10:	f9 99       	sbic	0x1f, 1	; 31
    4f12:	fe cf       	rjmp	.-4      	; 0x4f10 <__eeupd_r18_usb1287>
    4f14:	92 bd       	out	0x22, r25	; 34
    4f16:	81 bd       	out	0x21, r24	; 33
    4f18:	f8 9a       	sbi	0x1f, 0	; 31
    4f1a:	01 97       	sbiw	r24, 0x01	; 1
    4f1c:	00 b4       	in	r0, 0x20	; 32
    4f1e:	02 16       	cp	r0, r18
    4f20:	39 f0       	breq	.+14     	; 0x4f30 <__eeupd_r18_usb1287+0x20>
    4f22:	1f ba       	out	0x1f, r1	; 31
    4f24:	20 bd       	out	0x20, r18	; 32
    4f26:	0f b6       	in	r0, 0x3f	; 63
    4f28:	f8 94       	cli
    4f2a:	fa 9a       	sbi	0x1f, 2	; 31
    4f2c:	f9 9a       	sbi	0x1f, 1	; 31
    4f2e:	0f be       	out	0x3f, r0	; 63
    4f30:	08 95       	ret

00004f32 <strnlen_P>:
    4f32:	fc 01       	movw	r30, r24
    4f34:	05 90       	lpm	r0, Z+
    4f36:	61 50       	subi	r22, 0x01	; 1
    4f38:	70 40       	sbci	r23, 0x00	; 0
    4f3a:	01 10       	cpse	r0, r1
    4f3c:	d8 f7       	brcc	.-10     	; 0x4f34 <strnlen_P+0x2>
    4f3e:	80 95       	com	r24
    4f40:	90 95       	com	r25
    4f42:	8e 0f       	add	r24, r30
    4f44:	9f 1f       	adc	r25, r31
    4f46:	08 95       	ret

00004f48 <strnlen>:
    4f48:	fc 01       	movw	r30, r24
    4f4a:	61 50       	subi	r22, 0x01	; 1
    4f4c:	70 40       	sbci	r23, 0x00	; 0
    4f4e:	01 90       	ld	r0, Z+
    4f50:	01 10       	cpse	r0, r1
    4f52:	d8 f7       	brcc	.-10     	; 0x4f4a <strnlen+0x2>
    4f54:	80 95       	com	r24
    4f56:	90 95       	com	r25
    4f58:	8e 0f       	add	r24, r30
    4f5a:	9f 1f       	adc	r25, r31
    4f5c:	08 95       	ret

00004f5e <fputc>:
    4f5e:	0f 93       	push	r16
    4f60:	1f 93       	push	r17
    4f62:	cf 93       	push	r28
    4f64:	df 93       	push	r29
    4f66:	8c 01       	movw	r16, r24
    4f68:	eb 01       	movw	r28, r22
    4f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f6c:	81 ff       	sbrs	r24, 1
    4f6e:	1b c0       	rjmp	.+54     	; 0x4fa6 <fputc+0x48>
    4f70:	82 ff       	sbrs	r24, 2
    4f72:	0d c0       	rjmp	.+26     	; 0x4f8e <fputc+0x30>
    4f74:	2e 81       	ldd	r18, Y+6	; 0x06
    4f76:	3f 81       	ldd	r19, Y+7	; 0x07
    4f78:	8c 81       	ldd	r24, Y+4	; 0x04
    4f7a:	9d 81       	ldd	r25, Y+5	; 0x05
    4f7c:	28 17       	cp	r18, r24
    4f7e:	39 07       	cpc	r19, r25
    4f80:	64 f4       	brge	.+24     	; 0x4f9a <fputc+0x3c>
    4f82:	e8 81       	ld	r30, Y
    4f84:	f9 81       	ldd	r31, Y+1	; 0x01
    4f86:	01 93       	st	Z+, r16
    4f88:	f9 83       	std	Y+1, r31	; 0x01
    4f8a:	e8 83       	st	Y, r30
    4f8c:	06 c0       	rjmp	.+12     	; 0x4f9a <fputc+0x3c>
    4f8e:	e8 85       	ldd	r30, Y+8	; 0x08
    4f90:	f9 85       	ldd	r31, Y+9	; 0x09
    4f92:	80 2f       	mov	r24, r16
    4f94:	09 95       	icall
    4f96:	00 97       	sbiw	r24, 0x00	; 0
    4f98:	31 f4       	brne	.+12     	; 0x4fa6 <fputc+0x48>
    4f9a:	8e 81       	ldd	r24, Y+6	; 0x06
    4f9c:	9f 81       	ldd	r25, Y+7	; 0x07
    4f9e:	01 96       	adiw	r24, 0x01	; 1
    4fa0:	9f 83       	std	Y+7, r25	; 0x07
    4fa2:	8e 83       	std	Y+6, r24	; 0x06
    4fa4:	02 c0       	rjmp	.+4      	; 0x4faa <fputc+0x4c>
    4fa6:	0f ef       	ldi	r16, 0xFF	; 255
    4fa8:	1f ef       	ldi	r17, 0xFF	; 255
    4faa:	c8 01       	movw	r24, r16
    4fac:	df 91       	pop	r29
    4fae:	cf 91       	pop	r28
    4fb0:	1f 91       	pop	r17
    4fb2:	0f 91       	pop	r16
    4fb4:	08 95       	ret

00004fb6 <__ultoa_invert>:
    4fb6:	fa 01       	movw	r30, r20
    4fb8:	aa 27       	eor	r26, r26
    4fba:	28 30       	cpi	r18, 0x08	; 8
    4fbc:	51 f1       	breq	.+84     	; 0x5012 <__ultoa_invert+0x5c>
    4fbe:	20 31       	cpi	r18, 0x10	; 16
    4fc0:	81 f1       	breq	.+96     	; 0x5022 <__ultoa_invert+0x6c>
    4fc2:	e8 94       	clt
    4fc4:	6f 93       	push	r22
    4fc6:	6e 7f       	andi	r22, 0xFE	; 254
    4fc8:	6e 5f       	subi	r22, 0xFE	; 254
    4fca:	7f 4f       	sbci	r23, 0xFF	; 255
    4fcc:	8f 4f       	sbci	r24, 0xFF	; 255
    4fce:	9f 4f       	sbci	r25, 0xFF	; 255
    4fd0:	af 4f       	sbci	r26, 0xFF	; 255
    4fd2:	b1 e0       	ldi	r27, 0x01	; 1
    4fd4:	3e d0       	rcall	.+124    	; 0x5052 <__ultoa_invert+0x9c>
    4fd6:	b4 e0       	ldi	r27, 0x04	; 4
    4fd8:	3c d0       	rcall	.+120    	; 0x5052 <__ultoa_invert+0x9c>
    4fda:	67 0f       	add	r22, r23
    4fdc:	78 1f       	adc	r23, r24
    4fde:	89 1f       	adc	r24, r25
    4fe0:	9a 1f       	adc	r25, r26
    4fe2:	a1 1d       	adc	r26, r1
    4fe4:	68 0f       	add	r22, r24
    4fe6:	79 1f       	adc	r23, r25
    4fe8:	8a 1f       	adc	r24, r26
    4fea:	91 1d       	adc	r25, r1
    4fec:	a1 1d       	adc	r26, r1
    4fee:	6a 0f       	add	r22, r26
    4ff0:	71 1d       	adc	r23, r1
    4ff2:	81 1d       	adc	r24, r1
    4ff4:	91 1d       	adc	r25, r1
    4ff6:	a1 1d       	adc	r26, r1
    4ff8:	20 d0       	rcall	.+64     	; 0x503a <__ultoa_invert+0x84>
    4ffa:	09 f4       	brne	.+2      	; 0x4ffe <__ultoa_invert+0x48>
    4ffc:	68 94       	set
    4ffe:	3f 91       	pop	r19
    5000:	2a e0       	ldi	r18, 0x0A	; 10
    5002:	26 9f       	mul	r18, r22
    5004:	11 24       	eor	r1, r1
    5006:	30 19       	sub	r19, r0
    5008:	30 5d       	subi	r19, 0xD0	; 208
    500a:	31 93       	st	Z+, r19
    500c:	de f6       	brtc	.-74     	; 0x4fc4 <__ultoa_invert+0xe>
    500e:	cf 01       	movw	r24, r30
    5010:	08 95       	ret
    5012:	46 2f       	mov	r20, r22
    5014:	47 70       	andi	r20, 0x07	; 7
    5016:	40 5d       	subi	r20, 0xD0	; 208
    5018:	41 93       	st	Z+, r20
    501a:	b3 e0       	ldi	r27, 0x03	; 3
    501c:	0f d0       	rcall	.+30     	; 0x503c <__ultoa_invert+0x86>
    501e:	c9 f7       	brne	.-14     	; 0x5012 <__ultoa_invert+0x5c>
    5020:	f6 cf       	rjmp	.-20     	; 0x500e <__ultoa_invert+0x58>
    5022:	46 2f       	mov	r20, r22
    5024:	4f 70       	andi	r20, 0x0F	; 15
    5026:	40 5d       	subi	r20, 0xD0	; 208
    5028:	4a 33       	cpi	r20, 0x3A	; 58
    502a:	18 f0       	brcs	.+6      	; 0x5032 <__ultoa_invert+0x7c>
    502c:	49 5d       	subi	r20, 0xD9	; 217
    502e:	31 fd       	sbrc	r19, 1
    5030:	40 52       	subi	r20, 0x20	; 32
    5032:	41 93       	st	Z+, r20
    5034:	02 d0       	rcall	.+4      	; 0x503a <__ultoa_invert+0x84>
    5036:	a9 f7       	brne	.-22     	; 0x5022 <__ultoa_invert+0x6c>
    5038:	ea cf       	rjmp	.-44     	; 0x500e <__ultoa_invert+0x58>
    503a:	b4 e0       	ldi	r27, 0x04	; 4
    503c:	a6 95       	lsr	r26
    503e:	97 95       	ror	r25
    5040:	87 95       	ror	r24
    5042:	77 95       	ror	r23
    5044:	67 95       	ror	r22
    5046:	ba 95       	dec	r27
    5048:	c9 f7       	brne	.-14     	; 0x503c <__ultoa_invert+0x86>
    504a:	00 97       	sbiw	r24, 0x00	; 0
    504c:	61 05       	cpc	r22, r1
    504e:	71 05       	cpc	r23, r1
    5050:	08 95       	ret
    5052:	9b 01       	movw	r18, r22
    5054:	ac 01       	movw	r20, r24
    5056:	0a 2e       	mov	r0, r26
    5058:	06 94       	lsr	r0
    505a:	57 95       	ror	r21
    505c:	47 95       	ror	r20
    505e:	37 95       	ror	r19
    5060:	27 95       	ror	r18
    5062:	ba 95       	dec	r27
    5064:	c9 f7       	brne	.-14     	; 0x5058 <__ultoa_invert+0xa2>
    5066:	62 0f       	add	r22, r18
    5068:	73 1f       	adc	r23, r19
    506a:	84 1f       	adc	r24, r20
    506c:	95 1f       	adc	r25, r21
    506e:	a0 1d       	adc	r26, r0
    5070:	08 95       	ret

00005072 <_exit>:
    5072:	f8 94       	cli

00005074 <__stop_program>:
    5074:	ff cf       	rjmp	.-2      	; 0x5074 <__stop_program>
