
XPLAINBridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800100  000024bc  00002570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024bc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012e  008001bc  008001bc  0000262c  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  0000262c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000a98  00000000  00000000  00002630  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000016f  00000000  00000000  000030c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000006e8  00000000  00000000  00003237  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000012e1  00000000  00000000  0000391f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000b4a7  00000000  00000000  00004c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002d6e  00000000  00000000  000100a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000924e  00000000  00000000  00012e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000a90  00000000  00000000  0001c064  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004756  00000000  00000000  0001caf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005286  00000000  00000000  0002124a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000144b  00000000  00000000  000264d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000988  00000000  00000000  0002791b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
       0:	b5 c0       	rjmp	.+362    	; 0x16c <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
       4:	20 c2       	rjmp	.+1088   	; 0x446 <__vector_1>
       6:	00 00       	nop
       8:	cf c0       	rjmp	.+414    	; 0x1a8 <__bad_interrupt>
       a:	00 00       	nop
       c:	cd c0       	rjmp	.+410    	; 0x1a8 <__bad_interrupt>
       e:	00 00       	nop
      10:	cb c0       	rjmp	.+406    	; 0x1a8 <__bad_interrupt>
      12:	00 00       	nop
      14:	c9 c0       	rjmp	.+402    	; 0x1a8 <__bad_interrupt>
      16:	00 00       	nop
      18:	c7 c0       	rjmp	.+398    	; 0x1a8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c5 c0       	rjmp	.+394    	; 0x1a8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c3 c0       	rjmp	.+390    	; 0x1a8 <__bad_interrupt>
      22:	00 00       	nop
      24:	c1 c0       	rjmp	.+386    	; 0x1a8 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 7e 0e 	jmp	0x1cfc	; 0x1cfc <__vector_10>
      2c:	bd c0       	rjmp	.+378    	; 0x1a8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	bb c0       	rjmp	.+374    	; 0x1a8 <__bad_interrupt>
      32:	00 00       	nop
      34:	b9 c0       	rjmp	.+370    	; 0x1a8 <__bad_interrupt>
      36:	00 00       	nop
      38:	b7 c0       	rjmp	.+366    	; 0x1a8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b5 c0       	rjmp	.+362    	; 0x1a8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b3 c0       	rjmp	.+358    	; 0x1a8 <__bad_interrupt>
      42:	00 00       	nop
      44:	24 c2       	rjmp	.+1096   	; 0x48e <__vector_17>
      46:	00 00       	nop
      48:	af c0       	rjmp	.+350    	; 0x1a8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ad c0       	rjmp	.+346    	; 0x1a8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ab c0       	rjmp	.+342    	; 0x1a8 <__bad_interrupt>
      52:	00 00       	nop
      54:	3c c3       	rjmp	.+1656   	; 0x6ce <__vector_21>
      56:	00 00       	nop
      58:	a7 c0       	rjmp	.+334    	; 0x1a8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a5 c0       	rjmp	.+330    	; 0x1a8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a3 c0       	rjmp	.+326    	; 0x1a8 <__bad_interrupt>
      62:	00 00       	nop
      64:	a1 c0       	rjmp	.+322    	; 0x1a8 <__bad_interrupt>
      66:	00 00       	nop
      68:	9f c0       	rjmp	.+318    	; 0x1a8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9d c0       	rjmp	.+314    	; 0x1a8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9b c0       	rjmp	.+310    	; 0x1a8 <__bad_interrupt>
      72:	00 00       	nop
      74:	99 c0       	rjmp	.+306    	; 0x1a8 <__bad_interrupt>
      76:	00 00       	nop
      78:	97 c0       	rjmp	.+302    	; 0x1a8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	95 c0       	rjmp	.+298    	; 0x1a8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5c c2       	rjmp	.+1208   	; 0x53a <__vector_32>
      82:	00 00       	nop
      84:	91 c0       	rjmp	.+290    	; 0x1a8 <__bad_interrupt>
      86:	00 00       	nop
      88:	8f c0       	rjmp	.+286    	; 0x1a8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8d c0       	rjmp	.+282    	; 0x1a8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	8b c0       	rjmp	.+278    	; 0x1a8 <__bad_interrupt>
      92:	00 00       	nop
      94:	89 c0       	rjmp	.+274    	; 0x1a8 <__bad_interrupt>
      96:	00 00       	nop

00000098 <USART_DeviceDescriptor>:
      98:	12 01 10 01 02 00 00 10 eb 03 4b 20 01 00 01 02     ..........K ....
      a8:	dc 01                                               ..

000000aa <USART_ConfigurationDescriptor>:
      aa:	09 02 3e 00 02 01 00 80 32 09 04 00 00 01 02 02     ..>.....2.......
      ba:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      da:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000e8 <USART_LanguageString>:
      e8:	04 03 09 04                                         ....

000000ec <USART_ManufacturerString>:
      ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <USART_ProductString>:
     106:	26 03 4c 00 55 00 46 00 41 00 20 00 58 00 50 00     &.L.U.F.A. .X.P.
     116:	4c 00 41 00 49 00 4e 00 20 00 42 00 72 00 69 00     L.A.I.N. .B.r.i.
     126:	64 00 67 00 65 00 00 00                             d.g.e...

0000012e <AVRISP_DeviceDescriptor>:
     12e:	12 01 10 01 ff 00 00 10 eb 03 04 21 00 02 01 02     ...........!....
     13e:	03 01                                               ..

00000140 <AVRISP_LanguageString>:
     140:	04 03 09 04                                         ....

00000144 <AVRISP_ManufacturerString>:
     144:	0c 03 41 00 54 00 4d 00 45 00 4c 00 00 00           ..A.T.M.E.L...

00000152 <AVRISP_ProductString>:
     152:	18 03 41 00 56 00 52 00 49 00 53 00 50 00 20 00     ..A.V.R.I.S.P. .
     162:	6d 00 6b 00 49 00 49 00 00 00                       m.k.I.I...

0000016c <__ctors_end>:
     16c:	11 24       	eor	r1, r1
     16e:	1f be       	out	0x3f, r1	; 63
     170:	cf ef       	ldi	r28, 0xFF	; 255
     172:	d0 e2       	ldi	r29, 0x20	; 32
     174:	de bf       	out	0x3e, r29	; 62
     176:	cd bf       	out	0x3d, r28	; 61

00000178 <__do_copy_data>:
     178:	11 e0       	ldi	r17, 0x01	; 1
     17a:	a0 e0       	ldi	r26, 0x00	; 0
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	ec eb       	ldi	r30, 0xBC	; 188
     180:	f4 e2       	ldi	r31, 0x24	; 36
     182:	00 e0       	ldi	r16, 0x00	; 0
     184:	0b bf       	out	0x3b, r16	; 59
     186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x14>
     188:	07 90       	elpm	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	ac 3b       	cpi	r26, 0xBC	; 188
     18e:	b1 07       	cpc	r27, r17
     190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0x10>

00000192 <__do_clear_bss>:
     192:	12 e0       	ldi	r17, 0x02	; 2
     194:	ac eb       	ldi	r26, 0xBC	; 188
     196:	b1 e0       	ldi	r27, 0x01	; 1
     198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
     19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
     19c:	aa 3e       	cpi	r26, 0xEA	; 234
     19e:	b1 07       	cpc	r27, r17
     1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>
     1a2:	d7 d0       	rcall	.+430    	; 0x352 <main>
     1a4:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	2b cf       	rjmp	.-426    	; 0x0 <__vectors>

000001aa <LEDs_SetAllLEDs>:
				PORTB |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB | LEDS_ALL_LEDS) & ~LEDMask);
     1aa:	95 b1       	in	r25, 0x05	; 5
     1ac:	80 95       	com	r24
     1ae:	90 64       	ori	r25, 0x40	; 64
     1b0:	89 23       	and	r24, r25
     1b2:	85 b9       	out	0x05, r24	; 5
			}
     1b4:	08 95       	ret

000001b6 <RingBuffer_InitBuffer.clone.0>:
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1b6:	fc 01       	movw	r30, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1b8:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1ba:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     1bc:	71 83       	std	Z+1, r23	; 0x01
     1be:	60 83       	st	Z, r22
			Buffer->Out    = DataPtr;
     1c0:	73 83       	std	Z+3, r23	; 0x03
     1c2:	62 83       	std	Z+2, r22	; 0x02
			Buffer->Start  = &DataPtr[0];
     1c4:	75 83       	std	Z+5, r23	; 0x05
     1c6:	64 83       	std	Z+4, r22	; 0x04
			Buffer->End    = &DataPtr[Size];
     1c8:	60 58       	subi	r22, 0x80	; 128
     1ca:	7f 4f       	sbci	r23, 0xFF	; 255
     1cc:	77 83       	std	Z+7, r23	; 0x07
     1ce:	66 83       	std	Z+6, r22	; 0x06
			Buffer->Size   = Size;
     1d0:	80 e8       	ldi	r24, 0x80	; 128
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	91 87       	std	Z+9, r25	; 0x09
     1d6:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     1d8:	13 86       	std	Z+11, r1	; 0x0b
     1da:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1dc:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);
		}
     1de:	08 95       	ret

000001e0 <AVRISP_Task>:
}

void AVRISP_Task(void)
{
	/* Must be in the configured state for the AVRISP code to process data */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     1e0:	8e b3       	in	r24, 0x1e	; 30
     1e2:	84 30       	cpi	r24, 0x04	; 4
     1e4:	69 f4       	brne	.+26     	; 0x200 <AVRISP_Task+0x20>
	  return;

	V2Params_UpdateParamValues();
     1e6:	a8 d3       	rcall	.+1872   	; 0x938 <V2Params_UpdateParamValues>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     1e8:	82 e0       	ldi	r24, 0x02	; 2
     1ea:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     1ee:	80 91 e8 00 	lds	r24, 0x00E8

	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPADDR);

	/* Check to see if a V2 Protocol command has been received */
	if (Endpoint_IsOUTReceived())
     1f2:	82 ff       	sbrs	r24, 2
     1f4:	05 c0       	rjmp	.+10     	; 0x200 <AVRISP_Task+0x20>
	{
		LEDs_SetAllLEDs(LEDMASK_BUSY);
     1f6:	80 e4       	ldi	r24, 0x40	; 64
     1f8:	d8 df       	rcall	.-80     	; 0x1aa <LEDs_SetAllLEDs>

		/* Pass off processing of the V2 Protocol command to the V2 Protocol handler */
		V2Protocol_ProcessCommand();
     1fa:	95 d2       	rcall	.+1322   	; 0x726 <V2Protocol_ProcessCommand>

		LEDs_SetAllLEDs(LEDMASK_USB_READY);
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	d5 cf       	rjmp	.-86     	; 0x1aa <LEDs_SetAllLEDs>
     200:	08 95       	ret

00000202 <UARTBridge_Task>:
	}
}

void UARTBridge_Task(void)
{
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
	/* Must be in the configured state for the USART Bridge code to process data */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     20a:	8e b3       	in	r24, 0x1e	; 30
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <UARTBridge_Task+0x10>
     210:	68 c0       	rjmp	.+208    	; 0x2e2 <UARTBridge_Task+0xe0>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     212:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     214:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     216:	20 91 cc 02 	lds	r18, 0x02CC
     21a:	30 91 cd 02 	lds	r19, 0x02CD
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     21e:	8f bf       	out	0x3f, r24	; 63
	  return;

	/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
	if (!(RingBuffer_IsFull(&USBtoUART_Buffer)))
     220:	80 91 ca 02 	lds	r24, 0x02CA
     224:	90 91 cb 02 	lds	r25, 0x02CB
     228:	28 17       	cp	r18, r24
     22a:	39 07       	cpc	r19, r25
     22c:	09 f1       	breq	.+66     	; 0x270 <UARTBridge_Task+0x6e>
	{
		int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	0e 94 ee 11 	call	0x23dc	; 0x23dc <CDC_Device_ReceiveByte>

		/* Read bytes from the USB OUT endpoint into the UART transmit buffer */
		if (!(ReceivedByte < 0))
     236:	97 fd       	sbrc	r25, 7
     238:	1b c0       	rjmp	.+54     	; 0x270 <UARTBridge_Task+0x6e>
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     23a:	e2 ec       	ldi	r30, 0xC2	; 194
     23c:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     23e:	a0 81       	ld	r26, Z
     240:	b1 81       	ldd	r27, Z+1	; 0x01
		  RingBuffer_Insert(&USBtoUART_Buffer, ReceivedByte);
     242:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     244:	80 81       	ld	r24, Z
     246:	91 81       	ldd	r25, Z+1	; 0x01
     248:	01 96       	adiw	r24, 0x01	; 1
     24a:	91 83       	std	Z+1, r25	; 0x01
     24c:	80 83       	st	Z, r24
     24e:	26 81       	ldd	r18, Z+6	; 0x06
     250:	37 81       	ldd	r19, Z+7	; 0x07
     252:	82 17       	cp	r24, r18
     254:	93 07       	cpc	r25, r19
     256:	21 f4       	brne	.+8      	; 0x260 <UARTBridge_Task+0x5e>
			  Buffer->In = Buffer->Start;
     258:	84 81       	ldd	r24, Z+4	; 0x04
     25a:	95 81       	ldd	r25, Z+5	; 0x05
     25c:	91 83       	std	Z+1, r25	; 0x01
     25e:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     260:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     262:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     264:	82 85       	ldd	r24, Z+10	; 0x0a
     266:	93 85       	ldd	r25, Z+11	; 0x0b
     268:	01 96       	adiw	r24, 0x01	; 1
     26a:	93 87       	std	Z+11, r25	; 0x0b
     26c:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     26e:	2f bf       	out	0x3f, r18	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     270:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     272:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     274:	c0 91 d8 02 	lds	r28, 0x02D8
     278:	d0 91 d9 02 	lds	r29, 0x02D9
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     27c:	8f bf       	out	0x3f, r24	; 63
	}

	/* Check if the UART receive buffer flush timer has expired or buffer is nearly full */
	uint16_t BufferCount = RingBuffer_GetCount(&UARTtoUSB_Buffer);
	if ((TIFR0 & (1 << TOV0)) || (BufferCount > 200))
     27e:	a8 99       	sbic	0x15, 0	; 21
     280:	03 c0       	rjmp	.+6      	; 0x288 <UARTBridge_Task+0x86>
     282:	c9 3c       	cpi	r28, 0xC9	; 201
     284:	d1 05       	cpc	r29, r1
     286:	48 f1       	brcs	.+82     	; 0x2da <UARTBridge_Task+0xd8>
	{
		/* Clear flush timer expiry flag */
		TIFR0 |= (1 << TOV0);
     288:	a8 9a       	sbi	0x15, 0	; 21
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     28a:	0e ec       	ldi	r16, 0xCE	; 206
     28c:	12 e0       	ldi	r17, 0x02	; 2

		/* Read bytes from the USART receive buffer into the USB IN endpoint */
		while (BufferCount--)
     28e:	23 c0       	rjmp	.+70     	; 0x2d6 <UARTBridge_Task+0xd4>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer)
		{
			return *Buffer->Out;
     290:	e0 91 d0 02 	lds	r30, 0x02D0
     294:	f0 91 d1 02 	lds	r31, 0x02D1
		{
			/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
			if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	60 81       	ld	r22, Z
     29e:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <CDC_Device_SendByte>
     2a2:	88 23       	and	r24, r24
     2a4:	d1 f4       	brne	.+52     	; 0x2da <UARTBridge_Task+0xd8>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     2a6:	f8 01       	movw	r30, r16

			uint8_t Data = *Buffer->Out;

			if (++Buffer->Out == Buffer->End)
     2a8:	82 81       	ldd	r24, Z+2	; 0x02
     2aa:	93 81       	ldd	r25, Z+3	; 0x03
     2ac:	01 96       	adiw	r24, 0x01	; 1
     2ae:	93 83       	std	Z+3, r25	; 0x03
     2b0:	82 83       	std	Z+2, r24	; 0x02
     2b2:	26 81       	ldd	r18, Z+6	; 0x06
     2b4:	37 81       	ldd	r19, Z+7	; 0x07
     2b6:	82 17       	cp	r24, r18
     2b8:	93 07       	cpc	r25, r19
     2ba:	21 f4       	brne	.+8      	; 0x2c4 <UARTBridge_Task+0xc2>
			  Buffer->Out = Buffer->Start;
     2bc:	84 81       	ldd	r24, Z+4	; 0x04
     2be:	95 81       	ldd	r25, Z+5	; 0x05
     2c0:	93 83       	std	Z+3, r25	; 0x03
     2c2:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     2c4:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     2c6:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     2c8:	82 85       	ldd	r24, Z+10	; 0x0a
     2ca:	93 85       	ldd	r25, Z+11	; 0x0b
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	93 87       	std	Z+11, r25	; 0x0b
     2d0:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2d2:	2f bf       	out	0x3f, r18	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     2d4:	21 97       	sbiw	r28, 0x01	; 1
	{
		/* Clear flush timer expiry flag */
		TIFR0 |= (1 << TOV0);

		/* Read bytes from the USART receive buffer into the USB IN endpoint */
		while (BufferCount--)
     2d6:	20 97       	sbiw	r28, 0x00	; 0
     2d8:	d9 f6       	brne	.-74     	; 0x290 <UARTBridge_Task+0x8e>
			/* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
			RingBuffer_Remove(&UARTtoUSB_Buffer);
		}
	}

	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	0e 94 d7 11 	call	0x23ae	; 0x23ae <CDC_Device_USBTask>
}
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	1f 91       	pop	r17
     2e8:	0f 91       	pop	r16
     2ea:	08 95       	ret

000002ec <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     2ec:	84 b7       	in	r24, 0x34	; 52
     2ee:	87 7f       	andi	r24, 0xF7	; 247
     2f0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     2f2:	88 e1       	ldi	r24, 0x18	; 24
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	80 93 60 00 	sts	0x0060, r24
     2fc:	10 92 60 00 	sts	0x0060, r1
     300:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	80 e8       	ldi	r24, 0x80	; 128
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	80 93 61 00 	sts	0x0061, r24
     30e:	90 93 61 00 	sts	0x0061, r25
     312:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Disable JTAG debugging */
	MCUCR |= (1 << JTD);
     314:	85 b7       	in	r24, 0x35	; 53
     316:	80 68       	ori	r24, 0x80	; 128
     318:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << JTD);
     31a:	85 b7       	in	r24, 0x35	; 53
     31c:	80 68       	ori	r24, 0x80	; 128
     31e:	85 bf       	out	0x35, r24	; 53

	/* Enable pull-up on the JTAG TDI pin so we can use it to select the mode */
	PORTF |= (1 << 7);
     320:	8f 9a       	sbi	0x11, 7	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     322:	8f e1       	ldi	r24, 0x1F	; 31
     324:	9e e4       	ldi	r25, 0x4E	; 78
     326:	01 97       	sbiw	r24, 0x01	; 1
     328:	f1 f7       	brne	.-4      	; 0x326 <SetupHardware+0x3a>
     32a:	00 c0       	rjmp	.+0      	; 0x32c <SetupHardware+0x40>
     32c:	00 00       	nop
	Delay_MS(10);

	/* Select the firmware mode based on the JTD pin's value */
	CurrentFirmwareMode = (PINF & (1 << 7)) ? MODE_USART_BRIDGE : MODE_PDI_PROGRAMMER;
     32e:	8f b1       	in	r24, 0x0f	; 15
     330:	80 95       	com	r24
     332:	88 1f       	adc	r24, r24
     334:	88 27       	eor	r24, r24
     336:	88 1f       	adc	r24, r24
     338:	80 93 bc 01 	sts	0x01BC, r24

	/* Re-enable JTAG debugging */
	MCUCR &= ~(1 << JTD);
     33c:	85 b7       	in	r24, 0x35	; 53
     33e:	8f 77       	andi	r24, 0x7F	; 127
     340:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << JTD);
     342:	85 b7       	in	r24, 0x35	; 53
     344:	8f 77       	andi	r24, 0x7F	; 127
     346:	85 bf       	out	0x35, r24	; 53

	/* Hardware Initialization */
	SoftUART_Init();
     348:	64 d0       	rcall	.+200    	; 0x412 <SoftUART_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |= LEDS_ALL_LEDS;
     34a:	26 9a       	sbi	0x04, 6	; 4
				PORTB |= LEDS_ALL_LEDS;
     34c:	2e 9a       	sbi	0x05, 6	; 5
	#if defined(RESET_TOGGLES_LIBUSB_COMPAT)
	UpdateCurrentCompatibilityMode();
	#endif
	
	/* USB Stack Initialization */	
	USB_Init();
     34e:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <USB_Init>

00000352 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     352:	cc df       	rcall	.-104    	; 0x2ec <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     354:	80 e4       	ldi	r24, 0x40	; 64
     356:	29 df       	rcall	.-430    	; 0x1aa <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     358:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     35a:	80 91 bc 01 	lds	r24, 0x01BC
     35e:	88 23       	and	r24, r24
     360:	11 f4       	brne	.+4      	; 0x366 <main+0x14>
		  UARTBridge_Task();
     362:	4f df       	rcall	.-354    	; 0x202 <UARTBridge_Task>
     364:	01 c0       	rjmp	.+2      	; 0x368 <main+0x16>
		else
		  AVRISP_Task();
     366:	3c df       	rcall	.-392    	; 0x1e0 <AVRISP_Task>

		USB_USBTask();
     368:	0e 94 8f 10 	call	0x211e	; 0x211e <USB_USBTask>
	}
     36c:	f6 cf       	rjmp	.-20     	; 0x35a <main+0x8>

0000036e <EVENT_USB_Device_ConfigurationChanged>:
	USB_Init();
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     36e:	1f 93       	push	r17
	bool ConfigSuccess = true;

	/* Configure the device endpoints according to the selected mode */
	if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     370:	80 91 bc 01 	lds	r24, 0x01BC
     374:	88 23       	and	r24, r24
     376:	a1 f4       	brne	.+40     	; 0x3a0 <EVENT_USB_Device_ConfigurationChanged+0x32>
	{
		ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	91 e0       	ldi	r25, 0x01	; 1
     37c:	0e 94 57 11 	call	0x22ae	; 0x22ae <CDC_Device_ConfigureEndpoints>
     380:	18 2f       	mov	r17, r24
     382:	11 70       	andi	r17, 0x01	; 1

		/* Configure the UART flush timer - run at Fcpu/1024 for maximum interval before overflow */
		TCCR0B = ((1 << CS02) | (1 << CS00));
     384:	85 e0       	ldi	r24, 0x05	; 5
     386:	85 bd       	out	0x25, r24	; 37

		/* Initialize ring buffers used to hold serial data between USB and software UART interfaces */
		RingBuffer_InitBuffer(&USBtoUART_Buffer, USBtoUART_Buffer_Data, sizeof(USBtoUART_Buffer_Data));
     388:	82 ec       	ldi	r24, 0xC2	; 194
     38a:	92 e0       	ldi	r25, 0x02	; 2
     38c:	6d eb       	ldi	r22, 0xBD	; 189
     38e:	71 e0       	ldi	r23, 0x01	; 1
     390:	12 df       	rcall	.-476    	; 0x1b6 <RingBuffer_InitBuffer.clone.0>
		RingBuffer_InitBuffer(&UARTtoUSB_Buffer, UARTtoUSB_Buffer_Data, sizeof(UARTtoUSB_Buffer_Data));
     392:	8e ec       	ldi	r24, 0xCE	; 206
     394:	92 e0       	ldi	r25, 0x02	; 2
     396:	6d e3       	ldi	r22, 0x3D	; 61
     398:	72 e0       	ldi	r23, 0x02	; 2
     39a:	0d df       	rcall	.-486    	; 0x1b6 <RingBuffer_InitBuffer.clone.0>

		/* Start the software USART */
		SoftUART_Init();
     39c:	3a d0       	rcall	.+116    	; 0x412 <SoftUART_Init>
     39e:	08 c0       	rjmp	.+16     	; 0x3b0 <EVENT_USB_Device_ConfigurationChanged+0x42>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	60 e8       	ldi	r22, 0x80	; 128
     3a4:	42 e3       	ldi	r20, 0x32	; 50
     3a6:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <Endpoint_ConfigureEndpoint_Prv>
	}
	else
	{
		ConfigSuccess &= Endpoint_ConfigureEndpoint(AVRISP_DATA_OUT_EPADDR, EP_TYPE_BULK, AVRISP_DATA_EPSIZE, 1);
     3aa:	18 2f       	mov	r17, r24
     3ac:	11 70       	andi	r17, 0x01	; 1

		if ((AVRISP_DATA_IN_EPADDR & ENDPOINT_EPNUM_MASK) != (AVRISP_DATA_OUT_EPADDR & ENDPOINT_EPNUM_MASK))
		  ConfigSuccess &= Endpoint_ConfigureEndpoint(AVRISP_DATA_IN_EPADDR, EP_TYPE_BULK, AVRISP_DATA_EPSIZE, 1);

		/* Configure the V2 protocol packet handler */
		V2Protocol_Init();
     3ae:	a4 d1       	rcall	.+840    	; 0x6f8 <V2Protocol_Init>
	}

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     3b0:	11 23       	and	r17, r17
     3b2:	11 f0       	breq	.+4      	; 0x3b8 <EVENT_USB_Device_ConfigurationChanged+0x4a>
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	01 c0       	rjmp	.+2      	; 0x3ba <EVENT_USB_Device_ConfigurationChanged+0x4c>
     3b8:	80 e4       	ldi	r24, 0x40	; 64
     3ba:	f7 de       	rcall	.-530    	; 0x1aa <LEDs_SetAllLEDs>
}
     3bc:	1f 91       	pop	r17
     3be:	08 95       	ret

000003c0 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     3c0:	80 91 bc 01 	lds	r24, 0x01BC
     3c4:	88 23       	and	r24, r24
     3c6:	21 f4       	brne	.+8      	; 0x3d0 <EVENT_USB_Device_ControlRequest+0x10>
	  CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <CDC_Device_ProcessControlRequest>
     3d0:	08 95       	ret

000003d2 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     3d2:	80 e4       	ldi	r24, 0x40	; 64
}
     3d4:	ea ce       	rjmp	.-556    	; 0x1aa <LEDs_SetAllLEDs>

000003d6 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     3d6:	80 e4       	ldi	r24, 0x40	; 64
}
     3d8:	e8 ce       	rjmp	.-560    	; 0x1aa <LEDs_SetAllLEDs>

000003da <EVENT_CDC_Device_LineEncodingChanged>:
		#define STXDDR     DDRD

	/* Inline Functions: */
		static inline void SoftUART_SetBaud(const uint32_t Baud)
		{
			uint16_t BitTime = ((F_CPU / Baud) - 1);
     3da:	fc 01       	movw	r30, r24
     3dc:	24 89       	ldd	r18, Z+20	; 0x14
     3de:	35 89       	ldd	r19, Z+21	; 0x15
     3e0:	46 89       	ldd	r20, Z+22	; 0x16
     3e2:	57 89       	ldd	r21, Z+23	; 0x17
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	72 e1       	ldi	r23, 0x12	; 18
     3e8:	8a e7       	ldi	r24, 0x7A	; 122
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 20 12 	call	0x2440	; 0x2440 <__udivmodsi4>
     3f0:	21 50       	subi	r18, 0x01	; 1
     3f2:	30 40       	sbci	r19, 0x00	; 0

			OCR1A = BitTime;
     3f4:	30 93 89 00 	sts	0x0089, r19
     3f8:	20 93 88 00 	sts	0x0088, r18
			OCR3A = BitTime;
     3fc:	30 93 99 00 	sts	0x0099, r19
     400:	20 93 98 00 	sts	0x0098, r18
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	/* Change the software UART's baud rate to match the new baud rate */
	SoftUART_SetBaud(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
}
     404:	08 95       	ret

00000406 <CALLBACK_USB_GetDescriptor>:
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress,
		                            uint8_t* const DescriptorMemorySpace)
{
	/* Return the correct descriptors based on the selected mode */
	if (CurrentFirmwareMode == MODE_USART_BRIDGE)
     406:	70 91 bc 01 	lds	r23, 0x01BC
     40a:	77 23       	and	r23, r23
     40c:	09 f4       	brne	.+2      	; 0x410 <CALLBACK_USB_GetDescriptor+0xa>
	  return USART_GetDescriptor(wValue, wIndex, DescriptorAddress, DescriptorMemorySpace);
     40e:	f0 c0       	rjmp	.+480    	; 0x5f0 <USART_GetDescriptor>
	else
	  return AVRISP_GetDescriptor(wValue, wIndex, DescriptorAddress, DescriptorMemorySpace);
}
     410:	1e c1       	rjmp	.+572    	; 0x64e <AVRISP_GetDescriptor>

00000412 <SoftUART_Init>:

/** Initializes the software UART, ready for data transmission and reception into the global ring buffers. */
void SoftUART_Init(void)
{
	/* Set TX pin to output high, enable RX pull-up */
	STXPORT |= (1 << STX);
     412:	59 9a       	sbi	0x0b, 1	; 11
	STXDDR  |= (1 << STX);
     414:	51 9a       	sbi	0x0a, 1	; 10
	SRXPORT |= (1 << SRX);
     416:	58 9a       	sbi	0x0b, 0	; 11

	/* Enable INT0 for the detection of incoming start bits that signal the start of a byte */
	EICRA  = (1 << ISC01);
     418:	22 e0       	ldi	r18, 0x02	; 2
     41a:	20 93 69 00 	sts	0x0069, r18
	EIMSK  = (1 << INT0);
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	8d bb       	out	0x1d, r24	; 29
	/* Inline Functions: */
		static inline void SoftUART_SetBaud(const uint32_t Baud)
		{
			uint16_t BitTime = ((F_CPU / Baud) - 1);

			OCR1A = BitTime;
     422:	80 e4       	ldi	r24, 0x40	; 64
     424:	93 e0       	ldi	r25, 0x03	; 3
     426:	90 93 89 00 	sts	0x0089, r25
     42a:	80 93 88 00 	sts	0x0088, r24
			OCR3A = BitTime;
     42e:	90 93 99 00 	sts	0x0099, r25
     432:	80 93 98 00 	sts	0x0098, r24

	/* Set the transmission and reception timer compare values for the default baud rate */
	SoftUART_SetBaud(9600);

	/* Setup reception timer compare ISR */
	TIMSK1 = (1 << OCIE1A);
     436:	20 93 6f 00 	sts	0x006F, r18

	/* Setup transmission timer compare ISR and start the timer */
	TIMSK3 = (1 << OCIE3A);
     43a:	20 93 71 00 	sts	0x0071, r18
	TCCR3B = ((1 << CS30) | (1 << WGM32));
     43e:	89 e0       	ldi	r24, 0x09	; 9
     440:	80 93 91 00 	sts	0x0091, r24
}
     444:	08 95       	ret

00000446 <__vector_1>:

/** ISR to detect the start of a bit being sent to the software UART. */
ISR(INT0_vect, ISR_BLOCK)
{
     446:	1f 92       	push	r1
     448:	0f 92       	push	r0
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	0f 92       	push	r0
     44e:	11 24       	eor	r1, r1
     450:	8f 93       	push	r24
     452:	9f 93       	push	r25
	/* Reset the number of reception bits remaining counter */
	RX_BitsRemaining = 8;
     454:	88 e0       	ldi	r24, 0x08	; 8
     456:	80 93 bf 02 	sts	0x02BF, r24

	/* Reset the bit reception timer to -(1/2) of the total bit time, so that the first data bit is
	 * sampled mid way through the total bit time, making reception more robust.
	 */
	TCNT1 = -(OCR1A >> 1);
     45a:	80 91 88 00 	lds	r24, 0x0088
     45e:	90 91 89 00 	lds	r25, 0x0089
     462:	96 95       	lsr	r25
     464:	87 95       	ror	r24
     466:	90 95       	com	r25
     468:	81 95       	neg	r24
     46a:	9f 4f       	sbci	r25, 0xFF	; 255
     46c:	90 93 85 00 	sts	0x0085, r25
     470:	80 93 84 00 	sts	0x0084, r24

	/* Check to see that the pin is still low (prevents glitches from starting a frame reception) */
	if (!(SRXPIN & (1 << SRX)))
     474:	48 99       	sbic	0x09, 0	; 9
     476:	04 c0       	rjmp	.+8      	; 0x480 <__vector_1+0x3a>
	{
		/* Disable start bit detection ISR while the next byte is received */
		EIMSK = 0;
     478:	1d ba       	out	0x1d, r1	; 29

		/* Start the reception timer */
		TCCR1B = ((1 << CS10) | (1 << WGM12));
     47a:	89 e0       	ldi	r24, 0x09	; 9
     47c:	80 93 81 00 	sts	0x0081, r24
	}
}
     480:	9f 91       	pop	r25
     482:	8f 91       	pop	r24
     484:	0f 90       	pop	r0
     486:	0f be       	out	0x3f, r0	; 63
     488:	0f 90       	pop	r0
     48a:	1f 90       	pop	r1
     48c:	18 95       	reti

0000048e <__vector_17>:

/** ISR to manage the reception of bits to the software UART. */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
     48e:	1f 92       	push	r1
     490:	0f 92       	push	r0
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	0f 92       	push	r0
     496:	0b b6       	in	r0, 0x3b	; 59
     498:	0f 92       	push	r0
     49a:	11 24       	eor	r1, r1
     49c:	2f 93       	push	r18
     49e:	3f 93       	push	r19
     4a0:	8f 93       	push	r24
     4a2:	9f 93       	push	r25
     4a4:	af 93       	push	r26
     4a6:	bf 93       	push	r27
     4a8:	ef 93       	push	r30
     4aa:	ff 93       	push	r31
	/* Cache the current RX pin value for later checking */
	uint8_t SRX_Cached = (SRXPIN & (1 << SRX));
     4ac:	89 b1       	in	r24, 0x09	; 9
     4ae:	81 70       	andi	r24, 0x01	; 1

	/* Check if reception has finished */
	if (RX_BitsRemaining)
     4b0:	20 91 bf 02 	lds	r18, 0x02BF
     4b4:	22 23       	and	r18, r18
     4b6:	71 f0       	breq	.+28     	; 0x4d4 <__vector_17+0x46>
	{
		/* Shift the current received bit mask to the next bit position */
		RX_Data >>= 1;
     4b8:	90 91 c0 02 	lds	r25, 0x02C0
     4bc:	96 95       	lsr	r25
     4be:	90 93 c0 02 	sts	0x02C0, r25
		RX_BitsRemaining--;
     4c2:	21 50       	subi	r18, 0x01	; 1
     4c4:	20 93 bf 02 	sts	0x02BF, r18

		/* Store next bit into the received data variable */
		if (SRX_Cached)
     4c8:	88 23       	and	r24, r24
     4ca:	41 f1       	breq	.+80     	; 0x51c <__vector_17+0x8e>
		  RX_Data |= (1 << 7);
     4cc:	90 68       	ori	r25, 0x80	; 128
     4ce:	90 93 c0 02 	sts	0x02C0, r25
     4d2:	24 c0       	rjmp	.+72     	; 0x51c <__vector_17+0x8e>
	}
	else
	{
		/* Disable the reception timer as all data has now been received, re-enable start bit detection ISR */
		TCCR1B = 0;
     4d4:	10 92 81 00 	sts	0x0081, r1
		EIFR   = (1 << INTF0);
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	9c bb       	out	0x1c, r25	; 28
		EIMSK  = (1 << INT0);
     4dc:	9d bb       	out	0x1d, r25	; 29

		/* Reception complete, store the received byte if stop bit valid */
		if (SRX_Cached)
     4de:	88 23       	and	r24, r24
     4e0:	e9 f0       	breq	.+58     	; 0x51c <__vector_17+0x8e>
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     4e2:	ee ec       	ldi	r30, 0xCE	; 206
     4e4:	f2 e0       	ldi	r31, 0x02	; 2

			*Buffer->In = Data;
     4e6:	a0 81       	ld	r26, Z
     4e8:	b1 81       	ldd	r27, Z+1	; 0x01
     4ea:	80 91 c0 02 	lds	r24, 0x02C0
     4ee:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     4f0:	80 81       	ld	r24, Z
     4f2:	91 81       	ldd	r25, Z+1	; 0x01
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	91 83       	std	Z+1, r25	; 0x01
     4f8:	80 83       	st	Z, r24
     4fa:	26 81       	ldd	r18, Z+6	; 0x06
     4fc:	37 81       	ldd	r19, Z+7	; 0x07
     4fe:	82 17       	cp	r24, r18
     500:	93 07       	cpc	r25, r19
     502:	21 f4       	brne	.+8      	; 0x50c <__vector_17+0x7e>
			  Buffer->In = Buffer->Start;
     504:	84 81       	ldd	r24, Z+4	; 0x04
     506:	95 81       	ldd	r25, Z+5	; 0x05
     508:	91 83       	std	Z+1, r25	; 0x01
     50a:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     50c:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     50e:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     510:	82 85       	ldd	r24, Z+10	; 0x0a
     512:	93 85       	ldd	r25, Z+11	; 0x0b
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	93 87       	std	Z+11, r25	; 0x0b
     518:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     51a:	2f bf       	out	0x3f, r18	; 63
		  RingBuffer_Insert(&UARTtoUSB_Buffer, RX_Data);
	}
}
     51c:	ff 91       	pop	r31
     51e:	ef 91       	pop	r30
     520:	bf 91       	pop	r27
     522:	af 91       	pop	r26
     524:	9f 91       	pop	r25
     526:	8f 91       	pop	r24
     528:	3f 91       	pop	r19
     52a:	2f 91       	pop	r18
     52c:	0f 90       	pop	r0
     52e:	0b be       	out	0x3b, r0	; 59
     530:	0f 90       	pop	r0
     532:	0f be       	out	0x3f, r0	; 63
     534:	0f 90       	pop	r0
     536:	1f 90       	pop	r1
     538:	18 95       	reti

0000053a <__vector_32>:

/** ISR to manage the transmission of bits via the software UART. */
ISR(TIMER3_COMPA_vect, ISR_BLOCK)
{
     53a:	1f 92       	push	r1
     53c:	0f 92       	push	r0
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	0f 92       	push	r0
     542:	0b b6       	in	r0, 0x3b	; 59
     544:	0f 92       	push	r0
     546:	11 24       	eor	r1, r1
     548:	2f 93       	push	r18
     54a:	3f 93       	push	r19
     54c:	8f 93       	push	r24
     54e:	9f 93       	push	r25
     550:	af 93       	push	r26
     552:	bf 93       	push	r27
     554:	ef 93       	push	r30
     556:	ff 93       	push	r31
	/* Check if transmission has finished */
	if (TX_BitsRemaining)
     558:	80 91 bd 02 	lds	r24, 0x02BD
     55c:	88 23       	and	r24, r24
     55e:	61 f0       	breq	.+24     	; 0x578 <__vector_32+0x3e>
	{
		/* Set the TX line to the value of the next bit in the byte to send */
		if (TX_Data & (1 << 0))
     560:	90 91 be 02 	lds	r25, 0x02BE
     564:	90 ff       	sbrs	r25, 0
     566:	02 c0       	rjmp	.+4      	; 0x56c <__vector_32+0x32>
		  STXPORT &= ~(1 << STX);
     568:	59 98       	cbi	0x0b, 1	; 11
     56a:	01 c0       	rjmp	.+2      	; 0x56e <__vector_32+0x34>
		else
		  STXPORT |=  (1 << STX);
     56c:	59 9a       	sbi	0x0b, 1	; 11

		/* Shift the transmission byte to move the next bit into position and decrement the bits remaining counter */
		TX_Data >>= 1;
     56e:	96 95       	lsr	r25
     570:	90 93 be 02 	sts	0x02BE, r25
		TX_BitsRemaining--;
     574:	81 50       	subi	r24, 0x01	; 1
     576:	2b c0       	rjmp	.+86     	; 0x5ce <__vector_32+0x94>
	}
	else if (!(RX_BitsRemaining) && !(RingBuffer_IsEmpty(&USBtoUART_Buffer)))
     578:	80 91 bf 02 	lds	r24, 0x02BF
     57c:	88 23       	and	r24, r24
     57e:	49 f5       	brne	.+82     	; 0x5d2 <__vector_32+0x98>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     580:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     582:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     584:	80 91 cc 02 	lds	r24, 0x02CC
     588:	90 91 cd 02 	lds	r25, 0x02CD
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     58c:	2f bf       	out	0x3f, r18	; 63
     58e:	00 97       	sbiw	r24, 0x00	; 0
     590:	01 f1       	breq	.+64     	; 0x5d2 <__vector_32+0x98>
	{
		/* Start bit - TX line low */
		STXPORT &= ~(1 << STX);
     592:	59 98       	cbi	0x0b, 1	; 11
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     594:	e2 ec       	ldi	r30, 0xC2	; 194
     596:	f2 e0       	ldi	r31, 0x02	; 2

			uint8_t Data = *Buffer->Out;
     598:	a2 81       	ldd	r26, Z+2	; 0x02
     59a:	b3 81       	ldd	r27, Z+3	; 0x03
     59c:	2d 91       	ld	r18, X+

			if (++Buffer->Out == Buffer->End)
     59e:	b3 83       	std	Z+3, r27	; 0x03
     5a0:	a2 83       	std	Z+2, r26	; 0x02
     5a2:	86 81       	ldd	r24, Z+6	; 0x06
     5a4:	97 81       	ldd	r25, Z+7	; 0x07
     5a6:	a8 17       	cp	r26, r24
     5a8:	b9 07       	cpc	r27, r25
     5aa:	21 f4       	brne	.+8      	; 0x5b4 <__vector_32+0x7a>
			  Buffer->Out = Buffer->Start;
     5ac:	84 81       	ldd	r24, Z+4	; 0x04
     5ae:	95 81       	ldd	r25, Z+5	; 0x05
     5b0:	93 83       	std	Z+3, r25	; 0x03
     5b2:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     5b4:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     5b6:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     5b8:	82 85       	ldd	r24, Z+10	; 0x0a
     5ba:	93 85       	ldd	r25, Z+11	; 0x0b
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	93 87       	std	Z+11, r25	; 0x0b
     5c0:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     5c2:	3f bf       	out	0x3f, r19	; 63

		/* Transmission complete, get the next byte to send (if available) */
		TX_Data          = ~RingBuffer_Remove(&USBtoUART_Buffer);
     5c4:	82 2f       	mov	r24, r18
     5c6:	80 95       	com	r24
     5c8:	80 93 be 02 	sts	0x02BE, r24
		TX_BitsRemaining = 9;
     5cc:	89 e0       	ldi	r24, 0x09	; 9
     5ce:	80 93 bd 02 	sts	0x02BD, r24
	}
}
     5d2:	ff 91       	pop	r31
     5d4:	ef 91       	pop	r30
     5d6:	bf 91       	pop	r27
     5d8:	af 91       	pop	r26
     5da:	9f 91       	pop	r25
     5dc:	8f 91       	pop	r24
     5de:	3f 91       	pop	r19
     5e0:	2f 91       	pop	r18
     5e2:	0f 90       	pop	r0
     5e4:	0b be       	out	0x3b, r0	; 59
     5e6:	0f 90       	pop	r0
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	0f 90       	pop	r0
     5ec:	1f 90       	pop	r1
     5ee:	18 95       	reti

000005f0 <USART_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	*DescriptorMemorySpace = MEMSPACE_FLASH;
     5f0:	d9 01       	movw	r26, r18
     5f2:	1c 92       	st	X, r1
	
	switch (DescriptorType)
     5f4:	92 30       	cpi	r25, 0x02	; 2
     5f6:	29 f0       	breq	.+10     	; 0x602 <USART_GetDescriptor+0x12>
     5f8:	93 30       	cpi	r25, 0x03	; 3
     5fa:	41 f0       	breq	.+16     	; 0x60c <USART_GetDescriptor+0x1c>
     5fc:	91 30       	cpi	r25, 0x01	; 1
     5fe:	e9 f4       	brne	.+58     	; 0x63a <USART_GetDescriptor+0x4a>
     600:	17 c0       	rjmp	.+46     	; 0x630 <USART_GetDescriptor+0x40>
			Address = &USART_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &USART_ConfigurationDescriptor;
			Size    = sizeof(USART_USB_Descriptor_Configuration_t);
     602:	2e e3       	ldi	r18, 0x3E	; 62
     604:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &USART_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &USART_ConfigurationDescriptor;
     606:	ea ea       	ldi	r30, 0xAA	; 170
     608:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USART_USB_Descriptor_Configuration_t);
			break;
     60a:	1b c0       	rjmp	.+54     	; 0x642 <USART_GetDescriptor+0x52>
		case DTYPE_String:
			switch (DescriptorNumber)
     60c:	81 30       	cpi	r24, 0x01	; 1
     60e:	41 f0       	breq	.+16     	; 0x620 <USART_GetDescriptor+0x30>
     610:	81 30       	cpi	r24, 0x01	; 1
     612:	18 f0       	brcs	.+6      	; 0x61a <USART_GetDescriptor+0x2a>
     614:	82 30       	cpi	r24, 0x02	; 2
     616:	89 f4       	brne	.+34     	; 0x63a <USART_GetDescriptor+0x4a>
     618:	06 c0       	rjmp	.+12     	; 0x626 <USART_GetDescriptor+0x36>
			{
				case 0x00:
					Address = &USART_LanguageString;
					Size    = pgm_read_byte(&USART_LanguageString.Header.Size);
     61a:	e8 ee       	ldi	r30, 0xE8	; 232
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	05 c0       	rjmp	.+10     	; 0x62a <USART_GetDescriptor+0x3a>
					break;
				case 0x01:
					Address = &USART_ManufacturerString;
					Size    = pgm_read_byte(&USART_ManufacturerString.Header.Size);
     620:	ec ee       	ldi	r30, 0xEC	; 236
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	02 c0       	rjmp	.+4      	; 0x62a <USART_GetDescriptor+0x3a>
					break;
				case 0x02:
					Address = &USART_ProductString;
					Size    = pgm_read_byte(&USART_ProductString.Header.Size);
     626:	e6 e0       	ldi	r30, 0x06	; 6
     628:	f1 e0       	ldi	r31, 0x01	; 1
     62a:	24 91       	lpm	r18, Z+
     62c:	30 e0       	ldi	r19, 0x00	; 0
					break;
     62e:	09 c0       	rjmp	.+18     	; 0x642 <USART_GetDescriptor+0x52>
	
	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &USART_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     630:	22 e1       	ldi	r18, 0x12	; 18
     632:	30 e0       	ldi	r19, 0x00	; 0
	*DescriptorMemorySpace = MEMSPACE_FLASH;
	
	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &USART_DeviceDescriptor;
     634:	e8 e9       	ldi	r30, 0x98	; 152
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	04 c0       	rjmp	.+8      	; 0x642 <USART_GetDescriptor+0x52>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e0       	ldi	r19, 0x00	; 0
                             uint8_t* const DescriptorMemorySpace)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     63e:	e0 e0       	ldi	r30, 0x00	; 0
     640:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     642:	da 01       	movw	r26, r20
     644:	11 96       	adiw	r26, 0x01	; 1
     646:	fc 93       	st	X, r31
     648:	ee 93       	st	-X, r30
	return Size;
}
     64a:	c9 01       	movw	r24, r18
     64c:	08 95       	ret

0000064e <AVRISP_GetDescriptor>:
 */
uint16_t AVRISP_GetDescriptor(const uint16_t wValue,
                              const uint8_t wIndex,
                              const void** const DescriptorAddress,
                              uint8_t* DescriptorMemorySpace)
{
     64e:	f9 01       	movw	r30, r18
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	*DescriptorMemorySpace = MEMSPACE_FLASH;
     650:	10 82       	st	Z, r1
	
	switch (DescriptorType)
     652:	92 30       	cpi	r25, 0x02	; 2
     654:	29 f0       	breq	.+10     	; 0x660 <AVRISP_GetDescriptor+0x12>
     656:	93 30       	cpi	r25, 0x03	; 3
     658:	49 f0       	breq	.+18     	; 0x66c <AVRISP_GetDescriptor+0x1e>
     65a:	91 30       	cpi	r25, 0x01	; 1
     65c:	71 f5       	brne	.+92     	; 0x6ba <AVRISP_GetDescriptor+0x6c>
     65e:	28 c0       	rjmp	.+80     	; 0x6b0 <AVRISP_GetDescriptor+0x62>
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			*DescriptorMemorySpace = MEMSPACE_RAM;
     660:	90 83       	st	Z, r25
				/* Update the configuration descriptor with the current endpoint address */
				AVRISP_ConfigurationDescriptor.AVRISP_DataInEndpoint.EndpointAddress = AVRISP_CurrDataINEndpointAddress;
			#endif

			Address = &AVRISP_ConfigurationDescriptor;
			Size    = sizeof(AVRISP_USB_Descriptor_Configuration_t);
     662:	60 e2       	ldi	r22, 0x20	; 32
     664:	70 e0       	ldi	r23, 0x00	; 0
			#if defined(RESET_TOGGLES_LIBUSB_COMPAT)
				/* Update the configuration descriptor with the current endpoint address */
				AVRISP_ConfigurationDescriptor.AVRISP_DataInEndpoint.EndpointAddress = AVRISP_CurrDataINEndpointAddress;
			#endif

			Address = &AVRISP_ConfigurationDescriptor;
     666:	eb e1       	ldi	r30, 0x1B	; 27
     668:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(AVRISP_USB_Descriptor_Configuration_t);
			break;
     66a:	2b c0       	rjmp	.+86     	; 0x6c2 <AVRISP_GetDescriptor+0x74>
		case DTYPE_String:
			switch (DescriptorNumber)
     66c:	81 30       	cpi	r24, 0x01	; 1
     66e:	51 f0       	breq	.+20     	; 0x684 <AVRISP_GetDescriptor+0x36>
     670:	81 30       	cpi	r24, 0x01	; 1
     672:	28 f0       	brcs	.+10     	; 0x67e <AVRISP_GetDescriptor+0x30>
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	49 f0       	breq	.+18     	; 0x68a <AVRISP_GetDescriptor+0x3c>
     678:	83 30       	cpi	r24, 0x03	; 3
     67a:	f9 f4       	brne	.+62     	; 0x6ba <AVRISP_GetDescriptor+0x6c>
     67c:	0b c0       	rjmp	.+22     	; 0x694 <AVRISP_GetDescriptor+0x46>
			{
				case 0x00:
					Address = &AVRISP_LanguageString;
					Size    = pgm_read_byte(&AVRISP_LanguageString.Header.Size);
     67e:	e0 e4       	ldi	r30, 0x40	; 64
     680:	f1 e0       	ldi	r31, 0x01	; 1
     682:	05 c0       	rjmp	.+10     	; 0x68e <AVRISP_GetDescriptor+0x40>
					break;
				case 0x01:
					Address = &AVRISP_ManufacturerString;
					Size    = pgm_read_byte(&AVRISP_ManufacturerString.Header.Size);
     684:	e4 e4       	ldi	r30, 0x44	; 68
     686:	f1 e0       	ldi	r31, 0x01	; 1
     688:	02 c0       	rjmp	.+4      	; 0x68e <AVRISP_GetDescriptor+0x40>
					break;
				case 0x02:
					Address = &AVRISP_ProductString;
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
     68a:	e2 e5       	ldi	r30, 0x52	; 82
     68c:	f1 e0       	ldi	r31, 0x01	; 1
     68e:	64 91       	lpm	r22, Z+
     690:	70 e0       	ldi	r23, 0x00	; 0
					break;
     692:	17 c0       	rjmp	.+46     	; 0x6c2 <AVRISP_GetDescriptor+0x74>
				case 0x03:
					Address = &AVRISP_SerialString;
					Size    = AVRISP_SerialString.Header.Size;
     694:	60 91 3b 01 	lds	r22, 0x013B
     698:	70 e0       	ldi	r23, 0x00	; 0
					
					/* Update serial number to have a different serial based on the current endpoint address */
					((uint16_t*)&AVRISP_SerialString.UnicodeString)[6] = cpu_to_le16('0' + (AVRISP_DATA_IN_EPADDR & ENDPOINT_EPNUM_MASK));
     69a:	82 e3       	ldi	r24, 0x32	; 50
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	90 93 4a 01 	sts	0x014A, r25
     6a2:	80 93 49 01 	sts	0x0149, r24
					
					*DescriptorMemorySpace = MEMSPACE_RAM;
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	80 83       	st	Z, r24
				case 0x02:
					Address = &AVRISP_ProductString;
					Size    = pgm_read_byte(&AVRISP_ProductString.Header.Size);
					break;
				case 0x03:
					Address = &AVRISP_SerialString;
     6aa:	eb e3       	ldi	r30, 0x3B	; 59
     6ac:	f1 e0       	ldi	r31, 0x01	; 1
					
					/* Update serial number to have a different serial based on the current endpoint address */
					((uint16_t*)&AVRISP_SerialString.UnicodeString)[6] = cpu_to_le16('0' + (AVRISP_DATA_IN_EPADDR & ENDPOINT_EPNUM_MASK));
					
					*DescriptorMemorySpace = MEMSPACE_RAM;
					break;
     6ae:	09 c0       	rjmp	.+18     	; 0x6c2 <AVRISP_GetDescriptor+0x74>
	
	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     6b0:	62 e1       	ldi	r22, 0x12	; 18
     6b2:	70 e0       	ldi	r23, 0x00	; 0
	*DescriptorMemorySpace = MEMSPACE_FLASH;
	
	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &AVRISP_DeviceDescriptor;
     6b4:	ee e2       	ldi	r30, 0x2E	; 46
     6b6:	f1 e0       	ldi	r31, 0x01	; 1
     6b8:	04 c0       	rjmp	.+8      	; 0x6c2 <AVRISP_GetDescriptor+0x74>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	70 e0       	ldi	r23, 0x00	; 0
                              uint8_t* DescriptorMemorySpace)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     6be:	e0 e0       	ldi	r30, 0x00	; 0
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     6c2:	da 01       	movw	r26, r20
     6c4:	11 96       	adiw	r26, 0x01	; 1
     6c6:	fc 93       	st	X, r31
     6c8:	ee 93       	st	-X, r30
	return Size;
}
     6ca:	cb 01       	movw	r24, r22
     6cc:	08 95       	ret

000006ce <__vector_21>:
bool MustLoadExtendedAddress;


/** ISR to manage timeouts whilst processing a V2Protocol command */
ISR(TIMER0_COMPA_vect, ISR_NOBLOCK)
{
     6ce:	78 94       	sei
     6d0:	1f 92       	push	r1
     6d2:	0f 92       	push	r0
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	0f 92       	push	r0
     6d8:	11 24       	eor	r1, r1
     6da:	8f 93       	push	r24
	if (TimeoutTicksRemaining)
     6dc:	8a b5       	in	r24, 0x2a	; 42
     6de:	88 23       	and	r24, r24
     6e0:	21 f0       	breq	.+8      	; 0x6ea <__vector_21+0x1c>
	  TimeoutTicksRemaining--;
     6e2:	8a b5       	in	r24, 0x2a	; 42
     6e4:	81 50       	subi	r24, 0x01	; 1
     6e6:	8a bd       	out	0x2a, r24	; 42
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <__vector_21+0x1e>
	else
	  TCCR0B = 0;
     6ea:	15 bc       	out	0x25, r1	; 37
}
     6ec:	8f 91       	pop	r24
     6ee:	0f 90       	pop	r0
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	0f 90       	pop	r0
     6f4:	1f 90       	pop	r1
     6f6:	18 95       	reti

000006f8 <V2Protocol_Init>:
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(const uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(const uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     6f8:	ea e7       	ldi	r30, 0x7A	; 122
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	87 ea       	ldi	r24, 0xA7	; 167
     6fe:	80 83       	st	Z, r24
			 */
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__))
				DDRF  &= ~(1 << ChannelIndex);
     700:	82 98       	cbi	0x10, 2	; 16
				DIDR0 |=  (1 << ChannelIndex);
     702:	ae e7       	ldi	r26, 0x7E	; 126
     704:	b0 e0       	ldi	r27, 0x00	; 0
     706:	8c 91       	ld	r24, X
     708:	84 60       	ori	r24, 0x04	; 4
     70a:	8c 93       	st	X, r24
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
     70c:	82 e4       	ldi	r24, 0x42	; 66
     70e:	80 93 7c 00 	sts	0x007C, r24
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
				#endif

				ADCSRA |= (1 << ADSC);
     712:	80 81       	ld	r24, Z
     714:	80 64       	ori	r24, 0x40	; 64
     716:	80 83       	st	Z, r24
	ADC_SetupChannel(VTARGET_ADC_CHANNEL);
	ADC_StartReading(VTARGET_REF_MASK | ADC_RIGHT_ADJUSTED | VTARGET_ADC_CHANNEL_MASK);
	#endif

	/* Timeout timer initialization (~10ms period) */
	OCR0A  = (((F_CPU / 1024) / 100) - 1);
     718:	8d e4       	ldi	r24, 0x4D	; 77
     71a:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);
     71c:	82 e0       	ldi	r24, 0x02	; 2
     71e:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1 << OCIE0A);
     720:	80 93 6e 00 	sts	0x006E, r24
	V2Params_LoadNonVolatileParamValues();

	#if defined(ENABLE_ISP_PROTOCOL)
	ISPTarget_ConfigureRescueClock();
	#endif
}
     724:	ee c0       	rjmp	.+476    	; 0x902 <V2Params_LoadNonVolatileParamValues>

00000726 <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
void V2Protocol_ProcessCommand(void)
{
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	df 93       	push	r29
     72c:	cf 93       	push	r28
     72e:	0f 92       	push	r0
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     734:	10 91 f1 00 	lds	r17, 0x00F1
	uint8_t V2Command = Endpoint_Read_8();

	/* Reset timeout counter duration and start the timer */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
     738:	84 e6       	ldi	r24, 0x64	; 100
     73a:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = ((1 << CS02) | (1 << CS00));	
     73c:	85 e0       	ldi	r24, 0x05	; 5
     73e:	85 bd       	out	0x25, r24	; 37

	switch (V2Command)
     740:	16 30       	cpi	r17, 0x06	; 6
     742:	09 f4       	brne	.+2      	; 0x746 <V2Protocol_ProcessCommand+0x20>
     744:	5e c0       	rjmp	.+188    	; 0x802 <V2Protocol_ProcessCommand+0xdc>
     746:	17 30       	cpi	r17, 0x07	; 7
     748:	48 f4       	brcc	.+18     	; 0x75c <V2Protocol_ProcessCommand+0x36>
     74a:	11 30       	cpi	r17, 0x01	; 1
     74c:	89 f0       	breq	.+34     	; 0x770 <V2Protocol_ProcessCommand+0x4a>
     74e:	11 30       	cpi	r17, 0x01	; 1
     750:	08 f4       	brcc	.+2      	; 0x754 <V2Protocol_ProcessCommand+0x2e>
     752:	99 c0       	rjmp	.+306    	; 0x886 <V2Protocol_ProcessCommand+0x160>
     754:	14 30       	cpi	r17, 0x04	; 4
     756:	08 f0       	brcs	.+2      	; 0x75a <V2Protocol_ProcessCommand+0x34>
     758:	96 c0       	rjmp	.+300    	; 0x886 <V2Protocol_ProcessCommand+0x160>
     75a:	26 c0       	rjmp	.+76     	; 0x7a8 <V2Protocol_ProcessCommand+0x82>
     75c:	10 35       	cpi	r17, 0x50	; 80
     75e:	09 f4       	brne	.+2      	; 0x762 <V2Protocol_ProcessCommand+0x3c>
     760:	89 c0       	rjmp	.+274    	; 0x874 <V2Protocol_ProcessCommand+0x14e>
     762:	11 35       	cpi	r17, 0x51	; 81
     764:	09 f4       	brne	.+2      	; 0x768 <V2Protocol_ProcessCommand+0x42>
     766:	84 c0       	rjmp	.+264    	; 0x870 <V2Protocol_ProcessCommand+0x14a>
     768:	1a 30       	cpi	r17, 0x0A	; 10
     76a:	09 f0       	breq	.+2      	; 0x76e <V2Protocol_ProcessCommand+0x48>
     76c:	8c c0       	rjmp	.+280    	; 0x886 <V2Protocol_ProcessCommand+0x160>
     76e:	6e c0       	rjmp	.+220    	; 0x84c <V2Protocol_ProcessCommand+0x126>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     770:	80 91 e8 00 	lds	r24, 0x00E8
     774:	8b 77       	andi	r24, 0x7B	; 123
     776:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     77a:	82 e0       	ldi	r24, 0x02	; 2
     77c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     780:	80 91 ec 00 	lds	r24, 0x00EC
     784:	81 60       	ori	r24, 0x01	; 1
     786:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     78a:	10 93 f1 00 	sts	0x00F1, r17
     78e:	10 92 f1 00 	sts	0x00F1, r1
     792:	8a e0       	ldi	r24, 0x0A	; 10
     794:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(CMD_SIGN_ON);
	Endpoint_Write_8(STATUS_CMD_OK);
	Endpoint_Write_8(sizeof(PROGRAMMER_ID) - 1);
	Endpoint_Write_Stream_LE(PROGRAMMER_ID, (sizeof(PROGRAMMER_ID) - 1), NULL);
     798:	89 e5       	ldi	r24, 0x59	; 89
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	6a e0       	ldi	r22, 0x0A	; 10
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	40 e0       	ldi	r20, 0x00	; 0
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	75 d7       	rcall	.+3818   	; 0x1690 <Endpoint_Write_Stream_LE>
     7a6:	88 c0       	rjmp	.+272    	; 0x8b8 <V2Protocol_ProcessCommand+0x192>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     7a8:	00 91 f1 00 	lds	r16, 0x00F1
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = Endpoint_Read_8();
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER)
     7ac:	12 30       	cpi	r17, 0x02	; 2
     7ae:	19 f4       	brne	.+6      	; 0x7b6 <V2Protocol_ProcessCommand+0x90>
     7b0:	60 91 f1 00 	lds	r22, 0x00F1
     7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <V2Protocol_ProcessCommand+0x92>
     7b6:	60 e0       	ldi	r22, 0x00	; 0
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7b8:	80 91 e8 00 	lds	r24, 0x00E8
     7bc:	8b 77       	andi	r24, 0x7B	; 123
     7be:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     7c8:	80 91 ec 00 	lds	r24, 0x00EC
     7cc:	81 60       	ori	r24, 0x01	; 1
     7ce:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7d2:	10 93 f1 00 	sts	0x00F1, r17
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	Endpoint_Write_8(V2Command);

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
     7d6:	80 2f       	mov	r24, r16
     7d8:	69 83       	std	Y+1, r22	; 0x01
     7da:	c8 d0       	rcall	.+400    	; 0x96c <V2Params_GetParameterPrivileges>

	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
     7dc:	69 81       	ldd	r22, Y+1	; 0x01
     7de:	12 30       	cpi	r17, 0x02	; 2
     7e0:	39 f4       	brne	.+14     	; 0x7f0 <V2Protocol_ProcessCommand+0xca>
     7e2:	81 ff       	sbrs	r24, 1
     7e4:	0c c0       	rjmp	.+24     	; 0x7fe <V2Protocol_ProcessCommand+0xd8>
     7e6:	10 92 f1 00 	sts	0x00F1, r1
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		V2Params_SetParameterValue(ParamID, ParamValue);
     7ea:	80 2f       	mov	r24, r16
     7ec:	cf d0       	rcall	.+414    	; 0x98c <V2Params_SetParameterValue>
     7ee:	64 c0       	rjmp	.+200    	; 0x8b8 <V2Protocol_ProcessCommand+0x192>
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
     7f0:	80 ff       	sbrs	r24, 0
     7f2:	05 c0       	rjmp	.+10     	; 0x7fe <V2Protocol_ProcessCommand+0xd8>
     7f4:	10 92 f1 00 	sts	0x00F1, r1
	{
		Endpoint_Write_8(STATUS_CMD_OK);
		Endpoint_Write_8(V2Params_GetParameterValue(ParamID));
     7f8:	80 2f       	mov	r24, r16
     7fa:	c0 d0       	rcall	.+384    	; 0x97c <V2Params_GetParameterValue>
     7fc:	5b c0       	rjmp	.+182    	; 0x8b4 <V2Protocol_ProcessCommand+0x18e>
     7fe:	80 ec       	ldi	r24, 0xC0	; 192
     800:	59 c0       	rjmp	.+178    	; 0x8b4 <V2Protocol_ProcessCommand+0x18e>
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	Endpoint_Read_Stream_BE(&CurrentAddress, sizeof(CurrentAddress), NULL);
     802:	8b ed       	ldi	r24, 0xDB	; 219
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	64 e0       	ldi	r22, 0x04	; 4
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	50 e0       	ldi	r21, 0x00	; 0
     80e:	fc d7       	rcall	.+4088   	; 0x1808 <Endpoint_Read_Stream_BE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     810:	80 91 e8 00 	lds	r24, 0x00E8
     814:	8b 77       	andi	r24, 0x7B	; 123
     816:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     820:	80 91 ec 00 	lds	r24, 0x00EC
     824:	81 60       	ori	r24, 0x01	; 1
     826:	80 93 ec 00 	sts	0x00EC, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (CurrentAddress & (1UL << 31))
     82a:	80 91 db 02 	lds	r24, 0x02DB
     82e:	90 91 dc 02 	lds	r25, 0x02DC
     832:	a0 91 dd 02 	lds	r26, 0x02DD
     836:	b0 91 de 02 	lds	r27, 0x02DE
     83a:	b7 ff       	sbrs	r27, 7
     83c:	03 c0       	rjmp	.+6      	; 0x844 <V2Protocol_ProcessCommand+0x11e>
	  MustLoadExtendedAddress = true;
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	80 93 da 02 	sts	0x02DA, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     844:	86 e0       	ldi	r24, 0x06	; 6
     846:	80 93 f1 00 	sts	0x00F1, r24
     84a:	0f c0       	rjmp	.+30     	; 0x86a <V2Protocol_ProcessCommand+0x144>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     84c:	80 91 e8 00 	lds	r24, 0x00E8
     850:	8b 77       	andi	r24, 0x7B	; 123
     852:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     856:	82 e0       	ldi	r24, 0x02	; 2
     858:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     85c:	80 91 ec 00 	lds	r24, 0x00EC
     860:	81 60       	ori	r24, 0x01	; 1
     862:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     866:	10 93 f1 00 	sts	0x00F1, r17
     86a:	10 92 f1 00 	sts	0x00F1, r1
     86e:	24 c0       	rjmp	.+72     	; 0x8b8 <V2Protocol_ProcessCommand+0x192>
			ISPProtocol_SPIMulti();
			break;
#endif
#if defined(ENABLE_XPROG_PROTOCOL)
		case CMD_XPROG_SETMODE:
			XPROGProtocol_SetMode();
     870:	c8 d1       	rcall	.+912    	; 0xc02 <XPROGProtocol_SetMode>
			break;
     872:	27 c0       	rjmp	.+78     	; 0x8c2 <V2Protocol_ProcessCommand+0x19c>
		case CMD_XPROG:
			XPROGProtocol_Command();
     874:	f6 d1       	rcall	.+1004   	; 0xc62 <XPROGProtocol_Command>
			break;
     876:	25 c0       	rjmp	.+74     	; 0x8c2 <V2Protocol_ProcessCommand+0x19c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     878:	80 91 e8 00 	lds	r24, 0x00E8
     87c:	8b 77       	andi	r24, 0x7B	; 123
     87e:	80 93 e8 00 	sts	0x00E8, r24
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     882:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <Endpoint_WaitUntilReady>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     886:	80 91 f2 00 	lds	r24, 0x00F2
     88a:	90 91 f3 00 	lds	r25, 0x00F3
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_UnknownCommand(const uint8_t V2Command)
{
	/* Discard all incoming data */
	while (Endpoint_BytesInEndpoint() == AVRISP_DATA_EPSIZE)
     88e:	80 34       	cpi	r24, 0x40	; 64
     890:	91 05       	cpc	r25, r1
     892:	91 f3       	breq	.-28     	; 0x878 <V2Protocol_ProcessCommand+0x152>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     894:	80 91 e8 00 	lds	r24, 0x00E8
     898:	8b 77       	andi	r24, 0x7B	; 123
     89a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     8a4:	80 91 ec 00 	lds	r24, 0x00EC
     8a8:	81 60       	ori	r24, 0x01	; 1
     8aa:	80 93 ec 00 	sts	0x00EC, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8ae:	10 93 f1 00 	sts	0x00F1, r17
     8b2:	89 ec       	ldi	r24, 0xC9	; 201
     8b4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8b8:	80 91 e8 00 	lds	r24, 0x00E8
     8bc:	8e 77       	andi	r24, 0x7E	; 126
     8be:	80 93 e8 00 	sts	0x00E8, r24
			V2Protocol_UnknownCommand(V2Command);
			break;
	}

	/* Disable the timeout management timer */
	TCCR0B = 0;
     8c2:	15 bc       	out	0x25, r1	; 37

	Endpoint_WaitUntilReady();
     8c4:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <Endpoint_WaitUntilReady>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     8ce:	80 91 ec 00 	lds	r24, 0x00EC
     8d2:	8e 7f       	andi	r24, 0xFE	; 254
     8d4:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_OUT_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_OUT);
}
     8d8:	0f 90       	pop	r0
     8da:	cf 91       	pop	r28
     8dc:	df 91       	pop	r29
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	08 95       	ret

000008e4 <V2Params_GetParamFromTable>:
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;
     8e4:	e4 e6       	ldi	r30, 0x64	; 100
     8e6:	f1 e0       	ldi	r31, 0x01	; 1

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
     8e8:	90 81       	ld	r25, Z
     8ea:	89 17       	cp	r24, r25
     8ec:	41 f0       	breq	.+16     	; 0x8fe <V2Params_GetParamFromTable+0x1a>
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	ef 37       	cpi	r30, 0x7F	; 127
     8f2:	f9 07       	cpc	r31, r25
     8f4:	11 f0       	breq	.+4      	; 0x8fa <V2Params_GetParamFromTable+0x16>
	{
		if (ParamID == CurrTableItem->ParamID)
		  return CurrTableItem;

		CurrTableItem++;
     8f6:	33 96       	adiw	r30, 0x03	; 3
     8f8:	f7 cf       	rjmp	.-18     	; 0x8e8 <V2Params_GetParamFromTable+0x4>
	}

	return NULL;
     8fa:	e0 e0       	ldi	r30, 0x00	; 0
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
}
     8fe:	cf 01       	movw	r24, r30
     900:	08 95       	ret

00000902 <V2Params_LoadNonVolatileParamValues>:
	};


/** Loads saved non-volatile parameter values from the EEPROM into the parameter table, as needed. */
void V2Params_LoadNonVolatileParamValues(void)
{
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
	/* Read parameter values that are stored in non-volatile EEPROM */
	uint8_t ResetPolarity = eeprom_read_byte(&EEPROM_Reset_Polarity);
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 42 12 	call	0x2484	; 0x2484 <__eerd_byte_usb1287>
     90e:	08 2f       	mov	r16, r24
	uint8_t SCKDuration   = eeprom_read_byte(&EEPROM_SCK_Duration);
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 42 12 	call	0x2484	; 0x2484 <__eerd_byte_usb1287>
     918:	18 2f       	mov	r17, r24

	/* Update current parameter table if the EEPROM contents was not blank */
	if (ResetPolarity != 0xFF)
     91a:	0f 3f       	cpi	r16, 0xFF	; 255
     91c:	21 f0       	breq	.+8      	; 0x926 <V2Params_LoadNonVolatileParamValues+0x24>
	  V2Params_GetParamFromTable(PARAM_RESET_POLARITY)->ParamValue = ResetPolarity;
     91e:	8e e9       	ldi	r24, 0x9E	; 158
     920:	e1 df       	rcall	.-62     	; 0x8e4 <V2Params_GetParamFromTable>
     922:	fc 01       	movw	r30, r24
     924:	02 83       	std	Z+2, r16	; 0x02

	/* Update current parameter table if the EEPROM contents was not blank */
	if (SCKDuration != 0xFF)
     926:	1f 3f       	cpi	r17, 0xFF	; 255
     928:	21 f0       	breq	.+8      	; 0x932 <V2Params_LoadNonVolatileParamValues+0x30>
	  V2Params_GetParamFromTable(PARAM_SCK_DURATION)->ParamValue   = SCKDuration;
     92a:	88 e9       	ldi	r24, 0x98	; 152
     92c:	db df       	rcall	.-74     	; 0x8e4 <V2Params_GetParamFromTable>
     92e:	fc 01       	movw	r30, r24
     930:	12 83       	std	Z+2, r17	; 0x02
}
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	08 95       	ret

00000938 <V2Params_UpdateParamValues>:
 */
void V2Params_UpdateParamValues(void)
{
	#if (defined(ADC) && !defined(NO_VTARGET_DETECT))
	/* Update VTARGET parameter with the latest ADC conversion of VTARGET on supported AVR models */
	V2Params_GetParamFromTable(PARAM_VTARGET)->ParamValue = (((uint16_t)(VTARGET_REF_VOLTS * 10 * VTARGET_SCALE_FACTOR) * ADC_GetResult()) / 1024);
     938:	84 e9       	ldi	r24, 0x94	; 148
     93a:	d4 df       	rcall	.-88     	; 0x8e4 <V2Params_GetParamFromTable>
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
     93c:	ea e7       	ldi	r30, 0x7A	; 122
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	20 81       	ld	r18, Z
     942:	20 61       	ori	r18, 0x10	; 16
     944:	20 83       	st	Z, r18
				return ADC;
     946:	60 91 78 00 	lds	r22, 0x0078
     94a:	70 91 79 00 	lds	r23, 0x0079
     94e:	42 e3       	ldi	r20, 0x32	; 50
     950:	50 e0       	ldi	r21, 0x00	; 0
     952:	64 9f       	mul	r22, r20
     954:	90 01       	movw	r18, r0
     956:	65 9f       	mul	r22, r21
     958:	30 0d       	add	r19, r0
     95a:	74 9f       	mul	r23, r20
     95c:	30 0d       	add	r19, r0
     95e:	11 24       	eor	r1, r1
     960:	23 2f       	mov	r18, r19
     962:	26 95       	lsr	r18
     964:	26 95       	lsr	r18
     966:	fc 01       	movw	r30, r24
     968:	22 83       	std	Z+2, r18	; 0x02
	#endif
}
     96a:	08 95       	ret

0000096c <V2Params_GetParameterPrivileges>:
 *
 *  \return Privileges for the requested parameter, as a mask of \c PARAM_PRIV_* masks
 */
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
     96c:	bb df       	rcall	.-138    	; 0x8e4 <V2Params_GetParamFromTable>

	if (ParamInfo == NULL)
     96e:	00 97       	sbiw	r24, 0x00	; 0
     970:	19 f0       	breq	.+6      	; 0x978 <V2Params_GetParameterPrivileges+0xc>
	  return 0;

	return ParamInfo->ParamPrivileges;
     972:	fc 01       	movw	r30, r24
     974:	81 81       	ldd	r24, Z+1	; 0x01
     976:	08 95       	ret
uint8_t V2Params_GetParameterPrivileges(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);

	if (ParamInfo == NULL)
	  return 0;
     978:	80 e0       	ldi	r24, 0x00	; 0

	return ParamInfo->ParamPrivileges;
}
     97a:	08 95       	ret

0000097c <V2Params_GetParameterValue>:
 *
 *  \return Current value of the parameter in the table, or 0 if not found
 */
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
     97c:	b3 df       	rcall	.-154    	; 0x8e4 <V2Params_GetParamFromTable>

	if (ParamInfo == NULL)
     97e:	00 97       	sbiw	r24, 0x00	; 0
     980:	19 f0       	breq	.+6      	; 0x988 <V2Params_GetParameterValue+0xc>
	  return 0;

	return ParamInfo->ParamValue;
     982:	fc 01       	movw	r30, r24
     984:	82 81       	ldd	r24, Z+2	; 0x02
     986:	08 95       	ret
uint8_t V2Params_GetParameterValue(const uint8_t ParamID)
{
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);

	if (ParamInfo == NULL)
	  return 0;
     988:	80 e0       	ldi	r24, 0x00	; 0

	return ParamInfo->ParamValue;
}
     98a:	08 95       	ret

0000098c <V2Params_SetParameterValue>:
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
void V2Params_SetParameterValue(const uint8_t ParamID,
                                const uint8_t Value)
{
     98c:	1f 93       	push	r17
     98e:	df 93       	push	r29
     990:	cf 93       	push	r28
     992:	0f 92       	push	r0
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
     998:	18 2f       	mov	r17, r24
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
     99a:	69 83       	std	Y+1, r22	; 0x01
     99c:	a3 df       	rcall	.-186    	; 0x8e4 <V2Params_GetParamFromTable>
     99e:	fc 01       	movw	r30, r24

	if (ParamInfo == NULL)
     9a0:	69 81       	ldd	r22, Y+1	; 0x01
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	61 f0       	breq	.+24     	; 0x9be <V2Params_SetParameterValue+0x32>
	  return;

	ParamInfo->ParamValue = Value;
     9a6:	62 83       	std	Z+2, r22	; 0x02

	/* The target RESET line polarity is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_RESET_POLARITY)
     9a8:	1e 39       	cpi	r17, 0x9E	; 158
     9aa:	19 f4       	brne	.+6      	; 0x9b2 <V2Params_SetParameterValue+0x26>
	  eeprom_update_byte(&EEPROM_Reset_Polarity, Value);
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	04 c0       	rjmp	.+8      	; 0x9ba <V2Params_SetParameterValue+0x2e>

	/* The target SCK line period is a non-volatile parameter, save to EEPROM when changed */
	if (ParamID == PARAM_SCK_DURATION)
     9b2:	18 39       	cpi	r17, 0x98	; 152
     9b4:	21 f4       	brne	.+8      	; 0x9be <V2Params_SetParameterValue+0x32>
	  eeprom_update_byte(&EEPROM_SCK_Duration, Value);
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 4a 12 	call	0x2494	; 0x2494 <__eeupd_byte_usb1287>
}
     9be:	0f 90       	pop	r0
     9c0:	cf 91       	pop	r28
     9c2:	df 91       	pop	r29
     9c4:	1f 91       	pop	r17
     9c6:	08 95       	ret

000009c8 <SwapEndian_32>:
			 *
			 *  \return Input data with the individual bytes reversed.
			 */
			static inline uint32_t SwapEndian_32(const uint32_t DWord) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
			static inline uint32_t SwapEndian_32(const uint32_t DWord)
			{
     9c8:	9b 01       	movw	r18, r22
				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
			}
     9ca:	69 2f       	mov	r22, r25
     9cc:	78 2f       	mov	r23, r24
     9ce:	83 2f       	mov	r24, r19
     9d0:	92 2f       	mov	r25, r18
     9d2:	08 95       	ret

000009d4 <SwapEndian_16>:
			 *
			 *  \return Input data with the individual bytes reversed.
			 */
			static inline uint16_t SwapEndian_16(const uint16_t Word) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
			static inline uint16_t SwapEndian_16(const uint16_t Word)
			{
     9d4:	28 2f       	mov	r18, r24
				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
			}
     9d6:	89 2f       	mov	r24, r25
     9d8:	92 2f       	mov	r25, r18
     9da:	08 95       	ret

000009dc <XPROGProtocol_WriteMemory>:
	Endpoint_ClearIN();
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
     9dc:	af 92       	push	r10
     9de:	bf 92       	push	r11
     9e0:	cf 92       	push	r12
     9e2:	df 92       	push	r13
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	df 93       	push	r29
     9ee:	cf 93       	push	r28
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
     9f4:	c8 50       	subi	r28, 0x08	; 8
     9f6:	d1 40       	sbci	r29, 0x01	; 1
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	cd bf       	out	0x3d, r28	; 61
		uint32_t Address;
		uint16_t Length;
		uint8_t  ProgData[256];
	} WriteMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params, (sizeof(WriteMemory_XPROG_Params) -
     a02:	ce 01       	movw	r24, r28
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	68 e0       	ldi	r22, 0x08	; 8
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	9e d6       	rcall	.+3388   	; 0x174c <Endpoint_Read_Stream_LE>
	                                                    sizeof(WriteMemory_XPROG_Params).ProgData), NULL);
	WriteMemory_XPROG_Params.Address = SwapEndian_32(WriteMemory_XPROG_Params.Address);
     a10:	6b 81       	ldd	r22, Y+3	; 0x03
     a12:	7c 81       	ldd	r23, Y+4	; 0x04
     a14:	8d 81       	ldd	r24, Y+5	; 0x05
     a16:	9e 81       	ldd	r25, Y+6	; 0x06
     a18:	d7 df       	rcall	.-82     	; 0x9c8 <SwapEndian_32>
     a1a:	6b 83       	std	Y+3, r22	; 0x03
     a1c:	7c 83       	std	Y+4, r23	; 0x04
     a1e:	8d 83       	std	Y+5, r24	; 0x05
     a20:	9e 83       	std	Y+6, r25	; 0x06
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
     a22:	8f 81       	ldd	r24, Y+7	; 0x07
     a24:	98 85       	ldd	r25, Y+8	; 0x08
     a26:	d6 df       	rcall	.-84     	; 0x9d4 <SwapEndian_16>
     a28:	bc 01       	movw	r22, r24
     a2a:	98 87       	std	Y+8, r25	; 0x08
     a2c:	8f 83       	std	Y+7, r24	; 0x07
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NULL);
     a2e:	ce 01       	movw	r24, r28
     a30:	09 96       	adiw	r24, 0x09	; 9
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	8a d6       	rcall	.+3348   	; 0x174c <Endpoint_Read_Stream_LE>

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(WriteMemory_XPROG_Params) - sizeof(WriteMemory_XPROG_Params.ProgData)) +
     a38:	8f 81       	ldd	r24, Y+7	; 0x07
     a3a:	98 85       	ldd	r25, Y+8	; 0x08
     a3c:	09 96       	adiw	r24, 0x09	; 9
	    WriteMemory_XPROG_Params.Length) % AVRISP_DATA_EPSIZE == 0)
     a3e:	8f 73       	andi	r24, 0x3F	; 63
     a40:	90 70       	andi	r25, 0x00	; 0
	WriteMemory_XPROG_Params.Length  = SwapEndian_16(WriteMemory_XPROG_Params.Length);
	Endpoint_Read_Stream_LE(&WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length, NULL);

	// The driver will terminate transfers that are a round multiple of the endpoint bank in size with a ZLP, need
	// to catch this and discard it before continuing on with packet processing to prevent communication issues
	if (((sizeof(uint8_t) + sizeof(WriteMemory_XPROG_Params) - sizeof(WriteMemory_XPROG_Params.ProgData)) +
     a42:	00 97       	sbiw	r24, 0x00	; 0
     a44:	39 f4       	brne	.+14     	; 0xa54 <XPROGProtocol_WriteMemory+0x78>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a46:	80 91 e8 00 	lds	r24, 0x00E8
     a4a:	8b 77       	andi	r24, 0x7B	; 123
     a4c:	80 93 e8 00 	sts	0x00E8, r24
	    WriteMemory_XPROG_Params.Length) % AVRISP_DATA_EPSIZE == 0)
	{
		Endpoint_ClearOUT();
		Endpoint_WaitUntilReady();
     a50:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <Endpoint_WaitUntilReady>
     a54:	80 91 e8 00 	lds	r24, 0x00E8
     a58:	8b 77       	andi	r24, 0x7B	; 123
     a5a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a5e:	82 e0       	ldi	r24, 0x02	; 2
     a60:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     a64:	80 91 ec 00 	lds	r24, 0x00EC
     a68:	81 60       	ori	r24, 0x01	; 1
     a6a:	80 93 ec 00 	sts	0x00EC, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     a6e:	80 91 c1 02 	lds	r24, 0x02C1
     a72:	88 23       	and	r24, r24
     a74:	a1 f5       	brne	.+104    	; 0xade <XPROGProtocol_WriteMemory+0x102>
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
		bool    PagedMemory      = true;

		switch (WriteMemory_XPROG_Params.MemoryType)
     a76:	29 81       	ldd	r18, Y+1	; 0x01
     a78:	21 50       	subi	r18, 0x01	; 1
     a7a:	26 30       	cpi	r18, 0x06	; 6
     a7c:	a0 f4       	brcc	.+40     	; 0xaa6 <XPROGProtocol_WriteMemory+0xca>
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	f9 01       	movw	r30, r18
     a82:	ee 56       	subi	r30, 0x6E	; 110
     a84:	fe 4f       	sbci	r31, 0xFE	; 254
     a86:	90 81       	ld	r25, Z
     a88:	f9 01       	movw	r30, r18
     a8a:	e8 56       	subi	r30, 0x68	; 104
     a8c:	fe 4f       	sbci	r31, 0xFE	; 254
     a8e:	80 81       	ld	r24, Z
     a90:	f9 01       	movw	r30, r18
     a92:	e2 56       	subi	r30, 0x62	; 98
     a94:	fe 4f       	sbci	r31, 0xFE	; 254
     a96:	60 81       	ld	r22, Z
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
     a98:	2c 55       	subi	r18, 0x5C	; 92
     a9a:	3e 4f       	sbci	r19, 0xFE	; 254
     a9c:	f9 01       	movw	r30, r18
     a9e:	20 81       	ld	r18, Z
     aa0:	22 23       	and	r18, r18
     aa2:	99 f0       	breq	.+38     	; 0xaca <XPROGProtocol_WriteMemory+0xee>
     aa4:	03 c0       	rjmp	.+6      	; 0xaac <XPROGProtocol_WriteMemory+0xd0>
		uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
		uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
		uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
		bool    PagedMemory      = true;

		switch (WriteMemory_XPROG_Params.MemoryType)
     aa6:	66 e2       	ldi	r22, 0x26	; 38
     aa8:	83 e2       	ldi	r24, 0x23	; 35
     aaa:	9e e2       	ldi	r25, 0x2E	; 46
				PagedMemory      = false;
				break;
		}

		/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
		if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
     aac:	eb 80       	ldd	r14, Y+3	; 0x03
     aae:	fc 80       	ldd	r15, Y+4	; 0x04
     ab0:	0d 81       	ldd	r16, Y+5	; 0x05
     ab2:	1e 81       	ldd	r17, Y+6	; 0x06
     ab4:	af 80       	ldd	r10, Y+7	; 0x07
     ab6:	b8 84       	ldd	r11, Y+8	; 0x08
     ab8:	49 2f       	mov	r20, r25
     aba:	2a 81       	ldd	r18, Y+2	; 0x02
     abc:	99 e0       	ldi	r25, 0x09	; 9
     abe:	c9 2e       	mov	r12, r25
     ac0:	d1 2c       	mov	r13, r1
     ac2:	cc 0e       	add	r12, r28
     ac4:	dd 1e       	adc	r13, r29
     ac6:	03 d4       	rcall	.+2054   	; 0x12ce <XMEGANVM_WritePageMemory>
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <XPROGProtocol_WriteMemory+0x112>
													   WriteMemory_XPROG_Params.PageMode, WriteMemory_XPROG_Params.Address,
													   WriteMemory_XPROG_Params.ProgData, WriteMemory_XPROG_Params.Length))) ||
		   (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, WriteMemory_XPROG_Params.Address,
     aca:	2b 81       	ldd	r18, Y+3	; 0x03
     acc:	3c 81       	ldd	r19, Y+4	; 0x04
     ace:	4d 81       	ldd	r20, Y+5	; 0x05
     ad0:	5e 81       	ldd	r21, Y+6	; 0x06
     ad2:	89 2f       	mov	r24, r25
     ad4:	ba 01       	movw	r22, r20
     ad6:	a9 01       	movw	r20, r18
     ad8:	29 85       	ldd	r18, Y+9	; 0x09
     ada:	d5 d3       	rcall	.+1962   	; 0x1286 <XMEGANVM_WriteByteMemory>
     adc:	08 c0       	rjmp	.+16     	; 0xaee <XPROGProtocol_WriteMemory+0x112>
		}
	}
	else
	{
		/* Send write command to the TPI device, indicate timeout if occurred */
		if (!(TINYNVM_WriteMemory(WriteMemory_XPROG_Params.Address, WriteMemory_XPROG_Params.ProgData,
     ade:	4f 81       	ldd	r20, Y+7	; 0x07
     ae0:	58 85       	ldd	r21, Y+8	; 0x08
     ae2:	8b 81       	ldd	r24, Y+3	; 0x03
     ae4:	9c 81       	ldd	r25, Y+4	; 0x04
     ae6:	be 01       	movw	r22, r28
     ae8:	67 5f       	subi	r22, 0xF7	; 247
     aea:	7f 4f       	sbci	r23, 0xFF	; 255
     aec:	7b d5       	rcall	.+2806   	; 0x15e4 <TINYNVM_WriteMemory>
     aee:	88 23       	and	r24, r24
     af0:	11 f0       	breq	.+4      	; 0xaf6 <XPROGProtocol_WriteMemory+0x11a>
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <XPROGProtocol_WriteMemory+0x11c>
	{
		/* Send write command to the TPI device, indicate timeout if occurred */
		if (!(TINYNVM_WriteMemory(WriteMemory_XPROG_Params.Address, WriteMemory_XPROG_Params.ProgData,
		      WriteMemory_XPROG_Params.Length)))
		{
			ReturnStatus = XPRG_ERR_TIMEOUT;
     af6:	83 e0       	ldi	r24, 0x03	; 3
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     af8:	90 e5       	ldi	r25, 0x50	; 80
     afa:	90 93 f1 00 	sts	0x00F1, r25
     afe:	94 e0       	ldi	r25, 0x04	; 4
     b00:	90 93 f1 00 	sts	0x00F1, r25
     b04:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b08:	80 91 e8 00 	lds	r24, 0x00E8
     b0c:	8e 77       	andi	r24, 0x7E	; 126
     b0e:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_WRITE_MEM);
	Endpoint_Write_8(ReturnStatus);
	Endpoint_ClearIN();
}
     b12:	c8 5f       	subi	r28, 0xF8	; 248
     b14:	de 4f       	sbci	r29, 0xFE	; 254
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
     b20:	cf 91       	pop	r28
     b22:	df 91       	pop	r29
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	ff 90       	pop	r15
     b2a:	ef 90       	pop	r14
     b2c:	df 90       	pop	r13
     b2e:	cf 90       	pop	r12
     b30:	bf 90       	pop	r11
     b32:	af 90       	pop	r10
     b34:	08 95       	ret

00000b36 <XPROGProtocol_ReadMemory>:

/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	c7 50       	subi	r28, 0x07	; 7
     b40:	d1 40       	sbci	r29, 0x01	; 1
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
		uint8_t  MemoryType;
		uint32_t Address;
		uint16_t Length;
	} ReadMemory_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadMemory_XPROG_Params, sizeof(ReadMemory_XPROG_Params), NULL);
     b4c:	ce 01       	movw	r24, r28
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	f9 d5       	rcall	.+3058   	; 0x174c <Endpoint_Read_Stream_LE>
	ReadMemory_XPROG_Params.Address = SwapEndian_32(ReadMemory_XPROG_Params.Address);
     b5a:	6a 81       	ldd	r22, Y+2	; 0x02
     b5c:	7b 81       	ldd	r23, Y+3	; 0x03
     b5e:	8c 81       	ldd	r24, Y+4	; 0x04
     b60:	9d 81       	ldd	r25, Y+5	; 0x05
     b62:	32 df       	rcall	.-412    	; 0x9c8 <SwapEndian_32>
     b64:	6a 83       	std	Y+2, r22	; 0x02
     b66:	7b 83       	std	Y+3, r23	; 0x03
     b68:	8c 83       	std	Y+4, r24	; 0x04
     b6a:	9d 83       	std	Y+5, r25	; 0x05
	ReadMemory_XPROG_Params.Length  = SwapEndian_16(ReadMemory_XPROG_Params.Length);
     b6c:	8e 81       	ldd	r24, Y+6	; 0x06
     b6e:	9f 81       	ldd	r25, Y+7	; 0x07
     b70:	31 df       	rcall	.-414    	; 0x9d4 <SwapEndian_16>
     b72:	9f 83       	std	Y+7, r25	; 0x07
     b74:	8e 83       	std	Y+6, r24	; 0x06
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b76:	80 91 e8 00 	lds	r24, 0x00E8
     b7a:	8b 77       	andi	r24, 0x7B	; 123
     b7c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     b86:	80 91 ec 00 	lds	r24, 0x00EC
     b8a:	81 60       	ori	r24, 0x01	; 1
     b8c:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t ReadBuffer[256];

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     b90:	80 91 c1 02 	lds	r24, 0x02C1
     b94:	2e 81       	ldd	r18, Y+6	; 0x06
     b96:	3f 81       	ldd	r19, Y+7	; 0x07
     b98:	ae 01       	movw	r20, r28
     b9a:	48 5f       	subi	r20, 0xF8	; 248
     b9c:	5f 4f       	sbci	r21, 0xFF	; 255
     b9e:	88 23       	and	r24, r24
     ba0:	31 f4       	brne	.+12     	; 0xbae <XPROGProtocol_ReadMemory+0x78>
	{
		/* Read the PDI target's memory, indicate timeout if occurred */
		if (!(XMEGANVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
     ba2:	6a 81       	ldd	r22, Y+2	; 0x02
     ba4:	7b 81       	ldd	r23, Y+3	; 0x03
     ba6:	8c 81       	ldd	r24, Y+4	; 0x04
     ba8:	9d 81       	ldd	r25, Y+5	; 0x05
     baa:	32 d3       	rcall	.+1636   	; 0x1210 <XMEGANVM_ReadMemory>
     bac:	05 c0       	rjmp	.+10     	; 0xbb8 <XPROGProtocol_ReadMemory+0x82>
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		/* Read the TPI target's memory, indicate timeout if occurred */
		if (!(TINYNVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
     bae:	8a 81       	ldd	r24, Y+2	; 0x02
     bb0:	9b 81       	ldd	r25, Y+3	; 0x03
     bb2:	ba 01       	movw	r22, r20
     bb4:	a9 01       	movw	r20, r18
     bb6:	e9 d4       	rcall	.+2514   	; 0x158a <TINYNVM_ReadMemory>
     bb8:	88 23       	and	r24, r24
     bba:	11 f0       	breq	.+4      	; 0xbc0 <XPROGProtocol_ReadMemory+0x8a>
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <XPROGProtocol_ReadMemory+0x8c>
	}
	else
	{
		/* Read the TPI target's memory, indicate timeout if occurred */
		if (!(TINYNVM_ReadMemory(ReadMemory_XPROG_Params.Address, ReadBuffer, ReadMemory_XPROG_Params.Length)))
		  ReturnStatus = XPRG_ERR_TIMEOUT;
     bc0:	83 e0       	ldi	r24, 0x03	; 3
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bc2:	90 e5       	ldi	r25, 0x50	; 80
     bc4:	90 93 f1 00 	sts	0x00F1, r25
     bc8:	95 e0       	ldi	r25, 0x05	; 5
     bca:	90 93 f1 00 	sts	0x00F1, r25
     bce:	80 93 f1 00 	sts	0x00F1, r24

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_READ_MEM);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
     bd2:	88 23       	and	r24, r24
     bd4:	39 f4       	brne	.+14     	; 0xbe4 <XPROGProtocol_ReadMemory+0xae>
	  Endpoint_Write_Stream_LE(ReadBuffer, ReadMemory_XPROG_Params.Length, NULL);
     bd6:	6e 81       	ldd	r22, Y+6	; 0x06
     bd8:	7f 81       	ldd	r23, Y+7	; 0x07
     bda:	ce 01       	movw	r24, r28
     bdc:	08 96       	adiw	r24, 0x08	; 8
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	56 d5       	rcall	.+2732   	; 0x1690 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     be4:	80 91 e8 00 	lds	r24, 0x00E8
     be8:	8e 77       	andi	r24, 0x7E	; 126
     bea:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearIN();
}
     bee:	c9 5f       	subi	r28, 0xF9	; 249
     bf0:	de 4f       	sbci	r29, 0xFE	; 254
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	de bf       	out	0x3e, r29	; 62
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	cf 91       	pop	r28
     bfe:	df 91       	pop	r29
     c00:	08 95       	ret

00000c02 <XPROGProtocol_SetMode>:

/** Handler for the CMD_XPROG_SETMODE command, which sets the programmer-to-target protocol used for PDI/TPI
 *  programming.
 */
void XPROGProtocol_SetMode(void)
{
     c02:	df 93       	push	r29
     c04:	cf 93       	push	r28
     c06:	0f 92       	push	r0
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
	struct
	{
		uint8_t Protocol;
	} SetMode_XPROG_Params;

	Endpoint_Read_Stream_LE(&SetMode_XPROG_Params, sizeof(SetMode_XPROG_Params), NULL);
     c0c:	ce 01       	movw	r24, r28
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	50 e0       	ldi	r21, 0x00	; 0
     c18:	99 d5       	rcall	.+2866   	; 0x174c <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c1a:	80 91 e8 00 	lds	r24, 0x00E8
     c1e:	8b 77       	andi	r24, 0x7B	; 123
     c20:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     c2a:	80 91 ec 00 	lds	r24, 0x00EC
     c2e:	81 60       	ori	r24, 0x01	; 1
     c30:	80 93 ec 00 	sts	0x00EC, r24

	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	XPROG_SelectedProtocol = SetMode_XPROG_Params.Protocol;
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	80 93 c1 02 	sts	0x02C1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c3a:	81 e5       	ldi	r24, 0x51	; 81
     c3c:	80 93 f1 00 	sts	0x00F1, r24

	Endpoint_Write_8(CMD_XPROG_SETMODE);
	Endpoint_Write_8((SetMode_XPROG_Params.Protocol != XPRG_PROTOCOL_JTAG) ? STATUS_CMD_OK : STATUS_CMD_FAILED);
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	81 30       	cpi	r24, 0x01	; 1
     c44:	11 f0       	breq	.+4      	; 0xc4a <XPROGProtocol_SetMode+0x48>
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	01 c0       	rjmp	.+2      	; 0xc4c <XPROGProtocol_SetMode+0x4a>
     c4a:	80 ec       	ldi	r24, 0xC0	; 192
     c4c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c50:	80 91 e8 00 	lds	r24, 0x00E8
     c54:	8e 77       	andi	r24, 0x7E	; 126
     c56:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();
}
     c5a:	0f 90       	pop	r0
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	08 95       	ret

00000c62 <XPROGProtocol_Command>:

/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
void XPROGProtocol_Command(void)
{
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	29 97       	sbiw	r28, 0x09	; 9
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     c76:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t XPROGCommand = Endpoint_Read_8();

	switch (XPROGCommand)
     c7a:	84 30       	cpi	r24, 0x04	; 4
     c7c:	09 f4       	brne	.+2      	; 0xc80 <XPROGProtocol_Command+0x1e>
     c7e:	94 c0       	rjmp	.+296    	; 0xda8 <XPROGProtocol_Command+0x146>
     c80:	85 30       	cpi	r24, 0x05	; 5
     c82:	48 f4       	brcc	.+18     	; 0xc96 <XPROGProtocol_Command+0x34>
     c84:	82 30       	cpi	r24, 0x02	; 2
     c86:	89 f1       	breq	.+98     	; 0xcea <XPROGProtocol_Command+0x88>
     c88:	83 30       	cpi	r24, 0x03	; 3
     c8a:	08 f0       	brcs	.+2      	; 0xc8e <XPROGProtocol_Command+0x2c>
     c8c:	4a c0       	rjmp	.+148    	; 0xd22 <XPROGProtocol_Command+0xc0>
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	09 f0       	breq	.+2      	; 0xc94 <XPROGProtocol_Command+0x32>
     c92:	27 c1       	rjmp	.+590    	; 0xee2 <XPROGProtocol_Command+0x280>
     c94:	0a c0       	rjmp	.+20     	; 0xcaa <XPROGProtocol_Command+0x48>
     c96:	86 30       	cpi	r24, 0x06	; 6
     c98:	09 f4       	brne	.+2      	; 0xc9c <XPROGProtocol_Command+0x3a>
     c9a:	8a c0       	rjmp	.+276    	; 0xdb0 <XPROGProtocol_Command+0x14e>
     c9c:	86 30       	cpi	r24, 0x06	; 6
     c9e:	08 f4       	brcc	.+2      	; 0xca2 <XPROGProtocol_Command+0x40>
     ca0:	85 c0       	rjmp	.+266    	; 0xdac <XPROGProtocol_Command+0x14a>
     ca2:	87 30       	cpi	r24, 0x07	; 7
     ca4:	09 f0       	breq	.+2      	; 0xca8 <XPROGProtocol_Command+0x46>
     ca6:	1d c1       	rjmp	.+570    	; 0xee2 <XPROGProtocol_Command+0x280>
     ca8:	c7 c0       	rjmp	.+398    	; 0xe38 <XPROGProtocol_Command+0x1d6>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     caa:	80 91 e8 00 	lds	r24, 0x00E8
     cae:	8b 77       	andi	r24, 0x7B	; 123
     cb0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     cba:	80 91 ec 00 	lds	r24, 0x00EC
     cbe:	81 60       	ori	r24, 0x01	; 1
     cc0:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     cc4:	80 91 c1 02 	lds	r24, 0x02C1
     cc8:	88 23       	and	r24, r24
     cca:	11 f4       	brne	.+4      	; 0xcd0 <XPROGProtocol_Command+0x6e>
	  NVMBusEnabled = XMEGANVM_EnablePDI();
     ccc:	1d d2       	rcall	.+1082   	; 0x1108 <XMEGANVM_EnablePDI>
     cce:	05 c0       	rjmp	.+10     	; 0xcda <XPROGProtocol_Command+0x78>
	else if (XPROG_SelectedProtocol == XPRG_PROTOCOL_TPI)
     cd0:	82 30       	cpi	r24, 0x02	; 2
     cd2:	11 f4       	brne	.+4      	; 0xcd8 <XPROGProtocol_Command+0x76>
	  NVMBusEnabled = TINYNVM_EnableTPI();
     cd4:	11 d4       	rcall	.+2082   	; 0x14f8 <TINYNVM_EnableTPI>
     cd6:	01 c0       	rjmp	.+2      	; 0xcda <XPROGProtocol_Command+0x78>
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	bool NVMBusEnabled = false;
     cd8:	80 e0       	ldi	r24, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cda:	90 e5       	ldi	r25, 0x50	; 80
     cdc:	90 93 f1 00 	sts	0x00F1, r25
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	90 93 f1 00 	sts	0x00F1, r25
}

/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
void XPROGProtocol_Command(void)
     ce6:	89 27       	eor	r24, r25
     ce8:	f5 c0       	rjmp	.+490    	; 0xed4 <XPROGProtocol_Command+0x272>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cea:	90 91 e8 00 	lds	r25, 0x00E8
     cee:	9b 77       	andi	r25, 0x7B	; 123
     cf0:	90 93 e8 00 	sts	0x00E8, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cf4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     cf8:	80 91 ec 00 	lds	r24, 0x00EC
     cfc:	81 60       	ori	r24, 0x01	; 1
     cfe:	80 93 ec 00 	sts	0x00EC, r24
{
	Endpoint_ClearOUT();
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     d02:	80 91 c1 02 	lds	r24, 0x02C1
     d06:	88 23       	and	r24, r24
     d08:	11 f4       	brne	.+4      	; 0xd0e <XPROGProtocol_Command+0xac>
	  XMEGANVM_DisablePDI();
     d0a:	40 d2       	rcall	.+1152   	; 0x118c <XMEGANVM_DisablePDI>
     d0c:	01 c0       	rjmp	.+2      	; 0xd10 <XPROGProtocol_Command+0xae>
	else
	  TINYNVM_DisableTPI();
     d0e:	32 d4       	rcall	.+2148   	; 0x1574 <TINYNVM_DisableTPI>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d10:	80 e5       	ldi	r24, 0x50	; 80
     d12:	80 93 f1 00 	sts	0x00F1, r24
     d16:	82 e0       	ldi	r24, 0x02	; 2
     d18:	80 93 f1 00 	sts	0x00F1, r24
     d1c:	10 92 f1 00 	sts	0x00F1, r1
     d20:	db c0       	rjmp	.+438    	; 0xed8 <XPROGProtocol_Command+0x276>
	{
		uint8_t  MemoryType;
		uint32_t Address;
	} Erase_XPROG_Params;

	Endpoint_Read_Stream_LE(&Erase_XPROG_Params, sizeof(Erase_XPROG_Params), NULL);
     d22:	ce 01       	movw	r24, r28
     d24:	05 96       	adiw	r24, 0x05	; 5
     d26:	65 e0       	ldi	r22, 0x05	; 5
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	40 e0       	ldi	r20, 0x00	; 0
     d2c:	50 e0       	ldi	r21, 0x00	; 0
     d2e:	0e d5       	rcall	.+2588   	; 0x174c <Endpoint_Read_Stream_LE>
	Erase_XPROG_Params.Address = SwapEndian_32(Erase_XPROG_Params.Address);
     d30:	6e 81       	ldd	r22, Y+6	; 0x06
     d32:	7f 81       	ldd	r23, Y+7	; 0x07
     d34:	88 85       	ldd	r24, Y+8	; 0x08
     d36:	99 85       	ldd	r25, Y+9	; 0x09
     d38:	47 de       	rcall	.-882    	; 0x9c8 <SwapEndian_32>
     d3a:	6e 83       	std	Y+6, r22	; 0x06
     d3c:	7f 83       	std	Y+7, r23	; 0x07
     d3e:	88 87       	std	Y+8, r24	; 0x08
     d40:	99 87       	std	Y+9, r25	; 0x09
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d42:	80 91 e8 00 	lds	r24, 0x00E8
     d46:	8b 77       	andi	r24, 0x7B	; 123
     d48:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     d52:	80 91 ec 00 	lds	r24, 0x00EC
     d56:	81 60       	ori	r24, 0x01	; 1
     d58:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint8_t EraseCommand;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     d5c:	80 91 c1 02 	lds	r24, 0x02C1
     d60:	ed 81       	ldd	r30, Y+5	; 0x05
     d62:	88 23       	and	r24, r24
     d64:	79 f4       	brne	.+30     	; 0xd84 <XPROGProtocol_Command+0x122>
	{
		/* Determine which NVM command to send to the device depending on the memory to erase */
		switch (Erase_XPROG_Params.MemoryType)
     d66:	e1 50       	subi	r30, 0x01	; 1
     d68:	e8 30       	cpi	r30, 0x08	; 8
     d6a:	28 f4       	brcc	.+10     	; 0xd76 <XPROGProtocol_Command+0x114>
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	e6 57       	subi	r30, 0x76	; 118
     d70:	fe 4f       	sbci	r31, 0xFE	; 254
     d72:	80 81       	ld	r24, Z
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <XPROGProtocol_Command+0x116>
     d76:	80 e0       	ldi	r24, 0x00	; 0
				EraseCommand = XMEGA_NVM_CMD_NOOP;
				break;
		}

		/* Erase the target memory, indicate timeout if occurred */
		if (!(XMEGANVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
     d78:	4e 81       	ldd	r20, Y+6	; 0x06
     d7a:	5f 81       	ldd	r21, Y+7	; 0x07
     d7c:	68 85       	ldd	r22, Y+8	; 0x08
     d7e:	79 85       	ldd	r23, Y+9	; 0x09
     d80:	0d d3       	rcall	.+1562   	; 0x139c <XMEGANVM_EraseMemory>
     d82:	08 c0       	rjmp	.+16     	; 0xd94 <XPROGProtocol_Command+0x132>
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		if (Erase_XPROG_Params.MemoryType == XPRG_ERASE_CHIP)
     d84:	e1 30       	cpi	r30, 0x01	; 1
     d86:	11 f4       	brne	.+4      	; 0xd8c <XPROGProtocol_Command+0x12a>
		  EraseCommand = TINY_NVM_CMD_CHIPERASE;
     d88:	80 e1       	ldi	r24, 0x10	; 16
     d8a:	01 c0       	rjmp	.+2      	; 0xd8e <XPROGProtocol_Command+0x12c>
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;
     d8c:	84 e1       	ldi	r24, 0x14	; 20

		/* Erase the target memory, indicate timeout if occurred */
		if (!(TINYNVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
     d8e:	6e 81       	ldd	r22, Y+6	; 0x06
     d90:	7f 81       	ldd	r23, Y+7	; 0x07
     d92:	63 d4       	rcall	.+2246   	; 0x165a <TINYNVM_EraseMemory>
     d94:	88 23       	and	r24, r24
     d96:	11 f0       	breq	.+4      	; 0xd9c <XPROGProtocol_Command+0x13a>
}

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	01 c0       	rjmp	.+2      	; 0xd9e <XPROGProtocol_Command+0x13c>
		else
		  EraseCommand = TINY_NVM_CMD_SECTIONERASE;

		/* Erase the target memory, indicate timeout if occurred */
		if (!(TINYNVM_EraseMemory(EraseCommand, Erase_XPROG_Params.Address)))
		  ReturnStatus = XPRG_ERR_TIMEOUT;
     d9c:	83 e0       	ldi	r24, 0x03	; 3
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d9e:	90 e5       	ldi	r25, 0x50	; 80
     da0:	90 93 f1 00 	sts	0x00F1, r25
     da4:	93 e0       	ldi	r25, 0x03	; 3
     da6:	94 c0       	rjmp	.+296    	; 0xed0 <XPROGProtocol_Command+0x26e>
			break;
		case XPRG_CMD_ERASE:
			XPROGProtocol_Erase();
			break;
		case XPRG_CMD_WRITE_MEM:
			XPROGProtocol_WriteMemory();
     da8:	19 de       	rcall	.-974    	; 0x9dc <XPROGProtocol_WriteMemory>
			break;
     daa:	9b c0       	rjmp	.+310    	; 0xee2 <XPROGProtocol_Command+0x280>
		case XPRG_CMD_READ_MEM:
			XPROGProtocol_ReadMemory();
     dac:	c4 de       	rcall	.-632    	; 0xb36 <XPROGProtocol_ReadMemory>
			break;
     dae:	99 c0       	rjmp	.+306    	; 0xee2 <XPROGProtocol_Command+0x280>
	struct
	{
		uint8_t CRCType;
	} ReadCRC_XPROG_Params;

	Endpoint_Read_Stream_LE(&ReadCRC_XPROG_Params, sizeof(ReadCRC_XPROG_Params), NULL);
     db0:	ce 01       	movw	r24, r28
     db2:	05 96       	adiw	r24, 0x05	; 5
     db4:	61 e0       	ldi	r22, 0x01	; 1
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	c7 d4       	rcall	.+2446   	; 0x174c <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dbe:	80 91 e8 00 	lds	r24, 0x00E8
     dc2:	8b 77       	andi	r24, 0x7B	; 123
     dc4:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	80 93 e9 00 	sts	0x00E9, r24
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     dce:	80 91 ec 00 	lds	r24, 0x00EC
     dd2:	81 60       	ori	r24, 0x01	; 1
     dd4:	80 93 ec 00 	sts	0x00EC, r24
	Endpoint_SelectEndpoint(AVRISP_DATA_IN_EPADDR);
	Endpoint_SetEndpointDirection(ENDPOINT_DIR_IN);

	uint32_t MemoryCRC;

	if (XPROG_SelectedProtocol == XPRG_PROTOCOL_PDI)
     dd8:	80 91 c1 02 	lds	r24, 0x02C1
     ddc:	88 23       	and	r24, r24
     dde:	91 f4       	brne	.+36     	; 0xe04 <XPROGProtocol_Command+0x1a2>
	{
		uint8_t CRCCommand;

		/* Determine which NVM command to send to the device depending on the memory to CRC */
		switch (ReadCRC_XPROG_Params.CRCType)
     de0:	ed 81       	ldd	r30, Y+5	; 0x05
     de2:	e1 50       	subi	r30, 0x01	; 1
     de4:	e2 30       	cpi	r30, 0x02	; 2
     de6:	28 f4       	brcc	.+10     	; 0xdf2 <XPROGProtocol_Command+0x190>
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	e6 55       	subi	r30, 0x56	; 86
     dec:	fe 4f       	sbci	r31, 0xFE	; 254
     dee:	80 81       	ld	r24, Z
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <XPROGProtocol_Command+0x192>
     df2:	88 e7       	ldi	r24, 0x78	; 120
				CRCCommand = XMEGA_NVM_CMD_FLASHCRC;
				break;
		}

		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
     df4:	be 01       	movw	r22, r28
     df6:	6f 5f       	subi	r22, 0xFF	; 255
     df8:	7f 4f       	sbci	r23, 0xFF	; 255
     dfa:	d3 d1       	rcall	.+934    	; 0x11a2 <XMEGANVM_GetMemoryCRC>
     dfc:	88 23       	and	r24, r24
     dfe:	21 f0       	breq	.+8      	; 0xe08 <XPROGProtocol_Command+0x1a6>
/** Handler for the XPROG CRC command to read a specific memory space's CRC value for comparison between the
 *  attached device's memory and a data set on the host.
 */
static void XPROGProtocol_ReadCRC(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <XPROGProtocol_Command+0x1a8>
		  ReturnStatus = XPRG_ERR_TIMEOUT;
	}
	else
	{
		/* TPI does not support memory CRC */
		ReturnStatus = XPRG_ERR_FAILED;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <XPROGProtocol_Command+0x1a8>
				break;
		}

		/* Perform and retrieve the memory CRC, indicate timeout if occurred */
		if (!(XMEGANVM_GetMemoryCRC(CRCCommand, &MemoryCRC)))
		  ReturnStatus = XPRG_ERR_TIMEOUT;
     e08:	83 e0       	ldi	r24, 0x03	; 3
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e0a:	90 e5       	ldi	r25, 0x50	; 80
     e0c:	90 93 f1 00 	sts	0x00F1, r25
     e10:	96 e0       	ldi	r25, 0x06	; 6
     e12:	90 93 f1 00 	sts	0x00F1, r25
     e16:	80 93 f1 00 	sts	0x00F1, r24

	Endpoint_Write_8(CMD_XPROG);
	Endpoint_Write_8(XPRG_CMD_CRC);
	Endpoint_Write_8(ReturnStatus);

	if (ReturnStatus == XPRG_ERR_OK)
     e1a:	88 23       	and	r24, r24
     e1c:	09 f0       	breq	.+2      	; 0xe20 <XPROGProtocol_Command+0x1be>
     e1e:	5c c0       	rjmp	.+184    	; 0xed8 <XPROGProtocol_Command+0x276>
	{
		Endpoint_Write_8(MemoryCRC >> 16);
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	9a 81       	ldd	r25, Y+2	; 0x02
     e24:	ab 81       	ldd	r26, Y+3	; 0x03
     e26:	bc 81       	ldd	r27, Y+4	; 0x04
     e28:	cd 01       	movw	r24, r26
     e2a:	aa 27       	eor	r26, r26
     e2c:	bb 27       	eor	r27, r27
     e2e:	80 93 f1 00 	sts	0x00F1, r24
		Endpoint_Write_16_LE(MemoryCRC & 0xFFFF);
     e32:	99 81       	ldd	r25, Y+1	; 0x01
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	4c c0       	rjmp	.+152    	; 0xed0 <XPROGProtocol_Command+0x26e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     e38:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t ReturnStatus = XPRG_ERR_OK;

	uint8_t XPROGParam = Endpoint_Read_8();

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
     e3c:	83 30       	cpi	r24, 0x03	; 3
     e3e:	31 f1       	breq	.+76     	; 0xe8c <XPROGProtocol_Command+0x22a>
     e40:	84 30       	cpi	r24, 0x04	; 4
     e42:	28 f4       	brcc	.+10     	; 0xe4e <XPROGProtocol_Command+0x1ec>
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	41 f0       	breq	.+16     	; 0xe58 <XPROGProtocol_Command+0x1f6>
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	81 f5       	brne	.+96     	; 0xeac <XPROGProtocol_Command+0x24a>
     e4c:	16 c0       	rjmp	.+44     	; 0xe7a <XPROGProtocol_Command+0x218>
     e4e:	84 30       	cpi	r24, 0x04	; 4
     e50:	11 f1       	breq	.+68     	; 0xe96 <XPROGProtocol_Command+0x234>
     e52:	85 30       	cpi	r24, 0x05	; 5
     e54:	59 f5       	brne	.+86     	; 0xeac <XPROGProtocol_Command+0x24a>
     e56:	24 c0       	rjmp	.+72     	; 0xea0 <XPROGProtocol_Command+0x23e>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[3] = UEDATX;
     e58:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[2] = UEDATX;
     e5c:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[1] = UEDATX;
     e60:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[0] = UEDATX;
     e64:	30 91 f1 00 	lds	r19, 0x00F1
	{
		case XPRG_PARAM_NVMBASE:
			XPROG_Param_NVMBase       = Endpoint_Read_32_BE();
     e68:	30 93 82 01 	sts	0x0182, r19
     e6c:	20 93 83 01 	sts	0x0183, r18
     e70:	90 93 84 01 	sts	0x0184, r25
     e74:	80 93 85 01 	sts	0x0185, r24
     e78:	17 c0       	rjmp	.+46     	; 0xea8 <XPROGProtocol_Command+0x246>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[1] = UEDATX;
     e7a:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[0] = UEDATX;
     e7e:	90 91 f1 00 	lds	r25, 0x00F1
			break;
		case XPRG_PARAM_EEPPAGESIZE:
			XPROG_Param_EEPageSize    = Endpoint_Read_16_BE();
     e82:	90 93 86 01 	sts	0x0186, r25
     e86:	80 93 87 01 	sts	0x0187, r24
     e8a:	0e c0       	rjmp	.+28     	; 0xea8 <XPROGProtocol_Command+0x246>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     e8c:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPRG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = Endpoint_Read_8();
     e90:	80 93 88 01 	sts	0x0188, r24
     e94:	09 c0       	rjmp	.+18     	; 0xea8 <XPROGProtocol_Command+0x246>
     e96:	80 91 f1 00 	lds	r24, 0x00F1
			break;
		case XPRG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = Endpoint_Read_8();
     e9a:	80 93 89 01 	sts	0x0189, r24
     e9e:	04 c0       	rjmp	.+8      	; 0xea8 <XPROGProtocol_Command+0x246>
			static inline void Endpoint_Discard_16(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_16(void)
			{
				uint8_t Dummy;

				Dummy = UEDATX;
     ea0:	80 91 f1 00 	lds	r24, 0x00F1
				Dummy = UEDATX;
     ea4:	80 91 f1 00 	lds	r24, 0x00F1
/** Handler for the XPROG SET_PARAM command to set a XPROG parameter for use when communicating with the
 *  attached device.
 */
static void XPROGProtocol_SetParam(void)
{
	uint8_t ReturnStatus = XPRG_ERR_OK;
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	01 c0       	rjmp	.+2      	; 0xeae <XPROGProtocol_Command+0x24c>
			         the communication with AVRStudio 5.1 will fail.
			*/
			Endpoint_Discard_16();
			break;
		default:
			ReturnStatus = XPRG_ERR_FAILED;
     eac:	81 e0       	ldi	r24, 0x01	; 1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     eae:	90 91 e8 00 	lds	r25, 0x00E8
     eb2:	9b 77       	andi	r25, 0x7B	; 123
     eb4:	90 93 e8 00 	sts	0x00E8, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     eb8:	92 e0       	ldi	r25, 0x02	; 2
     eba:	90 93 e9 00 	sts	0x00E9, r25
			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
			{
				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
     ebe:	90 91 ec 00 	lds	r25, 0x00EC
     ec2:	91 60       	ori	r25, 0x01	; 1
     ec4:	90 93 ec 00 	sts	0x00EC, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ec8:	90 e5       	ldi	r25, 0x50	; 80
     eca:	90 93 f1 00 	sts	0x00F1, r25
     ece:	97 e0       	ldi	r25, 0x07	; 7
     ed0:	90 93 f1 00 	sts	0x00F1, r25
     ed4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ed8:	80 91 e8 00 	lds	r24, 0x00E8
     edc:	8e 77       	andi	r24, 0x7E	; 126
     ede:	80 93 e8 00 	sts	0x00E8, r24
			break;
		case XPRG_CMD_SET_PARAM:
			XPROGProtocol_SetParam();
			break;
	}
}
     ee2:	29 96       	adiw	r28, 0x09	; 9
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <XPROGTarget_SetTxMode>:
}

static void XPROGTarget_SetTxMode(void)
{
	/* Wait for a full cycle of the clock */
	while (PIND & (1 << 5));
     ef4:	4d 99       	sbic	0x09, 5	; 9
     ef6:	fe cf       	rjmp	.-4      	; 0xef4 <XPROGTarget_SetTxMode>
	while (!(PIND & (1 << 5)));
     ef8:	4d 9b       	sbis	0x09, 5	; 9
     efa:	fe cf       	rjmp	.-4      	; 0xef8 <XPROGTarget_SetTxMode+0x4>
	while (PIND & (1 << 5));
     efc:	4d 99       	sbic	0x09, 5	; 9
     efe:	fe cf       	rjmp	.-4      	; 0xefc <XPROGTarget_SetTxMode+0x8>

	PORTD  |=  (1 << 3);
     f00:	5b 9a       	sbi	0x0b, 3	; 11
	DDRD   |=  (1 << 3);
     f02:	53 9a       	sbi	0x0a, 3	; 10

	UCSR1B &= ~(1 << RXEN1);
     f04:	80 91 c9 00 	lds	r24, 0x00C9
     f08:	8f 7e       	andi	r24, 0xEF	; 239
     f0a:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << TXEN1);
     f0e:	80 91 c9 00 	lds	r24, 0x00C9
     f12:	88 60       	ori	r24, 0x08	; 8
     f14:	80 93 c9 00 	sts	0x00C9, r24

	IsSending = true;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	80 93 df 02 	sts	0x02DF, r24
}
     f1e:	08 95       	ret

00000f20 <XPROGTarget_SetRxMode>:

static void XPROGTarget_SetRxMode(void)
{
	while (!(UCSR1A & (1 << TXC1)));
     f20:	80 91 c8 00 	lds	r24, 0x00C8
     f24:	86 ff       	sbrs	r24, 6
     f26:	fc cf       	rjmp	.-8      	; 0xf20 <XPROGTarget_SetRxMode>
	UCSR1A |=  (1 << TXC1);
     f28:	80 91 c8 00 	lds	r24, 0x00C8
     f2c:	80 64       	ori	r24, 0x40	; 64
     f2e:	80 93 c8 00 	sts	0x00C8, r24

	UCSR1B &= ~(1 << TXEN1);
     f32:	80 91 c9 00 	lds	r24, 0x00C9
     f36:	87 7f       	andi	r24, 0xF7	; 247
     f38:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |=  (1 << RXEN1);
     f3c:	80 91 c9 00 	lds	r24, 0x00C9
     f40:	80 61       	ori	r24, 0x10	; 16
     f42:	80 93 c9 00 	sts	0x00C9, r24

	DDRD   &= ~(1 << 3);
     f46:	53 98       	cbi	0x0a, 3	; 10
	PORTD  &= ~(1 << 3);
     f48:	5b 98       	cbi	0x0b, 3	; 11

	IsSending = false;
     f4a:	10 92 df 02 	sts	0x02DF, r1
}
     f4e:	08 95       	ret

00000f50 <XPROGTarget_DisableTargetPDI>:

/** Disables the target's PDI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetPDI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	if (IsSending)
     f50:	80 91 df 02 	lds	r24, 0x02DF
     f54:	88 23       	and	r24, r24
     f56:	09 f0       	breq	.+2      	; 0xf5a <XPROGTarget_DisableTargetPDI+0xa>
	  XPROGTarget_SetRxMode();
     f58:	e3 df       	rcall	.-58     	; 0xf20 <XPROGTarget_SetRxMode>

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A  = ((1 << TXC1) | (1 << RXC1));
     f5a:	80 ec       	ldi	r24, 0xC0	; 192
     f5c:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B  = 0;
     f60:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1C  = 0;
     f64:	10 92 ca 00 	sts	0x00CA, r1

	/* Tristate all pins */
	DDRD  &= ~((1 << 5) | (1 << 3));
     f68:	8a b1       	in	r24, 0x0a	; 10
     f6a:	87 7d       	andi	r24, 0xD7	; 215
     f6c:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
     f6e:	8b b1       	in	r24, 0x0b	; 11
     f70:	83 7d       	andi	r24, 0xD3	; 211
     f72:	8b b9       	out	0x0b, r24	; 11
}
     f74:	08 95       	ret

00000f76 <XPROGTarget_DisableTargetTPI>:

/** Disables the target's TPI interface, exits programming mode and starts the target's application. */
void XPROGTarget_DisableTargetTPI(void)
{
	/* Switch to Rx mode to ensure that all pending transmissions are complete */
	if (IsSending)
     f76:	80 91 df 02 	lds	r24, 0x02DF
     f7a:	88 23       	and	r24, r24
     f7c:	09 f0       	breq	.+2      	; 0xf80 <XPROGTarget_DisableTargetTPI+0xa>
	  XPROGTarget_SetRxMode();
     f7e:	d0 df       	rcall	.-96     	; 0xf20 <XPROGTarget_SetRxMode>

	/* Turn off receiver and transmitter of the USART, clear settings */
	UCSR1A |= (1 << TXC1) | (1 << RXC1);
     f80:	80 91 c8 00 	lds	r24, 0x00C8
     f84:	80 6c       	ori	r24, 0xC0	; 192
     f86:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B  = 0;
     f8a:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1C  = 0;
     f8e:	10 92 ca 00 	sts	0x00CA, r1

	/* Set all USART lines as inputs, tristate */
	DDRD  &= ~((1 << 5) | (1 << 3));
     f92:	8a b1       	in	r24, 0x0a	; 10
     f94:	87 7d       	andi	r24, 0xD7	; 215
     f96:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << 5) | (1 << 3) | (1 << 2));
     f98:	8b b1       	in	r24, 0x0b	; 11
     f9a:	83 7d       	andi	r24, 0xD3	; 211
     f9c:	8b b9       	out	0x0b, r24	; 11

	/* Tristate target /RESET line */
	AUX_LINE_DDR  &= ~AUX_LINE_MASK;
     f9e:	24 98       	cbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
     fa0:	2c 98       	cbi	0x05, 4	; 5
}
     fa2:	08 95       	ret

00000fa4 <XPROGTarget_SendByte>:
/** Sends a byte via the USART.
 *
 *  \param[in] Byte  Byte to send through the USART
 */
void XPROGTarget_SendByte(const uint8_t Byte)
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	0f 92       	push	r0
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
     fae:	90 91 df 02 	lds	r25, 0x02DF
     fb2:	99 23       	and	r25, r25
     fb4:	19 f4       	brne	.+6      	; 0xfbc <XPROGTarget_SendByte+0x18>
	  XPROGTarget_SetTxMode();
     fb6:	89 83       	std	Y+1, r24	; 0x01
     fb8:	9d df       	rcall	.-198    	; 0xef4 <XPROGTarget_SetTxMode>
     fba:	89 81       	ldd	r24, Y+1	; 0x01

	/* Wait until there is space in the hardware Tx buffer before writing */
	while (!(UCSR1A & (1 << UDRE1)));
     fbc:	90 91 c8 00 	lds	r25, 0x00C8
     fc0:	95 ff       	sbrs	r25, 5
     fc2:	fc cf       	rjmp	.-8      	; 0xfbc <XPROGTarget_SendByte+0x18>
	UCSR1A |= (1 << TXC1);
     fc4:	90 91 c8 00 	lds	r25, 0x00C8
     fc8:	90 64       	ori	r25, 0x40	; 64
     fca:	90 93 c8 00 	sts	0x00C8, r25
	UDR1    = Byte;
     fce:	80 93 ce 00 	sts	0x00CE, r24
}
     fd2:	0f 90       	pop	r0
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <XPROGTarget_ReceiveByte>:
 *  \return Received byte from the USART
 */
uint8_t XPROGTarget_ReceiveByte(void)
{
	/* Switch to Rx mode if currently in Tx mode */
	if (IsSending)
     fda:	80 91 df 02 	lds	r24, 0x02DF
     fde:	88 23       	and	r24, r24
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <XPROGTarget_ReceiveByte+0xa>
	  XPROGTarget_SetRxMode();
     fe2:	9e df       	rcall	.-196    	; 0xf20 <XPROGTarget_SetRxMode>

	/* Wait until a byte has been received before reading */
	while (!(UCSR1A & (1 << RXC1)) && TimeoutTicksRemaining);
     fe4:	80 91 c8 00 	lds	r24, 0x00C8
     fe8:	87 fd       	sbrc	r24, 7
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <XPROGTarget_ReceiveByte+0x18>
     fec:	8a b5       	in	r24, 0x2a	; 42
     fee:	88 23       	and	r24, r24
     ff0:	c9 f7       	brne	.-14     	; 0xfe4 <XPROGTarget_ReceiveByte+0xa>

	return UDR1;
     ff2:	80 91 ce 00 	lds	r24, 0x00CE
}
     ff6:	08 95       	ret

00000ff8 <XPROGTarget_SendIdle>:

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
     ff8:	80 91 df 02 	lds	r24, 0x02DF
     ffc:	88 23       	and	r24, r24
     ffe:	09 f4       	brne	.+2      	; 0x1002 <XPROGTarget_SendIdle+0xa>
	  XPROGTarget_SetTxMode();
    1000:	79 df       	rcall	.-270    	; 0xef4 <XPROGTarget_SetTxMode>
	return UDR1;
}

/** Sends an IDLE via the USART to the attached target, consisting of a full frame of idle bits. */
void XPROGTarget_SendIdle(void)
{
    1002:	8c e0       	ldi	r24, 0x0C	; 12

	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
	{
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
    1004:	4d 99       	sbic	0x09, 5	; 9
    1006:	fe cf       	rjmp	.-4      	; 0x1004 <XPROGTarget_SendIdle+0xc>
		while (!(PIND & (1 << 5)));
    1008:	4d 9b       	sbis	0x09, 5	; 9
    100a:	fe cf       	rjmp	.-4      	; 0x1008 <XPROGTarget_SendIdle+0x10>
		while (PIND & (1 << 5));
    100c:	4d 99       	sbic	0x09, 5	; 9
    100e:	fe cf       	rjmp	.-4      	; 0x100c <XPROGTarget_SendIdle+0x14>
    1010:	81 50       	subi	r24, 0x01	; 1
	/* Switch to Tx mode if currently in Rx mode */
	if (!(IsSending))
	  XPROGTarget_SetTxMode();

	/* Need to do nothing for a full frame to send an IDLE */
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
    1012:	c1 f7       	brne	.-16     	; 0x1004 <XPROGTarget_SendIdle+0xc>
		/* Wait for a full cycle of the clock */
		while (PIND & (1 << 5));
		while (!(PIND & (1 << 5)));
		while (PIND & (1 << 5));
	}
}
    1014:	08 95       	ret

00001016 <XPROGTarget_EnableTargetTPI>:
}

/** Enables the target's TPI interface, holding the target in reset until TPI mode is exited. */
void XPROGTarget_EnableTargetTPI(void)
{
	IsSending = false;
    1016:	10 92 df 02 	sts	0x02DF, r1

	/* Set /RESET line low for at least 400ns to enable TPI functionality */
	AUX_LINE_DDR  |=  AUX_LINE_MASK;
    101a:	24 9a       	sbi	0x04, 4	; 4
	AUX_LINE_PORT &= ~AUX_LINE_MASK;
    101c:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	8a 95       	dec	r24
    1022:	f1 f7       	brne	.-4      	; 0x1020 <XPROGTarget_EnableTargetTPI+0xa>
    1024:	00 c0       	rjmp	.+0      	; 0x1026 <XPROGTarget_EnableTargetTPI+0x10>
	_delay_us(1);

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    1026:	8a b1       	in	r24, 0x0a	; 10
    1028:	88 62       	ori	r24, 0x28	; 40
    102a:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    102c:	52 98       	cbi	0x0a, 2	; 10

	/* Set up the synchronous USART for TPI communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    102e:	8f e0       	ldi	r24, 0x0F	; 15
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	90 93 cd 00 	sts	0x00CD, r25
    1036:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
    103a:	88 e0       	ldi	r24, 0x08	; 8
    103c:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    1040:	8f e6       	ldi	r24, 0x6F	; 111
    1042:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable TPI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    1046:	d8 df       	rcall	.-80     	; 0xff8 <XPROGTarget_SendIdle>
	XPROGTarget_SendIdle();
}
    1048:	d7 cf       	rjmp	.-82     	; 0xff8 <XPROGTarget_SendIdle>

0000104a <XPROGTarget_EnableTargetPDI>:
bool IsSending;

/** Enables the target's PDI interface, holding the target in reset until PDI mode is exited. */
void XPROGTarget_EnableTargetPDI(void)
{
	IsSending = false;
    104a:	10 92 df 02 	sts	0x02DF, r1

	/* Set Tx and XCK as outputs, Rx as input */
	DDRD |=  (1 << 5) | (1 << 3);
    104e:	8a b1       	in	r24, 0x0a	; 10
    1050:	88 62       	ori	r24, 0x28	; 40
    1052:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
    1054:	52 98       	cbi	0x0a, 2	; 10

	/* Set DATA line high for at least 90ns to disable /RESET functionality */
	PORTD |= (1 << 3);
    1056:	5b 9a       	sbi	0x0b, 3	; 11
    1058:	82 e0       	ldi	r24, 0x02	; 2
    105a:	8a 95       	dec	r24
    105c:	f1 f7       	brne	.-4      	; 0x105a <XPROGTarget_EnableTargetPDI+0x10>
    105e:	00 c0       	rjmp	.+0      	; 0x1060 <XPROGTarget_EnableTargetPDI+0x16>
	_delay_us(1);

	/* Set up the synchronous USART for XMEGA communications - 8 data bits, even parity, 2 stop bits */
	UBRR1  = ((F_CPU / 2 / XPROG_HARDWARE_SPEED) - 1);
    1060:	8f e0       	ldi	r24, 0x0F	; 15
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	90 93 cd 00 	sts	0x00CD, r25
    1068:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1 << TXEN1);
    106c:	88 e0       	ldi	r24, 0x08	; 8
    106e:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UMSEL10) | (1 << UPM11) | (1 << USBS1) | (1 << UCSZ11) | (1 << UCSZ10) | (1 << UCPOL1);
    1072:	8f e6       	ldi	r24, 0x6F	; 111
    1074:	80 93 ca 00 	sts	0x00CA, r24

	/* Send two IDLEs of 12 bits each to enable PDI interface (need at least 16 idle bits) */
	XPROGTarget_SendIdle();
    1078:	bf df       	rcall	.-130    	; 0xff8 <XPROGTarget_SendIdle>
	XPROGTarget_SendIdle();
}
    107a:	be cf       	rjmp	.-132    	; 0xff8 <XPROGTarget_SendIdle>

0000107c <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
    107c:	1f 93       	push	r17
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <XMEGANVM_SendAddress+0x8>
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	18 2f       	mov	r17, r24
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
    108a:	86 2f       	mov	r24, r22
    108c:	79 83       	std	Y+1, r23	; 0x01
    108e:	9a 83       	std	Y+2, r25	; 0x02
    1090:	89 df       	rcall	.-238    	; 0xfa4 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    1092:	79 81       	ldd	r23, Y+1	; 0x01
    1094:	87 2f       	mov	r24, r23
    1096:	86 df       	rcall	.-244    	; 0xfa4 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
    1098:	81 2f       	mov	r24, r17
    109a:	84 df       	rcall	.-248    	; 0xfa4 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	89 2f       	mov	r24, r25
    10a0:	81 df       	rcall	.-254    	; 0xfa4 <XPROGTarget_SendByte>
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	1f 91       	pop	r17
    10ac:	08 95       	ret

000010ae <XMEGANVM_SendNVMRegAddress>:
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
    10ae:	68 2f       	mov	r22, r24
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	20 91 82 01 	lds	r18, 0x0182
    10ba:	30 91 83 01 	lds	r19, 0x0183
    10be:	40 91 84 01 	lds	r20, 0x0184
    10c2:	50 91 85 01 	lds	r21, 0x0185
    10c6:	62 2b       	or	r22, r18
    10c8:	73 2b       	or	r23, r19
    10ca:	84 2b       	or	r24, r20
    10cc:	95 2b       	or	r25, r21

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
}
    10ce:	d6 cf       	rjmp	.-84     	; 0x107c <XMEGANVM_SendAddress>

000010d0 <XMEGANVM_WaitWhileNVMBusBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS | PDI_STATUS_REG);
    10d0:	80 e8       	ldi	r24, 0x80	; 128
    10d2:	68 df       	rcall	.-304    	; 0xfa4 <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    10d4:	82 df       	rcall	.-252    	; 0xfda <XPROGTarget_ReceiveByte>

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    10d6:	9a b5       	in	r25, 0x2a	; 42
    10d8:	99 23       	and	r25, r25
    10da:	21 f0       	breq	.+8      	; 0x10e4 <XMEGANVM_WaitWhileNVMBusBusy+0x14>
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
    10dc:	81 ff       	sbrs	r24, 1
    10de:	f8 cf       	rjmp	.-16     	; 0x10d0 <XMEGANVM_WaitWhileNVMBusBusy>
		  return true;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	08 95       	ret

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    10e4:	80 e0       	ldi	r24, 0x00	; 0

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM)
		  return true;
	}
}
    10e6:	08 95       	ret

000010e8 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  \return Boolean true if the NVM controller became ready within the timeout period, false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    10e8:	8b e6       	ldi	r24, 0x6B	; 107
    10ea:	5c df       	rcall	.-328    	; 0xfa4 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
    10ec:	8f e0       	ldi	r24, 0x0F	; 15
    10ee:	df df       	rcall	.-66     	; 0x10ae <XMEGANVM_SendNVMRegAddress>

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT << 2) | PDI_DATSIZE_1BYTE);
    10f0:	80 e2       	ldi	r24, 0x20	; 32
    10f2:	58 df       	rcall	.-336    	; 0xfa4 <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    10f4:	72 df       	rcall	.-284    	; 0xfda <XPROGTarget_ReceiveByte>

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    10f6:	9a b5       	in	r25, 0x2a	; 42
    10f8:	99 23       	and	r25, r25
    10fa:	21 f0       	breq	.+8      	; 0x1104 <XMEGANVM_WaitWhileNVMControllerBusy+0x1c>
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    10fc:	87 fd       	sbrc	r24, 7
    10fe:	f8 cf       	rjmp	.-16     	; 0x10f0 <XMEGANVM_WaitWhileNVMControllerBusy+0x8>
		  return true;
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	08 95       	ret

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    1104:	80 e0       	ldi	r24, 0x00	; 0

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
		  return true;
	}
}
    1106:	08 95       	ret

00001108 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the PDI interface was enabled successfully, false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
    1108:	cf 92       	push	r12
    110a:	df 92       	push	r13
    110c:	ef 92       	push	r14
    110e:	ff 92       	push	r15
    1110:	0f 93       	push	r16
    1112:	1f 93       	push	r17
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	28 97       	sbiw	r28, 0x08	; 8
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
    1128:	90 df       	rcall	.-224    	; 0x104a <XPROGTarget_EnableTargetPDI>

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    112a:	81 ec       	ldi	r24, 0xC1	; 193
    112c:	3b df       	rcall	.-394    	; 0xfa4 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(PDI_RESET_KEY);
    112e:	89 e5       	ldi	r24, 0x59	; 89
    1130:	39 df       	rcall	.-398    	; 0xfa4 <XPROGTarget_SendByte>

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
    1132:	82 ec       	ldi	r24, 0xC2	; 194
    1134:	37 df       	rcall	.-402    	; 0xfa4 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x02);
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	35 df       	rcall	.-406    	; 0xfa4 <XPROGTarget_SendByte>

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
    113a:	80 ee       	ldi	r24, 0xE0	; 224
    113c:	33 df       	rcall	.-410    	; 0xfa4 <XPROGTarget_SendByte>
    113e:	8e 01       	movw	r16, r28
    1140:	07 5f       	subi	r16, 0xF7	; 247
    1142:	1f 4f       	sbci	r17, 0xFF	; 255

/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the PDI interface was enabled successfully, false otherwise
 */
bool XMEGANVM_EnablePDI(void)
    1144:	7e 01       	movw	r14, r28
    1146:	08 94       	sec
    1148:	e1 1c       	adc	r14, r1
    114a:	f1 1c       	adc	r15, r1
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
    114c:	67 01       	movw	r12, r14
    114e:	d6 01       	movw	r26, r12
    1150:	ec ea       	ldi	r30, 0xAC	; 172
    1152:	f1 e0       	ldi	r31, 0x01	; 1
    1154:	88 e0       	ldi	r24, 0x08	; 8
    1156:	01 90       	ld	r0, Z+
    1158:	0d 92       	st	X+, r0
    115a:	81 50       	subi	r24, 0x01	; 1
    115c:	e1 f7       	brne	.-8      	; 0x1156 <XMEGANVM_EnablePDI+0x4e>
    115e:	f8 01       	movw	r30, r16
    1160:	82 91       	ld	r24, -Z
    1162:	8f 01       	movw	r16, r30
    1164:	1f df       	rcall	.-450    	; 0xfa4 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(PDI_CMD_STCS | PDI_CTRL_REG);
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
    1166:	0e 15       	cp	r16, r14
    1168:	1f 05       	cpc	r17, r15
    116a:	89 f7       	brne	.-30     	; 0x114e <XMEGANVM_EnablePDI+0x46>
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
    116c:	b1 df       	rcall	.-158    	; 0x10d0 <XMEGANVM_WaitWhileNVMBusBusy>
}
    116e:	28 96       	adiw	r28, 0x08	; 8
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	ff 90       	pop	r15
    1184:	ef 90       	pop	r14
    1186:	df 90       	pop	r13
    1188:	cf 90       	pop	r12
    118a:	08 95       	ret

0000118c <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
	XMEGANVM_WaitWhileNVMBusBusy();
    118c:	a1 df       	rcall	.-190    	; 0x10d0 <XMEGANVM_WaitWhileNVMBusBusy>
	 * change takes effect, as in some cases it takes multiple writes (silicon bug?).
	 */
	do
	{
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS | PDI_RESET_REG);
    118e:	81 ec       	ldi	r24, 0xC1	; 193
    1190:	09 df       	rcall	.-494    	; 0xfa4 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(0x00);
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	07 df       	rcall	.-498    	; 0xfa4 <XPROGTarget_SendByte>

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS | PDI_RESET_REG);
    1196:	81 e8       	ldi	r24, 0x81	; 129
    1198:	05 df       	rcall	.-502    	; 0xfa4 <XPROGTarget_SendByte>
	} while (XPROGTarget_ReceiveByte() != 0x00);
    119a:	1f df       	rcall	.-450    	; 0xfda <XPROGTarget_ReceiveByte>
    119c:	88 23       	and	r24, r24
    119e:	b9 f7       	brne	.-18     	; 0x118e <XMEGANVM_DisablePDI+0x2>

	XPROGTarget_DisableTargetPDI();
}
    11a0:	d7 ce       	rjmp	.-594    	; 0xf50 <XPROGTarget_DisableTargetPDI>

000011a2 <XMEGANVM_GetMemoryCRC>:
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_GetMemoryCRC(const uint8_t CRCCommand,
                           uint32_t* const CRCDest)
{
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	18 2f       	mov	r17, r24
    11aa:	eb 01       	movw	r28, r22
	*CRCDest = 0;
    11ac:	18 82       	st	Y, r1
    11ae:	19 82       	std	Y+1, r1	; 0x01
    11b0:	1a 82       	std	Y+2, r1	; 0x02
    11b2:	1b 82       	std	Y+3, r1	; 0x03

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    11b4:	99 df       	rcall	.-206    	; 0x10e8 <XMEGANVM_WaitWhileNVMControllerBusy>
    11b6:	88 23       	and	r24, r24
    11b8:	31 f1       	breq	.+76     	; 0x1206 <XMEGANVM_GetMemoryCRC+0x64>
	  return false;

	/* Set the NVM command to the correct CRC read command */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    11ba:	8c e4       	ldi	r24, 0x4C	; 76
    11bc:	f3 de       	rcall	.-538    	; 0xfa4 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    11be:	8a e0       	ldi	r24, 0x0A	; 10
    11c0:	76 df       	rcall	.-276    	; 0x10ae <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(CRCCommand);
    11c2:	81 2f       	mov	r24, r17
    11c4:	ef de       	rcall	.-546    	; 0xfa4 <XPROGTarget_SendByte>

	/* Set CMDEX bit in NVM CTRLA register to start the CRC generation */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    11c6:	8c e4       	ldi	r24, 0x4C	; 76
    11c8:	ed de       	rcall	.-550    	; 0xfa4 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    11ca:	8b e0       	ldi	r24, 0x0B	; 11
    11cc:	70 df       	rcall	.-288    	; 0x10ae <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	e9 de       	rcall	.-558    	; 0xfa4 <XPROGTarget_SendByte>

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    11d2:	7e df       	rcall	.-260    	; 0x10d0 <XMEGANVM_WaitWhileNVMBusBusy>
    11d4:	88 23       	and	r24, r24
    11d6:	b9 f0       	breq	.+46     	; 0x1206 <XMEGANVM_GetMemoryCRC+0x64>
	  return false;

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    11d8:	87 df       	rcall	.-242    	; 0x10e8 <XMEGANVM_WaitWhileNVMControllerBusy>
    11da:	88 23       	and	r24, r24
    11dc:	a1 f0       	breq	.+40     	; 0x1206 <XMEGANVM_GetMemoryCRC+0x64>
	  return false;

	/* Load the PDI pointer register with the DAT0 register start address */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    11de:	8b e6       	ldi	r24, 0x6B	; 107
    11e0:	e1 de       	rcall	.-574    	; 0xfa4 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_DAT0);
    11e2:	84 e0       	ldi	r24, 0x04	; 4
    11e4:	64 df       	rcall	.-312    	; 0x10ae <XMEGANVM_SendNVMRegAddress>

	/* Send the REPEAT command to grab the CRC bytes */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    11e6:	80 ea       	ldi	r24, 0xA0	; 160
    11e8:	dd de       	rcall	.-582    	; 0xfa4 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(XMEGA_CRC_LENGTH_BYTES - 1);
    11ea:	82 e0       	ldi	r24, 0x02	; 2
    11ec:	db de       	rcall	.-586    	; 0xfa4 <XPROGTarget_SendByte>

	/* Read in the CRC bytes from the target */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    11ee:	84 e2       	ldi	r24, 0x24	; 36
    11f0:	d9 de       	rcall	.-590    	; 0xfa4 <XPROGTarget_SendByte>
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH_BYTES; i++)
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();
    11f2:	f3 de       	rcall	.-538    	; 0xfda <XPROGTarget_ReceiveByte>
    11f4:	88 83       	st	Y, r24
    11f6:	f1 de       	rcall	.-542    	; 0xfda <XPROGTarget_ReceiveByte>
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	ef de       	rcall	.-546    	; 0xfda <XPROGTarget_ReceiveByte>
    11fc:	8a 83       	std	Y+2, r24	; 0x02

	return (TimeoutTicksRemaining > 0);
    11fe:	9a b5       	in	r25, 0x2a	; 42
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	99 23       	and	r25, r25
    1204:	09 f4       	brne	.+2      	; 0x1208 <XMEGANVM_GetMemoryCRC+0x66>
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
	  return false;

	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;
    1206:	80 e0       	ldi	r24, 0x00	; 0
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
	for (uint8_t i = 0; i < XMEGA_CRC_LENGTH_BYTES; i++)
	  ((uint8_t*)CRCDest)[i] = XPROGTarget_ReceiveByte();

	return (TimeoutTicksRemaining > 0);
}
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	08 95       	ret

00001210 <XMEGANVM_ReadMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
    1210:	cf 92       	push	r12
    1212:	df 92       	push	r13
    1214:	ef 92       	push	r14
    1216:	ff 92       	push	r15
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	6b 01       	movw	r12, r22
    1222:	7c 01       	movw	r14, r24
    1224:	8a 01       	movw	r16, r20
    1226:	e9 01       	movw	r28, r18
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    1228:	5f df       	rcall	.-322    	; 0x10e8 <XMEGANVM_WaitWhileNVMControllerBusy>
    122a:	88 23       	and	r24, r24
    122c:	11 f1       	breq	.+68     	; 0x1272 <XMEGANVM_ReadMemory+0x62>
	  return false;

	/* Send the READNVM command to the NVM controller for reading of an arbitrary location */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    122e:	8c e4       	ldi	r24, 0x4C	; 76
    1230:	b9 de       	rcall	.-654    	; 0xfa4 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1232:	8a e0       	ldi	r24, 0x0A	; 10
    1234:	3c df       	rcall	.-392    	; 0x10ae <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
    1236:	83 e4       	ldi	r24, 0x43	; 67
    1238:	b5 de       	rcall	.-662    	; 0xfa4 <XPROGTarget_SendByte>

	/* Load the PDI pointer register with the start address we want to read from */
	XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    123a:	8b e6       	ldi	r24, 0x6B	; 107
    123c:	b3 de       	rcall	.-666    	; 0xfa4 <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(ReadAddress);
    123e:	c7 01       	movw	r24, r14
    1240:	b6 01       	movw	r22, r12
    1242:	1c df       	rcall	.-456    	; 0x107c <XMEGANVM_SendAddress>

	/* Send the REPEAT command with the specified number of bytes to read */
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1244:	80 ea       	ldi	r24, 0xA0	; 160
    1246:	ae de       	rcall	.-676    	; 0xfa4 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(ReadSize - 1);
    1248:	9e 01       	movw	r18, r28
    124a:	21 50       	subi	r18, 0x01	; 1
    124c:	82 2f       	mov	r24, r18
    124e:	aa de       	rcall	.-684    	; 0xfa4 <XPROGTarget_SendByte>

	/* Send a LD command with indirect access and post-increment to read out the bytes */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1250:	84 e2       	ldi	r24, 0x24	; 36
    1252:	a8 de       	rcall	.-688    	; 0xfa4 <XPROGTarget_SendByte>
	while (ReadSize-- && TimeoutTicksRemaining)
    1254:	04 c0       	rjmp	.+8      	; 0x125e <XMEGANVM_ReadMemory+0x4e>
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
    1256:	c1 de       	rcall	.-638    	; 0xfda <XPROGTarget_ReceiveByte>
    1258:	f8 01       	movw	r30, r16
    125a:	81 93       	st	Z+, r24
    125c:	8f 01       	movw	r16, r30
	XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
	XPROGTarget_SendByte(ReadSize - 1);

	/* Send a LD command with indirect access and post-increment to read out the bytes */
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
	while (ReadSize-- && TimeoutTicksRemaining)
    125e:	20 97       	sbiw	r28, 0x00	; 0
    1260:	21 f0       	breq	.+8      	; 0x126a <XMEGANVM_ReadMemory+0x5a>
    1262:	8a b5       	in	r24, 0x2a	; 42
    1264:	21 97       	sbiw	r28, 0x01	; 1
    1266:	88 23       	and	r24, r24
    1268:	b1 f7       	brne	.-20     	; 0x1256 <XMEGANVM_ReadMemory+0x46>
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();

	return (TimeoutTicksRemaining > 0);
    126a:	9a b5       	in	r25, 0x2a	; 42
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	99 23       	and	r25, r25
    1270:	09 f4       	brne	.+2      	; 0x1274 <XMEGANVM_ReadMemory+0x64>
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;
    1272:	80 e0       	ldi	r24, 0x00	; 0
	XPROGTarget_SendByte(PDI_CMD_LD | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
	while (ReadSize-- && TimeoutTicksRemaining)
	  *(ReadBuffer++) = XPROGTarget_ReceiveByte();

	return (TimeoutTicksRemaining > 0);
}
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	ff 90       	pop	r15
    127e:	ef 90       	pop	r14
    1280:	df 90       	pop	r13
    1282:	cf 90       	pop	r12
    1284:	08 95       	ret

00001286 <XMEGANVM_WriteByteMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t Byte)
{
    1286:	cf 92       	push	r12
    1288:	df 92       	push	r13
    128a:	ef 92       	push	r14
    128c:	ff 92       	push	r15
    128e:	0f 93       	push	r16
    1290:	1f 93       	push	r17
    1292:	d8 2e       	mov	r13, r24
    1294:	7a 01       	movw	r14, r20
    1296:	8b 01       	movw	r16, r22
    1298:	c2 2e       	mov	r12, r18
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    129a:	26 df       	rcall	.-436    	; 0x10e8 <XMEGANVM_WaitWhileNVMControllerBusy>
    129c:	88 23       	and	r24, r24
    129e:	79 f0       	breq	.+30     	; 0x12be <XMEGANVM_WriteByteMemory+0x38>
	  return false;

	/* Send the memory write command to the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    12a0:	8c e4       	ldi	r24, 0x4C	; 76
    12a2:	80 de       	rcall	.-768    	; 0xfa4 <XPROGTarget_SendByte>
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    12a4:	8a e0       	ldi	r24, 0x0A	; 10
    12a6:	03 df       	rcall	.-506    	; 0x10ae <XMEGANVM_SendNVMRegAddress>
	XPROGTarget_SendByte(WriteCommand);
    12a8:	8d 2d       	mov	r24, r13
    12aa:	7c de       	rcall	.-776    	; 0xfa4 <XPROGTarget_SendByte>

	/* Send new memory byte to the memory of the target */
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    12ac:	8c e4       	ldi	r24, 0x4C	; 76
    12ae:	7a de       	rcall	.-780    	; 0xfa4 <XPROGTarget_SendByte>
	XMEGANVM_SendAddress(WriteAddress);
    12b0:	c8 01       	movw	r24, r16
    12b2:	b7 01       	movw	r22, r14
    12b4:	e3 de       	rcall	.-570    	; 0x107c <XMEGANVM_SendAddress>
	XPROGTarget_SendByte(Byte);
    12b6:	8c 2d       	mov	r24, r12
    12b8:	75 de       	rcall	.-790    	; 0xfa4 <XPROGTarget_SendByte>

	return true;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	01 c0       	rjmp	.+2      	; 0x12c0 <XMEGANVM_WriteByteMemory+0x3a>
                              const uint32_t WriteAddress,
                              const uint8_t Byte)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;
    12be:	80 e0       	ldi	r24, 0x00	; 0
	XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(Byte);

	return true;
}
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	ef 90       	pop	r14
    12c8:	df 90       	pop	r13
    12ca:	cf 90       	pop	r12
    12cc:	08 95       	ret

000012ce <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
    12ce:	7f 92       	push	r7
    12d0:	8f 92       	push	r8
    12d2:	9f 92       	push	r9
    12d4:	af 92       	push	r10
    12d6:	bf 92       	push	r11
    12d8:	cf 92       	push	r12
    12da:	df 92       	push	r13
    12dc:	ef 92       	push	r14
    12de:	ff 92       	push	r15
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	88 2e       	mov	r8, r24
    12ea:	96 2e       	mov	r9, r22
    12ec:	74 2e       	mov	r7, r20
    12ee:	e6 01       	movw	r28, r12
	if (PageMode & XPRG_PAGEMODE_ERASE)
    12f0:	d2 2e       	mov	r13, r18
    12f2:	20 ff       	sbrs	r18, 0
    12f4:	10 c0       	rjmp	.+32     	; 0x1316 <XMEGANVM_WritePageMemory+0x48>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    12f6:	f8 de       	rcall	.-528    	; 0x10e8 <XMEGANVM_WaitWhileNVMControllerBusy>
    12f8:	88 23       	and	r24, r24
    12fa:	09 f4       	brne	.+2      	; 0x12fe <XMEGANVM_WritePageMemory+0x30>
    12fc:	40 c0       	rjmp	.+128    	; 0x137e <XMEGANVM_WritePageMemory+0xb0>
		  return false;

		/* Send the memory buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    12fe:	8c e4       	ldi	r24, 0x4C	; 76
    1300:	51 de       	rcall	.-862    	; 0xfa4 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1302:	8a e0       	ldi	r24, 0x0A	; 10
    1304:	d4 de       	rcall	.-600    	; 0x10ae <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseBuffCommand);
    1306:	89 2d       	mov	r24, r9
    1308:	4d de       	rcall	.-870    	; 0xfa4 <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    130a:	8c e4       	ldi	r24, 0x4C	; 76
    130c:	4b de       	rcall	.-874    	; 0xfa4 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    130e:	8b e0       	ldi	r24, 0x0B	; 11
    1310:	ce de       	rcall	.-612    	; 0x10ae <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	47 de       	rcall	.-882    	; 0xfa4 <XPROGTarget_SendByte>
	}

	if (WriteSize)
    1316:	a1 14       	cp	r10, r1
    1318:	b1 04       	cpc	r11, r1
    131a:	e9 f0       	breq	.+58     	; 0x1356 <XMEGANVM_WritePageMemory+0x88>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    131c:	e5 de       	rcall	.-566    	; 0x10e8 <XMEGANVM_WaitWhileNVMControllerBusy>
    131e:	88 23       	and	r24, r24
    1320:	71 f1       	breq	.+92     	; 0x137e <XMEGANVM_WritePageMemory+0xb0>
		  return false;

		/* Send the memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1322:	8c e4       	ldi	r24, 0x4C	; 76
    1324:	3f de       	rcall	.-898    	; 0xfa4 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1326:	8a e0       	ldi	r24, 0x0A	; 10
    1328:	c2 de       	rcall	.-636    	; 0x10ae <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(WriteBuffCommand);
    132a:	88 2d       	mov	r24, r8
    132c:	3b de       	rcall	.-906    	; 0xfa4 <XPROGTarget_SendByte>

		/* Load the PDI pointer register with the start address we want to write to */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    132e:	8b e6       	ldi	r24, 0x6B	; 107
    1330:	39 de       	rcall	.-910    	; 0xfa4 <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(WriteAddress);
    1332:	c8 01       	movw	r24, r16
    1334:	b7 01       	movw	r22, r14
    1336:	a2 de       	rcall	.-700    	; 0x107c <XMEGANVM_SendAddress>

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1338:	80 ea       	ldi	r24, 0xA0	; 160
    133a:	34 de       	rcall	.-920    	; 0xfa4 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(WriteSize - 1);
    133c:	8a 2d       	mov	r24, r10
    133e:	81 50       	subi	r24, 0x01	; 1
    1340:	31 de       	rcall	.-926    	; 0xfa4 <XPROGTarget_SendByte>

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1342:	84 e6       	ldi	r24, 0x64	; 100
    1344:	2f de       	rcall	.-930    	; 0xfa4 <XPROGTarget_SendByte>
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
    1346:	89 91       	ld	r24, Y+
    1348:	2d de       	rcall	.-934    	; 0xfa4 <XPROGTarget_SendByte>
    134a:	08 94       	sec
    134c:	a1 08       	sbc	r10, r1
    134e:	b1 08       	sbc	r11, r1
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
		XPROGTarget_SendByte(WriteSize - 1);

		/* Send a ST command with indirect access and post-increment to write the bytes */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		while (WriteSize--)
    1350:	a1 14       	cp	r10, r1
    1352:	b1 04       	cpc	r11, r1
    1354:	c1 f7       	brne	.-16     	; 0x1346 <XMEGANVM_WritePageMemory+0x78>
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPRG_PAGEMODE_WRITE)
    1356:	d1 fe       	sbrs	r13, 1
    1358:	10 c0       	rjmp	.+32     	; 0x137a <XMEGANVM_WritePageMemory+0xac>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    135a:	c6 de       	rcall	.-628    	; 0x10e8 <XMEGANVM_WaitWhileNVMControllerBusy>
    135c:	88 23       	and	r24, r24
    135e:	79 f0       	breq	.+30     	; 0x137e <XMEGANVM_WritePageMemory+0xb0>
		  return false;

		/* Send the memory write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1360:	8c e4       	ldi	r24, 0x4C	; 76
    1362:	20 de       	rcall	.-960    	; 0xfa4 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1364:	8a e0       	ldi	r24, 0x0A	; 10
    1366:	a3 de       	rcall	.-698    	; 0x10ae <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(WritePageCommand);
    1368:	87 2d       	mov	r24, r7
    136a:	1c de       	rcall	.-968    	; 0xfa4 <XPROGTarget_SendByte>

		/* Send the address of the first page location to write the memory page */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    136c:	8c e4       	ldi	r24, 0x4C	; 76
    136e:	1a de       	rcall	.-972    	; 0xfa4 <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(WriteAddress);
    1370:	c8 01       	movw	r24, r16
    1372:	b7 01       	movw	r22, r14
    1374:	83 de       	rcall	.-762    	; 0x107c <XMEGANVM_SendAddress>
		XPROGTarget_SendByte(0x00);
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	15 de       	rcall	.-982    	; 0xfa4 <XPROGTarget_SendByte>
	}

	return true;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <XMEGANVM_WritePageMemory+0xb2>

	if (PageMode & XPRG_PAGEMODE_WRITE)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
		  return false;
    137e:	80 e0       	ldi	r24, 0x00	; 0
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
}
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	1f 91       	pop	r17
    1386:	0f 91       	pop	r16
    1388:	ff 90       	pop	r15
    138a:	ef 90       	pop	r14
    138c:	df 90       	pop	r13
    138e:	cf 90       	pop	r12
    1390:	bf 90       	pop	r11
    1392:	af 90       	pop	r10
    1394:	9f 90       	pop	r9
    1396:	8f 90       	pop	r8
    1398:	7f 90       	pop	r7
    139a:	08 95       	ret

0000139c <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	d8 2e       	mov	r13, r24
    13a8:	7a 01       	movw	r14, r20
    13aa:	8b 01       	movw	r16, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    13ac:	9d de       	rcall	.-710    	; 0x10e8 <XMEGANVM_WaitWhileNVMControllerBusy>
    13ae:	88 23       	and	r24, r24
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <XMEGANVM_EraseMemory+0x18>
    13b2:	59 c0       	rjmp	.+178    	; 0x1466 <XMEGANVM_EraseMemory+0xca>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
    13b4:	8d 2d       	mov	r24, r13
    13b6:	80 34       	cpi	r24, 0x40	; 64
    13b8:	31 f4       	brne	.+12     	; 0x13c6 <XMEGANVM_EraseMemory+0x2a>
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    13ba:	8c e4       	ldi	r24, 0x4C	; 76
    13bc:	f3 dd       	rcall	.-1050   	; 0xfa4 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    13be:	8a e0       	ldi	r24, 0x0A	; 10
    13c0:	76 de       	rcall	.-788    	; 0x10ae <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    13c2:	80 e4       	ldi	r24, 0x40	; 64
    13c4:	3a c0       	rjmp	.+116    	; 0x143a <XMEGANVM_EraseMemory+0x9e>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
    13c6:	8d 2d       	mov	r24, r13
    13c8:	80 33       	cpi	r24, 0x30	; 48
    13ca:	09 f0       	breq	.+2      	; 0x13ce <XMEGANVM_EraseMemory+0x32>
    13cc:	3d c0       	rjmp	.+122    	; 0x1448 <XMEGANVM_EraseMemory+0xac>
	{
		/* Send the EEPROM page buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    13ce:	8c e4       	ldi	r24, 0x4C	; 76
    13d0:	e9 dd       	rcall	.-1070   	; 0xfa4 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    13d2:	8a e0       	ldi	r24, 0x0A	; 10
    13d4:	6c de       	rcall	.-808    	; 0x10ae <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
    13d6:	86 e3       	ldi	r24, 0x36	; 54
    13d8:	e5 dd       	rcall	.-1078   	; 0xfa4 <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the buffer erase */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    13da:	8c e4       	ldi	r24, 0x4C	; 76
    13dc:	e3 dd       	rcall	.-1082   	; 0xfa4 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    13de:	8b e0       	ldi	r24, 0x0B	; 11
    13e0:	66 de       	rcall	.-820    	; 0x10ae <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	df dd       	rcall	.-1090   	; 0xfa4 <XPROGTarget_SendByte>

		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
    13e6:	80 de       	rcall	.-768    	; 0x10e8 <XMEGANVM_WaitWhileNVMControllerBusy>
    13e8:	88 23       	and	r24, r24
    13ea:	09 f4       	brne	.+2      	; 0x13ee <XMEGANVM_EraseMemory+0x52>
    13ec:	3c c0       	rjmp	.+120    	; 0x1466 <XMEGANVM_EraseMemory+0xca>
		  return false;

		/* Send the EEPROM memory buffer write command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    13ee:	8c e4       	ldi	r24, 0x4C	; 76
    13f0:	d9 dd       	rcall	.-1102   	; 0xfa4 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    13f2:	8a e0       	ldi	r24, 0x0A	; 10
    13f4:	5c de       	rcall	.-840    	; 0x10ae <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
    13f6:	83 e3       	ldi	r24, 0x33	; 51
    13f8:	d5 dd       	rcall	.-1110   	; 0xfa4 <XPROGTarget_SendByte>

		/* Load the PDI pointer register with the EEPROM page start address */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_DIRECT << 2) | PDI_DATSIZE_4BYTES);
    13fa:	8b e6       	ldi	r24, 0x6B	; 107
    13fc:	d3 dd       	rcall	.-1114   	; 0xfa4 <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(Address);
    13fe:	c8 01       	movw	r24, r16
    1400:	b7 01       	movw	r22, r14
    1402:	3c de       	rcall	.-904    	; 0x107c <XMEGANVM_SendAddress>

		/* Send the REPEAT command with the specified number of bytes to write */
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
    1404:	80 ea       	ldi	r24, 0xA0	; 160
    1406:	ce dd       	rcall	.-1124   	; 0xfa4 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
    1408:	80 91 86 01 	lds	r24, 0x0186
    140c:	81 50       	subi	r24, 0x01	; 1
    140e:	ca dd       	rcall	.-1132   	; 0xfa4 <XPROGTarget_SendByte>

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
    1410:	84 e6       	ldi	r24, 0x64	; 100
    1412:	c8 dd       	rcall	.-1136   	; 0xfa4 <XPROGTarget_SendByte>
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    1414:	10 e0       	ldi	r17, 0x00	; 0
    1416:	03 c0       	rjmp	.+6      	; 0x141e <XMEGANVM_EraseMemory+0x82>
		  XPROGTarget_SendByte(0x00);
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	c4 dd       	rcall	.-1144   	; 0xfa4 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(PDI_CMD_REPEAT | PDI_DATSIZE_1BYTE);
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);

		/* Send a ST command with indirect access and post-increment to tag each byte in the EEPROM page buffer */
		XPROGTarget_SendByte(PDI_CMD_ST | (PDI_POINTER_INDIRECT_PI << 2) | PDI_DATSIZE_1BYTE);
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
    141c:	1f 5f       	subi	r17, 0xFF	; 255
    141e:	21 2f       	mov	r18, r17
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	80 91 86 01 	lds	r24, 0x0186
    1426:	90 91 87 01 	lds	r25, 0x0187
    142a:	28 17       	cp	r18, r24
    142c:	39 07       	cpc	r19, r25
    142e:	a0 f3       	brcs	.-24     	; 0x1418 <XMEGANVM_EraseMemory+0x7c>
		  XPROGTarget_SendByte(0x00);

		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1430:	8c e4       	ldi	r24, 0x4C	; 76
    1432:	b8 dd       	rcall	.-1168   	; 0xfa4 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    1434:	8a e0       	ldi	r24, 0x0A	; 10
    1436:	3b de       	rcall	.-906    	; 0x10ae <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    1438:	80 e3       	ldi	r24, 0x30	; 48
    143a:	b4 dd       	rcall	.-1176   	; 0xfa4 <XPROGTarget_SendByte>

		/* Set CMDEX bit in NVM CTRLA register to start the EEPROM erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    143c:	8c e4       	ldi	r24, 0x4C	; 76
    143e:	b2 dd       	rcall	.-1180   	; 0xfa4 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
    1440:	8b e0       	ldi	r24, 0x0B	; 11
    1442:	35 de       	rcall	.-918    	; 0x10ae <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	0c c0       	rjmp	.+24     	; 0x1460 <XMEGANVM_EraseMemory+0xc4>
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1448:	8c e4       	ldi	r24, 0x4C	; 76
    144a:	ac dd       	rcall	.-1192   	; 0xfa4 <XPROGTarget_SendByte>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
    144c:	8a e0       	ldi	r24, 0x0A	; 10
    144e:	2f de       	rcall	.-930    	; 0x10ae <XMEGANVM_SendNVMRegAddress>
		XPROGTarget_SendByte(EraseCommand);
    1450:	8d 2d       	mov	r24, r13
    1452:	a8 dd       	rcall	.-1200   	; 0xfa4 <XPROGTarget_SendByte>

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS | (PDI_DATSIZE_4BYTES << 2));
    1454:	8c e4       	ldi	r24, 0x4C	; 76
    1456:	a6 dd       	rcall	.-1204   	; 0xfa4 <XPROGTarget_SendByte>
		XMEGANVM_SendAddress(Address);
    1458:	c8 01       	movw	r24, r16
    145a:	b7 01       	movw	r22, r14
    145c:	0f de       	rcall	.-994    	; 0x107c <XMEGANVM_SendAddress>
		XPROGTarget_SendByte(0x00);
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	a1 dd       	rcall	.-1214   	; 0xfa4 <XPROGTarget_SendByte>
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
    1462:	36 de       	rcall	.-916    	; 0x10d0 <XMEGANVM_WaitWhileNVMBusBusy>
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <XMEGANVM_EraseMemory+0xcc>
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);

		/* Wait until the NVM controller is no longer busy */
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
		  return false;
    1466:	80 e0       	ldi	r24, 0x00	; 0
	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy()))
	  return false;

	return true;
}
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	ff 90       	pop	r15
    146e:	ef 90       	pop	r14
    1470:	df 90       	pop	r13
    1472:	08 95       	ret

00001474 <TINYNVM_SendWriteNVMRegister>:
 */
static void TINYNVM_SendWriteNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SOUT | ((Address & 0x30) << 1) | (Address & 0x0F));
    1474:	28 2f       	mov	r18, r24
    1476:	2f 70       	andi	r18, 0x0F	; 15
    1478:	20 69       	ori	r18, 0x90	; 144
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	80 73       	andi	r24, 0x30	; 48
    147e:	90 70       	andi	r25, 0x00	; 0
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	82 2b       	or	r24, r18
}
    1486:	8e cd       	rjmp	.-1252   	; 0xfa4 <XPROGTarget_SendByte>

00001488 <TINYNVM_SendPointerAddress>:

#if defined(ENABLE_XPROG_PROTOCOL) || defined(__DOXYGEN__)

/** Sends the given pointer address to the target's TPI pointer register */
static void TINYNVM_SendPointerAddress(const uint16_t AbsoluteAddress)
{
    1488:	1f 93       	push	r17
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	0f 92       	push	r0
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	18 2f       	mov	r17, r24
	/* Send the given 16-bit address to the target, LSB first */
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 0);
    1496:	88 e6       	ldi	r24, 0x68	; 104
    1498:	99 83       	std	Y+1, r25	; 0x01
    149a:	84 dd       	rcall	.-1272   	; 0xfa4 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress & 0xFF);
    149c:	81 2f       	mov	r24, r17
    149e:	82 dd       	rcall	.-1276   	; 0xfa4 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SSTPR | 1);
    14a0:	89 e6       	ldi	r24, 0x69	; 105
    14a2:	80 dd       	rcall	.-1280   	; 0xfa4 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
    14a4:	99 81       	ldd	r25, Y+1	; 0x01
    14a6:	89 2f       	mov	r24, r25
    14a8:	7d dd       	rcall	.-1286   	; 0xfa4 <XPROGTarget_SendByte>
}
    14aa:	0f 90       	pop	r0
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	1f 91       	pop	r17
    14b2:	08 95       	ret

000014b4 <TINYNVM_WaitWhileNVMBusBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the SLDCS command to read the TPI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(TPI_CMD_SLDCS | TPI_STATUS_REG);
    14b4:	80 e8       	ldi	r24, 0x80	; 128
    14b6:	76 dd       	rcall	.-1300   	; 0xfa4 <XPROGTarget_SendByte>

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    14b8:	90 dd       	rcall	.-1248   	; 0xfda <XPROGTarget_ReceiveByte>

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    14ba:	9a b5       	in	r25, 0x2a	; 42
    14bc:	99 23       	and	r25, r25
    14be:	21 f0       	breq	.+8      	; 0x14c8 <TINYNVM_WaitWhileNVMBusBusy+0x14>
		  return false;

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & TPI_STATUS_NVM)
    14c0:	81 ff       	sbrs	r24, 1
    14c2:	f8 cf       	rjmp	.-16     	; 0x14b4 <TINYNVM_WaitWhileNVMBusBusy>
		  return true;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	08 95       	ret

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    14c8:	80 e0       	ldi	r24, 0x00	; 0

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & TPI_STATUS_NVM)
		  return true;
	}
}
    14ca:	08 95       	ret

000014cc <TINYNVM_WaitWhileNVMControllerBusy>:
{
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);
    14cc:	80 91 89 01 	lds	r24, 0x0189
 */
static void TINYNVM_SendReadNVMRegister(const uint8_t Address)
{
	/* The TPI command for reading from the I/O space uses strange addressing, where the I/O address's upper
	 * two bits of the 6-bit address are shifted left once */
	XPROGTarget_SendByte(TPI_CMD_SIN | ((Address & 0x30) << 1) | (Address & 0x0F));
    14d0:	28 2f       	mov	r18, r24
    14d2:	2f 70       	andi	r18, 0x0F	; 15
    14d4:	20 61       	ori	r18, 0x10	; 16
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	80 73       	andi	r24, 0x30	; 48
    14da:	90 70       	andi	r25, 0x00	; 0
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	82 2b       	or	r24, r18
    14e2:	60 dd       	rcall	.-1344   	; 0xfa4 <XPROGTarget_SendByte>
	for (;;)
	{
		/* Send the SIN command to read the TPI STATUS register to see the NVM bus is busy */
		TINYNVM_SendReadNVMRegister(XPROG_Param_NVMCSRRegAddr);

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
    14e4:	7a dd       	rcall	.-1292   	; 0xfda <XPROGTarget_ReceiveByte>

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
    14e6:	9a b5       	in	r25, 0x2a	; 42
    14e8:	99 23       	and	r25, r25
    14ea:	21 f0       	breq	.+8      	; 0x14f4 <TINYNVM_WaitWhileNVMControllerBusy+0x28>
		  return false;

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
    14ec:	87 fd       	sbrc	r24, 7
    14ee:	ee cf       	rjmp	.-36     	; 0x14cc <TINYNVM_WaitWhileNVMControllerBusy>
		  return true;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	08 95       	ret

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();

		/* We might have timed out waiting for the status register read response, check here */
		if (!(TimeoutTicksRemaining))
		  return false;
    14f4:	80 e0       	ldi	r24, 0x00	; 0

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7)))
		  return true;
	}
}
    14f6:	08 95       	ret

000014f8 <TINYNVM_EnableTPI>:
/** Enables the physical TPI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the TPI interface was enabled successfully, false otherwise
 */
bool TINYNVM_EnableTPI(void)
{
    14f8:	cf 92       	push	r12
    14fa:	df 92       	push	r13
    14fc:	ef 92       	push	r14
    14fe:	ff 92       	push	r15
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	28 97       	sbiw	r28, 0x08	; 8
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	cd bf       	out	0x3d, r28	; 61
	/* Enable TPI programming mode with the attached target */
	XPROGTarget_EnableTargetTPI();
    1518:	7e dd       	rcall	.-1284   	; 0x1016 <XPROGTarget_EnableTargetTPI>

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
    151a:	82 ec       	ldi	r24, 0xC2	; 194
    151c:	43 dd       	rcall	.-1402   	; 0xfa4 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x02);
    151e:	82 e0       	ldi	r24, 0x02	; 2
    1520:	41 dd       	rcall	.-1406   	; 0xfa4 <XPROGTarget_SendByte>

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
    1522:	80 ee       	ldi	r24, 0xE0	; 224
    1524:	3f dd       	rcall	.-1410   	; 0xfa4 <XPROGTarget_SendByte>
    1526:	8e 01       	movw	r16, r28
    1528:	07 5f       	subi	r16, 0xF7	; 247
    152a:	1f 4f       	sbci	r17, 0xFF	; 255

/** Enables the physical TPI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean true if the TPI interface was enabled successfully, false otherwise
 */
bool TINYNVM_EnableTPI(void)
    152c:	7e 01       	movw	r14, r28
    152e:	08 94       	sec
    1530:	e1 1c       	adc	r14, r1
    1532:	f1 1c       	adc	r15, r1
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);
    1534:	67 01       	movw	r12, r14
    1536:	d6 01       	movw	r26, r12
    1538:	e4 eb       	ldi	r30, 0xB4	; 180
    153a:	f1 e0       	ldi	r31, 0x01	; 1
    153c:	88 e0       	ldi	r24, 0x08	; 8
    153e:	01 90       	ld	r0, Z+
    1540:	0d 92       	st	X+, r0
    1542:	81 50       	subi	r24, 0x01	; 1
    1544:	e1 f7       	brne	.-8      	; 0x153e <TINYNVM_EnableTPI+0x46>
    1546:	f8 01       	movw	r30, r16
    1548:	82 91       	ld	r24, -Z
    154a:	8f 01       	movw	r16, r30
    154c:	2b dd       	rcall	.-1450   	; 0xfa4 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_CTRL_REG);
	XPROGTarget_SendByte(0x02);

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(TPI_CMD_SKEY);
	for (uint8_t i = sizeof(TPI_NVMENABLE_KEY); i > 0; i--)
    154e:	0e 15       	cp	r16, r14
    1550:	1f 05       	cpc	r17, r15
    1552:	89 f7       	brne	.-30     	; 0x1536 <TINYNVM_EnableTPI+0x3e>
	  XPROGTarget_SendByte(TPI_NVMENABLE_KEY[i - 1]);

	/* Wait until the NVM bus becomes active */
	return TINYNVM_WaitWhileNVMBusBusy();
    1554:	af df       	rcall	.-162    	; 0x14b4 <TINYNVM_WaitWhileNVMBusBusy>
}
    1556:	28 96       	adiw	r28, 0x08	; 8
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	ff 90       	pop	r15
    156c:	ef 90       	pop	r14
    156e:	df 90       	pop	r13
    1570:	cf 90       	pop	r12
    1572:	08 95       	ret

00001574 <TINYNVM_DisableTPI>:

/** Removes access to the target's NVM controller and physically disables the target's physical TPI interface. */
void TINYNVM_DisableTPI(void)
{
	TINYNVM_WaitWhileNVMBusBusy();
    1574:	9f df       	rcall	.-194    	; 0x14b4 <TINYNVM_WaitWhileNVMBusBusy>

	do
	{
		/* Clear the NVMEN bit in the TPI STATUS register to disable TPI mode */
		XPROGTarget_SendByte(TPI_CMD_SSTCS | TPI_STATUS_REG);
    1576:	80 ec       	ldi	r24, 0xC0	; 192
    1578:	15 dd       	rcall	.-1494   	; 0xfa4 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(0x00);
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	13 dd       	rcall	.-1498   	; 0xfa4 <XPROGTarget_SendByte>

		/* Read back the STATUS register, check to see if it took effect */
		XPROGTarget_SendByte(TPI_CMD_SLDCS | PDI_RESET_REG);
    157e:	81 e8       	ldi	r24, 0x81	; 129
    1580:	11 dd       	rcall	.-1502   	; 0xfa4 <XPROGTarget_SendByte>
	} while (XPROGTarget_ReceiveByte() != 0x00);
    1582:	2b dd       	rcall	.-1450   	; 0xfda <XPROGTarget_ReceiveByte>
    1584:	88 23       	and	r24, r24
    1586:	b9 f7       	brne	.-18     	; 0x1576 <TINYNVM_DisableTPI+0x2>

	XPROGTarget_DisableTargetTPI();
}
    1588:	f6 cc       	rjmp	.-1556   	; 0xf76 <XPROGTarget_DisableTargetTPI>

0000158a <TINYNVM_ReadMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_ReadMemory(const uint16_t ReadAddress,
                        uint8_t* ReadBuffer,
                        uint16_t ReadSize)
{
    158a:	ef 92       	push	r14
    158c:	ff 92       	push	r15
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	8c 01       	movw	r16, r24
    1598:	eb 01       	movw	r28, r22
    159a:	7a 01       	movw	r14, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    159c:	97 df       	rcall	.-210    	; 0x14cc <TINYNVM_WaitWhileNVMControllerBusy>
    159e:	88 23       	and	r24, r24
    15a0:	c9 f0       	breq	.+50     	; 0x15d4 <TINYNVM_ReadMemory+0x4a>
	  return false;

	/* Set the NVM control register to the NO OP command for memory reading */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    15a2:	80 91 88 01 	lds	r24, 0x0188
    15a6:	66 df       	rcall	.-308    	; 0x1474 <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	fc dc       	rcall	.-1544   	; 0xfa4 <XPROGTarget_SendByte>

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);
    15ac:	c8 01       	movw	r24, r16
    15ae:	6c df       	rcall	.-296    	; 0x1488 <TINYNVM_SendPointerAddress>

	while (ReadSize-- && TimeoutTicksRemaining)
    15b0:	04 c0       	rjmp	.+8      	; 0x15ba <TINYNVM_ReadMemory+0x30>
	{
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
    15b2:	84 e2       	ldi	r24, 0x24	; 36
    15b4:	f7 dc       	rcall	.-1554   	; 0xfa4 <XPROGTarget_SendByte>
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
    15b6:	11 dd       	rcall	.-1502   	; 0xfda <XPROGTarget_ReceiveByte>
    15b8:	89 93       	st	Y+, r24
	XPROGTarget_SendByte(TINY_NVM_CMD_NOOP);

	/* Send the address of the location to read from */
	TINYNVM_SendPointerAddress(ReadAddress);

	while (ReadSize-- && TimeoutTicksRemaining)
    15ba:	e1 14       	cp	r14, r1
    15bc:	f1 04       	cpc	r15, r1
    15be:	31 f0       	breq	.+12     	; 0x15cc <TINYNVM_ReadMemory+0x42>
    15c0:	8a b5       	in	r24, 0x2a	; 42
    15c2:	08 94       	sec
    15c4:	e1 08       	sbc	r14, r1
    15c6:	f1 08       	sbc	r15, r1
    15c8:	88 23       	and	r24, r24
    15ca:	99 f7       	brne	.-26     	; 0x15b2 <TINYNVM_ReadMemory+0x28>
		/* Read the byte of data from the target */
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
    15cc:	9a b5       	in	r25, 0x2a	; 42
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	99 23       	and	r25, r25
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <TINYNVM_ReadMemory+0x4c>
                        uint8_t* ReadBuffer,
                        uint16_t ReadSize)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
	  return false;
    15d4:	80 e0       	ldi	r24, 0x00	; 0
		XPROGTarget_SendByte(TPI_CMD_SLD | TPI_POINTER_INDIRECT_PI);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	1f 91       	pop	r17
    15dc:	0f 91       	pop	r16
    15de:	ff 90       	pop	r15
    15e0:	ef 90       	pop	r14
    15e2:	08 95       	ret

000015e4 <TINYNVM_WriteMemory>:
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
                         uint8_t* WriteBuffer,
                         uint16_t WriteLength)
{
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	8c 01       	movw	r16, r24
    15f2:	eb 01       	movw	r28, r22
    15f4:	7a 01       	movw	r14, r20
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    15f6:	6a df       	rcall	.-300    	; 0x14cc <TINYNVM_WaitWhileNVMControllerBusy>
    15f8:	88 23       	and	r24, r24
    15fa:	39 f1       	breq	.+78     	; 0x164a <TINYNVM_WriteMemory+0x66>
	  return false;

	/* Must have an integer number of words to write - if extra byte, word-align via a dummy high byte */
	if (WriteLength & 0x01)
    15fc:	e0 fe       	sbrs	r14, 0
    15fe:	08 c0       	rjmp	.+16     	; 0x1610 <TINYNVM_WriteMemory+0x2c>
	  WriteBuffer[WriteLength++] = 0xFF;
    1600:	fe 01       	movw	r30, r28
    1602:	ee 0d       	add	r30, r14
    1604:	ff 1d       	adc	r31, r15
    1606:	8f ef       	ldi	r24, 0xFF	; 255
    1608:	80 83       	st	Z, r24
    160a:	08 94       	sec
    160c:	e1 1c       	adc	r14, r1
    160e:	f1 1c       	adc	r15, r1

	/* Set the NVM control register to the WORD WRITE command for memory writing */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    1610:	80 91 88 01 	lds	r24, 0x0188
    1614:	2f df       	rcall	.-418    	; 0x1474 <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);
    1616:	8d e1       	ldi	r24, 0x1D	; 29
    1618:	c5 dc       	rcall	.-1654   	; 0xfa4 <XPROGTarget_SendByte>

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);
    161a:	c8 01       	movw	r24, r16
    161c:	35 df       	rcall	.-406    	; 0x1488 <TINYNVM_SendPointerAddress>

	while (WriteLength)
    161e:	10 c0       	rjmp	.+32     	; 0x1640 <TINYNVM_WriteMemory+0x5c>
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1620:	55 df       	rcall	.-342    	; 0x14cc <TINYNVM_WaitWhileNVMControllerBusy>
    1622:	88 23       	and	r24, r24
    1624:	91 f0       	breq	.+36     	; 0x164a <TINYNVM_WriteMemory+0x66>
		  return false;

		/* Write the low byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    1626:	84 e6       	ldi	r24, 0x64	; 100
    1628:	bd dc       	rcall	.-1670   	; 0xfa4 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(*(WriteBuffer++));
    162a:	88 81       	ld	r24, Y
    162c:	bb dc       	rcall	.-1674   	; 0xfa4 <XPROGTarget_SendByte>

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
    162e:	84 e6       	ldi	r24, 0x64	; 100
    1630:	b9 dc       	rcall	.-1678   	; 0xfa4 <XPROGTarget_SendByte>
		XPROGTarget_SendByte(*(WriteBuffer++));
    1632:	89 81       	ldd	r24, Y+1	; 0x01
 *  \param[in] WriteBuffer   Buffer to source data from
 *  \param[in] WriteLength   Total number of bytes to write to the device (must be an integer multiple of 2)
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_WriteMemory(const uint16_t WriteAddress,
    1634:	22 96       	adiw	r28, 0x02	; 2
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
		XPROGTarget_SendByte(*(WriteBuffer++));

		/* Write the high byte of data to the target */
		XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT_PI);
		XPROGTarget_SendByte(*(WriteBuffer++));
    1636:	b6 dc       	rcall	.-1684   	; 0xfa4 <XPROGTarget_SendByte>

		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
    1638:	8e ef       	ldi	r24, 0xFE	; 254
    163a:	9f ef       	ldi	r25, 0xFF	; 255
    163c:	e8 0e       	add	r14, r24
    163e:	f9 1e       	adc	r15, r25
	XPROGTarget_SendByte(TINY_NVM_CMD_WORDWRITE);

	/* Send the address of the location to write to */
	TINYNVM_SendPointerAddress(WriteAddress);

	while (WriteLength)
    1640:	e1 14       	cp	r14, r1
    1642:	f1 04       	cpc	r15, r1
    1644:	69 f7       	brne	.-38     	; 0x1620 <TINYNVM_WriteMemory+0x3c>

		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
	}

	return true;
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	01 c0       	rjmp	.+2      	; 0x164c <TINYNVM_WriteMemory+0x68>

	while (WriteLength)
	{
		/* Wait until the NVM controller is no longer busy */
		if (!(TINYNVM_WaitWhileNVMControllerBusy()))
		  return false;
    164a:	80 e0       	ldi	r24, 0x00	; 0
		/* Need to decrement the write length twice, since we wrote a whole two-byte word */
		WriteLength -= 2;
	}

	return true;
}
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	1f 91       	pop	r17
    1652:	0f 91       	pop	r16
    1654:	ff 90       	pop	r15
    1656:	ef 90       	pop	r14
    1658:	08 95       	ret

0000165a <TINYNVM_EraseMemory>:
 *
 *  \return Boolean true if the command sequence complete successfully
 */
bool TINYNVM_EraseMemory(const uint8_t EraseCommand,
                         const uint16_t Address)
{
    165a:	1f 93       	push	r17
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	18 2f       	mov	r17, r24
    1662:	eb 01       	movw	r28, r22
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1664:	33 df       	rcall	.-410    	; 0x14cc <TINYNVM_WaitWhileNVMControllerBusy>
    1666:	88 23       	and	r24, r24
    1668:	71 f0       	breq	.+28     	; 0x1686 <TINYNVM_EraseMemory+0x2c>
	  return false;

	/* Set the NVM control register to the target memory erase command */
	TINYNVM_SendWriteNVMRegister(XPROG_Param_NVMCMDRegAddr);
    166a:	80 91 88 01 	lds	r24, 0x0188
    166e:	02 df       	rcall	.-508    	; 0x1474 <TINYNVM_SendWriteNVMRegister>
	XPROGTarget_SendByte(EraseCommand);
    1670:	81 2f       	mov	r24, r17
    1672:	98 dc       	rcall	.-1744   	; 0xfa4 <XPROGTarget_SendByte>

	/* Write to a high byte location within the target address space to start the erase process */
	TINYNVM_SendPointerAddress(Address | 0x0001);
    1674:	ce 01       	movw	r24, r28
    1676:	81 60       	ori	r24, 0x01	; 1
    1678:	07 df       	rcall	.-498    	; 0x1488 <TINYNVM_SendPointerAddress>
	XPROGTarget_SendByte(TPI_CMD_SST | TPI_POINTER_INDIRECT);
    167a:	80 e6       	ldi	r24, 0x60	; 96
    167c:	93 dc       	rcall	.-1754   	; 0xfa4 <XPROGTarget_SendByte>
	XPROGTarget_SendByte(0x00);
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	91 dc       	rcall	.-1758   	; 0xfa4 <XPROGTarget_SendByte>

	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
    1682:	24 df       	rcall	.-440    	; 0x14cc <TINYNVM_WaitWhileNVMControllerBusy>
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <TINYNVM_EraseMemory+0x2e>
bool TINYNVM_EraseMemory(const uint8_t EraseCommand,
                         const uint16_t Address)
{
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
	  return false;
    1686:	80 e0       	ldi	r24, 0x00	; 0
	/* Wait until the NVM controller is no longer busy */
	if (!(TINYNVM_WaitWhileNVMControllerBusy()))
	  return false;

	return true;
}
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	1f 91       	pop	r17
    168e:	08 95       	ret

00001690 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1690:	8f 92       	push	r8
    1692:	9f 92       	push	r9
    1694:	bf 92       	push	r11
    1696:	cf 92       	push	r12
    1698:	df 92       	push	r13
    169a:	ef 92       	push	r14
    169c:	ff 92       	push	r15
    169e:	0f 93       	push	r16
    16a0:	1f 93       	push	r17
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	0f 92       	push	r0
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	e8 2e       	mov	r14, r24
    16ae:	4b 01       	movw	r8, r22
    16b0:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    16b2:	99 83       	std	Y+1, r25	; 0x01
    16b4:	95 d2       	rcall	.+1322   	; 0x1be0 <Endpoint_WaitUntilReady>
    16b6:	b8 2e       	mov	r11, r24
    16b8:	99 81       	ldd	r25, Y+1	; 0x01
    16ba:	88 23       	and	r24, r24
    16bc:	c9 f5       	brne	.+114    	; 0x1730 <Endpoint_Write_Stream_LE+0xa0>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    16be:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    16c0:	01 15       	cp	r16, r1
    16c2:	11 05       	cpc	r17, r1
    16c4:	39 f0       	breq	.+14     	; 0x16d4 <Endpoint_Write_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
    16c6:	f8 01       	movw	r30, r16
    16c8:	20 81       	ld	r18, Z
    16ca:	31 81       	ldd	r19, Z+1	; 0x01
    16cc:	82 1a       	sub	r8, r18
    16ce:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    16d0:	e2 0e       	add	r14, r18
    16d2:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    16d4:	cc 24       	eor	r12, r12
    16d6:	dd 24       	eor	r13, r13
    16d8:	26 c0       	rjmp	.+76     	; 0x1726 <Endpoint_Write_Stream_LE+0x96>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16da:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    16de:	85 fd       	sbrc	r24, 5
    16e0:	17 c0       	rjmp	.+46     	; 0x1710 <Endpoint_Write_Stream_LE+0x80>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16e2:	80 91 e8 00 	lds	r24, 0x00E8
    16e6:	8e 77       	andi	r24, 0x7E	; 126
    16e8:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    16ec:	18 d5       	rcall	.+2608   	; 0x211e <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    16ee:	01 15       	cp	r16, r1
    16f0:	11 05       	cpc	r17, r1
    16f2:	51 f0       	breq	.+20     	; 0x1708 <Endpoint_Write_Stream_LE+0x78>
			{
				*BytesProcessed += BytesInTransfer;
    16f4:	f8 01       	movw	r30, r16
    16f6:	80 81       	ld	r24, Z
    16f8:	91 81       	ldd	r25, Z+1	; 0x01
    16fa:	8c 0d       	add	r24, r12
    16fc:	9d 1d       	adc	r25, r13
    16fe:	91 83       	std	Z+1, r25	; 0x01
    1700:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1702:	25 e0       	ldi	r18, 0x05	; 5
    1704:	b2 2e       	mov	r11, r18
    1706:	14 c0       	rjmp	.+40     	; 0x1730 <Endpoint_Write_Stream_LE+0xa0>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1708:	6b d2       	rcall	.+1238   	; 0x1be0 <Endpoint_WaitUntilReady>
    170a:	88 23       	and	r24, r24
    170c:	61 f0       	breq	.+24     	; 0x1726 <Endpoint_Write_Stream_LE+0x96>
    170e:	0f c0       	rjmp	.+30     	; 0x172e <Endpoint_Write_Stream_LE+0x9e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1710:	f7 01       	movw	r30, r14
    1712:	81 91       	ld	r24, Z+
    1714:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1716:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    171a:	08 94       	sec
    171c:	81 08       	sbc	r8, r1
    171e:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    1720:	08 94       	sec
    1722:	c1 1c       	adc	r12, r1
    1724:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1726:	81 14       	cp	r8, r1
    1728:	91 04       	cpc	r9, r1
    172a:	b9 f6       	brne	.-82     	; 0x16da <Endpoint_Write_Stream_LE+0x4a>
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <Endpoint_Write_Stream_LE+0xa0>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    172e:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1730:	8b 2d       	mov	r24, r11
    1732:	0f 90       	pop	r0
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	ff 90       	pop	r15
    173e:	ef 90       	pop	r14
    1740:	df 90       	pop	r13
    1742:	cf 90       	pop	r12
    1744:	bf 90       	pop	r11
    1746:	9f 90       	pop	r9
    1748:	8f 90       	pop	r8
    174a:	08 95       	ret

0000174c <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    174c:	8f 92       	push	r8
    174e:	9f 92       	push	r9
    1750:	bf 92       	push	r11
    1752:	cf 92       	push	r12
    1754:	df 92       	push	r13
    1756:	ef 92       	push	r14
    1758:	ff 92       	push	r15
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	0f 92       	push	r0
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	e8 2e       	mov	r14, r24
    176a:	4b 01       	movw	r8, r22
    176c:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    176e:	99 83       	std	Y+1, r25	; 0x01
    1770:	37 d2       	rcall	.+1134   	; 0x1be0 <Endpoint_WaitUntilReady>
    1772:	b8 2e       	mov	r11, r24
    1774:	99 81       	ldd	r25, Y+1	; 0x01
    1776:	88 23       	and	r24, r24
    1778:	c9 f5       	brne	.+114    	; 0x17ec <Endpoint_Read_Stream_LE+0xa0>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    177a:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    177c:	01 15       	cp	r16, r1
    177e:	11 05       	cpc	r17, r1
    1780:	39 f0       	breq	.+14     	; 0x1790 <Endpoint_Read_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
    1782:	f8 01       	movw	r30, r16
    1784:	20 81       	ld	r18, Z
    1786:	31 81       	ldd	r19, Z+1	; 0x01
    1788:	82 1a       	sub	r8, r18
    178a:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    178c:	e2 0e       	add	r14, r18
    178e:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1790:	cc 24       	eor	r12, r12
    1792:	dd 24       	eor	r13, r13
    1794:	26 c0       	rjmp	.+76     	; 0x17e2 <Endpoint_Read_Stream_LE+0x96>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1796:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    179a:	85 fd       	sbrc	r24, 5
    179c:	17 c0       	rjmp	.+46     	; 0x17cc <Endpoint_Read_Stream_LE+0x80>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    179e:	80 91 e8 00 	lds	r24, 0x00E8
    17a2:	8b 77       	andi	r24, 0x7B	; 123
    17a4:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    17a8:	ba d4       	rcall	.+2420   	; 0x211e <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    17aa:	01 15       	cp	r16, r1
    17ac:	11 05       	cpc	r17, r1
    17ae:	51 f0       	breq	.+20     	; 0x17c4 <Endpoint_Read_Stream_LE+0x78>
			{
				*BytesProcessed += BytesInTransfer;
    17b0:	f8 01       	movw	r30, r16
    17b2:	80 81       	ld	r24, Z
    17b4:	91 81       	ldd	r25, Z+1	; 0x01
    17b6:	8c 0d       	add	r24, r12
    17b8:	9d 1d       	adc	r25, r13
    17ba:	91 83       	std	Z+1, r25	; 0x01
    17bc:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    17be:	45 e0       	ldi	r20, 0x05	; 5
    17c0:	b4 2e       	mov	r11, r20
    17c2:	14 c0       	rjmp	.+40     	; 0x17ec <Endpoint_Read_Stream_LE+0xa0>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    17c4:	0d d2       	rcall	.+1050   	; 0x1be0 <Endpoint_WaitUntilReady>
    17c6:	88 23       	and	r24, r24
    17c8:	61 f0       	breq	.+24     	; 0x17e2 <Endpoint_Read_Stream_LE+0x96>
    17ca:	0f c0       	rjmp	.+30     	; 0x17ea <Endpoint_Read_Stream_LE+0x9e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    17cc:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    17d0:	f7 01       	movw	r30, r14
    17d2:	81 93       	st	Z+, r24
    17d4:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    17d6:	08 94       	sec
    17d8:	81 08       	sbc	r8, r1
    17da:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    17dc:	08 94       	sec
    17de:	c1 1c       	adc	r12, r1
    17e0:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    17e2:	81 14       	cp	r8, r1
    17e4:	91 04       	cpc	r9, r1
    17e6:	b9 f6       	brne	.-82     	; 0x1796 <Endpoint_Read_Stream_LE+0x4a>
    17e8:	01 c0       	rjmp	.+2      	; 0x17ec <Endpoint_Read_Stream_LE+0xa0>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    17ea:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    17ec:	8b 2d       	mov	r24, r11
    17ee:	0f 90       	pop	r0
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	ff 90       	pop	r15
    17fa:	ef 90       	pop	r14
    17fc:	df 90       	pop	r13
    17fe:	cf 90       	pop	r12
    1800:	bf 90       	pop	r11
    1802:	9f 90       	pop	r9
    1804:	8f 90       	pop	r8
    1806:	08 95       	ret

00001808 <Endpoint_Read_Stream_BE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1808:	bf 92       	push	r11
    180a:	cf 92       	push	r12
    180c:	df 92       	push	r13
    180e:	ef 92       	push	r14
    1810:	ff 92       	push	r15
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	6c 01       	movw	r12, r24
    181c:	eb 01       	movw	r28, r22
    181e:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1820:	df d1       	rcall	.+958    	; 0x1be0 <Endpoint_WaitUntilReady>
    1822:	b8 2e       	mov	r11, r24
    1824:	88 23       	and	r24, r24
    1826:	d9 f5       	brne	.+118    	; 0x189e <Endpoint_Read_Stream_BE+0x96>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1828:	8e 01       	movw	r16, r28
    182a:	01 50       	subi	r16, 0x01	; 1
    182c:	10 40       	sbci	r17, 0x00	; 0
    182e:	0c 0d       	add	r16, r12
    1830:	1d 1d       	adc	r17, r13
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1832:	e1 14       	cp	r14, r1
    1834:	f1 04       	cpc	r15, r1
    1836:	39 f0       	breq	.+14     	; 0x1846 <Endpoint_Read_Stream_BE+0x3e>
	{
		Length -= *BytesProcessed;
    1838:	f7 01       	movw	r30, r14
    183a:	20 81       	ld	r18, Z
    183c:	31 81       	ldd	r19, Z+1	; 0x01
    183e:	c2 1b       	sub	r28, r18
    1840:	d3 0b       	sbc	r29, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1842:	02 1b       	sub	r16, r18
    1844:	13 0b       	sbc	r17, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1846:	cc 24       	eor	r12, r12
    1848:	dd 24       	eor	r13, r13
    184a:	25 c0       	rjmp	.+74     	; 0x1896 <Endpoint_Read_Stream_BE+0x8e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    184c:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1850:	85 fd       	sbrc	r24, 5
    1852:	17 c0       	rjmp	.+46     	; 0x1882 <Endpoint_Read_Stream_BE+0x7a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1854:	80 91 e8 00 	lds	r24, 0x00E8
    1858:	8b 77       	andi	r24, 0x7B	; 123
    185a:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    185e:	5f d4       	rcall	.+2238   	; 0x211e <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    1860:	e1 14       	cp	r14, r1
    1862:	f1 04       	cpc	r15, r1
    1864:	51 f0       	breq	.+20     	; 0x187a <Endpoint_Read_Stream_BE+0x72>
			{
				*BytesProcessed += BytesInTransfer;
    1866:	f7 01       	movw	r30, r14
    1868:	80 81       	ld	r24, Z
    186a:	91 81       	ldd	r25, Z+1	; 0x01
    186c:	8c 0d       	add	r24, r12
    186e:	9d 1d       	adc	r25, r13
    1870:	91 83       	std	Z+1, r25	; 0x01
    1872:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1874:	55 e0       	ldi	r21, 0x05	; 5
    1876:	b5 2e       	mov	r11, r21
    1878:	12 c0       	rjmp	.+36     	; 0x189e <Endpoint_Read_Stream_BE+0x96>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    187a:	b2 d1       	rcall	.+868    	; 0x1be0 <Endpoint_WaitUntilReady>
    187c:	88 23       	and	r24, r24
    187e:	59 f0       	breq	.+22     	; 0x1896 <Endpoint_Read_Stream_BE+0x8e>
    1880:	0d c0       	rjmp	.+26     	; 0x189c <Endpoint_Read_Stream_BE+0x94>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1882:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1886:	f8 01       	movw	r30, r16
    1888:	80 83       	st	Z, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    188a:	01 50       	subi	r16, 0x01	; 1
    188c:	10 40       	sbci	r17, 0x00	; 0
			Length--;
    188e:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    1890:	08 94       	sec
    1892:	c1 1c       	adc	r12, r1
    1894:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1896:	20 97       	sbiw	r28, 0x00	; 0
    1898:	c9 f6       	brne	.-78     	; 0x184c <Endpoint_Read_Stream_BE+0x44>
    189a:	01 c0       	rjmp	.+2      	; 0x189e <Endpoint_Read_Stream_BE+0x96>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    189c:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    189e:	8b 2d       	mov	r24, r11
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	1f 91       	pop	r17
    18a6:	0f 91       	pop	r16
    18a8:	ff 90       	pop	r15
    18aa:	ef 90       	pop	r14
    18ac:	df 90       	pop	r13
    18ae:	cf 90       	pop	r12
    18b0:	bf 90       	pop	r11
    18b2:	08 95       	ret

000018b4 <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    18b4:	28 2f       	mov	r18, r24
    18b6:	39 2f       	mov	r19, r25
    18b8:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    18ba:	80 91 e8 02 	lds	r24, 0x02E8
    18be:	90 91 e9 02 	lds	r25, 0x02E9
    18c2:	86 17       	cp	r24, r22
    18c4:	97 07       	cpc	r25, r23
    18c6:	18 f4       	brcc	.+6      	; 0x18ce <Endpoint_Write_Control_Stream_LE+0x1a>
    18c8:	bc 01       	movw	r22, r24
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	35 c0       	rjmp	.+106    	; 0x1938 <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    18ce:	61 15       	cp	r22, r1
    18d0:	71 05       	cpc	r23, r1
    18d2:	d9 f7       	brne	.-10     	; 0x18ca <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18d4:	80 91 e8 00 	lds	r24, 0x00E8
    18d8:	8e 77       	andi	r24, 0x7E	; 126
    18da:	80 93 e8 00 	sts	0x00E8, r24
    18de:	f5 cf       	rjmp	.-22     	; 0x18ca <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18e0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18e2:	88 23       	and	r24, r24
    18e4:	f1 f1       	breq	.+124    	; 0x1962 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18e6:	85 30       	cpi	r24, 0x05	; 5
    18e8:	c1 f1       	breq	.+112    	; 0x195a <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18ea:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18ee:	83 fd       	sbrc	r24, 3
    18f0:	36 c0       	rjmp	.+108    	; 0x195e <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18f2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    18f6:	82 fd       	sbrc	r24, 2
    18f8:	2a c0       	rjmp	.+84     	; 0x194e <Endpoint_Write_Control_Stream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18fa:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    18fe:	80 ff       	sbrs	r24, 0
    1900:	1b c0       	rjmp	.+54     	; 0x1938 <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1902:	80 91 f2 00 	lds	r24, 0x00F2
    1906:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    190a:	06 c0       	rjmp	.+12     	; 0x1918 <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    190c:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    190e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1912:	61 50       	subi	r22, 0x01	; 1
    1914:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    1916:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1918:	61 15       	cp	r22, r1
    191a:	71 05       	cpc	r23, r1
    191c:	19 f0       	breq	.+6      	; 0x1924 <Endpoint_Write_Control_Stream_LE+0x70>
    191e:	80 31       	cpi	r24, 0x10	; 16
    1920:	91 05       	cpc	r25, r1
    1922:	a0 f3       	brcs	.-24     	; 0x190c <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1924:	21 e0       	ldi	r18, 0x01	; 1
    1926:	80 31       	cpi	r24, 0x10	; 16
    1928:	91 05       	cpc	r25, r1
    192a:	09 f0       	breq	.+2      	; 0x192e <Endpoint_Write_Control_Stream_LE+0x7a>
    192c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    192e:	80 91 e8 00 	lds	r24, 0x00E8
    1932:	8e 77       	andi	r24, 0x7E	; 126
    1934:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1938:	61 15       	cp	r22, r1
    193a:	71 05       	cpc	r23, r1
    193c:	89 f6       	brne	.-94     	; 0x18e0 <Endpoint_Write_Control_Stream_LE+0x2c>
    193e:	22 23       	and	r18, r18
    1940:	79 f6       	brne	.-98     	; 0x18e0 <Endpoint_Write_Control_Stream_LE+0x2c>
    1942:	05 c0       	rjmp	.+10     	; 0x194e <Endpoint_Write_Control_Stream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1944:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1946:	88 23       	and	r24, r24
    1948:	61 f0       	breq	.+24     	; 0x1962 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    194a:	85 30       	cpi	r24, 0x05	; 5
    194c:	61 f0       	breq	.+24     	; 0x1966 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    194e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1952:	82 ff       	sbrs	r24, 2
    1954:	f7 cf       	rjmp	.-18     	; 0x1944 <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    195a:	83 e0       	ldi	r24, 0x03	; 3
    195c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1966:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1968:	08 95       	ret

0000196a <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    196a:	e8 2f       	mov	r30, r24
    196c:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    196e:	80 91 e8 02 	lds	r24, 0x02E8
    1972:	90 91 e9 02 	lds	r25, 0x02E9
    1976:	86 17       	cp	r24, r22
    1978:	97 07       	cpc	r25, r23
    197a:	18 f4       	brcc	.+6      	; 0x1982 <Endpoint_Write_Control_PStream_LE+0x18>
    197c:	bc 01       	movw	r22, r24
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	37 c0       	rjmp	.+110    	; 0x19f0 <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1982:	61 15       	cp	r22, r1
    1984:	71 05       	cpc	r23, r1
    1986:	d9 f7       	brne	.-10     	; 0x197e <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1988:	80 91 e8 00 	lds	r24, 0x00E8
    198c:	8e 77       	andi	r24, 0x7E	; 126
    198e:	80 93 e8 00 	sts	0x00E8, r24
    1992:	f5 cf       	rjmp	.-22     	; 0x197e <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1994:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1996:	88 23       	and	r24, r24
    1998:	09 f4       	brne	.+2      	; 0x199c <Endpoint_Write_Control_PStream_LE+0x32>
    199a:	3f c0       	rjmp	.+126    	; 0x1a1a <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    199c:	85 30       	cpi	r24, 0x05	; 5
    199e:	c9 f1       	breq	.+114    	; 0x1a12 <Endpoint_Write_Control_PStream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19a0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19a4:	83 fd       	sbrc	r24, 3
    19a6:	37 c0       	rjmp	.+110    	; 0x1a16 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19a8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    19ac:	82 fd       	sbrc	r24, 2
    19ae:	2b c0       	rjmp	.+86     	; 0x1a06 <Endpoint_Write_Control_PStream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19b0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    19b4:	80 ff       	sbrs	r24, 0
    19b6:	1c c0       	rjmp	.+56     	; 0x19f0 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    19b8:	80 91 f2 00 	lds	r24, 0x00F2
    19bc:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    19c0:	07 c0       	rjmp	.+14     	; 0x19d0 <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    19c2:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    19c4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    19c8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    19ca:	61 50       	subi	r22, 0x01	; 1
    19cc:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    19ce:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    19d0:	61 15       	cp	r22, r1
    19d2:	71 05       	cpc	r23, r1
    19d4:	19 f0       	breq	.+6      	; 0x19dc <Endpoint_Write_Control_PStream_LE+0x72>
    19d6:	80 31       	cpi	r24, 0x10	; 16
    19d8:	91 05       	cpc	r25, r1
    19da:	98 f3       	brcs	.-26     	; 0x19c2 <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    19dc:	21 e0       	ldi	r18, 0x01	; 1
    19de:	80 31       	cpi	r24, 0x10	; 16
    19e0:	91 05       	cpc	r25, r1
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <Endpoint_Write_Control_PStream_LE+0x7c>
    19e4:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19e6:	80 91 e8 00 	lds	r24, 0x00E8
    19ea:	8e 77       	andi	r24, 0x7E	; 126
    19ec:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19f0:	61 15       	cp	r22, r1
    19f2:	71 05       	cpc	r23, r1
    19f4:	79 f6       	brne	.-98     	; 0x1994 <Endpoint_Write_Control_PStream_LE+0x2a>
    19f6:	22 23       	and	r18, r18
    19f8:	69 f6       	brne	.-102    	; 0x1994 <Endpoint_Write_Control_PStream_LE+0x2a>
    19fa:	05 c0       	rjmp	.+10     	; 0x1a06 <Endpoint_Write_Control_PStream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19fc:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19fe:	88 23       	and	r24, r24
    1a00:	61 f0       	breq	.+24     	; 0x1a1a <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a02:	85 30       	cpi	r24, 0x05	; 5
    1a04:	61 f0       	breq	.+24     	; 0x1a1e <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a06:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1a0a:	82 ff       	sbrs	r24, 2
    1a0c:	f7 cf       	rjmp	.-18     	; 0x19fc <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a12:	83 e0       	ldi	r24, 0x03	; 3
    1a14:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a1e:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1a20:	08 95       	ret

00001a22 <Endpoint_Write_Control_EStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1a22:	ef 92       	push	r14
    1a24:	ff 92       	push	r15
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	eb 01       	movw	r28, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1a30:	e8 2e       	mov	r14, r24
    1a32:	f9 2e       	mov	r15, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1a34:	80 91 e8 02 	lds	r24, 0x02E8
    1a38:	90 91 e9 02 	lds	r25, 0x02E9
    1a3c:	86 17       	cp	r24, r22
    1a3e:	97 07       	cpc	r25, r23
    1a40:	18 f4       	brcc	.+6      	; 0x1a48 <Endpoint_Write_Control_EStream_LE+0x26>
    1a42:	ec 01       	movw	r28, r24
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	39 c0       	rjmp	.+114    	; 0x1aba <Endpoint_Write_Control_EStream_LE+0x98>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1a48:	20 97       	sbiw	r28, 0x00	; 0
    1a4a:	e1 f7       	brne	.-8      	; 0x1a44 <Endpoint_Write_Control_EStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a4c:	80 91 e8 00 	lds	r24, 0x00E8
    1a50:	8e 77       	andi	r24, 0x7E	; 126
    1a52:	80 93 e8 00 	sts	0x00E8, r24
    1a56:	f6 cf       	rjmp	.-20     	; 0x1a44 <Endpoint_Write_Control_EStream_LE+0x22>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a58:	9e b3       	in	r25, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a5a:	99 23       	and	r25, r25
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <Endpoint_Write_Control_EStream_LE+0x3e>
    1a5e:	3f c0       	rjmp	.+126    	; 0x1ade <Endpoint_Write_Control_EStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a60:	95 30       	cpi	r25, 0x05	; 5
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <Endpoint_Write_Control_EStream_LE+0x44>
    1a64:	3e c0       	rjmp	.+124    	; 0x1ae2 <Endpoint_Write_Control_EStream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a66:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a6a:	93 fd       	sbrc	r25, 3
    1a6c:	36 c0       	rjmp	.+108    	; 0x1ada <Endpoint_Write_Control_EStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a6e:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1a72:	92 fd       	sbrc	r25, 2
    1a74:	2c c0       	rjmp	.+88     	; 0x1ace <Endpoint_Write_Control_EStream_LE+0xac>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a76:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1a7a:	90 ff       	sbrs	r25, 0
    1a7c:	1e c0       	rjmp	.+60     	; 0x1aba <Endpoint_Write_Control_EStream_LE+0x98>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1a7e:	00 91 f2 00 	lds	r16, 0x00F2
    1a82:	10 91 f3 00 	lds	r17, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a86:	0a c0       	rjmp	.+20     	; 0x1a9c <Endpoint_Write_Control_EStream_LE+0x7a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a88:	c7 01       	movw	r24, r14
    1a8a:	fc d4       	rcall	.+2552   	; 0x2484 <__eerd_byte_usb1287>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a8c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1a90:	08 94       	sec
    1a92:	e1 1c       	adc	r14, r1
    1a94:	f1 1c       	adc	r15, r1
				Length--;
    1a96:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    1a98:	0f 5f       	subi	r16, 0xFF	; 255
    1a9a:	1f 4f       	sbci	r17, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a9c:	20 97       	sbiw	r28, 0x00	; 0
    1a9e:	19 f0       	breq	.+6      	; 0x1aa6 <Endpoint_Write_Control_EStream_LE+0x84>
    1aa0:	00 31       	cpi	r16, 0x10	; 16
    1aa2:	11 05       	cpc	r17, r1
    1aa4:	88 f3       	brcs	.-30     	; 0x1a88 <Endpoint_Write_Control_EStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	00 31       	cpi	r16, 0x10	; 16
    1aaa:	11 05       	cpc	r17, r1
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <Endpoint_Write_Control_EStream_LE+0x8e>
    1aae:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ab0:	90 91 e8 00 	lds	r25, 0x00E8
    1ab4:	9e 77       	andi	r25, 0x7E	; 126
    1ab6:	90 93 e8 00 	sts	0x00E8, r25
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1aba:	20 97       	sbiw	r28, 0x00	; 0
    1abc:	69 f6       	brne	.-102    	; 0x1a58 <Endpoint_Write_Control_EStream_LE+0x36>
    1abe:	88 23       	and	r24, r24
    1ac0:	59 f6       	brne	.-106    	; 0x1a58 <Endpoint_Write_Control_EStream_LE+0x36>
    1ac2:	05 c0       	rjmp	.+10     	; 0x1ace <Endpoint_Write_Control_EStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1ac4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ac6:	88 23       	and	r24, r24
    1ac8:	51 f0       	breq	.+20     	; 0x1ade <Endpoint_Write_Control_EStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1aca:	85 30       	cpi	r24, 0x05	; 5
    1acc:	51 f0       	breq	.+20     	; 0x1ae2 <Endpoint_Write_Control_EStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ace:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1ad2:	82 ff       	sbrs	r24, 2
    1ad4:	f7 cf       	rjmp	.-18     	; 0x1ac4 <Endpoint_Write_Control_EStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	05 c0       	rjmp	.+10     	; 0x1ae4 <Endpoint_Write_Control_EStream_LE+0xc2>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	03 c0       	rjmp	.+6      	; 0x1ae4 <Endpoint_Write_Control_EStream_LE+0xc2>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1ade:	82 e0       	ldi	r24, 0x02	; 2
    1ae0:	01 c0       	rjmp	.+2      	; 0x1ae4 <Endpoint_Write_Control_EStream_LE+0xc2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1ae2:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1ae4:	df 91       	pop	r29
    1ae6:	cf 91       	pop	r28
    1ae8:	1f 91       	pop	r17
    1aea:	0f 91       	pop	r16
    1aec:	ff 90       	pop	r15
    1aee:	ef 90       	pop	r14
    1af0:	08 95       	ret

00001af2 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1af2:	8f 70       	andi	r24, 0x0F	; 15
    1af4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1af8:	eb ee       	ldi	r30, 0xEB	; 235
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	81 60       	ori	r24, 0x01	; 1
    1b00:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    1b02:	ed ee       	ldi	r30, 0xED	; 237
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    1b08:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    1b0c:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1b0e:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1b12:	88 1f       	adc	r24, r24
    1b14:	88 27       	eor	r24, r24
    1b16:	88 1f       	adc	r24, r24
    1b18:	08 95       	ret

00001b1a <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    1b1a:	ef 92       	push	r14
    1b1c:	ff 92       	push	r15
    1b1e:	0f 93       	push	r16
    1b20:	1f 93       	push	r17
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    1b26:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    1b28:	e8 2e       	mov	r14, r24
    1b2a:	e7 01       	movw	r28, r14
    1b2c:	7e 01       	movw	r14, r28
    1b2e:	f9 2e       	mov	r15, r25
    1b30:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1b32:	00 e0       	ldi	r16, 0x00	; 0
    1b34:	2a c0       	rjmp	.+84     	; 0x1b8a <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
    1b36:	98 81       	ld	r25, Y
    1b38:	99 23       	and	r25, r25
    1b3a:	29 f1       	breq	.+74     	; 0x1b86 <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1b3c:	6b 81       	ldd	r22, Y+3	; 0x03
    1b3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b40:	fa 81       	ldd	r31, Y+2	; 0x02
    1b42:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    1b44:	89 2f       	mov	r24, r25
    1b46:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    1b48:	87 30       	cpi	r24, 0x07	; 7
    1b4a:	18 f5       	brcc	.+70     	; 0x1b92 <Endpoint_ConfigureEndpointTable+0x78>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    1b4c:	62 95       	swap	r22
    1b4e:	66 0f       	add	r22, r22
    1b50:	66 0f       	add	r22, r22
    1b52:	60 7c       	andi	r22, 0xC0	; 192
    1b54:	99 1f       	adc	r25, r25
    1b56:	99 27       	eor	r25, r25
    1b58:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1b5a:	69 2b       	or	r22, r25
    1b5c:	22 30       	cpi	r18, 0x02	; 2
    1b5e:	10 f0       	brcs	.+4      	; 0x1b64 <Endpoint_ConfigureEndpointTable+0x4a>
    1b60:	96 e0       	ldi	r25, 0x06	; 6
    1b62:	01 c0       	rjmp	.+2      	; 0x1b66 <Endpoint_ConfigureEndpointTable+0x4c>
    1b64:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1b66:	28 e0       	ldi	r18, 0x08	; 8
    1b68:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	03 c0       	rjmp	.+6      	; 0x1b74 <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1b6e:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1b70:	22 0f       	add	r18, r18
    1b72:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1b74:	2e 17       	cp	r18, r30
    1b76:	3f 07       	cpc	r19, r31
    1b78:	d0 f3       	brcs	.-12     	; 0x1b6e <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1b7a:	42 95       	swap	r20
    1b7c:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1b7e:	49 2b       	or	r20, r25
    1b80:	b8 df       	rcall	.-144    	; 0x1af2 <Endpoint_ConfigureEndpoint_Prv>
    1b82:	88 23       	and	r24, r24
    1b84:	31 f0       	breq	.+12     	; 0x1b92 <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1b86:	0f 5f       	subi	r16, 0xFF	; 255
    1b88:	25 96       	adiw	r28, 0x05	; 5
    1b8a:	01 17       	cp	r16, r17
    1b8c:	a0 f2       	brcs	.-88     	; 0x1b36 <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	01 c0       	rjmp	.+2      	; 0x1b94 <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    1b92:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	ff 90       	pop	r15
    1b9e:	ef 90       	pop	r14
    1ba0:	08 95       	ret

00001ba2 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1ba2:	80 91 e2 02 	lds	r24, 0x02E2
    1ba6:	87 ff       	sbrs	r24, 7
    1ba8:	11 c0       	rjmp	.+34     	; 0x1bcc <Endpoint_ClearStatusStage+0x2a>
    1baa:	03 c0       	rjmp	.+6      	; 0x1bb2 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1bac:	8e b3       	in	r24, 0x1e	; 30
    1bae:	88 23       	and	r24, r24
    1bb0:	b1 f0       	breq	.+44     	; 0x1bde <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1bb2:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1bb6:	82 ff       	sbrs	r24, 2
    1bb8:	f9 cf       	rjmp	.-14     	; 0x1bac <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1bba:	80 91 e8 00 	lds	r24, 0x00E8
    1bbe:	8b 77       	andi	r24, 0x7B	; 123
    1bc0:	80 93 e8 00 	sts	0x00E8, r24
    1bc4:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1bc6:	8e b3       	in	r24, 0x1e	; 30
    1bc8:	88 23       	and	r24, r24
    1bca:	49 f0       	breq	.+18     	; 0x1bde <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1bcc:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1bd0:	80 ff       	sbrs	r24, 0
    1bd2:	f9 cf       	rjmp	.-14     	; 0x1bc6 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1bd4:	80 91 e8 00 	lds	r24, 0x00E8
    1bd8:	8e 77       	andi	r24, 0x7E	; 126
    1bda:	80 93 e8 00 	sts	0x00E8, r24
    1bde:	08 95       	ret

00001be0 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1be0:	80 91 e4 00 	lds	r24, 0x00E4
    1be4:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    1be8:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1bea:	20 91 ec 00 	lds	r18, 0x00EC
    1bee:	20 ff       	sbrs	r18, 0
    1bf0:	25 c0       	rjmp	.+74     	; 0x1c3c <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1bf2:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1bf6:	20 fd       	sbrc	r18, 0
    1bf8:	15 c0       	rjmp	.+42     	; 0x1c24 <Endpoint_WaitUntilReady+0x44>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1bfa:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1bfc:	22 23       	and	r18, r18
    1bfe:	a1 f0       	breq	.+40     	; 0x1c28 <Endpoint_WaitUntilReady+0x48>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c00:	25 30       	cpi	r18, 0x05	; 5
    1c02:	a1 f0       	breq	.+40     	; 0x1c2c <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1c04:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1c08:	25 fd       	sbrc	r18, 5
    1c0a:	12 c0       	rjmp	.+36     	; 0x1c30 <Endpoint_WaitUntilReady+0x50>
    1c0c:	20 91 e4 00 	lds	r18, 0x00E4
    1c10:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1c14:	28 17       	cp	r18, r24
    1c16:	39 07       	cpc	r19, r25
    1c18:	41 f3       	breq	.-48     	; 0x1bea <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1c1a:	44 23       	and	r20, r20
    1c1c:	59 f0       	breq	.+22     	; 0x1c34 <Endpoint_WaitUntilReady+0x54>
    1c1e:	41 50       	subi	r20, 0x01	; 1
    1c20:	c9 01       	movw	r24, r18
    1c22:	e3 cf       	rjmp	.-58     	; 0x1bea <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1c2c:	83 e0       	ldi	r24, 0x03	; 3
    1c2e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1c34:	84 e0       	ldi	r24, 0x04	; 4
    1c36:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    1c38:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1c3a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c3c:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1c40:	22 ff       	sbrs	r18, 2
    1c42:	db cf       	rjmp	.-74     	; 0x1bfa <Endpoint_WaitUntilReady+0x1a>
    1c44:	f9 cf       	rjmp	.-14     	; 0x1c38 <Endpoint_WaitUntilReady+0x58>

00001c46 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1c46:	0f 93       	push	r16
    1c48:	1f 93       	push	r17
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1c4e:	49 d0       	rcall	.+146    	; 0x1ce2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1c50:	50 d0       	rcall	.+160    	; 0x1cf2 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1c52:	c8 ed       	ldi	r28, 0xD8	; 216
    1c54:	d0 e0       	ldi	r29, 0x00	; 0
    1c56:	88 81       	ld	r24, Y
    1c58:	8f 77       	andi	r24, 0x7F	; 127
    1c5a:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1c5c:	88 81       	ld	r24, Y
    1c5e:	80 68       	ori	r24, 0x80	; 128
    1c60:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c62:	88 81       	ld	r24, Y
    1c64:	8f 7d       	andi	r24, 0xDF	; 223
    1c66:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    1c68:	e7 ed       	ldi	r30, 0xD7	; 215
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	80 68       	ori	r24, 0x80	; 128
    1c70:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c72:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1c74:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
    1c76:	10 92 e0 02 	sts	0x02E0, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1c7a:	00 ee       	ldi	r16, 0xE0	; 224
    1c7c:	10 e0       	ldi	r17, 0x00	; 0
    1c7e:	f8 01       	movw	r30, r16
    1c80:	80 81       	ld	r24, Z
    1c82:	8b 7f       	andi	r24, 0xFB	; 251
    1c84:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1c86:	88 81       	ld	r24, Y
    1c88:	81 60       	ori	r24, 0x01	; 1
    1c8a:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	42 e1       	ldi	r20, 0x12	; 18
    1c92:	2f df       	rcall	.-418    	; 0x1af2 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1c94:	e1 ee       	ldi	r30, 0xE1	; 225
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	8e 7f       	andi	r24, 0xFE	; 254
    1c9c:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1c9e:	e2 ee       	ldi	r30, 0xE2	; 226
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	81 60       	ori	r24, 0x01	; 1
    1ca6:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1ca8:	80 81       	ld	r24, Z
    1caa:	88 60       	ori	r24, 0x08	; 8
    1cac:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1cae:	f8 01       	movw	r30, r16
    1cb0:	80 81       	ld	r24, Z
    1cb2:	8e 7f       	andi	r24, 0xFE	; 254
    1cb4:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1cb6:	88 81       	ld	r24, Y
    1cb8:	80 61       	ori	r24, 0x10	; 16
    1cba:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1cbc:	df 91       	pop	r29
    1cbe:	cf 91       	pop	r28
    1cc0:	1f 91       	pop	r17
    1cc2:	0f 91       	pop	r16
    1cc4:	08 95       	ret

00001cc6 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1cc6:	e8 ed       	ldi	r30, 0xD8	; 216
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	8f 7e       	andi	r24, 0xEF	; 239
    1cce:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1cd0:	e7 ed       	ldi	r30, 0xD7	; 215
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	81 60       	ori	r24, 0x01	; 1
    1cd8:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	80 93 e1 02 	sts	0x02E1, r24

	USB_ResetInterface();
}
    1ce0:	b2 cf       	rjmp	.-156    	; 0x1c46 <USB_ResetInterface>

00001ce2 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1ce2:	e8 ed       	ldi	r30, 0xD8	; 216
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	8c 7f       	andi	r24, 0xFC	; 252
    1cea:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1cec:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    1cf0:	08 95       	ret

00001cf2 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1cf2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1cf6:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    1cfa:	08 95       	ret

00001cfc <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1cfc:	1f 92       	push	r1
    1cfe:	0f 92       	push	r0
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	0f 92       	push	r0
    1d04:	0b b6       	in	r0, 0x3b	; 59
    1d06:	0f 92       	push	r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	2f 93       	push	r18
    1d0c:	3f 93       	push	r19
    1d0e:	4f 93       	push	r20
    1d10:	5f 93       	push	r21
    1d12:	6f 93       	push	r22
    1d14:	7f 93       	push	r23
    1d16:	8f 93       	push	r24
    1d18:	9f 93       	push	r25
    1d1a:	af 93       	push	r26
    1d1c:	bf 93       	push	r27
    1d1e:	ef 93       	push	r30
    1d20:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1d22:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1d26:	80 ff       	sbrs	r24, 0
    1d28:	1d c0       	rjmp	.+58     	; 0x1d64 <__vector_10+0x68>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1d2a:	80 91 d8 00 	lds	r24, 0x00D8
    1d2e:	80 ff       	sbrs	r24, 0
    1d30:	19 c0       	rjmp	.+50     	; 0x1d64 <__vector_10+0x68>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1d32:	80 91 da 00 	lds	r24, 0x00DA
    1d36:	8e 7f       	andi	r24, 0xFE	; 254
    1d38:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1d3c:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1d40:	80 ff       	sbrs	r24, 0
    1d42:	0c c0       	rjmp	.+24     	; 0x1d5c <__vector_10+0x60>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d44:	8c e0       	ldi	r24, 0x0C	; 12
    1d46:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d48:	8e e0       	ldi	r24, 0x0E	; 14
    1d4a:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1d4c:	09 b4       	in	r0, 0x29	; 41
    1d4e:	00 fe       	sbrs	r0, 0
    1d50:	fd cf       	rjmp	.-6      	; 0x1d4c <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    1d56:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <EVENT_USB_Device_Connect>
    1d5a:	04 c0       	rjmp	.+8      	; 0x1d64 <__vector_10+0x68>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d5c:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1d5e:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    1d60:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1d64:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1d68:	80 ff       	sbrs	r24, 0
    1d6a:	17 c0       	rjmp	.+46     	; 0x1d9a <__vector_10+0x9e>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1d6c:	80 91 e2 00 	lds	r24, 0x00E2
    1d70:	80 ff       	sbrs	r24, 0
    1d72:	13 c0       	rjmp	.+38     	; 0x1d9a <__vector_10+0x9e>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d74:	80 91 e2 00 	lds	r24, 0x00E2
    1d78:	8e 7f       	andi	r24, 0xFE	; 254
    1d7a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d7e:	80 91 e2 00 	lds	r24, 0x00E2
    1d82:	80 61       	ori	r24, 0x10	; 16
    1d84:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1d88:	80 91 d8 00 	lds	r24, 0x00D8
    1d8c:	80 62       	ori	r24, 0x20	; 32
    1d8e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d92:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1d94:	85 e0       	ldi	r24, 0x05	; 5
    1d96:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
    1d98:	c1 d1       	rcall	.+898    	; 0x211c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1d9a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1d9e:	84 ff       	sbrs	r24, 4
    1da0:	2c c0       	rjmp	.+88     	; 0x1dfa <__vector_10+0xfe>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1da2:	80 91 e2 00 	lds	r24, 0x00E2
    1da6:	84 ff       	sbrs	r24, 4
    1da8:	28 c0       	rjmp	.+80     	; 0x1dfa <__vector_10+0xfe>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1daa:	8c e0       	ldi	r24, 0x0C	; 12
    1dac:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1dae:	8e e0       	ldi	r24, 0x0E	; 14
    1db0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1db2:	09 b4       	in	r0, 0x29	; 41
    1db4:	00 fe       	sbrs	r0, 0
    1db6:	fd cf       	rjmp	.-6      	; 0x1db2 <__vector_10+0xb6>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1db8:	80 91 d8 00 	lds	r24, 0x00D8
    1dbc:	8f 7d       	andi	r24, 0xDF	; 223
    1dbe:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1dc2:	80 91 e1 00 	lds	r24, 0x00E1
    1dc6:	8f 7e       	andi	r24, 0xEF	; 239
    1dc8:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1dcc:	80 91 e2 00 	lds	r24, 0x00E2
    1dd0:	8f 7e       	andi	r24, 0xEF	; 239
    1dd2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1dd6:	80 91 e2 00 	lds	r24, 0x00E2
    1dda:	81 60       	ori	r24, 0x01	; 1
    1ddc:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1de0:	80 91 e0 02 	lds	r24, 0x02E0
    1de4:	88 23       	and	r24, r24
    1de6:	21 f4       	brne	.+8      	; 0x1df0 <__vector_10+0xf4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1de8:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1dec:	87 ff       	sbrs	r24, 7
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <__vector_10+0xf8>
    1df0:	84 e0       	ldi	r24, 0x04	; 4
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <__vector_10+0xfa>
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1df8:	91 d1       	rcall	.+802    	; 0x211c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1dfa:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1dfe:	83 ff       	sbrs	r24, 3
    1e00:	21 c0       	rjmp	.+66     	; 0x1e44 <__vector_10+0x148>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1e02:	80 91 e2 00 	lds	r24, 0x00E2
    1e06:	83 ff       	sbrs	r24, 3
    1e08:	1d c0       	rjmp	.+58     	; 0x1e44 <__vector_10+0x148>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1e0a:	80 91 e1 00 	lds	r24, 0x00E1
    1e0e:	87 7f       	andi	r24, 0xF7	; 247
    1e10:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1e14:	82 e0       	ldi	r24, 0x02	; 2
    1e16:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    1e18:	10 92 e0 02 	sts	0x02E0, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1e1c:	80 91 e1 00 	lds	r24, 0x00E1
    1e20:	8e 7f       	andi	r24, 0xFE	; 254
    1e22:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1e26:	80 91 e2 00 	lds	r24, 0x00E2
    1e2a:	8e 7f       	andi	r24, 0xFE	; 254
    1e2c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1e30:	80 91 e2 00 	lds	r24, 0x00E2
    1e34:	80 61       	ori	r24, 0x10	; 16
    1e36:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	42 e1       	ldi	r20, 0x12	; 18
    1e40:	58 de       	rcall	.-848    	; 0x1af2 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1e42:	6c d1       	rcall	.+728    	; 0x211c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1e44:	ff 91       	pop	r31
    1e46:	ef 91       	pop	r30
    1e48:	bf 91       	pop	r27
    1e4a:	af 91       	pop	r26
    1e4c:	9f 91       	pop	r25
    1e4e:	8f 91       	pop	r24
    1e50:	7f 91       	pop	r23
    1e52:	6f 91       	pop	r22
    1e54:	5f 91       	pop	r21
    1e56:	4f 91       	pop	r20
    1e58:	3f 91       	pop	r19
    1e5a:	2f 91       	pop	r18
    1e5c:	0f 90       	pop	r0
    1e5e:	0b be       	out	0x3b, r0	; 59
    1e60:	0f 90       	pop	r0
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	0f 90       	pop	r0
    1e66:	1f 90       	pop	r1
    1e68:	18 95       	reti

00001e6a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1e6a:	1f 93       	push	r17
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	ad 97       	sbiw	r28, 0x2d	; 45
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1e80:	e2 ee       	ldi	r30, 0xE2	; 226
    1e82:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1e84:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1e88:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1e8a:	22 e0       	ldi	r18, 0x02	; 2
    1e8c:	ea 3e       	cpi	r30, 0xEA	; 234
    1e8e:	f2 07       	cpc	r31, r18
    1e90:	c9 f7       	brne	.-14     	; 0x1e84 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1e92:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e96:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1e9a:	83 ff       	sbrs	r24, 3
    1e9c:	27 c1       	rjmp	.+590    	; 0x20ec <USB_Device_ProcessControlRequest+0x282>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1e9e:	80 91 e2 02 	lds	r24, 0x02E2

		switch (USB_ControlRequest.bRequest)
    1ea2:	90 91 e3 02 	lds	r25, 0x02E3
    1ea6:	95 30       	cpi	r25, 0x05	; 5
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <USB_Device_ProcessControlRequest+0x42>
    1eaa:	6c c0       	rjmp	.+216    	; 0x1f84 <USB_Device_ProcessControlRequest+0x11a>
    1eac:	96 30       	cpi	r25, 0x06	; 6
    1eae:	40 f4       	brcc	.+16     	; 0x1ec0 <USB_Device_ProcessControlRequest+0x56>
    1eb0:	91 30       	cpi	r25, 0x01	; 1
    1eb2:	69 f1       	breq	.+90     	; 0x1f0e <USB_Device_ProcessControlRequest+0xa4>
    1eb4:	91 30       	cpi	r25, 0x01	; 1
    1eb6:	70 f0       	brcs	.+28     	; 0x1ed4 <USB_Device_ProcessControlRequest+0x6a>
    1eb8:	93 30       	cpi	r25, 0x03	; 3
    1eba:	09 f0       	breq	.+2      	; 0x1ebe <USB_Device_ProcessControlRequest+0x54>
    1ebc:	17 c1       	rjmp	.+558    	; 0x20ec <USB_Device_ProcessControlRequest+0x282>
    1ebe:	27 c0       	rjmp	.+78     	; 0x1f0e <USB_Device_ProcessControlRequest+0xa4>
    1ec0:	98 30       	cpi	r25, 0x08	; 8
    1ec2:	09 f4       	brne	.+2      	; 0x1ec6 <USB_Device_ProcessControlRequest+0x5c>
    1ec4:	e5 c0       	rjmp	.+458    	; 0x2090 <USB_Device_ProcessControlRequest+0x226>
    1ec6:	99 30       	cpi	r25, 0x09	; 9
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <USB_Device_ProcessControlRequest+0x62>
    1eca:	f4 c0       	rjmp	.+488    	; 0x20b4 <USB_Device_ProcessControlRequest+0x24a>
    1ecc:	96 30       	cpi	r25, 0x06	; 6
    1ece:	09 f0       	breq	.+2      	; 0x1ed2 <USB_Device_ProcessControlRequest+0x68>
    1ed0:	0d c1       	rjmp	.+538    	; 0x20ec <USB_Device_ProcessControlRequest+0x282>
    1ed2:	7a c0       	rjmp	.+244    	; 0x1fc8 <USB_Device_ProcessControlRequest+0x15e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ed4:	80 38       	cpi	r24, 0x80	; 128
    1ed6:	81 f0       	breq	.+32     	; 0x1ef8 <USB_Device_ProcessControlRequest+0x8e>
    1ed8:	82 38       	cpi	r24, 0x82	; 130
    1eda:	09 f0       	breq	.+2      	; 0x1ede <USB_Device_ProcessControlRequest+0x74>
    1edc:	07 c1       	rjmp	.+526    	; 0x20ec <USB_Device_ProcessControlRequest+0x282>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ede:	80 91 e6 02 	lds	r24, 0x02E6
    1ee2:	8f 70       	andi	r24, 0x0F	; 15
    1ee4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1ee8:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	95 ff       	sbrs	r25, 5
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ef2:	10 92 e9 00 	sts	0x00E9, r1
    1ef6:	01 c0       	rjmp	.+2      	; 0x1efa <USB_Device_ProcessControlRequest+0x90>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1efa:	90 91 e8 00 	lds	r25, 0x00E8
    1efe:	97 7f       	andi	r25, 0xF7	; 247
    1f00:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1f04:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1f08:	10 92 f1 00 	sts	0x00F1, r1
    1f0c:	cc c0       	rjmp	.+408    	; 0x20a6 <USB_Device_ProcessControlRequest+0x23c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f0e:	88 23       	and	r24, r24
    1f10:	19 f0       	breq	.+6      	; 0x1f18 <USB_Device_ProcessControlRequest+0xae>
    1f12:	82 30       	cpi	r24, 0x02	; 2
    1f14:	09 f0       	breq	.+2      	; 0x1f18 <USB_Device_ProcessControlRequest+0xae>
    1f16:	ea c0       	rjmp	.+468    	; 0x20ec <USB_Device_ProcessControlRequest+0x282>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1f18:	8f 71       	andi	r24, 0x1F	; 31
    1f1a:	82 30       	cpi	r24, 0x02	; 2
    1f1c:	09 f0       	breq	.+2      	; 0x1f20 <USB_Device_ProcessControlRequest+0xb6>
    1f1e:	e6 c0       	rjmp	.+460    	; 0x20ec <USB_Device_ProcessControlRequest+0x282>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1f20:	80 91 e4 02 	lds	r24, 0x02E4
    1f24:	88 23       	and	r24, r24
    1f26:	41 f5       	brne	.+80     	; 0x1f78 <USB_Device_ProcessControlRequest+0x10e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1f28:	20 91 e6 02 	lds	r18, 0x02E6
    1f2c:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1f2e:	09 f4       	brne	.+2      	; 0x1f32 <USB_Device_ProcessControlRequest+0xc8>
    1f30:	dd c0       	rjmp	.+442    	; 0x20ec <USB_Device_ProcessControlRequest+0x282>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f32:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1f36:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1f3a:	80 ff       	sbrs	r24, 0
    1f3c:	1d c0       	rjmp	.+58     	; 0x1f78 <USB_Device_ProcessControlRequest+0x10e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1f3e:	80 91 e3 02 	lds	r24, 0x02E3
    1f42:	83 30       	cpi	r24, 0x03	; 3
    1f44:	21 f4       	brne	.+8      	; 0x1f4e <USB_Device_ProcessControlRequest+0xe4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f46:	80 91 eb 00 	lds	r24, 0x00EB
    1f4a:	80 62       	ori	r24, 0x20	; 32
    1f4c:	13 c0       	rjmp	.+38     	; 0x1f74 <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1f4e:	80 91 eb 00 	lds	r24, 0x00EB
    1f52:	80 61       	ori	r24, 0x10	; 16
    1f54:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <USB_Device_ProcessControlRequest+0xf8>
    1f5e:	88 0f       	add	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	2a 95       	dec	r18
    1f64:	e2 f7       	brpl	.-8      	; 0x1f5e <USB_Device_ProcessControlRequest+0xf4>
    1f66:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1f6a:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1f6e:	80 91 eb 00 	lds	r24, 0x00EB
    1f72:	88 60       	ori	r24, 0x08	; 8
    1f74:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f78:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f7c:	80 91 e8 00 	lds	r24, 0x00E8
    1f80:	87 7f       	andi	r24, 0xF7	; 247
    1f82:	94 c0       	rjmp	.+296    	; 0x20ac <USB_Device_ProcessControlRequest+0x242>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f84:	88 23       	and	r24, r24
    1f86:	09 f0       	breq	.+2      	; 0x1f8a <USB_Device_ProcessControlRequest+0x120>
    1f88:	b1 c0       	rjmp	.+354    	; 0x20ec <USB_Device_ProcessControlRequest+0x282>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1f8a:	10 91 e4 02 	lds	r17, 0x02E4
    1f8e:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1f90:	80 91 e3 00 	lds	r24, 0x00E3
    1f94:	80 78       	andi	r24, 0x80	; 128
    1f96:	81 2b       	or	r24, r17
    1f98:	80 93 e3 00 	sts	0x00E3, r24
    1f9c:	80 91 e8 00 	lds	r24, 0x00E8
    1fa0:	87 7f       	andi	r24, 0xF7	; 247
    1fa2:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1fa6:	fd dd       	rcall	.-1030   	; 0x1ba2 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1fa8:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1fac:	80 ff       	sbrs	r24, 0
    1fae:	fc cf       	rjmp	.-8      	; 0x1fa8 <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    1fb0:	80 91 e3 00 	lds	r24, 0x00E3
    1fb4:	80 68       	ori	r24, 0x80	; 128
    1fb6:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1fba:	11 23       	and	r17, r17
    1fbc:	11 f0       	breq	.+4      	; 0x1fc2 <USB_Device_ProcessControlRequest+0x158>
    1fbe:	83 e0       	ldi	r24, 0x03	; 3
    1fc0:	01 c0       	rjmp	.+2      	; 0x1fc4 <USB_Device_ProcessControlRequest+0x15a>
    1fc2:	82 e0       	ldi	r24, 0x02	; 2
    1fc4:	8e bb       	out	0x1e, r24	; 30
    1fc6:	92 c0       	rjmp	.+292    	; 0x20ec <USB_Device_ProcessControlRequest+0x282>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1fc8:	80 58       	subi	r24, 0x80	; 128
    1fca:	82 30       	cpi	r24, 0x02	; 2
    1fcc:	08 f0       	brcs	.+2      	; 0x1fd0 <USB_Device_ProcessControlRequest+0x166>
    1fce:	8e c0       	rjmp	.+284    	; 0x20ec <USB_Device_ProcessControlRequest+0x282>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1fd0:	80 91 e4 02 	lds	r24, 0x02E4
    1fd4:	90 91 e5 02 	lds	r25, 0x02E5
    1fd8:	23 e0       	ldi	r18, 0x03	; 3
    1fda:	8c 3d       	cpi	r24, 0xDC	; 220
    1fdc:	92 07       	cpc	r25, r18
    1fde:	89 f5       	brne	.+98     	; 0x2042 <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1fe0:	83 e0       	ldi	r24, 0x03	; 3
    1fe2:	8d 83       	std	Y+5, r24	; 0x05
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1fe4:	8a e2       	ldi	r24, 0x2A	; 42
    1fe6:	8c 83       	std	Y+4, r24	; 0x04
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1fe8:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1fea:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1fec:	de 01       	movw	r26, r28
    1fee:	16 96       	adiw	r26, 0x06	; 6
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1ff4:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1ff6:	61 e2       	ldi	r22, 0x21	; 33
    1ff8:	e4 2f       	mov	r30, r20
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	60 93 57 00 	sts	0x0057, r22
    2000:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
    2002:	80 ff       	sbrs	r24, 0
    2004:	03 c0       	rjmp	.+6      	; 0x200c <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
    2006:	e2 95       	swap	r30
    2008:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    200a:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    200c:	ef 70       	andi	r30, 0x0F	; 15
    200e:	2e 2f       	mov	r18, r30
    2010:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2012:	ea 30       	cpi	r30, 0x0A	; 10
    2014:	18 f0       	brcs	.+6      	; 0x201c <USB_Device_ProcessControlRequest+0x1b2>
    2016:	29 5c       	subi	r18, 0xC9	; 201
    2018:	3f 4f       	sbci	r19, 0xFF	; 255
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <USB_Device_ProcessControlRequest+0x1b6>
    201c:	20 5d       	subi	r18, 0xD0	; 208
    201e:	3f 4f       	sbci	r19, 0xFF	; 255
    2020:	2d 93       	st	X+, r18
    2022:	3d 93       	st	X+, r19
    2024:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2026:	84 31       	cpi	r24, 0x14	; 20
    2028:	91 05       	cpc	r25, r1
    202a:	31 f7       	brne	.-52     	; 0x1ff8 <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    202c:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    202e:	80 91 e8 00 	lds	r24, 0x00E8
    2032:	87 7f       	andi	r24, 0xF7	; 247
    2034:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2038:	ce 01       	movw	r24, r28
    203a:	04 96       	adiw	r24, 0x04	; 4
    203c:	6a e2       	ldi	r22, 0x2A	; 42
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	20 c0       	rjmp	.+64     	; 0x2082 <USB_Device_ProcessControlRequest+0x218>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2042:	60 91 e6 02 	lds	r22, 0x02E6
    2046:	ae 01       	movw	r20, r28
    2048:	4e 5f       	subi	r20, 0xFE	; 254
    204a:	5f 4f       	sbci	r21, 0xFF	; 255
    204c:	9e 01       	movw	r18, r28
    204e:	2f 5f       	subi	r18, 0xFF	; 255
    2050:	3f 4f       	sbci	r19, 0xFF	; 255
    2052:	0e 94 03 02 	call	0x406	; 0x406 <CALLBACK_USB_GetDescriptor>
    2056:	bc 01       	movw	r22, r24
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	09 f4       	brne	.+2      	; 0x205e <USB_Device_ProcessControlRequest+0x1f4>
    205c:	47 c0       	rjmp	.+142    	; 0x20ec <USB_Device_ProcessControlRequest+0x282>
    205e:	80 91 e8 00 	lds	r24, 0x00E8
    2062:	87 7f       	andi	r24, 0xF7	; 247
    2064:	80 93 e8 00 	sts	0x00E8, r24
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
	#else
	if (DescriptorAddressSpace == MEMSPACE_FLASH)
    2068:	29 81       	ldd	r18, Y+1	; 0x01
    206a:	22 23       	and	r18, r18
    206c:	21 f4       	brne	.+8      	; 0x2076 <USB_Device_ProcessControlRequest+0x20c>
	  Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	9b 81       	ldd	r25, Y+3	; 0x03
    2072:	7b dc       	rcall	.-1802   	; 0x196a <Endpoint_Write_Control_PStream_LE>
    2074:	07 c0       	rjmp	.+14     	; 0x2084 <USB_Device_ProcessControlRequest+0x21a>
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	9b 81       	ldd	r25, Y+3	; 0x03
	else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
    207a:	21 30       	cpi	r18, 0x01	; 1
    207c:	11 f4       	brne	.+4      	; 0x2082 <USB_Device_ProcessControlRequest+0x218>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
    207e:	d1 dc       	rcall	.-1630   	; 0x1a22 <Endpoint_Write_Control_EStream_LE>
    2080:	01 c0       	rjmp	.+2      	; 0x2084 <USB_Device_ProcessControlRequest+0x21a>
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    2082:	18 dc       	rcall	.-2000   	; 0x18b4 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2084:	80 91 e8 00 	lds	r24, 0x00E8
    2088:	8b 77       	andi	r24, 0x7B	; 123
    208a:	80 93 e8 00 	sts	0x00E8, r24
    208e:	2e c0       	rjmp	.+92     	; 0x20ec <USB_Device_ProcessControlRequest+0x282>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2090:	80 38       	cpi	r24, 0x80	; 128
    2092:	61 f5       	brne	.+88     	; 0x20ec <USB_Device_ProcessControlRequest+0x282>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2094:	80 91 e8 00 	lds	r24, 0x00E8
    2098:	87 7f       	andi	r24, 0xF7	; 247
    209a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    209e:	80 91 e0 02 	lds	r24, 0x02E0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    20a2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20a6:	80 91 e8 00 	lds	r24, 0x00E8
    20aa:	8e 77       	andi	r24, 0x7E	; 126
    20ac:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    20b0:	78 dd       	rcall	.-1296   	; 0x1ba2 <Endpoint_ClearStatusStage>
    20b2:	1c c0       	rjmp	.+56     	; 0x20ec <USB_Device_ProcessControlRequest+0x282>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    20b4:	88 23       	and	r24, r24
    20b6:	d1 f4       	brne	.+52     	; 0x20ec <USB_Device_ProcessControlRequest+0x282>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    20b8:	90 91 e4 02 	lds	r25, 0x02E4
    20bc:	92 30       	cpi	r25, 0x02	; 2
    20be:	b0 f4       	brcc	.+44     	; 0x20ec <USB_Device_ProcessControlRequest+0x282>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20c0:	80 91 e8 00 	lds	r24, 0x00E8
    20c4:	87 7f       	andi	r24, 0xF7	; 247
    20c6:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    20ca:	90 93 e0 02 	sts	0x02E0, r25

	Endpoint_ClearStatusStage();
    20ce:	69 dd       	rcall	.-1326   	; 0x1ba2 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    20d0:	80 91 e0 02 	lds	r24, 0x02E0
    20d4:	88 23       	and	r24, r24
    20d6:	21 f4       	brne	.+8      	; 0x20e0 <USB_Device_ProcessControlRequest+0x276>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    20d8:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    20dc:	87 ff       	sbrs	r24, 7
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <USB_Device_ProcessControlRequest+0x27a>
    20e0:	84 e0       	ldi	r24, 0x04	; 4
    20e2:	01 c0       	rjmp	.+2      	; 0x20e6 <USB_Device_ProcessControlRequest+0x27c>
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    20e8:	0e 94 b7 01 	call	0x36e	; 0x36e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20ec:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    20f0:	83 ff       	sbrs	r24, 3
    20f2:	0a c0       	rjmp	.+20     	; 0x2108 <__stack+0x9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20f4:	80 91 e8 00 	lds	r24, 0x00E8
    20f8:	87 7f       	andi	r24, 0xF7	; 247
    20fa:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    20fe:	80 91 eb 00 	lds	r24, 0x00EB
    2102:	80 62       	ori	r24, 0x20	; 32
    2104:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2108:	ad 96       	adiw	r28, 0x2d	; 45
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	1f 91       	pop	r17
    211a:	08 95       	ret

0000211c <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    211c:	08 95       	ret

0000211e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    211e:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2120:	8e b3       	in	r24, 0x1e	; 30
    2122:	88 23       	and	r24, r24
    2124:	a9 f0       	breq	.+42     	; 0x2150 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2126:	80 91 e9 00 	lds	r24, 0x00E9
    212a:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    212c:	90 91 ec 00 	lds	r25, 0x00EC
    2130:	90 ff       	sbrs	r25, 0
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <USB_USBTask+0x1a>
    2134:	10 e8       	ldi	r17, 0x80	; 128
    2136:	01 c0       	rjmp	.+2      	; 0x213a <USB_USBTask+0x1c>
    2138:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    213a:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    213c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2140:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2144:	83 ff       	sbrs	r24, 3
    2146:	01 c0       	rjmp	.+2      	; 0x214a <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
    2148:	90 de       	rcall	.-736    	; 0x1e6a <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    214a:	1f 70       	andi	r17, 0x0F	; 15
    214c:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    2150:	1f 91       	pop	r17
    2152:	08 95       	ret

00002154 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    215a:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    215e:	83 ff       	sbrs	r24, 3
    2160:	a3 c0       	rjmp	.+326    	; 0x22a8 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    2162:	88 81       	ld	r24, Y
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	20 91 e6 02 	lds	r18, 0x02E6
    216a:	30 91 e7 02 	lds	r19, 0x02E7
    216e:	28 17       	cp	r18, r24
    2170:	39 07       	cpc	r19, r25
    2172:	09 f0       	breq	.+2      	; 0x2176 <CDC_Device_ProcessControlRequest+0x22>
    2174:	99 c0       	rjmp	.+306    	; 0x22a8 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	switch (USB_ControlRequest.bRequest)
    2176:	80 91 e3 02 	lds	r24, 0x02E3
    217a:	81 32       	cpi	r24, 0x21	; 33
    217c:	69 f0       	breq	.+26     	; 0x2198 <CDC_Device_ProcessControlRequest+0x44>
    217e:	82 32       	cpi	r24, 0x22	; 34
    2180:	20 f4       	brcc	.+8      	; 0x218a <CDC_Device_ProcessControlRequest+0x36>
    2182:	80 32       	cpi	r24, 0x20	; 32
    2184:	09 f0       	breq	.+2      	; 0x2188 <CDC_Device_ProcessControlRequest+0x34>
    2186:	90 c0       	rjmp	.+288    	; 0x22a8 <CDC_Device_ProcessControlRequest+0x154>
    2188:	3c c0       	rjmp	.+120    	; 0x2202 <CDC_Device_ProcessControlRequest+0xae>
    218a:	82 32       	cpi	r24, 0x22	; 34
    218c:	09 f4       	brne	.+2      	; 0x2190 <CDC_Device_ProcessControlRequest+0x3c>
    218e:	6b c0       	rjmp	.+214    	; 0x2266 <CDC_Device_ProcessControlRequest+0x112>
    2190:	83 32       	cpi	r24, 0x23	; 35
    2192:	09 f0       	breq	.+2      	; 0x2196 <CDC_Device_ProcessControlRequest+0x42>
    2194:	89 c0       	rjmp	.+274    	; 0x22a8 <CDC_Device_ProcessControlRequest+0x154>
    2196:	7a c0       	rjmp	.+244    	; 0x228c <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2198:	80 91 e2 02 	lds	r24, 0x02E2
    219c:	81 3a       	cpi	r24, 0xA1	; 161
    219e:	09 f0       	breq	.+2      	; 0x21a2 <CDC_Device_ProcessControlRequest+0x4e>
    21a0:	83 c0       	rjmp	.+262    	; 0x22a8 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21a2:	80 91 e8 00 	lds	r24, 0x00E8
    21a6:	87 7f       	andi	r24, 0xF7	; 247
    21a8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    21ac:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    21b0:	80 ff       	sbrs	r24, 0
    21b2:	fc cf       	rjmp	.-8      	; 0x21ac <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    21b4:	8c 89       	ldd	r24, Y+20	; 0x14
    21b6:	9d 89       	ldd	r25, Y+21	; 0x15
    21b8:	ae 89       	ldd	r26, Y+22	; 0x16
    21ba:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    21bc:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    21c0:	29 2f       	mov	r18, r25
    21c2:	3a 2f       	mov	r19, r26
    21c4:	4b 2f       	mov	r20, r27
    21c6:	55 27       	eor	r21, r21
    21c8:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
    21cc:	9d 01       	movw	r18, r26
    21ce:	44 27       	eor	r20, r20
    21d0:	55 27       	eor	r21, r21
    21d2:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
    21d6:	8b 2f       	mov	r24, r27
    21d8:	99 27       	eor	r25, r25
    21da:	aa 27       	eor	r26, r26
    21dc:	bb 27       	eor	r27, r27
    21de:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    21e2:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    21e4:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    21e8:	89 8d       	ldd	r24, Y+25	; 0x19
    21ea:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    21ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21f0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    21f4:	80 91 e8 00 	lds	r24, 0x00E8
    21f8:	8e 77       	andi	r24, 0x7E	; 126
    21fa:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    21fe:	d1 dc       	rcall	.-1630   	; 0x1ba2 <Endpoint_ClearStatusStage>
    2200:	53 c0       	rjmp	.+166    	; 0x22a8 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2202:	80 91 e2 02 	lds	r24, 0x02E2
    2206:	81 32       	cpi	r24, 0x21	; 33
    2208:	09 f0       	breq	.+2      	; 0x220c <CDC_Device_ProcessControlRequest+0xb8>
    220a:	4e c0       	rjmp	.+156    	; 0x22a8 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    220c:	80 91 e8 00 	lds	r24, 0x00E8
    2210:	87 7f       	andi	r24, 0xF7	; 247
    2212:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    2216:	04 c0       	rjmp	.+8      	; 0x2220 <CDC_Device_ProcessControlRequest+0xcc>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    2218:	8e b3       	in	r24, 0x1e	; 30
    221a:	88 23       	and	r24, r24
    221c:	09 f4       	brne	.+2      	; 0x2220 <CDC_Device_ProcessControlRequest+0xcc>
    221e:	44 c0       	rjmp	.+136    	; 0x22a8 <CDC_Device_ProcessControlRequest+0x154>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2220:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    2224:	82 ff       	sbrs	r24, 2
    2226:	f8 cf       	rjmp	.-16     	; 0x2218 <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    2228:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
    222c:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
    2230:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
    2234:	80 91 f1 00 	lds	r24, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    2238:	3c 8b       	std	Y+20, r19	; 0x14
    223a:	2d 8b       	std	Y+21, r18	; 0x15
    223c:	9e 8b       	std	Y+22, r25	; 0x16
    223e:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2240:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    2244:	88 8f       	std	Y+24, r24	; 0x18
    2246:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    224a:	89 8f       	std	Y+25, r24	; 0x19
    224c:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    2250:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2252:	80 91 e8 00 	lds	r24, 0x00E8
    2256:	8b 77       	andi	r24, 0x7B	; 123
    2258:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    225c:	a2 dc       	rcall	.-1724   	; 0x1ba2 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    225e:	ce 01       	movw	r24, r28
    2260:	0e 94 ed 01 	call	0x3da	; 0x3da <EVENT_CDC_Device_LineEncodingChanged>
    2264:	21 c0       	rjmp	.+66     	; 0x22a8 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2266:	80 91 e2 02 	lds	r24, 0x02E2
    226a:	81 32       	cpi	r24, 0x21	; 33
    226c:	e9 f4       	brne	.+58     	; 0x22a8 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    226e:	80 91 e8 00 	lds	r24, 0x00E8
    2272:	87 7f       	andi	r24, 0xF7	; 247
    2274:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2278:	94 dc       	rcall	.-1752   	; 0x1ba2 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    227a:	80 91 e4 02 	lds	r24, 0x02E4
    227e:	90 91 e5 02 	lds	r25, 0x02E5
    2282:	99 8b       	std	Y+17, r25	; 0x11
    2284:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    2286:	ce 01       	movw	r24, r28
    2288:	da d0       	rcall	.+436    	; 0x243e <CDC_Device_Event_Stub>
    228a:	0e c0       	rjmp	.+28     	; 0x22a8 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    228c:	80 91 e2 02 	lds	r24, 0x02E2
    2290:	81 32       	cpi	r24, 0x21	; 33
    2292:	51 f4       	brne	.+20     	; 0x22a8 <CDC_Device_ProcessControlRequest+0x154>
    2294:	80 91 e8 00 	lds	r24, 0x00E8
    2298:	87 7f       	andi	r24, 0xF7	; 247
    229a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    229e:	81 dc       	rcall	.-1790   	; 0x1ba2 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    22a0:	ce 01       	movw	r24, r28
    22a2:	60 91 e4 02 	lds	r22, 0x02E4
    22a6:	cb d0       	rcall	.+406    	; 0x243e <CDC_Device_Event_Stub>
			}

			break;
	}
}
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	08 95       	ret

000022ae <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    22b2:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    22b4:	40 96       	adiw	r24, 0x10	; 16
    22b6:	fc 01       	movw	r30, r24
    22b8:	8b e0       	ldi	r24, 0x0B	; 11
    22ba:	df 01       	movw	r26, r30
    22bc:	1d 92       	st	X+, r1
    22be:	8a 95       	dec	r24
    22c0:	e9 f7       	brne	.-6      	; 0x22bc <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    22c2:	82 e0       	ldi	r24, 0x02	; 2
    22c4:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    22c6:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    22c8:	83 e0       	ldi	r24, 0x03	; 3
    22ca:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    22cc:	ce 01       	movw	r24, r28
    22ce:	01 96       	adiw	r24, 0x01	; 1
    22d0:	61 e0       	ldi	r22, 0x01	; 1
    22d2:	23 dc       	rcall	.-1978   	; 0x1b1a <Endpoint_ConfigureEndpointTable>
    22d4:	88 23       	and	r24, r24
    22d6:	59 f0       	breq	.+22     	; 0x22ee <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    22d8:	ce 01       	movw	r24, r28
    22da:	06 96       	adiw	r24, 0x06	; 6
    22dc:	61 e0       	ldi	r22, 0x01	; 1
    22de:	1d dc       	rcall	.-1990   	; 0x1b1a <Endpoint_ConfigureEndpointTable>
    22e0:	88 23       	and	r24, r24
    22e2:	29 f0       	breq	.+10     	; 0x22ee <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    22e4:	ce 01       	movw	r24, r28
    22e6:	0b 96       	adiw	r24, 0x0b	; 11
    22e8:	61 e0       	ldi	r22, 0x01	; 1
    22ea:	17 dc       	rcall	.-2002   	; 0x1b1a <Endpoint_ConfigureEndpointTable>
    22ec:	01 c0       	rjmp	.+2      	; 0x22f0 <CDC_Device_ConfigureEndpoints+0x42>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
    22ee:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	08 95       	ret

000022f6 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	0f 92       	push	r0
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2302:	8e b3       	in	r24, 0x1e	; 30
    2304:	84 30       	cpi	r24, 0x04	; 4
    2306:	f9 f4       	brne	.+62     	; 0x2346 <CDC_Device_SendByte+0x50>
    2308:	24 89       	ldd	r18, Z+20	; 0x14
    230a:	35 89       	ldd	r19, Z+21	; 0x15
    230c:	46 89       	ldd	r20, Z+22	; 0x16
    230e:	57 89       	ldd	r21, Z+23	; 0x17
    2310:	21 15       	cp	r18, r1
    2312:	31 05       	cpc	r19, r1
    2314:	41 05       	cpc	r20, r1
    2316:	51 05       	cpc	r21, r1
    2318:	b1 f0       	breq	.+44     	; 0x2346 <CDC_Device_SendByte+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    231a:	81 81       	ldd	r24, Z+1	; 0x01
    231c:	8f 70       	andi	r24, 0x0F	; 15
    231e:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2322:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    2326:	85 fd       	sbrc	r24, 5
    2328:	0a c0       	rjmp	.+20     	; 0x233e <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    232a:	80 91 e8 00 	lds	r24, 0x00E8
    232e:	8e 77       	andi	r24, 0x7E	; 126
    2330:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    2334:	69 83       	std	Y+1, r22	; 0x01
    2336:	54 dc       	rcall	.-1880   	; 0x1be0 <Endpoint_WaitUntilReady>
    2338:	69 81       	ldd	r22, Y+1	; 0x01
    233a:	88 23       	and	r24, r24
    233c:	29 f4       	brne	.+10     	; 0x2348 <CDC_Device_SendByte+0x52>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    233e:	60 93 f1 00 	sts	0x00F1, r22
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	01 c0       	rjmp	.+2      	; 0x2348 <CDC_Device_SendByte+0x52>

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    2346:	82 e0       	ldi	r24, 0x02	; 2
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    2348:	0f 90       	pop	r0
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2350:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    2352:	8e b3       	in	r24, 0x1e	; 30
    2354:	84 30       	cpi	r24, 0x04	; 4
    2356:	29 f5       	brne	.+74     	; 0x23a2 <CDC_Device_Flush+0x52>
    2358:	24 89       	ldd	r18, Z+20	; 0x14
    235a:	35 89       	ldd	r19, Z+21	; 0x15
    235c:	46 89       	ldd	r20, Z+22	; 0x16
    235e:	57 89       	ldd	r21, Z+23	; 0x17
    2360:	21 15       	cp	r18, r1
    2362:	31 05       	cpc	r19, r1
    2364:	41 05       	cpc	r20, r1
    2366:	51 05       	cpc	r21, r1
    2368:	e1 f0       	breq	.+56     	; 0x23a2 <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    236a:	81 81       	ldd	r24, Z+1	; 0x01
    236c:	8f 70       	andi	r24, 0x0F	; 15
    236e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    2372:	80 91 f2 00 	lds	r24, 0x00F2
    2376:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    237a:	00 97       	sbiw	r24, 0x00	; 0
    237c:	a1 f0       	breq	.+40     	; 0x23a6 <CDC_Device_Flush+0x56>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    237e:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2382:	80 91 e8 00 	lds	r24, 0x00E8
    2386:	8e 77       	andi	r24, 0x7E	; 126
    2388:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    238c:	95 fd       	sbrc	r25, 5
    238e:	0d c0       	rjmp	.+26     	; 0x23aa <CDC_Device_Flush+0x5a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    2390:	27 dc       	rcall	.-1970   	; 0x1be0 <Endpoint_WaitUntilReady>
    2392:	88 23       	and	r24, r24
    2394:	59 f4       	brne	.+22     	; 0x23ac <CDC_Device_Flush+0x5c>
    2396:	90 91 e8 00 	lds	r25, 0x00E8
    239a:	9e 77       	andi	r25, 0x7E	; 126
    239c:	90 93 e8 00 	sts	0x00E8, r25
    23a0:	08 95       	ret
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    23a2:	82 e0       	ldi	r24, 0x02	; 2
    23a4:	08 95       	ret
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	08 95       	ret
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
    23aa:	80 e0       	ldi	r24, 0x00	; 0
}
    23ac:	08 95       	ret

000023ae <CDC_Device_USBTask>:
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    23ae:	2e b3       	in	r18, 0x1e	; 30
    23b0:	24 30       	cpi	r18, 0x04	; 4
    23b2:	99 f4       	brne	.+38     	; 0x23da <CDC_Device_USBTask+0x2c>
    23b4:	fc 01       	movw	r30, r24
    23b6:	24 89       	ldd	r18, Z+20	; 0x14
    23b8:	35 89       	ldd	r19, Z+21	; 0x15
    23ba:	46 89       	ldd	r20, Z+22	; 0x16
    23bc:	57 89       	ldd	r21, Z+23	; 0x17
    23be:	21 15       	cp	r18, r1
    23c0:	31 05       	cpc	r19, r1
    23c2:	41 05       	cpc	r20, r1
    23c4:	51 05       	cpc	r21, r1
    23c6:	49 f0       	breq	.+18     	; 0x23da <CDC_Device_USBTask+0x2c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    23c8:	21 81       	ldd	r18, Z+1	; 0x01
    23ca:	2f 70       	andi	r18, 0x0F	; 15
    23cc:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    23d0:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    23d4:	20 ff       	sbrs	r18, 0
    23d6:	01 c0       	rjmp	.+2      	; 0x23da <CDC_Device_USBTask+0x2c>
	  CDC_Device_Flush(CDCInterfaceInfo);
    23d8:	bb cf       	rjmp	.-138    	; 0x2350 <CDC_Device_Flush>
    23da:	08 95       	ret

000023dc <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    23dc:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    23de:	8e b3       	in	r24, 0x1e	; 30
    23e0:	84 30       	cpi	r24, 0x04	; 4
    23e2:	49 f5       	brne	.+82     	; 0x2436 <CDC_Device_ReceiveByte+0x5a>
    23e4:	24 89       	ldd	r18, Z+20	; 0x14
    23e6:	35 89       	ldd	r19, Z+21	; 0x15
    23e8:	46 89       	ldd	r20, Z+22	; 0x16
    23ea:	57 89       	ldd	r21, Z+23	; 0x17
    23ec:	21 15       	cp	r18, r1
    23ee:	31 05       	cpc	r19, r1
    23f0:	41 05       	cpc	r20, r1
    23f2:	51 05       	cpc	r21, r1
    23f4:	01 f1       	breq	.+64     	; 0x2436 <CDC_Device_ReceiveByte+0x5a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    23f6:	86 81       	ldd	r24, Z+6	; 0x06
    23f8:	8f 70       	andi	r24, 0x0F	; 15
    23fa:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    23fe:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    2402:	82 ff       	sbrs	r24, 2
    2404:	18 c0       	rjmp	.+48     	; 0x2436 <CDC_Device_ReceiveByte+0x5a>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    2406:	80 91 f2 00 	lds	r24, 0x00F2
    240a:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	21 f0       	breq	.+8      	; 0x241a <CDC_Device_ReceiveByte+0x3e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2412:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	02 c0       	rjmp	.+4      	; 0x241e <CDC_Device_ReceiveByte+0x42>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    241a:	2f ef       	ldi	r18, 0xFF	; 255
    241c:	3f ef       	ldi	r19, 0xFF	; 255
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    241e:	80 91 f2 00 	lds	r24, 0x00F2
    2422:	90 91 f3 00 	lds	r25, 0x00F3
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	41 f4       	brne	.+16     	; 0x243a <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    242a:	80 91 e8 00 	lds	r24, 0x00E8
    242e:	8b 77       	andi	r24, 0x7B	; 123
    2430:	80 93 e8 00 	sts	0x00E8, r24
    2434:	02 c0       	rjmp	.+4      	; 0x243a <CDC_Device_ReceiveByte+0x5e>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    2436:	2f ef       	ldi	r18, 0xFF	; 255
    2438:	3f ef       	ldi	r19, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    243a:	c9 01       	movw	r24, r18
    243c:	08 95       	ret

0000243e <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    243e:	08 95       	ret

00002440 <__udivmodsi4>:
    2440:	a1 e2       	ldi	r26, 0x21	; 33
    2442:	1a 2e       	mov	r1, r26
    2444:	aa 1b       	sub	r26, r26
    2446:	bb 1b       	sub	r27, r27
    2448:	fd 01       	movw	r30, r26
    244a:	0d c0       	rjmp	.+26     	; 0x2466 <__udivmodsi4_ep>

0000244c <__udivmodsi4_loop>:
    244c:	aa 1f       	adc	r26, r26
    244e:	bb 1f       	adc	r27, r27
    2450:	ee 1f       	adc	r30, r30
    2452:	ff 1f       	adc	r31, r31
    2454:	a2 17       	cp	r26, r18
    2456:	b3 07       	cpc	r27, r19
    2458:	e4 07       	cpc	r30, r20
    245a:	f5 07       	cpc	r31, r21
    245c:	20 f0       	brcs	.+8      	; 0x2466 <__udivmodsi4_ep>
    245e:	a2 1b       	sub	r26, r18
    2460:	b3 0b       	sbc	r27, r19
    2462:	e4 0b       	sbc	r30, r20
    2464:	f5 0b       	sbc	r31, r21

00002466 <__udivmodsi4_ep>:
    2466:	66 1f       	adc	r22, r22
    2468:	77 1f       	adc	r23, r23
    246a:	88 1f       	adc	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	1a 94       	dec	r1
    2470:	69 f7       	brne	.-38     	; 0x244c <__udivmodsi4_loop>
    2472:	60 95       	com	r22
    2474:	70 95       	com	r23
    2476:	80 95       	com	r24
    2478:	90 95       	com	r25
    247a:	9b 01       	movw	r18, r22
    247c:	ac 01       	movw	r20, r24
    247e:	bd 01       	movw	r22, r26
    2480:	cf 01       	movw	r24, r30
    2482:	08 95       	ret

00002484 <__eerd_byte_usb1287>:
    2484:	f9 99       	sbic	0x1f, 1	; 31
    2486:	fe cf       	rjmp	.-4      	; 0x2484 <__eerd_byte_usb1287>
    2488:	92 bd       	out	0x22, r25	; 34
    248a:	81 bd       	out	0x21, r24	; 33
    248c:	f8 9a       	sbi	0x1f, 0	; 31
    248e:	99 27       	eor	r25, r25
    2490:	80 b5       	in	r24, 0x20	; 32
    2492:	08 95       	ret

00002494 <__eeupd_byte_usb1287>:
    2494:	26 2f       	mov	r18, r22

00002496 <__eeupd_r18_usb1287>:
    2496:	f9 99       	sbic	0x1f, 1	; 31
    2498:	fe cf       	rjmp	.-4      	; 0x2496 <__eeupd_r18_usb1287>
    249a:	92 bd       	out	0x22, r25	; 34
    249c:	81 bd       	out	0x21, r24	; 33
    249e:	f8 9a       	sbi	0x1f, 0	; 31
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	00 b4       	in	r0, 0x20	; 32
    24a4:	02 16       	cp	r0, r18
    24a6:	39 f0       	breq	.+14     	; 0x24b6 <__eeupd_r18_usb1287+0x20>
    24a8:	1f ba       	out	0x1f, r1	; 31
    24aa:	20 bd       	out	0x20, r18	; 32
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	fa 9a       	sbi	0x1f, 2	; 31
    24b2:	f9 9a       	sbi	0x1f, 1	; 31
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	08 95       	ret

000024b8 <_exit>:
    24b8:	f8 94       	cli

000024ba <__stop_program>:
    24ba:	ff cf       	rjmp	.-2      	; 0x24ba <__stop_program>
