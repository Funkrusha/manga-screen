
Benito.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  0000104a  000010de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000104a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009d  0080011e  0080011e  000010fc  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000498  00000000  00000000  00001d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000d06  00000000  00000000  0000219b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008714  00000000  00000000  00002ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000208a  00000000  00000000  0000b5b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006d47  00000000  00000000  0000d63f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006f0  00000000  00000000  00014388  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000039dd  00000000  00000000  00014a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000427a  00000000  00000000  00018455  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000010da  00000000  00000000  0001c6cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006f0  00000000  00000000  0001d7a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
       0:	9d c0       	rjmp	.+314    	; 0x13c <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
       4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
       6:	00 00       	nop
       8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
       a:	00 00       	nop
       c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
       e:	00 00       	nop
      10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
      12:	00 00       	nop
      14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
      16:	00 00       	nop
      18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
      22:	00 00       	nop
      24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
      26:	00 00       	nop
      28:	a4 c0       	rjmp	.+328    	; 0x172 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f9 c3       	rjmp	.+2034   	; 0x820 <__vector_11>
      2e:	00 00       	nop
      30:	9a c4       	rjmp	.+2356   	; 0x966 <__vector_12>
      32:	00 00       	nop
      34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
      36:	00 00       	nop
      38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
      3e:	00 00       	nop
      40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
      42:	00 00       	nop
      44:	96 c0       	rjmp	.+300    	; 0x172 <__bad_interrupt>
      46:	00 00       	nop
      48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
      4e:	00 00       	nop
      50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
      52:	00 00       	nop
      54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
      56:	00 00       	nop
      58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c1 c1       	rjmp	.+898    	; 0x3e0 <__vector_23>
      5e:	00 00       	nop
      60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
      62:	00 00       	nop
      64:	86 c0       	rjmp	.+268    	; 0x172 <__bad_interrupt>
      66:	00 00       	nop
      68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
      6e:	00 00       	nop
      70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
      72:	00 00       	nop
      74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
      76:	00 00       	nop
      78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
      7e:	00 00       	nop
      80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
      82:	00 00       	nop
      84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
      86:	00 00       	nop
      88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
      8e:	00 00       	nop
      90:	70 c0       	rjmp	.+224    	; 0x172 <__bad_interrupt>
      92:	00 00       	nop
      94:	6e c0       	rjmp	.+220    	; 0x172 <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 02 00 00 08 eb 03 60 20 01 00 01 02     ..........` ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      ba:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      da:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000e8 <LanguageString>:
      e8:	04 03 09 04                                         ....

000000ec <ManufacturerString>:
      ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <ProductString>:
     106:	34 03 42 00 65 00 6e 00 69 00 74 00 6f 00 20 00     4.B.e.n.i.t.o. .
     116:	41 00 72 00 64 00 75 00 69 00 6e 00 6f 00 20 00     A.r.d.u.i.n.o. .
     126:	50 00 72 00 6f 00 67 00 72 00 61 00 6d 00 6d 00     P.r.o.g.r.a.m.m.
     136:	65 00 72 00 00 00                                   e.r...

0000013c <__ctors_end>:
     13c:	11 24       	eor	r1, r1
     13e:	1f be       	out	0x3f, r1	; 63
     140:	cf ef       	ldi	r28, 0xFF	; 255
     142:	d4 e0       	ldi	r29, 0x04	; 4
     144:	de bf       	out	0x3e, r29	; 62
     146:	cd bf       	out	0x3d, r28	; 61

00000148 <__do_copy_data>:
     148:	11 e0       	ldi	r17, 0x01	; 1
     14a:	a0 e0       	ldi	r26, 0x00	; 0
     14c:	b1 e0       	ldi	r27, 0x01	; 1
     14e:	ea e4       	ldi	r30, 0x4A	; 74
     150:	f0 e1       	ldi	r31, 0x10	; 16
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x10>
     154:	05 90       	lpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	ae 31       	cpi	r26, 0x1E	; 30
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0xc>

0000015e <__do_clear_bss>:
     15e:	11 e0       	ldi	r17, 0x01	; 1
     160:	ae e1       	ldi	r26, 0x1E	; 30
     162:	b1 e0       	ldi	r27, 0x01	; 1
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	ab 3b       	cpi	r26, 0xBB	; 187
     16a:	b1 07       	cpc	r27, r17
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	23 d0       	rcall	.+70     	; 0x1b6 <main>
     170:	6a c7       	rjmp	.+3796   	; 0x1046 <_exit>

00000172 <__bad_interrupt>:
     172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <LEDs_SetAllLEDs>:
				PORTC |= LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTC = ((PORTC | LEDS_ALL_LEDS) & ~LEDMask);
     174:	98 b1       	in	r25, 0x08	; 8
     176:	80 95       	com	r24
     178:	90 6c       	ori	r25, 0xC0	; 192
     17a:	89 23       	and	r24, r25
     17c:	88 b9       	out	0x08, r24	; 8
			}
     17e:	08 95       	ret

00000180 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     180:	84 b7       	in	r24, 0x34	; 52
     182:	87 7f       	andi	r24, 0xF7	; 247
     184:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     186:	88 e1       	ldi	r24, 0x18	; 24
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	f8 94       	cli
     18c:	80 93 60 00 	sts	0x0060, r24
     190:	10 92 60 00 	sts	0x0060, r1
     194:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRC  |= LEDS_ALL_LEDS;
     196:	87 b1       	in	r24, 0x07	; 7
     198:	80 6c       	ori	r24, 0xC0	; 192
     19a:	87 b9       	out	0x07, r24	; 7
				PORTC |= LEDS_ALL_LEDS;
     19c:	88 b1       	in	r24, 0x08	; 8
     19e:	80 6c       	ori	r24, 0xC0	; 192
     1a0:	88 b9       	out	0x08, r24	; 8

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     1a2:	2f d3       	rcall	.+1630   	; 0x802 <USB_Init>

	/* Millisecond Timer Interrupt */
	OCR0A  = (F_CPU / 64 / 1000);
     1a4:	8d e7       	ldi	r24, 0x7D	; 125
     1a6:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);
     1a8:	82 e0       	ldi	r24, 0x02	; 2
     1aa:	84 bd       	out	0x24, r24	; 36
	TCCR0B = ((1 << CS01) | (1 << CS00));
     1ac:	83 e0       	ldi	r24, 0x03	; 3
     1ae:	85 bd       	out	0x25, r24	; 37

	/* Tristate target /RESET Line */
	AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
     1b0:	5c 98       	cbi	0x0b, 4	; 11
	AVR_RESET_LINE_DDR  &= ~AVR_RESET_LINE_MASK;
     1b2:	54 98       	cbi	0x0a, 4	; 10
}
     1b4:	08 95       	ret

000001b6 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     1b6:	cf 92       	push	r12
     1b8:	df 92       	push	r13
     1ba:	ef 92       	push	r14
     1bc:	ff 92       	push	r15
     1be:	0f 93       	push	r16
     1c0:	1f 93       	push	r17
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
	SetupHardware();
     1c6:	dc df       	rcall	.-72     	; 0x180 <SetupHardware>
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1c8:	0f e1       	ldi	r16, 0x1F	; 31
     1ca:	11 e0       	ldi	r17, 0x01	; 1
     1cc:	f8 01       	movw	r30, r16
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1ce:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1d0:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     1d2:	8b e2       	ldi	r24, 0x2B	; 43
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	91 83       	std	Z+1, r25	; 0x01
     1d8:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     1da:	93 83       	std	Z+3, r25	; 0x03
     1dc:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     1de:	95 83       	std	Z+5, r25	; 0x05
     1e0:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     1e2:	8b ea       	ldi	r24, 0xAB	; 171
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	97 83       	std	Z+7, r25	; 0x07
     1e8:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     1ea:	80 e8       	ldi	r24, 0x80	; 128
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	91 87       	std	Z+9, r25	; 0x09
     1f0:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     1f2:	13 86       	std	Z+11, r1	; 0x0b
     1f4:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1f6:	2f bf       	out	0x3f, r18	; 63
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     1f8:	78 94       	sei
		if ((UCSR1A & (1 << UDRE1)) && CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface))
		{
			UDR1 = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);

			LEDs_TurnOnLEDs(LEDMASK_TX);
			PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
     1fa:	3e e1       	ldi	r19, 0x1E	; 30
     1fc:	f3 2e       	mov	r15, r19

			/* Check if the receive buffer flush period has expired */
			uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
			if (!(--FlushPeriodRemaining) || (BufferCount > 200))
			{
				FlushPeriodRemaining = RECEIVE_BUFFER_FLUSH_MS;
     1fe:	2a e0       	ldi	r18, 0x0A	; 10
     200:	c2 2e       	mov	r12, r18
				PORTC = ((PORTC | LEDMask) & ~ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PINC  = LEDMask;
     202:	90 ec       	ldi	r25, 0xC0	; 192
     204:	d9 2e       	mov	r13, r25

			/* Check if the LEDs should be ping-ponging (during enumeration) */
			if (PulseMSRemaining.PingPongLEDPulse && !(--PulseMSRemaining.PingPongLEDPulse))
			{
				LEDs_ToggleLEDs(LEDMASK_TX | LEDMASK_RX);
				PulseMSRemaining.PingPongLEDPulse = PING_PONG_LED_PULSE_MS;
     206:	84 e6       	ldi	r24, 0x64	; 100
     208:	e8 2e       	mov	r14, r24
	GlobalInterruptEnable();

	for (;;)
	{
		/* Echo bytes from the host to the target via the hardware USART */
		if ((UCSR1A & (1 << UDRE1)) && CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface))
     20a:	80 91 c8 00 	lds	r24, 0x00C8
     20e:	85 ff       	sbrs	r24, 5
     210:	0d c0       	rjmp	.+26     	; 0x22c <main+0x76>
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	91 e0       	ldi	r25, 0x01	; 1
     216:	a0 d6       	rcall	.+3392   	; 0xf58 <CDC_Device_BytesReceived>
     218:	00 97       	sbiw	r24, 0x00	; 0
     21a:	41 f0       	breq	.+16     	; 0x22c <main+0x76>
		{
			UDR1 = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	c2 d6       	rcall	.+3460   	; 0xfa6 <CDC_Device_ReceiveByte>
     222:	80 93 ce 00 	sts	0x00CE, r24
				PORTC &= ~LEDS_ALL_LEDS;
			}

			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTC &= ~LEDMask;
     226:	47 98       	cbi	0x08, 7	; 8

			LEDs_TurnOnLEDs(LEDMASK_TX);
			PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
     228:	f0 92 ac 01 	sts	0x01AC, r15
		}

		/* Check if the millisecond timer has elapsed */
		if (TIFR0 & (1 << OCF0A))
     22c:	a9 9b       	sbis	0x15, 1	; 21
     22e:	7b c0       	rjmp	.+246    	; 0x326 <main+0x170>
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);
     230:	a8 9a       	sbi	0x15, 0	; 21

			/* Check if the reset pulse period has elapsed, if so tristate the target reset line */
			if (PulseMSRemaining.ResetPulse && !(--PulseMSRemaining.ResetPulse))
     232:	80 91 ab 01 	lds	r24, 0x01AB
     236:	88 23       	and	r24, r24
     238:	69 f0       	breq	.+26     	; 0x254 <main+0x9e>
     23a:	80 91 ab 01 	lds	r24, 0x01AB
     23e:	81 50       	subi	r24, 0x01	; 1
     240:	80 93 ab 01 	sts	0x01AB, r24
     244:	80 91 ab 01 	lds	r24, 0x01AB
     248:	88 23       	and	r24, r24
     24a:	21 f4       	brne	.+8      	; 0x254 <main+0x9e>
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTC |= LEDMask;
     24c:	88 b1       	in	r24, 0x08	; 8
     24e:	80 6c       	ori	r24, 0xC0	; 192
     250:	88 b9       	out	0x08, r24	; 8
			{
				LEDs_TurnOffLEDs(LEDMASK_BUSY);
				AVR_RESET_LINE_DDR &= ~AVR_RESET_LINE_MASK;
     252:	54 98       	cbi	0x0a, 4	; 10
			}

			/* Check if the LEDs should be ping-ponging (during enumeration) */
			if (PulseMSRemaining.PingPongLEDPulse && !(--PulseMSRemaining.PingPongLEDPulse))
     254:	80 91 ae 01 	lds	r24, 0x01AE
     258:	88 23       	and	r24, r24
     25a:	61 f0       	breq	.+24     	; 0x274 <main+0xbe>
     25c:	80 91 ae 01 	lds	r24, 0x01AE
     260:	81 50       	subi	r24, 0x01	; 1
     262:	80 93 ae 01 	sts	0x01AE, r24
     266:	80 91 ae 01 	lds	r24, 0x01AE
     26a:	88 23       	and	r24, r24
     26c:	19 f4       	brne	.+6      	; 0x274 <main+0xbe>
				PORTC = ((PORTC | LEDMask) & ~ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PINC  = LEDMask;
     26e:	d6 b8       	out	0x06, r13	; 6
			{
				LEDs_ToggleLEDs(LEDMASK_TX | LEDMASK_RX);
				PulseMSRemaining.PingPongLEDPulse = PING_PONG_LED_PULSE_MS;
     270:	e0 92 ae 01 	sts	0x01AE, r14
			}

			/* Turn off TX LED(s) once the TX pulse period has elapsed */
			if (PulseMSRemaining.TxLEDPulse && !(--PulseMSRemaining.TxLEDPulse))
     274:	80 91 ac 01 	lds	r24, 0x01AC
     278:	88 23       	and	r24, r24
     27a:	51 f0       	breq	.+20     	; 0x290 <main+0xda>
     27c:	80 91 ac 01 	lds	r24, 0x01AC
     280:	81 50       	subi	r24, 0x01	; 1
     282:	80 93 ac 01 	sts	0x01AC, r24
     286:	80 91 ac 01 	lds	r24, 0x01AC
     28a:	88 23       	and	r24, r24
     28c:	09 f4       	brne	.+2      	; 0x290 <main+0xda>
				PORTC &= ~LEDMask;
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTC |= LEDMask;
     28e:	47 9a       	sbi	0x08, 7	; 8
			  LEDs_TurnOffLEDs(LEDMASK_TX);

			/* Turn off RX LED(s) once the RX pulse period has elapsed */
			if (PulseMSRemaining.RxLEDPulse && !(--PulseMSRemaining.RxLEDPulse))
     290:	80 91 ad 01 	lds	r24, 0x01AD
     294:	88 23       	and	r24, r24
     296:	51 f0       	breq	.+20     	; 0x2ac <main+0xf6>
     298:	80 91 ad 01 	lds	r24, 0x01AD
     29c:	81 50       	subi	r24, 0x01	; 1
     29e:	80 93 ad 01 	sts	0x01AD, r24
     2a2:	80 91 ad 01 	lds	r24, 0x01AD
     2a6:	88 23       	and	r24, r24
     2a8:	09 f4       	brne	.+2      	; 0x2ac <main+0xf6>
     2aa:	46 9a       	sbi	0x08, 6	; 8
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     2ac:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     2ae:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     2b0:	c0 91 29 01 	lds	r28, 0x0129
     2b4:	d0 91 2a 01 	lds	r29, 0x012A
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2b8:	8f bf       	out	0x3f, r24	; 63
			  LEDs_TurnOffLEDs(LEDMASK_RX);

			/* Check if the receive buffer flush period has expired */
			uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
			if (!(--FlushPeriodRemaining) || (BufferCount > 200))
     2ba:	80 91 00 01 	lds	r24, 0x0100
     2be:	81 50       	subi	r24, 0x01	; 1
     2c0:	80 93 00 01 	sts	0x0100, r24
     2c4:	88 23       	and	r24, r24
     2c6:	19 f0       	breq	.+6      	; 0x2ce <main+0x118>
     2c8:	c9 3c       	cpi	r28, 0xC9	; 201
     2ca:	d1 05       	cpc	r29, r1
     2cc:	60 f1       	brcs	.+88     	; 0x326 <main+0x170>
			{
				FlushPeriodRemaining = RECEIVE_BUFFER_FLUSH_MS;
     2ce:	c0 92 00 01 	sts	0x0100, r12

				/* Start RX LED indicator pulse */
				if (BufferCount)
     2d2:	20 97       	sbiw	r28, 0x00	; 0
     2d4:	31 f1       	breq	.+76     	; 0x322 <main+0x16c>
				PORTC &= ~LEDS_ALL_LEDS;
			}

			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTC &= ~LEDMask;
     2d6:	46 98       	cbi	0x08, 6	; 8
				{
					LEDs_TurnOnLEDs(LEDMASK_RX);
					PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
     2d8:	f0 92 ad 01 	sts	0x01AD, r15
     2dc:	22 c0       	rjmp	.+68     	; 0x322 <main+0x16c>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer)
		{
			return *Buffer->Out;
     2de:	e0 91 21 01 	lds	r30, 0x0121
     2e2:	f0 91 22 01 	lds	r31, 0x0122

				/* Echo bytes from the target to the host via the virtual serial port */
				while (BufferCount--)
				{
					/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
					if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	60 81       	ld	r22, Z
     2ec:	c4 d5       	rcall	.+2952   	; 0xe76 <CDC_Device_SendByte>
     2ee:	88 23       	and	r24, r24
     2f0:	d1 f4       	brne	.+52     	; 0x326 <main+0x170>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     2f2:	f8 01       	movw	r30, r16

			uint8_t Data = *Buffer->Out;

			if (++Buffer->Out == Buffer->End)
     2f4:	82 81       	ldd	r24, Z+2	; 0x02
     2f6:	93 81       	ldd	r25, Z+3	; 0x03
     2f8:	01 96       	adiw	r24, 0x01	; 1
     2fa:	93 83       	std	Z+3, r25	; 0x03
     2fc:	82 83       	std	Z+2, r24	; 0x02
     2fe:	26 81       	ldd	r18, Z+6	; 0x06
     300:	37 81       	ldd	r19, Z+7	; 0x07
     302:	82 17       	cp	r24, r18
     304:	93 07       	cpc	r25, r19
     306:	21 f4       	brne	.+8      	; 0x310 <main+0x15a>
			  Buffer->Out = Buffer->Start;
     308:	84 81       	ldd	r24, Z+4	; 0x04
     30a:	95 81       	ldd	r25, Z+5	; 0x05
     30c:	93 83       	std	Z+3, r25	; 0x03
     30e:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     310:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     312:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     314:	82 85       	ldd	r24, Z+10	; 0x0a
     316:	93 85       	ldd	r25, Z+11	; 0x0b
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	93 87       	std	Z+11, r25	; 0x0b
     31c:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     31e:	2f bf       	out	0x3f, r18	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     320:	21 97       	sbiw	r28, 0x01	; 1
					LEDs_TurnOnLEDs(LEDMASK_RX);
					PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
				}

				/* Echo bytes from the target to the host via the virtual serial port */
				while (BufferCount--)
     322:	20 97       	sbiw	r28, 0x00	; 0
     324:	e1 f6       	brne	.-72     	; 0x2de <main+0x128>
					RingBuffer_Remove(&USARTtoUSB_Buffer);
				}
			}
		}

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	ff d5       	rcall	.+3070   	; 0xf2a <CDC_Device_USBTask>
		USB_USBTask();
     32c:	b9 d4       	rcall	.+2418   	; 0xca0 <USB_USBTask>
	}
     32e:	6d cf       	rjmp	.-294    	; 0x20a <main+0x54>

00000330 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	PulseMSRemaining.PingPongLEDPulse = PING_PONG_LED_PULSE_MS;
     330:	84 e6       	ldi	r24, 0x64	; 100
     332:	80 93 ae 01 	sts	0x01AE, r24
	LEDs_SetAllLEDs(LEDMASK_TX);
     336:	80 e8       	ldi	r24, 0x80	; 128
}
     338:	1d cf       	rjmp	.-454    	; 0x174 <LEDs_SetAllLEDs>

0000033a <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	PulseMSRemaining.PingPongLEDPulse = 0;
     33a:	10 92 ae 01 	sts	0x01AE, r1
	LEDs_SetAllLEDs(LEDS_NO_LEDS);
     33e:	80 e0       	ldi	r24, 0x00	; 0
}
     340:	19 cf       	rjmp	.-462    	; 0x174 <LEDs_SetAllLEDs>

00000342 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	73 d5       	rcall	.+2790   	; 0xe2e <CDC_Device_ConfigureEndpoints>

	PulseMSRemaining.PingPongLEDPulse = 0;
     348:	10 92 ae 01 	sts	0x01AE, r1

	LEDs_SetAllLEDs(ConfigSuccess ? LEDS_NO_LEDS : LEDMASK_ERROR);
     34c:	80 ff       	sbrs	r24, 0
     34e:	02 c0       	rjmp	.+4      	; 0x354 <EVENT_USB_Device_ConfigurationChanged+0x12>
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	01 c0       	rjmp	.+2      	; 0x356 <EVENT_USB_Device_ConfigurationChanged+0x14>
     354:	80 ec       	ldi	r24, 0xC0	; 192
}
     356:	0e cf       	rjmp	.-484    	; 0x174 <LEDs_SetAllLEDs>

00000358 <EVENT_USB_Device_ControlRequest>:
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	91 e0       	ldi	r25, 0x01	; 1
}
     35c:	bc c4       	rjmp	.+2424   	; 0xcd6 <CDC_Device_ProcessControlRequest>

0000035e <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     35e:	1f 93       	push	r17
     360:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     362:	a1 8d       	ldd	r26, Z+25	; 0x19
     364:	a1 50       	subi	r26, 0x01	; 1
     366:	a2 30       	cpi	r26, 0x02	; 2
     368:	28 f4       	brcc	.+10     	; 0x374 <EVENT_CDC_Device_LineEncodingChanged+0x16>
     36a:	b0 e0       	ldi	r27, 0x00	; 0
     36c:	a4 5e       	subi	r26, 0xE4	; 228
     36e:	be 4f       	sbci	r27, 0xFE	; 254
     370:	1c 91       	ld	r17, X
     372:	01 c0       	rjmp	.+2      	; 0x376 <EVENT_CDC_Device_LineEncodingChanged+0x18>
     374:	10 e0       	ldi	r17, 0x00	; 0
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     376:	80 8d       	ldd	r24, Z+24	; 0x18
     378:	82 30       	cpi	r24, 0x02	; 2
     37a:	09 f4       	brne	.+2      	; 0x37e <EVENT_CDC_Device_LineEncodingChanged+0x20>
	  ConfigMask |= (1 << USBS1);
     37c:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     37e:	82 8d       	ldd	r24, Z+26	; 0x1a
     380:	87 30       	cpi	r24, 0x07	; 7
     382:	31 f0       	breq	.+12     	; 0x390 <EVENT_CDC_Device_LineEncodingChanged+0x32>
     384:	88 30       	cpi	r24, 0x08	; 8
     386:	31 f0       	breq	.+12     	; 0x394 <EVENT_CDC_Device_LineEncodingChanged+0x36>
     388:	86 30       	cpi	r24, 0x06	; 6
     38a:	29 f4       	brne	.+10     	; 0x396 <EVENT_CDC_Device_LineEncodingChanged+0x38>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
     38c:	12 60       	ori	r17, 0x02	; 2
			break;
     38e:	03 c0       	rjmp	.+6      	; 0x396 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 7:
			ConfigMask |= (1 << UCSZ11);
     390:	14 60       	ori	r17, 0x04	; 4
			break;
     392:	01 c0       	rjmp	.+2      	; 0x396 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     394:	16 60       	ori	r17, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     396:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
     39a:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
     39e:	10 92 ca 00 	sts	0x00CA, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     3a2:	24 89       	ldd	r18, Z+20	; 0x14
     3a4:	35 89       	ldd	r19, Z+21	; 0x15
     3a6:	46 89       	ldd	r20, Z+22	; 0x16
     3a8:	57 89       	ldd	r21, Z+23	; 0x17
     3aa:	ca 01       	movw	r24, r20
     3ac:	b9 01       	movw	r22, r18
     3ae:	96 95       	lsr	r25
     3b0:	87 95       	ror	r24
     3b2:	77 95       	ror	r23
     3b4:	67 95       	ror	r22
     3b6:	60 5c       	subi	r22, 0xC0	; 192
     3b8:	7d 4b       	sbci	r23, 0xBD	; 189
     3ba:	80 4f       	sbci	r24, 0xF0	; 240
     3bc:	9f 4f       	sbci	r25, 0xFF	; 255
     3be:	21 d6       	rcall	.+3138   	; 0x1002 <__udivmodsi4>
     3c0:	21 50       	subi	r18, 0x01	; 1
     3c2:	30 40       	sbci	r19, 0x00	; 0
     3c4:	30 93 cd 00 	sts	0x00CD, r19
     3c8:	20 93 cc 00 	sts	0x00CC, r18

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
     3cc:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (1 << U2X1);
     3d0:	82 e0       	ldi	r24, 0x02	; 2
     3d2:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     3d6:	88 e9       	ldi	r24, 0x98	; 152
     3d8:	80 93 c9 00 	sts	0x00C9, r24
}
     3dc:	1f 91       	pop	r17
     3de:	08 95       	ret

000003e0 <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     3e0:	1f 92       	push	r1
     3e2:	0f 92       	push	r0
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	0f 92       	push	r0
     3e8:	11 24       	eor	r1, r1
     3ea:	2f 93       	push	r18
     3ec:	3f 93       	push	r19
     3ee:	8f 93       	push	r24
     3f0:	9f 93       	push	r25
     3f2:	af 93       	push	r26
     3f4:	bf 93       	push	r27
     3f6:	ef 93       	push	r30
     3f8:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
     3fa:	80 91 ce 00 	lds	r24, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
     3fe:	9e b3       	in	r25, 0x1e	; 30
     400:	94 30       	cpi	r25, 0x04	; 4
     402:	d9 f4       	brne	.+54     	; 0x43a <__vector_23+0x5a>
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     404:	ef e1       	ldi	r30, 0x1F	; 31
     406:	f1 e0       	ldi	r31, 0x01	; 1

			*Buffer->In = Data;
     408:	a0 81       	ld	r26, Z
     40a:	b1 81       	ldd	r27, Z+1	; 0x01
     40c:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     40e:	80 81       	ld	r24, Z
     410:	91 81       	ldd	r25, Z+1	; 0x01
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	91 83       	std	Z+1, r25	; 0x01
     416:	80 83       	st	Z, r24
     418:	26 81       	ldd	r18, Z+6	; 0x06
     41a:	37 81       	ldd	r19, Z+7	; 0x07
     41c:	82 17       	cp	r24, r18
     41e:	93 07       	cpc	r25, r19
     420:	21 f4       	brne	.+8      	; 0x42a <__vector_23+0x4a>
			  Buffer->In = Buffer->Start;
     422:	84 81       	ldd	r24, Z+4	; 0x04
     424:	95 81       	ldd	r25, Z+5	; 0x05
     426:	91 83       	std	Z+1, r25	; 0x01
     428:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     42a:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     42c:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     42e:	82 85       	ldd	r24, Z+10	; 0x0a
     430:	93 85       	ldd	r25, Z+11	; 0x0b
     432:	01 96       	adiw	r24, 0x01	; 1
     434:	93 87       	std	Z+11, r25	; 0x0b
     436:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     438:	2f bf       	out	0x3f, r18	; 63
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
}
     43a:	ff 91       	pop	r31
     43c:	ef 91       	pop	r30
     43e:	bf 91       	pop	r27
     440:	af 91       	pop	r26
     442:	9f 91       	pop	r25
     444:	8f 91       	pop	r24
     446:	3f 91       	pop	r19
     448:	2f 91       	pop	r18
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <EVENT_CDC_Device_ControLineStateChanged>:
/** Event handler for the CDC Class driver Host-to-Device Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     454:	1f 93       	push	r17
	static bool PreviousDTRState = false;
	bool        CurrentDTRState  = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
     456:	fc 01       	movw	r30, r24
     458:	10 89       	ldd	r17, Z+16	; 0x10
     45a:	11 70       	andi	r17, 0x01	; 1

	/* Check if the DTR line has been asserted - if so, start the target AVR's reset pulse */
	if (!(PreviousDTRState) && CurrentDTRState)
     45c:	80 91 1e 01 	lds	r24, 0x011E
     460:	88 23       	and	r24, r24
     462:	41 f4       	brne	.+16     	; 0x474 <EVENT_CDC_Device_ControLineStateChanged+0x20>
     464:	11 23       	and	r17, r17
     466:	31 f0       	breq	.+12     	; 0x474 <EVENT_CDC_Device_ControLineStateChanged+0x20>
	{
		LEDs_SetAllLEDs(LEDMASK_BUSY);
     468:	80 ec       	ldi	r24, 0xC0	; 192
     46a:	84 de       	rcall	.-760    	; 0x174 <LEDs_SetAllLEDs>

		AVR_RESET_LINE_DDR |= AVR_RESET_LINE_MASK;
     46c:	54 9a       	sbi	0x0a, 4	; 10
		PulseMSRemaining.ResetPulse = AVR_RESET_PULSE_MS;
     46e:	8a e0       	ldi	r24, 0x0A	; 10
     470:	80 93 ab 01 	sts	0x01AB, r24
	}

	PreviousDTRState = CurrentDTRState;
     474:	10 93 1e 01 	sts	0x011E, r17
}
     478:	1f 91       	pop	r17
     47a:	08 95       	ret

0000047c <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     47c:	92 30       	cpi	r25, 0x02	; 2
     47e:	29 f0       	breq	.+10     	; 0x48a <CALLBACK_USB_GetDescriptor+0xe>
     480:	93 30       	cpi	r25, 0x03	; 3
     482:	41 f0       	breq	.+16     	; 0x494 <CALLBACK_USB_GetDescriptor+0x18>
     484:	91 30       	cpi	r25, 0x01	; 1
     486:	e9 f4       	brne	.+58     	; 0x4c2 <CALLBACK_USB_GetDescriptor+0x46>
     488:	17 c0       	rjmp	.+46     	; 0x4b8 <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     48a:	2e e3       	ldi	r18, 0x3E	; 62
     48c:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     48e:	ea ea       	ldi	r30, 0xAA	; 170
     490:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     492:	1b c0       	rjmp	.+54     	; 0x4ca <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     494:	81 30       	cpi	r24, 0x01	; 1
     496:	41 f0       	breq	.+16     	; 0x4a8 <CALLBACK_USB_GetDescriptor+0x2c>
     498:	81 30       	cpi	r24, 0x01	; 1
     49a:	18 f0       	brcs	.+6      	; 0x4a2 <CALLBACK_USB_GetDescriptor+0x26>
     49c:	82 30       	cpi	r24, 0x02	; 2
     49e:	89 f4       	brne	.+34     	; 0x4c2 <CALLBACK_USB_GetDescriptor+0x46>
     4a0:	06 c0       	rjmp	.+12     	; 0x4ae <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     4a2:	e8 ee       	ldi	r30, 0xE8	; 232
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     4a8:	ec ee       	ldi	r30, 0xEC	; 236
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     4ae:	e6 e0       	ldi	r30, 0x06	; 6
     4b0:	f1 e0       	ldi	r31, 0x01	; 1
     4b2:	24 91       	lpm	r18, Z+
     4b4:	30 e0       	ldi	r19, 0x00	; 0
					break;
     4b6:	09 c0       	rjmp	.+18     	; 0x4ca <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     4b8:	22 e1       	ldi	r18, 0x12	; 18
     4ba:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     4bc:	e8 e9       	ldi	r30, 0x98	; 152
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	04 c0       	rjmp	.+8      	; 0x4ca <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     4c6:	e0 e0       	ldi	r30, 0x00	; 0
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     4ca:	da 01       	movw	r26, r20
     4cc:	11 96       	adiw	r26, 0x01	; 1
     4ce:	fc 93       	st	X, r31
     4d0:	ee 93       	st	-X, r30
	return Size;
}
     4d2:	c9 01       	movw	r24, r18
     4d4:	08 95       	ret

000004d6 <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     4d6:	28 2f       	mov	r18, r24
     4d8:	39 2f       	mov	r19, r25
     4da:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     4dc:	80 91 b9 01 	lds	r24, 0x01B9
     4e0:	90 91 ba 01 	lds	r25, 0x01BA
     4e4:	86 17       	cp	r24, r22
     4e6:	97 07       	cpc	r25, r23
     4e8:	18 f4       	brcc	.+6      	; 0x4f0 <Endpoint_Write_Control_Stream_LE+0x1a>
     4ea:	bc 01       	movw	r22, r24
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	34 c0       	rjmp	.+104    	; 0x558 <__stack+0x59>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     4f0:	61 15       	cp	r22, r1
     4f2:	71 05       	cpc	r23, r1
     4f4:	d9 f7       	brne	.-10     	; 0x4ec <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4f6:	80 91 e8 00 	lds	r24, 0x00E8
     4fa:	8e 77       	andi	r24, 0x7E	; 126
     4fc:	80 93 e8 00 	sts	0x00E8, r24
     500:	f5 cf       	rjmp	.-22     	; 0x4ec <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     502:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     504:	88 23       	and	r24, r24
     506:	e9 f1       	breq	.+122    	; 0x582 <__stack+0x83>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     508:	85 30       	cpi	r24, 0x05	; 5
     50a:	b9 f1       	breq	.+110    	; 0x57a <__stack+0x7b>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     50c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     510:	83 fd       	sbrc	r24, 3
     512:	35 c0       	rjmp	.+106    	; 0x57e <__stack+0x7f>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     514:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     518:	82 fd       	sbrc	r24, 2
     51a:	29 c0       	rjmp	.+82     	; 0x56e <__stack+0x6f>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     51c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     520:	80 ff       	sbrs	r24, 0
     522:	1a c0       	rjmp	.+52     	; 0x558 <__stack+0x59>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     524:	80 91 f2 00 	lds	r24, 0x00F2
     528:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     52a:	06 c0       	rjmp	.+12     	; 0x538 <__stack+0x39>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     52c:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     52e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     532:	61 50       	subi	r22, 0x01	; 1
     534:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     536:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     538:	61 15       	cp	r22, r1
     53a:	71 05       	cpc	r23, r1
     53c:	19 f0       	breq	.+6      	; 0x544 <__stack+0x45>
     53e:	88 30       	cpi	r24, 0x08	; 8
     540:	91 05       	cpc	r25, r1
     542:	a0 f3       	brcs	.-24     	; 0x52c <__stack+0x2d>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     544:	21 e0       	ldi	r18, 0x01	; 1
     546:	88 30       	cpi	r24, 0x08	; 8
     548:	91 05       	cpc	r25, r1
     54a:	09 f0       	breq	.+2      	; 0x54e <__stack+0x4f>
     54c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     54e:	80 91 e8 00 	lds	r24, 0x00E8
     552:	8e 77       	andi	r24, 0x7E	; 126
     554:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     558:	61 15       	cp	r22, r1
     55a:	71 05       	cpc	r23, r1
     55c:	91 f6       	brne	.-92     	; 0x502 <__stack+0x3>
     55e:	22 23       	and	r18, r18
     560:	81 f6       	brne	.-96     	; 0x502 <__stack+0x3>
     562:	05 c0       	rjmp	.+10     	; 0x56e <__stack+0x6f>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     564:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     566:	88 23       	and	r24, r24
     568:	61 f0       	breq	.+24     	; 0x582 <__stack+0x83>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     56a:	85 30       	cpi	r24, 0x05	; 5
     56c:	61 f0       	breq	.+24     	; 0x586 <__stack+0x87>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     56e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     572:	82 ff       	sbrs	r24, 2
     574:	f7 cf       	rjmp	.-18     	; 0x564 <__stack+0x65>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     57a:	83 e0       	ldi	r24, 0x03	; 3
     57c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     582:	82 e0       	ldi	r24, 0x02	; 2
     584:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     586:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     588:	08 95       	ret

0000058a <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     58a:	e8 2f       	mov	r30, r24
     58c:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     58e:	80 91 b9 01 	lds	r24, 0x01B9
     592:	90 91 ba 01 	lds	r25, 0x01BA
     596:	86 17       	cp	r24, r22
     598:	97 07       	cpc	r25, r23
     59a:	18 f4       	brcc	.+6      	; 0x5a2 <Endpoint_Write_Control_PStream_LE+0x18>
     59c:	bc 01       	movw	r22, r24
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	36 c0       	rjmp	.+108    	; 0x60e <Endpoint_Write_Control_PStream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     5a2:	61 15       	cp	r22, r1
     5a4:	71 05       	cpc	r23, r1
     5a6:	d9 f7       	brne	.-10     	; 0x59e <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5a8:	80 91 e8 00 	lds	r24, 0x00E8
     5ac:	8e 77       	andi	r24, 0x7E	; 126
     5ae:	80 93 e8 00 	sts	0x00E8, r24
     5b2:	f5 cf       	rjmp	.-22     	; 0x59e <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5b4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5b6:	88 23       	and	r24, r24
     5b8:	09 f4       	brne	.+2      	; 0x5bc <Endpoint_Write_Control_PStream_LE+0x32>
     5ba:	3e c0       	rjmp	.+124    	; 0x638 <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5bc:	85 30       	cpi	r24, 0x05	; 5
     5be:	c1 f1       	breq	.+112    	; 0x630 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     5c0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     5c4:	83 fd       	sbrc	r24, 3
     5c6:	36 c0       	rjmp	.+108    	; 0x634 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5c8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     5cc:	82 fd       	sbrc	r24, 2
     5ce:	2a c0       	rjmp	.+84     	; 0x624 <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5d0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     5d4:	80 ff       	sbrs	r24, 0
     5d6:	1b c0       	rjmp	.+54     	; 0x60e <Endpoint_Write_Control_PStream_LE+0x84>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     5d8:	80 91 f2 00 	lds	r24, 0x00F2
     5dc:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     5de:	07 c0       	rjmp	.+14     	; 0x5ee <Endpoint_Write_Control_PStream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     5e0:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     5e2:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     5e6:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     5e8:	61 50       	subi	r22, 0x01	; 1
     5ea:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     5ec:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     5ee:	61 15       	cp	r22, r1
     5f0:	71 05       	cpc	r23, r1
     5f2:	19 f0       	breq	.+6      	; 0x5fa <Endpoint_Write_Control_PStream_LE+0x70>
     5f4:	88 30       	cpi	r24, 0x08	; 8
     5f6:	91 05       	cpc	r25, r1
     5f8:	98 f3       	brcs	.-26     	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x56>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     5fa:	21 e0       	ldi	r18, 0x01	; 1
     5fc:	88 30       	cpi	r24, 0x08	; 8
     5fe:	91 05       	cpc	r25, r1
     600:	09 f0       	breq	.+2      	; 0x604 <Endpoint_Write_Control_PStream_LE+0x7a>
     602:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     604:	80 91 e8 00 	lds	r24, 0x00E8
     608:	8e 77       	andi	r24, 0x7E	; 126
     60a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     60e:	61 15       	cp	r22, r1
     610:	71 05       	cpc	r23, r1
     612:	81 f6       	brne	.-96     	; 0x5b4 <Endpoint_Write_Control_PStream_LE+0x2a>
     614:	22 23       	and	r18, r18
     616:	71 f6       	brne	.-100    	; 0x5b4 <Endpoint_Write_Control_PStream_LE+0x2a>
     618:	05 c0       	rjmp	.+10     	; 0x624 <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     61a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     61c:	88 23       	and	r24, r24
     61e:	61 f0       	breq	.+24     	; 0x638 <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     620:	85 30       	cpi	r24, 0x05	; 5
     622:	61 f0       	breq	.+24     	; 0x63c <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     624:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     628:	82 ff       	sbrs	r24, 2
     62a:	f7 cf       	rjmp	.-18     	; 0x61a <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     630:	83 e0       	ldi	r24, 0x03	; 3
     632:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     63c:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     63e:	08 95       	ret

00000640 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     640:	8f 70       	andi	r24, 0x0F	; 15
     642:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     646:	eb ee       	ldi	r30, 0xEB	; 235
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	80 81       	ld	r24, Z
     64c:	81 60       	ori	r24, 0x01	; 1
     64e:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     650:	ed ee       	ldi	r30, 0xED	; 237
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
     656:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
     65a:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     65c:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     660:	88 1f       	adc	r24, r24
     662:	88 27       	eor	r24, r24
     664:	88 1f       	adc	r24, r24
     666:	08 95       	ret

00000668 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     668:	ef 92       	push	r14
     66a:	ff 92       	push	r15
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     676:	e8 2e       	mov	r14, r24
     678:	e7 01       	movw	r28, r14
     67a:	7e 01       	movw	r14, r28
     67c:	f9 2e       	mov	r15, r25
     67e:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     680:	00 e0       	ldi	r16, 0x00	; 0
     682:	2a c0       	rjmp	.+84     	; 0x6d8 <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
     684:	98 81       	ld	r25, Y
     686:	99 23       	and	r25, r25
     688:	29 f1       	breq	.+74     	; 0x6d4 <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     68a:	6b 81       	ldd	r22, Y+3	; 0x03
     68c:	e9 81       	ldd	r30, Y+1	; 0x01
     68e:	fa 81       	ldd	r31, Y+2	; 0x02
     690:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     692:	89 2f       	mov	r24, r25
     694:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     696:	85 30       	cpi	r24, 0x05	; 5
     698:	18 f5       	brcc	.+70     	; 0x6e0 <Endpoint_ConfigureEndpointTable+0x78>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     69a:	62 95       	swap	r22
     69c:	66 0f       	add	r22, r22
     69e:	66 0f       	add	r22, r22
     6a0:	60 7c       	andi	r22, 0xC0	; 192
     6a2:	99 1f       	adc	r25, r25
     6a4:	99 27       	eor	r25, r25
     6a6:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     6a8:	69 2b       	or	r22, r25
     6aa:	22 30       	cpi	r18, 0x02	; 2
     6ac:	10 f0       	brcs	.+4      	; 0x6b2 <Endpoint_ConfigureEndpointTable+0x4a>
     6ae:	96 e0       	ldi	r25, 0x06	; 6
     6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <Endpoint_ConfigureEndpointTable+0x4c>
     6b2:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     6b4:	28 e0       	ldi	r18, 0x08	; 8
     6b6:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     6b8:	40 e0       	ldi	r20, 0x00	; 0
     6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     6bc:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     6be:	22 0f       	add	r18, r18
     6c0:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     6c2:	2e 17       	cp	r18, r30
     6c4:	3f 07       	cpc	r19, r31
     6c6:	d0 f3       	brcs	.-12     	; 0x6bc <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     6c8:	42 95       	swap	r20
     6ca:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     6cc:	49 2b       	or	r20, r25
     6ce:	b8 df       	rcall	.-144    	; 0x640 <Endpoint_ConfigureEndpoint_Prv>
     6d0:	88 23       	and	r24, r24
     6d2:	31 f0       	breq	.+12     	; 0x6e0 <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     6d4:	0f 5f       	subi	r16, 0xFF	; 255
     6d6:	25 96       	adiw	r28, 0x05	; 5
     6d8:	01 17       	cp	r16, r17
     6da:	a0 f2       	brcs	.-88     	; 0x684 <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	01 c0       	rjmp	.+2      	; 0x6e2 <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     6e0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	08 95       	ret

000006f0 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     6f0:	80 91 b3 01 	lds	r24, 0x01B3
     6f4:	87 ff       	sbrs	r24, 7
     6f6:	11 c0       	rjmp	.+34     	; 0x71a <Endpoint_ClearStatusStage+0x2a>
     6f8:	03 c0       	rjmp	.+6      	; 0x700 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6fa:	8e b3       	in	r24, 0x1e	; 30
     6fc:	88 23       	and	r24, r24
     6fe:	b1 f0       	breq	.+44     	; 0x72c <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     700:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     704:	82 ff       	sbrs	r24, 2
     706:	f9 cf       	rjmp	.-14     	; 0x6fa <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     708:	80 91 e8 00 	lds	r24, 0x00E8
     70c:	8b 77       	andi	r24, 0x7B	; 123
     70e:	80 93 e8 00 	sts	0x00E8, r24
     712:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     714:	8e b3       	in	r24, 0x1e	; 30
     716:	88 23       	and	r24, r24
     718:	49 f0       	breq	.+18     	; 0x72c <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     71a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     71e:	80 ff       	sbrs	r24, 0
     720:	f9 cf       	rjmp	.-14     	; 0x714 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     722:	80 91 e8 00 	lds	r24, 0x00E8
     726:	8e 77       	andi	r24, 0x7E	; 126
     728:	80 93 e8 00 	sts	0x00E8, r24
     72c:	08 95       	ret

0000072e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     72e:	80 91 e4 00 	lds	r24, 0x00E4
     732:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     736:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     738:	20 91 ec 00 	lds	r18, 0x00EC
     73c:	20 ff       	sbrs	r18, 0
     73e:	25 c0       	rjmp	.+74     	; 0x78a <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     740:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     744:	20 fd       	sbrc	r18, 0
     746:	15 c0       	rjmp	.+42     	; 0x772 <Endpoint_WaitUntilReady+0x44>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     748:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     74a:	22 23       	and	r18, r18
     74c:	a1 f0       	breq	.+40     	; 0x776 <Endpoint_WaitUntilReady+0x48>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     74e:	25 30       	cpi	r18, 0x05	; 5
     750:	a1 f0       	breq	.+40     	; 0x77a <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     752:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     756:	25 fd       	sbrc	r18, 5
     758:	12 c0       	rjmp	.+36     	; 0x77e <Endpoint_WaitUntilReady+0x50>
     75a:	20 91 e4 00 	lds	r18, 0x00E4
     75e:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     762:	28 17       	cp	r18, r24
     764:	39 07       	cpc	r19, r25
     766:	41 f3       	breq	.-48     	; 0x738 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     768:	44 23       	and	r20, r20
     76a:	59 f0       	breq	.+22     	; 0x782 <Endpoint_WaitUntilReady+0x54>
     76c:	41 50       	subi	r20, 0x01	; 1
     76e:	c9 01       	movw	r24, r18
     770:	e3 cf       	rjmp	.-58     	; 0x738 <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     77a:	83 e0       	ldi	r24, 0x03	; 3
     77c:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     782:	84 e0       	ldi	r24, 0x04	; 4
     784:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     786:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     788:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     78a:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     78e:	22 ff       	sbrs	r18, 2
     790:	db cf       	rjmp	.-74     	; 0x748 <Endpoint_WaitUntilReady+0x1a>
     792:	f9 cf       	rjmp	.-14     	; 0x786 <Endpoint_WaitUntilReady+0x58>

00000794 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     794:	3f d0       	rcall	.+126    	; 0x814 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     796:	41 d0       	rcall	.+130    	; 0x81a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     798:	80 91 d8 00 	lds	r24, 0x00D8
     79c:	8f 77       	andi	r24, 0x7F	; 127
     79e:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     7a2:	80 91 d8 00 	lds	r24, 0x00D8
     7a6:	80 68       	ori	r24, 0x80	; 128
     7a8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     7ac:	80 91 d8 00 	lds	r24, 0x00D8
     7b0:	8f 7d       	andi	r24, 0xDF	; 223
     7b2:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     7b6:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     7bc:	09 b4       	in	r0, 0x29	; 41
     7be:	00 fe       	sbrs	r0, 0
     7c0:	fd cf       	rjmp	.-6      	; 0x7bc <USB_ResetInterface+0x28>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     7c2:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
     7c4:	10 92 af 01 	sts	0x01AF, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     7c8:	10 92 b1 01 	sts	0x01B1, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     7cc:	10 92 b0 01 	sts	0x01B0, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	42 e0       	ldi	r20, 0x02	; 2
     7d6:	34 df       	rcall	.-408    	; 0x640 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     7d8:	80 91 e1 00 	lds	r24, 0x00E1
     7dc:	8e 7f       	andi	r24, 0xFE	; 254
     7de:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     7e2:	80 91 e2 00 	lds	r24, 0x00E2
     7e6:	81 60       	ori	r24, 0x01	; 1
     7e8:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     7ec:	80 91 e2 00 	lds	r24, 0x00E2
     7f0:	88 60       	ori	r24, 0x08	; 8
     7f2:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     7f6:	80 91 e0 00 	lds	r24, 0x00E0
     7fa:	8e 7f       	andi	r24, 0xFE	; 254
     7fc:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     800:	08 95       	ret

00000802 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     802:	e3 e6       	ldi	r30, 0x63	; 99
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	80 81       	ld	r24, Z
     808:	8e 7f       	andi	r24, 0xFE	; 254
     80a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	80 93 b2 01 	sts	0x01B2, r24

	USB_ResetInterface();
}
     812:	c0 cf       	rjmp	.-128    	; 0x794 <USB_ResetInterface>

00000814 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     814:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     818:	08 95       	ret

0000081a <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     81a:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     81e:	08 95       	ret

00000820 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     820:	1f 92       	push	r1
     822:	0f 92       	push	r0
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	0f 92       	push	r0
     828:	11 24       	eor	r1, r1
     82a:	2f 93       	push	r18
     82c:	3f 93       	push	r19
     82e:	4f 93       	push	r20
     830:	5f 93       	push	r21
     832:	6f 93       	push	r22
     834:	7f 93       	push	r23
     836:	8f 93       	push	r24
     838:	9f 93       	push	r25
     83a:	af 93       	push	r26
     83c:	bf 93       	push	r27
     83e:	ef 93       	push	r30
     840:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     842:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     846:	82 ff       	sbrs	r24, 2
     848:	0a c0       	rjmp	.+20     	; 0x85e <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     84a:	80 91 e2 00 	lds	r24, 0x00E2
     84e:	82 ff       	sbrs	r24, 2
     850:	06 c0       	rjmp	.+12     	; 0x85e <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     852:	80 91 e1 00 	lds	r24, 0x00E1
     856:	8b 7f       	andi	r24, 0xFB	; 251
     858:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     85c:	20 d2       	rcall	.+1088   	; 0xc9e <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     85e:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     862:	80 ff       	sbrs	r24, 0
     864:	16 c0       	rjmp	.+44     	; 0x892 <__vector_11+0x72>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     866:	80 91 e2 00 	lds	r24, 0x00E2
     86a:	80 ff       	sbrs	r24, 0
     86c:	12 c0       	rjmp	.+36     	; 0x892 <__vector_11+0x72>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     86e:	80 91 e2 00 	lds	r24, 0x00E2
     872:	8e 7f       	andi	r24, 0xFE	; 254
     874:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     878:	80 91 e2 00 	lds	r24, 0x00E2
     87c:	80 61       	ori	r24, 0x10	; 16
     87e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     882:	80 91 d8 00 	lds	r24, 0x00D8
     886:	80 62       	ori	r24, 0x20	; 32
     888:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     88c:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     88e:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
     890:	54 dd       	rcall	.-1368   	; 0x33a <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     892:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     896:	84 ff       	sbrs	r24, 4
     898:	2b c0       	rjmp	.+86     	; 0x8f0 <__vector_11+0xd0>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     89a:	80 91 e2 00 	lds	r24, 0x00E2
     89e:	84 ff       	sbrs	r24, 4
     8a0:	27 c0       	rjmp	.+78     	; 0x8f0 <__vector_11+0xd0>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8a2:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8a4:	82 e0       	ldi	r24, 0x02	; 2
     8a6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     8a8:	09 b4       	in	r0, 0x29	; 41
     8aa:	00 fe       	sbrs	r0, 0
     8ac:	fd cf       	rjmp	.-6      	; 0x8a8 <__vector_11+0x88>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     8ae:	80 91 d8 00 	lds	r24, 0x00D8
     8b2:	8f 7d       	andi	r24, 0xDF	; 223
     8b4:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     8b8:	80 91 e1 00 	lds	r24, 0x00E1
     8bc:	8f 7e       	andi	r24, 0xEF	; 239
     8be:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     8c2:	80 91 e2 00 	lds	r24, 0x00E2
     8c6:	8f 7e       	andi	r24, 0xEF	; 239
     8c8:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     8cc:	80 91 e2 00 	lds	r24, 0x00E2
     8d0:	81 60       	ori	r24, 0x01	; 1
     8d2:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     8d6:	80 91 af 01 	lds	r24, 0x01AF
     8da:	88 23       	and	r24, r24
     8dc:	21 f4       	brne	.+8      	; 0x8e6 <__vector_11+0xc6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     8de:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     8e2:	87 ff       	sbrs	r24, 7
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__vector_11+0xca>
     8e6:	84 e0       	ldi	r24, 0x04	; 4
     8e8:	01 c0       	rjmp	.+2      	; 0x8ec <__vector_11+0xcc>
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     8ee:	20 dd       	rcall	.-1472   	; 0x330 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     8f0:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     8f4:	83 ff       	sbrs	r24, 3
     8f6:	26 c0       	rjmp	.+76     	; 0x944 <__vector_11+0x124>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     8f8:	80 91 e2 00 	lds	r24, 0x00E2
     8fc:	83 ff       	sbrs	r24, 3
     8fe:	22 c0       	rjmp	.+68     	; 0x944 <__vector_11+0x124>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     900:	80 91 e1 00 	lds	r24, 0x00E1
     904:	87 7f       	andi	r24, 0xF7	; 247
     906:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     90a:	82 e0       	ldi	r24, 0x02	; 2
     90c:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
     90e:	10 92 af 01 	sts	0x01AF, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     912:	80 91 e1 00 	lds	r24, 0x00E1
     916:	8e 7f       	andi	r24, 0xFE	; 254
     918:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     91c:	80 91 e2 00 	lds	r24, 0x00E2
     920:	8e 7f       	andi	r24, 0xFE	; 254
     922:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     926:	80 91 e2 00 	lds	r24, 0x00E2
     92a:	80 61       	ori	r24, 0x10	; 16
     92c:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	42 e0       	ldi	r20, 0x02	; 2
     936:	84 de       	rcall	.-760    	; 0x640 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     938:	80 91 f0 00 	lds	r24, 0x00F0
     93c:	88 60       	ori	r24, 0x08	; 8
     93e:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     942:	ad d1       	rcall	.+858    	; 0xc9e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     944:	ff 91       	pop	r31
     946:	ef 91       	pop	r30
     948:	bf 91       	pop	r27
     94a:	af 91       	pop	r26
     94c:	9f 91       	pop	r25
     94e:	8f 91       	pop	r24
     950:	7f 91       	pop	r23
     952:	6f 91       	pop	r22
     954:	5f 91       	pop	r21
     956:	4f 91       	pop	r20
     958:	3f 91       	pop	r19
     95a:	2f 91       	pop	r18
     95c:	0f 90       	pop	r0
     95e:	0f be       	out	0x3f, r0	; 63
     960:	0f 90       	pop	r0
     962:	1f 90       	pop	r1
     964:	18 95       	reti

00000966 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     966:	1f 92       	push	r1
     968:	0f 92       	push	r0
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	0f 92       	push	r0
     96e:	11 24       	eor	r1, r1
     970:	1f 93       	push	r17
     972:	2f 93       	push	r18
     974:	3f 93       	push	r19
     976:	4f 93       	push	r20
     978:	5f 93       	push	r21
     97a:	6f 93       	push	r22
     97c:	7f 93       	push	r23
     97e:	8f 93       	push	r24
     980:	9f 93       	push	r25
     982:	af 93       	push	r26
     984:	bf 93       	push	r27
     986:	ef 93       	push	r30
     988:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     98a:	10 91 e9 00 	lds	r17, 0x00E9
     98e:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     990:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     994:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     998:	80 91 f0 00 	lds	r24, 0x00F0
     99c:	87 7f       	andi	r24, 0xF7	; 247
     99e:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     9a2:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     9a4:	1b d0       	rcall	.+54     	; 0x9dc <USB_Device_ProcessControlRequest>
     9a6:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     9aa:	80 91 f0 00 	lds	r24, 0x00F0
     9ae:	88 60       	ori	r24, 0x08	; 8
     9b0:	80 93 f0 00 	sts	0x00F0, r24
     9b4:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     9b8:	ff 91       	pop	r31
     9ba:	ef 91       	pop	r30
     9bc:	bf 91       	pop	r27
     9be:	af 91       	pop	r26
     9c0:	9f 91       	pop	r25
     9c2:	8f 91       	pop	r24
     9c4:	7f 91       	pop	r23
     9c6:	6f 91       	pop	r22
     9c8:	5f 91       	pop	r21
     9ca:	4f 91       	pop	r20
     9cc:	3f 91       	pop	r19
     9ce:	2f 91       	pop	r18
     9d0:	1f 91       	pop	r17
     9d2:	0f 90       	pop	r0
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	0f 90       	pop	r0
     9d8:	1f 90       	pop	r1
     9da:	18 95       	reti

000009dc <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     9dc:	1f 93       	push	r17
     9de:	df 93       	push	r29
     9e0:	cf 93       	push	r28
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	ac 97       	sbiw	r28, 0x2c	; 44
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     9f2:	e3 eb       	ldi	r30, 0xB3	; 179
     9f4:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     9f6:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     9fa:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     9fc:	21 e0       	ldi	r18, 0x01	; 1
     9fe:	eb 3b       	cpi	r30, 0xBB	; 187
     a00:	f2 07       	cpc	r31, r18
     a02:	c9 f7       	brne	.-14     	; 0x9f6 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     a04:	a9 dc       	rcall	.-1710   	; 0x358 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a06:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     a0a:	83 ff       	sbrs	r24, 3
     a0c:	30 c1       	rjmp	.+608    	; 0xc6e <USB_Device_ProcessControlRequest+0x292>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a0e:	80 91 b3 01 	lds	r24, 0x01B3

		switch (USB_ControlRequest.bRequest)
     a12:	20 91 b4 01 	lds	r18, 0x01B4
     a16:	25 30       	cpi	r18, 0x05	; 5
     a18:	09 f4       	brne	.+2      	; 0xa1c <USB_Device_ProcessControlRequest+0x40>
     a1a:	84 c0       	rjmp	.+264    	; 0xb24 <USB_Device_ProcessControlRequest+0x148>
     a1c:	26 30       	cpi	r18, 0x06	; 6
     a1e:	40 f4       	brcc	.+16     	; 0xa30 <USB_Device_ProcessControlRequest+0x54>
     a20:	21 30       	cpi	r18, 0x01	; 1
     a22:	a1 f1       	breq	.+104    	; 0xa8c <USB_Device_ProcessControlRequest+0xb0>
     a24:	21 30       	cpi	r18, 0x01	; 1
     a26:	70 f0       	brcs	.+28     	; 0xa44 <USB_Device_ProcessControlRequest+0x68>
     a28:	23 30       	cpi	r18, 0x03	; 3
     a2a:	09 f0       	breq	.+2      	; 0xa2e <USB_Device_ProcessControlRequest+0x52>
     a2c:	20 c1       	rjmp	.+576    	; 0xc6e <USB_Device_ProcessControlRequest+0x292>
     a2e:	2e c0       	rjmp	.+92     	; 0xa8c <USB_Device_ProcessControlRequest+0xb0>
     a30:	28 30       	cpi	r18, 0x08	; 8
     a32:	09 f4       	brne	.+2      	; 0xa36 <USB_Device_ProcessControlRequest+0x5a>
     a34:	ef c0       	rjmp	.+478    	; 0xc14 <USB_Device_ProcessControlRequest+0x238>
     a36:	29 30       	cpi	r18, 0x09	; 9
     a38:	09 f4       	brne	.+2      	; 0xa3c <USB_Device_ProcessControlRequest+0x60>
     a3a:	fe c0       	rjmp	.+508    	; 0xc38 <USB_Device_ProcessControlRequest+0x25c>
     a3c:	26 30       	cpi	r18, 0x06	; 6
     a3e:	09 f0       	breq	.+2      	; 0xa42 <USB_Device_ProcessControlRequest+0x66>
     a40:	16 c1       	rjmp	.+556    	; 0xc6e <USB_Device_ProcessControlRequest+0x292>
     a42:	92 c0       	rjmp	.+292    	; 0xb68 <USB_Device_ProcessControlRequest+0x18c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a44:	80 38       	cpi	r24, 0x80	; 128
     a46:	21 f0       	breq	.+8      	; 0xa50 <USB_Device_ProcessControlRequest+0x74>
     a48:	82 38       	cpi	r24, 0x82	; 130
     a4a:	09 f0       	breq	.+2      	; 0xa4e <USB_Device_ProcessControlRequest+0x72>
     a4c:	10 c1       	rjmp	.+544    	; 0xc6e <USB_Device_ProcessControlRequest+0x292>
     a4e:	08 c0       	rjmp	.+16     	; 0xa60 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     a50:	80 91 b0 01 	lds	r24, 0x01B0
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     a54:	90 91 b1 01 	lds	r25, 0x01B1
     a58:	99 23       	and	r25, r25
     a5a:	71 f0       	breq	.+28     	; 0xa78 <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a5c:	82 60       	ori	r24, 0x02	; 2
     a5e:	0c c0       	rjmp	.+24     	; 0xa78 <USB_Device_ProcessControlRequest+0x9c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a60:	80 91 b7 01 	lds	r24, 0x01B7
     a64:	8f 70       	andi	r24, 0x0F	; 15
     a66:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a6a:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	95 ff       	sbrs	r25, 5
     a72:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a74:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a78:	90 91 e8 00 	lds	r25, 0x00E8
     a7c:	97 7f       	andi	r25, 0xF7	; 247
     a7e:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     a82:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     a86:	10 92 f1 00 	sts	0x00F1, r1
     a8a:	cf c0       	rjmp	.+414    	; 0xc2a <USB_Device_ProcessControlRequest+0x24e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a8c:	88 23       	and	r24, r24
     a8e:	19 f0       	breq	.+6      	; 0xa96 <USB_Device_ProcessControlRequest+0xba>
     a90:	82 30       	cpi	r24, 0x02	; 2
     a92:	09 f0       	breq	.+2      	; 0xa96 <USB_Device_ProcessControlRequest+0xba>
     a94:	ec c0       	rjmp	.+472    	; 0xc6e <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	8f 71       	andi	r24, 0x1F	; 31
     a9a:	90 70       	andi	r25, 0x00	; 0
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	29 f0       	breq	.+10     	; 0xaaa <USB_Device_ProcessControlRequest+0xce>
     aa0:	82 30       	cpi	r24, 0x02	; 2
     aa2:	91 05       	cpc	r25, r1
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <USB_Device_ProcessControlRequest+0xcc>
     aa6:	e3 c0       	rjmp	.+454    	; 0xc6e <USB_Device_ProcessControlRequest+0x292>
     aa8:	0b c0       	rjmp	.+22     	; 0xac0 <USB_Device_ProcessControlRequest+0xe4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     aaa:	80 91 b5 01 	lds	r24, 0x01B5
     aae:	81 30       	cpi	r24, 0x01	; 1
     ab0:	09 f0       	breq	.+2      	; 0xab4 <USB_Device_ProcessControlRequest+0xd8>
     ab2:	dd c0       	rjmp	.+442    	; 0xc6e <USB_Device_ProcessControlRequest+0x292>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     ab4:	23 30       	cpi	r18, 0x03	; 3
     ab6:	09 f0       	breq	.+2      	; 0xaba <USB_Device_ProcessControlRequest+0xde>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	80 93 b1 01 	sts	0x01B1, r24
     abe:	2c c0       	rjmp	.+88     	; 0xb18 <USB_Device_ProcessControlRequest+0x13c>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     ac0:	80 91 b5 01 	lds	r24, 0x01B5
     ac4:	88 23       	and	r24, r24
     ac6:	41 f5       	brne	.+80     	; 0xb18 <USB_Device_ProcessControlRequest+0x13c>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     ac8:	20 91 b7 01 	lds	r18, 0x01B7
     acc:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     ace:	09 f4       	brne	.+2      	; 0xad2 <USB_Device_ProcessControlRequest+0xf6>
     ad0:	ce c0       	rjmp	.+412    	; 0xc6e <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ad2:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     ad6:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     ada:	80 ff       	sbrs	r24, 0
     adc:	1d c0       	rjmp	.+58     	; 0xb18 <USB_Device_ProcessControlRequest+0x13c>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     ade:	80 91 b4 01 	lds	r24, 0x01B4
     ae2:	83 30       	cpi	r24, 0x03	; 3
     ae4:	21 f4       	brne	.+8      	; 0xaee <USB_Device_ProcessControlRequest+0x112>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     ae6:	80 91 eb 00 	lds	r24, 0x00EB
     aea:	80 62       	ori	r24, 0x20	; 32
     aec:	13 c0       	rjmp	.+38     	; 0xb14 <USB_Device_ProcessControlRequest+0x138>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     aee:	80 91 eb 00 	lds	r24, 0x00EB
     af2:	80 61       	ori	r24, 0x10	; 16
     af4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <USB_Device_ProcessControlRequest+0x126>
     afe:	88 0f       	add	r24, r24
     b00:	99 1f       	adc	r25, r25
     b02:	2a 95       	dec	r18
     b04:	e2 f7       	brpl	.-8      	; 0xafe <USB_Device_ProcessControlRequest+0x122>
     b06:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     b0a:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b0e:	80 91 eb 00 	lds	r24, 0x00EB
     b12:	88 60       	ori	r24, 0x08	; 8
     b14:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b18:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b1c:	80 91 e8 00 	lds	r24, 0x00E8
     b20:	87 7f       	andi	r24, 0xF7	; 247
     b22:	86 c0       	rjmp	.+268    	; 0xc30 <USB_Device_ProcessControlRequest+0x254>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b24:	88 23       	and	r24, r24
     b26:	09 f0       	breq	.+2      	; 0xb2a <USB_Device_ProcessControlRequest+0x14e>
     b28:	a2 c0       	rjmp	.+324    	; 0xc6e <USB_Device_ProcessControlRequest+0x292>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     b2a:	10 91 b5 01 	lds	r17, 0x01B5
     b2e:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b30:	80 91 e3 00 	lds	r24, 0x00E3
     b34:	80 78       	andi	r24, 0x80	; 128
     b36:	81 2b       	or	r24, r17
     b38:	80 93 e3 00 	sts	0x00E3, r24
     b3c:	80 91 e8 00 	lds	r24, 0x00E8
     b40:	87 7f       	andi	r24, 0xF7	; 247
     b42:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     b46:	d4 dd       	rcall	.-1112   	; 0x6f0 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b48:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     b4c:	80 ff       	sbrs	r24, 0
     b4e:	fc cf       	rjmp	.-8      	; 0xb48 <USB_Device_ProcessControlRequest+0x16c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     b50:	80 91 e3 00 	lds	r24, 0x00E3
     b54:	80 68       	ori	r24, 0x80	; 128
     b56:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b5a:	11 23       	and	r17, r17
     b5c:	11 f0       	breq	.+4      	; 0xb62 <USB_Device_ProcessControlRequest+0x186>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	01 c0       	rjmp	.+2      	; 0xb64 <USB_Device_ProcessControlRequest+0x188>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	8e bb       	out	0x1e, r24	; 30
     b66:	83 c0       	rjmp	.+262    	; 0xc6e <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b68:	80 58       	subi	r24, 0x80	; 128
     b6a:	82 30       	cpi	r24, 0x02	; 2
     b6c:	08 f0       	brcs	.+2      	; 0xb70 <USB_Device_ProcessControlRequest+0x194>
     b6e:	7f c0       	rjmp	.+254    	; 0xc6e <USB_Device_ProcessControlRequest+0x292>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     b70:	80 91 b5 01 	lds	r24, 0x01B5
     b74:	90 91 b6 01 	lds	r25, 0x01B6
     b78:	23 e0       	ldi	r18, 0x03	; 3
     b7a:	8c 3d       	cpi	r24, 0xDC	; 220
     b7c:	92 07       	cpc	r25, r18
     b7e:	91 f5       	brne	.+100    	; 0xbe4 <USB_Device_ProcessControlRequest+0x208>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     b80:	83 e0       	ldi	r24, 0x03	; 3
     b82:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     b84:	8a e2       	ldi	r24, 0x2A	; 42
     b86:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b88:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b8a:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     b8c:	de 01       	movw	r26, r28
     b8e:	15 96       	adiw	r26, 0x05	; 5
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     b94:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b96:	61 e2       	ldi	r22, 0x21	; 33
     b98:	e4 2f       	mov	r30, r20
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	60 93 57 00 	sts	0x0057, r22
     ba0:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
     ba2:	80 ff       	sbrs	r24, 0
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <USB_Device_ProcessControlRequest+0x1d0>
					{
						SerialByte >>= 4;
     ba6:	e2 95       	swap	r30
     ba8:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     baa:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     bac:	ef 70       	andi	r30, 0x0F	; 15
     bae:	2e 2f       	mov	r18, r30
     bb0:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     bb2:	ea 30       	cpi	r30, 0x0A	; 10
     bb4:	18 f0       	brcs	.+6      	; 0xbbc <USB_Device_ProcessControlRequest+0x1e0>
     bb6:	29 5c       	subi	r18, 0xC9	; 201
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <USB_Device_ProcessControlRequest+0x1e4>
     bbc:	20 5d       	subi	r18, 0xD0	; 208
     bbe:	3f 4f       	sbci	r19, 0xFF	; 255
     bc0:	2d 93       	st	X+, r18
     bc2:	3d 93       	st	X+, r19
     bc4:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     bc6:	84 31       	cpi	r24, 0x14	; 20
     bc8:	91 05       	cpc	r25, r1
     bca:	31 f7       	brne	.-52     	; 0xb98 <USB_Device_ProcessControlRequest+0x1bc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     bcc:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bce:	80 91 e8 00 	lds	r24, 0x00E8
     bd2:	87 7f       	andi	r24, 0xF7	; 247
     bd4:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     bd8:	ce 01       	movw	r24, r28
     bda:	03 96       	adiw	r24, 0x03	; 3
     bdc:	6a e2       	ldi	r22, 0x2A	; 42
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	7a dc       	rcall	.-1804   	; 0x4d6 <Endpoint_Write_Control_Stream_LE>
     be2:	12 c0       	rjmp	.+36     	; 0xc08 <USB_Device_ProcessControlRequest+0x22c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     be4:	60 91 b7 01 	lds	r22, 0x01B7
     be8:	ae 01       	movw	r20, r28
     bea:	4f 5f       	subi	r20, 0xFF	; 255
     bec:	5f 4f       	sbci	r21, 0xFF	; 255
     bee:	46 dc       	rcall	.-1908   	; 0x47c <CALLBACK_USB_GetDescriptor>
     bf0:	bc 01       	movw	r22, r24
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <USB_Device_ProcessControlRequest+0x21c>
     bf6:	3b c0       	rjmp	.+118    	; 0xc6e <USB_Device_ProcessControlRequest+0x292>
     bf8:	80 91 e8 00 	lds	r24, 0x00E8
     bfc:	87 7f       	andi	r24, 0xF7	; 247
     bfe:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	9a 81       	ldd	r25, Y+2	; 0x02
     c06:	c1 dc       	rcall	.-1662   	; 0x58a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c08:	80 91 e8 00 	lds	r24, 0x00E8
     c0c:	8b 77       	andi	r24, 0x7B	; 123
     c0e:	80 93 e8 00 	sts	0x00E8, r24
     c12:	2d c0       	rjmp	.+90     	; 0xc6e <USB_Device_ProcessControlRequest+0x292>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c14:	80 38       	cpi	r24, 0x80	; 128
     c16:	59 f5       	brne	.+86     	; 0xc6e <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c18:	80 91 e8 00 	lds	r24, 0x00E8
     c1c:	87 7f       	andi	r24, 0xF7	; 247
     c1e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     c22:	80 91 af 01 	lds	r24, 0x01AF
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c26:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c2a:	80 91 e8 00 	lds	r24, 0x00E8
     c2e:	8e 77       	andi	r24, 0x7E	; 126
     c30:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     c34:	5d dd       	rcall	.-1350   	; 0x6f0 <Endpoint_ClearStatusStage>
     c36:	1b c0       	rjmp	.+54     	; 0xc6e <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c38:	88 23       	and	r24, r24
     c3a:	c9 f4       	brne	.+50     	; 0xc6e <USB_Device_ProcessControlRequest+0x292>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     c3c:	90 91 b5 01 	lds	r25, 0x01B5
     c40:	92 30       	cpi	r25, 0x02	; 2
     c42:	a8 f4       	brcc	.+42     	; 0xc6e <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c44:	80 91 e8 00 	lds	r24, 0x00E8
     c48:	87 7f       	andi	r24, 0xF7	; 247
     c4a:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c4e:	90 93 af 01 	sts	0x01AF, r25

	Endpoint_ClearStatusStage();
     c52:	4e dd       	rcall	.-1380   	; 0x6f0 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     c54:	80 91 af 01 	lds	r24, 0x01AF
     c58:	88 23       	and	r24, r24
     c5a:	21 f4       	brne	.+8      	; 0xc64 <USB_Device_ProcessControlRequest+0x288>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c5c:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c60:	87 ff       	sbrs	r24, 7
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <USB_Device_ProcessControlRequest+0x28c>
     c64:	84 e0       	ldi	r24, 0x04	; 4
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <USB_Device_ProcessControlRequest+0x28e>
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
     c6c:	6a db       	rcall	.-2348   	; 0x342 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c6e:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     c72:	83 ff       	sbrs	r24, 3
     c74:	0a c0       	rjmp	.+20     	; 0xc8a <USB_Device_ProcessControlRequest+0x2ae>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c76:	80 91 e8 00 	lds	r24, 0x00E8
     c7a:	87 7f       	andi	r24, 0xF7	; 247
     c7c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c80:	80 91 eb 00 	lds	r24, 0x00EB
     c84:	80 62       	ori	r24, 0x20	; 32
     c86:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     c8a:	ac 96       	adiw	r28, 0x2c	; 44
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     c9e:	08 95       	ret

00000ca0 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     ca0:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     ca2:	8e b3       	in	r24, 0x1e	; 30
     ca4:	88 23       	and	r24, r24
     ca6:	a9 f0       	breq	.+42     	; 0xcd2 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     ca8:	80 91 e9 00 	lds	r24, 0x00E9
     cac:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     cae:	90 91 ec 00 	lds	r25, 0x00EC
     cb2:	90 ff       	sbrs	r25, 0
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <USB_USBTask+0x1a>
     cb6:	10 e8       	ldi	r17, 0x80	; 128
     cb8:	01 c0       	rjmp	.+2      	; 0xcbc <USB_USBTask+0x1c>
     cba:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     cbc:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cbe:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cc2:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     cc6:	83 ff       	sbrs	r24, 3
     cc8:	01 c0       	rjmp	.+2      	; 0xccc <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
     cca:	88 de       	rcall	.-752    	; 0x9dc <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ccc:	1f 70       	andi	r17, 0x0F	; 15
     cce:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cdc:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     ce0:	83 ff       	sbrs	r24, 3
     ce2:	a2 c0       	rjmp	.+324    	; 0xe28 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     ce4:	88 81       	ld	r24, Y
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	20 91 b7 01 	lds	r18, 0x01B7
     cec:	30 91 b8 01 	lds	r19, 0x01B8
     cf0:	28 17       	cp	r18, r24
     cf2:	39 07       	cpc	r19, r25
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <CDC_Device_ProcessControlRequest+0x22>
     cf6:	98 c0       	rjmp	.+304    	; 0xe28 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	switch (USB_ControlRequest.bRequest)
     cf8:	80 91 b4 01 	lds	r24, 0x01B4
     cfc:	81 32       	cpi	r24, 0x21	; 33
     cfe:	69 f0       	breq	.+26     	; 0xd1a <CDC_Device_ProcessControlRequest+0x44>
     d00:	82 32       	cpi	r24, 0x22	; 34
     d02:	20 f4       	brcc	.+8      	; 0xd0c <CDC_Device_ProcessControlRequest+0x36>
     d04:	80 32       	cpi	r24, 0x20	; 32
     d06:	09 f0       	breq	.+2      	; 0xd0a <CDC_Device_ProcessControlRequest+0x34>
     d08:	8f c0       	rjmp	.+286    	; 0xe28 <CDC_Device_ProcessControlRequest+0x152>
     d0a:	3c c0       	rjmp	.+120    	; 0xd84 <CDC_Device_ProcessControlRequest+0xae>
     d0c:	82 32       	cpi	r24, 0x22	; 34
     d0e:	09 f4       	brne	.+2      	; 0xd12 <CDC_Device_ProcessControlRequest+0x3c>
     d10:	6a c0       	rjmp	.+212    	; 0xde6 <CDC_Device_ProcessControlRequest+0x110>
     d12:	83 32       	cpi	r24, 0x23	; 35
     d14:	09 f0       	breq	.+2      	; 0xd18 <CDC_Device_ProcessControlRequest+0x42>
     d16:	88 c0       	rjmp	.+272    	; 0xe28 <CDC_Device_ProcessControlRequest+0x152>
     d18:	79 c0       	rjmp	.+242    	; 0xe0c <CDC_Device_ProcessControlRequest+0x136>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     d1a:	80 91 b3 01 	lds	r24, 0x01B3
     d1e:	81 3a       	cpi	r24, 0xA1	; 161
     d20:	09 f0       	breq	.+2      	; 0xd24 <CDC_Device_ProcessControlRequest+0x4e>
     d22:	82 c0       	rjmp	.+260    	; 0xe28 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d24:	80 91 e8 00 	lds	r24, 0x00E8
     d28:	87 7f       	andi	r24, 0xF7	; 247
     d2a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d2e:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     d32:	80 ff       	sbrs	r24, 0
     d34:	fc cf       	rjmp	.-8      	; 0xd2e <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     d36:	8c 89       	ldd	r24, Y+20	; 0x14
     d38:	9d 89       	ldd	r25, Y+21	; 0x15
     d3a:	ae 89       	ldd	r26, Y+22	; 0x16
     d3c:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     d3e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     d42:	29 2f       	mov	r18, r25
     d44:	3a 2f       	mov	r19, r26
     d46:	4b 2f       	mov	r20, r27
     d48:	55 27       	eor	r21, r21
     d4a:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
     d4e:	9d 01       	movw	r18, r26
     d50:	44 27       	eor	r20, r20
     d52:	55 27       	eor	r21, r21
     d54:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
     d58:	8b 2f       	mov	r24, r27
     d5a:	99 27       	eor	r25, r25
     d5c:	aa 27       	eor	r26, r26
     d5e:	bb 27       	eor	r27, r27
     d60:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     d64:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d66:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     d6a:	89 8d       	ldd	r24, Y+25	; 0x19
     d6c:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     d70:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d72:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d76:	80 91 e8 00 	lds	r24, 0x00E8
     d7a:	8e 77       	andi	r24, 0x7E	; 126
     d7c:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     d80:	b7 dc       	rcall	.-1682   	; 0x6f0 <Endpoint_ClearStatusStage>
     d82:	52 c0       	rjmp	.+164    	; 0xe28 <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     d84:	80 91 b3 01 	lds	r24, 0x01B3
     d88:	81 32       	cpi	r24, 0x21	; 33
     d8a:	09 f0       	breq	.+2      	; 0xd8e <CDC_Device_ProcessControlRequest+0xb8>
     d8c:	4d c0       	rjmp	.+154    	; 0xe28 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d8e:	80 91 e8 00 	lds	r24, 0x00E8
     d92:	87 7f       	andi	r24, 0xF7	; 247
     d94:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     d98:	04 c0       	rjmp	.+8      	; 0xda2 <CDC_Device_ProcessControlRequest+0xcc>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     d9a:	8e b3       	in	r24, 0x1e	; 30
     d9c:	88 23       	and	r24, r24
     d9e:	09 f4       	brne	.+2      	; 0xda2 <CDC_Device_ProcessControlRequest+0xcc>
     da0:	43 c0       	rjmp	.+134    	; 0xe28 <CDC_Device_ProcessControlRequest+0x152>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     da2:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     da6:	82 ff       	sbrs	r24, 2
     da8:	f8 cf       	rjmp	.-16     	; 0xd9a <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     daa:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
     dae:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
     db2:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
     db6:	80 91 f1 00 	lds	r24, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     dba:	3c 8b       	std	Y+20, r19	; 0x14
     dbc:	2d 8b       	std	Y+21, r18	; 0x15
     dbe:	9e 8b       	std	Y+22, r25	; 0x16
     dc0:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     dc2:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     dc6:	88 8f       	std	Y+24, r24	; 0x18
     dc8:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     dcc:	89 8f       	std	Y+25, r24	; 0x19
     dce:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     dd2:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dd4:	80 91 e8 00 	lds	r24, 0x00E8
     dd8:	8b 77       	andi	r24, 0x7B	; 123
     dda:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     dde:	88 dc       	rcall	.-1776   	; 0x6f0 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     de0:	ce 01       	movw	r24, r28
     de2:	bd da       	rcall	.-2694   	; 0x35e <EVENT_CDC_Device_LineEncodingChanged>
     de4:	21 c0       	rjmp	.+66     	; 0xe28 <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     de6:	80 91 b3 01 	lds	r24, 0x01B3
     dea:	81 32       	cpi	r24, 0x21	; 33
     dec:	e9 f4       	brne	.+58     	; 0xe28 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dee:	80 91 e8 00 	lds	r24, 0x00E8
     df2:	87 7f       	andi	r24, 0xF7	; 247
     df4:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     df8:	7b dc       	rcall	.-1802   	; 0x6f0 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     dfa:	80 91 b5 01 	lds	r24, 0x01B5
     dfe:	90 91 b6 01 	lds	r25, 0x01B6
     e02:	99 8b       	std	Y+17, r25	; 0x11
     e04:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     e06:	ce 01       	movw	r24, r28
     e08:	25 db       	rcall	.-2486   	; 0x454 <EVENT_CDC_Device_ControLineStateChanged>
     e0a:	0e c0       	rjmp	.+28     	; 0xe28 <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e0c:	80 91 b3 01 	lds	r24, 0x01B3
     e10:	81 32       	cpi	r24, 0x21	; 33
     e12:	51 f4       	brne	.+20     	; 0xe28 <CDC_Device_ProcessControlRequest+0x152>
     e14:	80 91 e8 00 	lds	r24, 0x00E8
     e18:	87 7f       	andi	r24, 0xF7	; 247
     e1a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e1e:	68 dc       	rcall	.-1840   	; 0x6f0 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     e20:	ce 01       	movw	r24, r28
     e22:	60 91 b5 01 	lds	r22, 0x01B5
     e26:	ec d0       	rcall	.+472    	; 0x1000 <CDC_Device_Event_Stub>
			}

			break;
	}
}
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	08 95       	ret

00000e2e <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     e34:	40 96       	adiw	r24, 0x10	; 16
     e36:	fc 01       	movw	r30, r24
     e38:	8b e0       	ldi	r24, 0x0B	; 11
     e3a:	df 01       	movw	r26, r30
     e3c:	1d 92       	st	X+, r1
     e3e:	8a 95       	dec	r24
     e40:	e9 f7       	brne	.-6      	; 0xe3c <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     e46:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     e4c:	ce 01       	movw	r24, r28
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	0a dc       	rcall	.-2028   	; 0x668 <Endpoint_ConfigureEndpointTable>
     e54:	88 23       	and	r24, r24
     e56:	59 f0       	breq	.+22     	; 0xe6e <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     e58:	ce 01       	movw	r24, r28
     e5a:	06 96       	adiw	r24, 0x06	; 6
     e5c:	61 e0       	ldi	r22, 0x01	; 1
     e5e:	04 dc       	rcall	.-2040   	; 0x668 <Endpoint_ConfigureEndpointTable>
     e60:	88 23       	and	r24, r24
     e62:	29 f0       	breq	.+10     	; 0xe6e <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     e64:	ce 01       	movw	r24, r28
     e66:	0b 96       	adiw	r24, 0x0b	; 11
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	fe db       	rcall	.-2052   	; 0x668 <Endpoint_ConfigureEndpointTable>
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <CDC_Device_ConfigureEndpoints+0x42>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
     e6e:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	08 95       	ret

00000e76 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	0f 92       	push	r0
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e82:	8e b3       	in	r24, 0x1e	; 30
     e84:	84 30       	cpi	r24, 0x04	; 4
     e86:	f9 f4       	brne	.+62     	; 0xec6 <CDC_Device_SendByte+0x50>
     e88:	24 89       	ldd	r18, Z+20	; 0x14
     e8a:	35 89       	ldd	r19, Z+21	; 0x15
     e8c:	46 89       	ldd	r20, Z+22	; 0x16
     e8e:	57 89       	ldd	r21, Z+23	; 0x17
     e90:	21 15       	cp	r18, r1
     e92:	31 05       	cpc	r19, r1
     e94:	41 05       	cpc	r20, r1
     e96:	51 05       	cpc	r21, r1
     e98:	b1 f0       	breq	.+44     	; 0xec6 <CDC_Device_SendByte+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e9a:	81 81       	ldd	r24, Z+1	; 0x01
     e9c:	8f 70       	andi	r24, 0x0F	; 15
     e9e:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ea2:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     ea6:	85 fd       	sbrc	r24, 5
     ea8:	0a c0       	rjmp	.+20     	; 0xebe <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     eaa:	80 91 e8 00 	lds	r24, 0x00E8
     eae:	8e 77       	andi	r24, 0x7E	; 126
     eb0:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     eb4:	69 83       	std	Y+1, r22	; 0x01
     eb6:	3b dc       	rcall	.-1930   	; 0x72e <Endpoint_WaitUntilReady>
     eb8:	69 81       	ldd	r22, Y+1	; 0x01
     eba:	88 23       	and	r24, r24
     ebc:	29 f4       	brne	.+10     	; 0xec8 <CDC_Device_SendByte+0x52>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ebe:	60 93 f1 00 	sts	0x00F1, r22
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	01 c0       	rjmp	.+2      	; 0xec8 <CDC_Device_SendByte+0x52>

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     ec6:	82 e0       	ldi	r24, 0x02	; 2
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     ed0:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     ed2:	8e b3       	in	r24, 0x1e	; 30
     ed4:	84 30       	cpi	r24, 0x04	; 4
     ed6:	19 f5       	brne	.+70     	; 0xf1e <CDC_Device_Flush+0x4e>
     ed8:	24 89       	ldd	r18, Z+20	; 0x14
     eda:	35 89       	ldd	r19, Z+21	; 0x15
     edc:	46 89       	ldd	r20, Z+22	; 0x16
     ede:	57 89       	ldd	r21, Z+23	; 0x17
     ee0:	21 15       	cp	r18, r1
     ee2:	31 05       	cpc	r19, r1
     ee4:	41 05       	cpc	r20, r1
     ee6:	51 05       	cpc	r21, r1
     ee8:	d1 f0       	breq	.+52     	; 0xf1e <CDC_Device_Flush+0x4e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     eea:	81 81       	ldd	r24, Z+1	; 0x01
     eec:	8f 70       	andi	r24, 0x0F	; 15
     eee:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     ef2:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     ef6:	88 23       	and	r24, r24
     ef8:	a1 f0       	breq	.+40     	; 0xf22 <CDC_Device_Flush+0x52>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     efa:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     efe:	80 91 e8 00 	lds	r24, 0x00E8
     f02:	8e 77       	andi	r24, 0x7E	; 126
     f04:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     f08:	95 fd       	sbrc	r25, 5
     f0a:	0d c0       	rjmp	.+26     	; 0xf26 <CDC_Device_Flush+0x56>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     f0c:	10 dc       	rcall	.-2016   	; 0x72e <Endpoint_WaitUntilReady>
     f0e:	88 23       	and	r24, r24
     f10:	59 f4       	brne	.+22     	; 0xf28 <CDC_Device_Flush+0x58>
     f12:	90 91 e8 00 	lds	r25, 0x00E8
     f16:	9e 77       	andi	r25, 0x7E	; 126
     f18:	90 93 e8 00 	sts	0x00E8, r25
     f1c:	08 95       	ret
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     f1e:	82 e0       	ldi	r24, 0x02	; 2
     f20:	08 95       	ret
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	08 95       	ret
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
     f26:	80 e0       	ldi	r24, 0x00	; 0
}
     f28:	08 95       	ret

00000f2a <CDC_Device_USBTask>:
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f2a:	2e b3       	in	r18, 0x1e	; 30
     f2c:	24 30       	cpi	r18, 0x04	; 4
     f2e:	99 f4       	brne	.+38     	; 0xf56 <CDC_Device_USBTask+0x2c>
     f30:	fc 01       	movw	r30, r24
     f32:	24 89       	ldd	r18, Z+20	; 0x14
     f34:	35 89       	ldd	r19, Z+21	; 0x15
     f36:	46 89       	ldd	r20, Z+22	; 0x16
     f38:	57 89       	ldd	r21, Z+23	; 0x17
     f3a:	21 15       	cp	r18, r1
     f3c:	31 05       	cpc	r19, r1
     f3e:	41 05       	cpc	r20, r1
     f40:	51 05       	cpc	r21, r1
     f42:	49 f0       	breq	.+18     	; 0xf56 <CDC_Device_USBTask+0x2c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f44:	21 81       	ldd	r18, Z+1	; 0x01
     f46:	2f 70       	andi	r18, 0x0F	; 15
     f48:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f4c:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
     f50:	20 ff       	sbrs	r18, 0
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <CDC_Device_USBTask+0x2c>
	  CDC_Device_Flush(CDCInterfaceInfo);
     f54:	bd cf       	rjmp	.-134    	; 0xed0 <CDC_Device_Flush>
     f56:	08 95       	ret

00000f58 <CDC_Device_BytesReceived>:

	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f58:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f5a:	8e b3       	in	r24, 0x1e	; 30
     f5c:	84 30       	cpi	r24, 0x04	; 4
     f5e:	f9 f4       	brne	.+62     	; 0xf9e <CDC_Device_BytesReceived+0x46>
     f60:	24 89       	ldd	r18, Z+20	; 0x14
     f62:	35 89       	ldd	r19, Z+21	; 0x15
     f64:	46 89       	ldd	r20, Z+22	; 0x16
     f66:	57 89       	ldd	r21, Z+23	; 0x17
     f68:	21 15       	cp	r18, r1
     f6a:	31 05       	cpc	r19, r1
     f6c:	41 05       	cpc	r20, r1
     f6e:	51 05       	cpc	r21, r1
     f70:	b1 f0       	breq	.+44     	; 0xf9e <CDC_Device_BytesReceived+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f72:	86 81       	ldd	r24, Z+6	; 0x06
     f74:	8f 70       	andi	r24, 0x0F	; 15
     f76:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f7a:	80 91 e8 00 	lds	r24, 0x00E8
	  return 0;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     f7e:	82 ff       	sbrs	r24, 2
     f80:	0e c0       	rjmp	.+28     	; 0xf9e <CDC_Device_BytesReceived+0x46>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     f82:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (!(Endpoint_BytesInEndpoint()))
     f86:	88 23       	and	r24, r24
     f88:	31 f4       	brne	.+12     	; 0xf96 <CDC_Device_BytesReceived+0x3e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f8a:	80 91 e8 00 	lds	r24, 0x00E8
     f8e:	8b 77       	andi	r24, 0x7B	; 123
     f90:	80 93 e8 00 	sts	0x00E8, r24
     f94:	04 c0       	rjmp	.+8      	; 0xf9e <CDC_Device_BytesReceived+0x46>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     f96:	20 91 f2 00 	lds	r18, 0x00F2
     f9a:	30 e0       	ldi	r19, 0x00	; 0
			Endpoint_ClearOUT();
			return 0;
		}
		else
		{
			return Endpoint_BytesInEndpoint();
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <CDC_Device_BytesReceived+0x4a>
		}
	}
	else
	{
		return 0;
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
	}
}
     fa2:	c9 01       	movw	r24, r18
     fa4:	08 95       	ret

00000fa6 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     fa6:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     fa8:	8e b3       	in	r24, 0x1e	; 30
     faa:	84 30       	cpi	r24, 0x04	; 4
     fac:	29 f5       	brne	.+74     	; 0xff8 <CDC_Device_ReceiveByte+0x52>
     fae:	24 89       	ldd	r18, Z+20	; 0x14
     fb0:	35 89       	ldd	r19, Z+21	; 0x15
     fb2:	46 89       	ldd	r20, Z+22	; 0x16
     fb4:	57 89       	ldd	r21, Z+23	; 0x17
     fb6:	21 15       	cp	r18, r1
     fb8:	31 05       	cpc	r19, r1
     fba:	41 05       	cpc	r20, r1
     fbc:	51 05       	cpc	r21, r1
     fbe:	e1 f0       	breq	.+56     	; 0xff8 <CDC_Device_ReceiveByte+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fc0:	86 81       	ldd	r24, Z+6	; 0x06
     fc2:	8f 70       	andi	r24, 0x0F	; 15
     fc4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fc8:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     fcc:	82 ff       	sbrs	r24, 2
     fce:	14 c0       	rjmp	.+40     	; 0xff8 <CDC_Device_ReceiveByte+0x52>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     fd0:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
     fd4:	88 23       	and	r24, r24
     fd6:	21 f0       	breq	.+8      	; 0xfe0 <CDC_Device_ReceiveByte+0x3a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     fd8:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <CDC_Device_ReceiveByte+0x3e>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
     fe0:	2f ef       	ldi	r18, 0xFF	; 255
     fe2:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     fe4:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
     fe8:	88 23       	and	r24, r24
     fea:	41 f4       	brne	.+16     	; 0xffc <CDC_Device_ReceiveByte+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     fec:	80 91 e8 00 	lds	r24, 0x00E8
     ff0:	8b 77       	andi	r24, 0x7B	; 123
     ff2:	80 93 e8 00 	sts	0x00E8, r24
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <CDC_Device_ReceiveByte+0x56>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
     ff8:	2f ef       	ldi	r18, 0xFF	; 255
     ffa:	3f ef       	ldi	r19, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     ffc:	c9 01       	movw	r24, r18
     ffe:	08 95       	ret

00001000 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    1000:	08 95       	ret

00001002 <__udivmodsi4>:
    1002:	a1 e2       	ldi	r26, 0x21	; 33
    1004:	1a 2e       	mov	r1, r26
    1006:	aa 1b       	sub	r26, r26
    1008:	bb 1b       	sub	r27, r27
    100a:	fd 01       	movw	r30, r26
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <__udivmodsi4_ep>

0000100e <__udivmodsi4_loop>:
    100e:	aa 1f       	adc	r26, r26
    1010:	bb 1f       	adc	r27, r27
    1012:	ee 1f       	adc	r30, r30
    1014:	ff 1f       	adc	r31, r31
    1016:	a2 17       	cp	r26, r18
    1018:	b3 07       	cpc	r27, r19
    101a:	e4 07       	cpc	r30, r20
    101c:	f5 07       	cpc	r31, r21
    101e:	20 f0       	brcs	.+8      	; 0x1028 <__udivmodsi4_ep>
    1020:	a2 1b       	sub	r26, r18
    1022:	b3 0b       	sbc	r27, r19
    1024:	e4 0b       	sbc	r30, r20
    1026:	f5 0b       	sbc	r31, r21

00001028 <__udivmodsi4_ep>:
    1028:	66 1f       	adc	r22, r22
    102a:	77 1f       	adc	r23, r23
    102c:	88 1f       	adc	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	1a 94       	dec	r1
    1032:	69 f7       	brne	.-38     	; 0x100e <__udivmodsi4_loop>
    1034:	60 95       	com	r22
    1036:	70 95       	com	r23
    1038:	80 95       	com	r24
    103a:	90 95       	com	r25
    103c:	9b 01       	movw	r18, r22
    103e:	ac 01       	movw	r20, r24
    1040:	bd 01       	movw	r22, r26
    1042:	cf 01       	movw	r24, r30
    1044:	08 95       	ret

00001046 <_exit>:
    1046:	f8 94       	cli

00001048 <__stop_program>:
    1048:	ff cf       	rjmp	.-2      	; 0x1048 <__stop_program>
