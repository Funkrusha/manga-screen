
VirtualSerialMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  000015e0  00001674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080018a  0080018a  000016fe  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001700  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00002198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004a8  00000000  00000000  00002307  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000d3c  00000000  00000000  000027af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008a37  00000000  00000000  000034eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000020b0  00000000  00000000  0000bf22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007108  00000000  00000000  0000dfd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000710  00000000  00000000  000150dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003d9b  00000000  00000000  000157ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000424e  00000000  00000000  00019587  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001188  00000000  00000000  0001d7d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000700  00000000  00000000  0001e95d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
       0:	d3 c0       	rjmp	.+422    	; 0x1a8 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
       4:	ed c0       	rjmp	.+474    	; 0x1e0 <__bad_interrupt>
       6:	00 00       	nop
       8:	eb c0       	rjmp	.+470    	; 0x1e0 <__bad_interrupt>
       a:	00 00       	nop
       c:	e9 c0       	rjmp	.+466    	; 0x1e0 <__bad_interrupt>
       e:	00 00       	nop
      10:	e7 c0       	rjmp	.+462    	; 0x1e0 <__bad_interrupt>
      12:	00 00       	nop
      14:	e5 c0       	rjmp	.+458    	; 0x1e0 <__bad_interrupt>
      16:	00 00       	nop
      18:	e3 c0       	rjmp	.+454    	; 0x1e0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e1 c0       	rjmp	.+450    	; 0x1e0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	df c0       	rjmp	.+446    	; 0x1e0 <__bad_interrupt>
      22:	00 00       	nop
      24:	dd c0       	rjmp	.+442    	; 0x1e0 <__bad_interrupt>
      26:	00 00       	nop
      28:	97 c4       	rjmp	.+2350   	; 0x958 <__vector_10>
      2a:	00 00       	nop
      2c:	5e c5       	rjmp	.+2748   	; 0xaea <__vector_11>
      2e:	00 00       	nop
      30:	d7 c0       	rjmp	.+430    	; 0x1e0 <__bad_interrupt>
      32:	00 00       	nop
      34:	d5 c0       	rjmp	.+426    	; 0x1e0 <__bad_interrupt>
      36:	00 00       	nop
      38:	d3 c0       	rjmp	.+422    	; 0x1e0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d1 c0       	rjmp	.+418    	; 0x1e0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	cf c0       	rjmp	.+414    	; 0x1e0 <__bad_interrupt>
      42:	00 00       	nop
      44:	cd c0       	rjmp	.+410    	; 0x1e0 <__bad_interrupt>
      46:	00 00       	nop
      48:	cb c0       	rjmp	.+406    	; 0x1e0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c9 c0       	rjmp	.+402    	; 0x1e0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c7 c0       	rjmp	.+398    	; 0x1e0 <__bad_interrupt>
      52:	00 00       	nop
      54:	c5 c0       	rjmp	.+394    	; 0x1e0 <__bad_interrupt>
      56:	00 00       	nop
      58:	c3 c0       	rjmp	.+390    	; 0x1e0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c1 c0       	rjmp	.+386    	; 0x1e0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	bf c0       	rjmp	.+382    	; 0x1e0 <__bad_interrupt>
      62:	00 00       	nop
      64:	bd c0       	rjmp	.+378    	; 0x1e0 <__bad_interrupt>
      66:	00 00       	nop
      68:	bb c0       	rjmp	.+374    	; 0x1e0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b9 c0       	rjmp	.+370    	; 0x1e0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b7 c0       	rjmp	.+366    	; 0x1e0 <__bad_interrupt>
      72:	00 00       	nop
      74:	b5 c0       	rjmp	.+362    	; 0x1e0 <__bad_interrupt>
      76:	00 00       	nop
      78:	b3 c0       	rjmp	.+358    	; 0x1e0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b1 c0       	rjmp	.+354    	; 0x1e0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	af c0       	rjmp	.+350    	; 0x1e0 <__bad_interrupt>
      82:	00 00       	nop
      84:	ad c0       	rjmp	.+346    	; 0x1e0 <__bad_interrupt>
      86:	00 00       	nop
      88:	ab c0       	rjmp	.+342    	; 0x1e0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a9 c0       	rjmp	.+338    	; 0x1e0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a7 c0       	rjmp	.+334    	; 0x1e0 <__bad_interrupt>
      92:	00 00       	nop
      94:	a5 c0       	rjmp	.+330    	; 0x1e0 <__bad_interrupt>
      96:	00 00       	nop
      98:	a3 c0       	rjmp	.+326    	; 0x1e0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	a1 c0       	rjmp	.+322    	; 0x1e0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	9f c0       	rjmp	.+318    	; 0x1e0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	9d c0       	rjmp	.+314    	; 0x1e0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	9b c0       	rjmp	.+310    	; 0x1e0 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <MouseReport>:
      ac:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
      bc:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
      cc:	05 01 09 30 09 31 16 ff ff 26 01 00 36 ff ff 46     ...0.1...&..6..F
      dc:	01 00 95 02 75 08 81 06 c0 c0                       ....u.....

000000e6 <DeviceDescriptor>:
      e6:	12 01 10 01 ef 02 01 08 eb 03 62 20 01 00 01 02     ..........b ....
      f6:	dc 01                                               ..

000000f8 <ConfigurationDescriptor>:
      f8:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
     108:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
     118:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
     128:	04 01 00 02 0a 00 00 00 07 05 04 02 10 00 05 07     ................
     138:	05 83 02 10 00 05 09 04 02 00 01 03 01 02 00 09     ................
     148:	21 11 01 00 01 22 3a 00 07 05 81 03 08 00 05        !....":........

00000157 <LanguageString>:
     157:	04 03 09 04                                         ....

0000015b <ManufacturerString>:
     15b:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     16b:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000175 <ProductString>:
     175:	30 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     0.L.U.F.A. .C.D.
     185:	43 00 20 00 61 00 6e 00 64 00 20 00 4d 00 6f 00     C. .a.n.d. .M.o.
     195:	75 00 73 00 65 00 20 00 44 00 65 00 6d 00 6f 00     u.s.e. .D.e.m.o.
     1a5:	00 00 00                                            ...

000001a8 <__ctors_end>:
     1a8:	11 24       	eor	r1, r1
     1aa:	1f be       	out	0x3f, r1	; 63
     1ac:	cf ef       	ldi	r28, 0xFF	; 255
     1ae:	da e0       	ldi	r29, 0x0A	; 10
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	cd bf       	out	0x3d, r28	; 61

000001b4 <__do_copy_data>:
     1b4:	11 e0       	ldi	r17, 0x01	; 1
     1b6:	a0 e0       	ldi	r26, 0x00	; 0
     1b8:	b1 e0       	ldi	r27, 0x01	; 1
     1ba:	e0 ee       	ldi	r30, 0xE0	; 224
     1bc:	f5 e1       	ldi	r31, 0x15	; 21
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <__do_copy_data+0x10>
     1c0:	05 90       	lpm	r0, Z+
     1c2:	0d 92       	st	X+, r0
     1c4:	aa 38       	cpi	r26, 0x8A	; 138
     1c6:	b1 07       	cpc	r27, r17
     1c8:	d9 f7       	brne	.-10     	; 0x1c0 <__do_copy_data+0xc>

000001ca <__do_clear_bss>:
     1ca:	11 e0       	ldi	r17, 0x01	; 1
     1cc:	aa e8       	ldi	r26, 0x8A	; 138
     1ce:	b1 e0       	ldi	r27, 0x01	; 1
     1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <.do_clear_bss_start>

000001d2 <.do_clear_bss_loop>:
     1d2:	1d 92       	st	X+, r1

000001d4 <.do_clear_bss_start>:
     1d4:	ab 39       	cpi	r26, 0x9B	; 155
     1d6:	b1 07       	cpc	r27, r17
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <.do_clear_bss_loop>
     1da:	70 d0       	rcall	.+224    	; 0x2bc <main>
     1dc:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0f cf       	rjmp	.-482    	; 0x0 <__vectors>

000001e2 <LEDs_SetAllLEDs>:
				PORTB &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB  = ((PORTB & ~LEDS_ALL_LEDS) | LEDMask);
     1e2:	95 b1       	in	r25, 0x05	; 5
     1e4:	9f 77       	andi	r25, 0x7F	; 127
     1e6:	98 2b       	or	r25, r24
     1e8:	95 b9       	out	0x05, r25	; 5
			}
     1ea:	08 95       	ret

000001ec <Joystick_GetStatus>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     1ec:	23 b1       	in	r18, 0x03	; 3
     1ee:	8c b1       	in	r24, 0x0c	; 12
     1f0:	80 95       	com	r24
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	80 73       	andi	r24, 0x30	; 48
     1f6:	90 70       	andi	r25, 0x00	; 0
     1f8:	95 95       	asr	r25
     1fa:	87 95       	ror	r24
     1fc:	20 95       	com	r18
     1fe:	20 7e       	andi	r18, 0xE0	; 224
			}
     200:	82 2b       	or	r24, r18
     202:	08 95       	ret

00000204 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     204:	84 b7       	in	r24, 0x34	; 52
     206:	87 7f       	andi	r24, 0xF7	; 247
     208:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     20a:	88 e1       	ldi	r24, 0x18	; 24
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	f8 94       	cli
     210:	80 93 60 00 	sts	0x0060, r24
     214:	10 92 60 00 	sts	0x0060, r1
     218:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	80 e8       	ldi	r24, 0x80	; 128
     21e:	0f b6       	in	r0, 0x3f	; 63
     220:	f8 94       	cli
     222:	80 93 61 00 	sts	0x0061, r24
     226:	90 93 61 00 	sts	0x0061, r25
     22a:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     22c:	84 b1       	in	r24, 0x04	; 4
     22e:	8f 71       	andi	r24, 0x1F	; 31
     230:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     232:	8d b1       	in	r24, 0x0d	; 13
     234:	8f 7c       	andi	r24, 0xCF	; 207
     236:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     238:	85 b1       	in	r24, 0x05	; 5
     23a:	80 6e       	ori	r24, 0xE0	; 224
     23c:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     23e:	8e b1       	in	r24, 0x0e	; 14
     240:	80 63       	ori	r24, 0x30	; 48
     242:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_ALL_LEDS;
     244:	27 9a       	sbi	0x04, 7	; 4
				PORTB &= ~LEDS_ALL_LEDS;
     246:	2f 98       	cbi	0x05, 7	; 5
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
     248:	6a d3       	rcall	.+1748   	; 0x91e <USB_Init>
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     24a:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     24c:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     24e:	84 b1       	in	r24, 0x04	; 4
     250:	86 60       	ori	r24, 0x06	; 6
     252:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     254:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     256:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     258:	8d b5       	in	r24, 0x2d	; 45
     25a:	81 60       	ori	r24, 0x01	; 1
     25c:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     25e:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     260:	8c e5       	ldi	r24, 0x5C	; 92
     262:	8c bd       	out	0x2c, r24	; 44
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
}
     264:	08 95       	ret

00000266 <CheckJoystickMovement>:

/** Checks for changes in the position of the board joystick, sending strings to the host upon each change. */
void CheckJoystickMovement(void)
{
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
     266:	c2 df       	rcall	.-124    	; 0x1ec <Joystick_GetStatus>
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
     268:	87 fd       	sbrc	r24, 7
     26a:	0b c0       	rjmp	.+22     	; 0x282 <CheckJoystickMovement+0x1c>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
     26c:	84 fd       	sbrc	r24, 4
     26e:	0c c0       	rjmp	.+24     	; 0x288 <CheckJoystickMovement+0x22>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
     270:	86 fd       	sbrc	r24, 6
     272:	0d c0       	rjmp	.+26     	; 0x28e <CheckJoystickMovement+0x28>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
     274:	83 fd       	sbrc	r24, 3
     276:	0e c0       	rjmp	.+28     	; 0x294 <CheckJoystickMovement+0x2e>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
     278:	85 fd       	sbrc	r24, 5
     27a:	0f c0       	rjmp	.+30     	; 0x29a <CheckJoystickMovement+0x34>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
     27c:	10 92 8a 01 	sts	0x018A, r1
     280:	18 c0       	rjmp	.+48     	; 0x2b2 <CheckJoystickMovement+0x4c>
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
	  ReportString = "Joystick Up\r\n";
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	71 e0       	ldi	r23, 0x01	; 1
     286:	0b c0       	rjmp	.+22     	; 0x29e <CheckJoystickMovement+0x38>
	else if (JoyStatus_LCL & JOY_DOWN)
	  ReportString = "Joystick Down\r\n";
     288:	6e e0       	ldi	r22, 0x0E	; 14
     28a:	71 e0       	ldi	r23, 0x01	; 1
     28c:	08 c0       	rjmp	.+16     	; 0x29e <CheckJoystickMovement+0x38>
	else if (JoyStatus_LCL & JOY_LEFT)
	  ReportString = "Joystick Left\r\n";
     28e:	6e e1       	ldi	r22, 0x1E	; 30
     290:	71 e0       	ldi	r23, 0x01	; 1
     292:	05 c0       	rjmp	.+10     	; 0x29e <CheckJoystickMovement+0x38>
	else if (JoyStatus_LCL & JOY_RIGHT)
	  ReportString = "Joystick Right\r\n";
     294:	6e e2       	ldi	r22, 0x2E	; 46
     296:	71 e0       	ldi	r23, 0x01	; 1
     298:	02 c0       	rjmp	.+4      	; 0x29e <CheckJoystickMovement+0x38>
	else if (JoyStatus_LCL & JOY_PRESS)
	  ReportString = "Joystick Pressed\r\n";
     29a:	6f e3       	ldi	r22, 0x3F	; 63
     29c:	71 e0       	ldi	r23, 0x01	; 1
	else
	  ActionSent = false;

	if ((ReportString != NULL) && (ActionSent == false))
     29e:	80 91 8a 01 	lds	r24, 0x018A
     2a2:	88 23       	and	r24, r24
     2a4:	31 f4       	brne	.+12     	; 0x2b2 <CheckJoystickMovement+0x4c>
	{
		ActionSent = true;
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	80 93 8a 01 	sts	0x018A, r24

		CDC_Device_SendString(&VirtualSerial_CDC_Interface, ReportString);
     2ac:	8e e5       	ldi	r24, 0x5E	; 94
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	04 c0       	rjmp	.+8      	; 0x2ba <CheckJoystickMovement+0x54>
	}
	else{
		CDC_Device_SendString(&VirtualSerial_CDC_Interface, "No report\r\n");
     2b2:	8e e5       	ldi	r24, 0x5E	; 94
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	62 e5       	ldi	r22, 0x52	; 82
     2b8:	71 e0       	ldi	r23, 0x01	; 1
     2ba:	a3 c6       	rjmp	.+3398   	; 0x1002 <CDC_Device_SendString>

000002bc <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     2bc:	a3 df       	rcall	.-186    	; 0x204 <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	90 df       	rcall	.-224    	; 0x1e2 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     2c2:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		CheckJoystickMovement();		
     2c4:	d0 df       	rcall	.-96     	; 0x266 <CheckJoystickMovement>

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     2c6:	8e e5       	ldi	r24, 0x5E	; 94
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	0a d7       	rcall	.+3604   	; 0x10e0 <CDC_Device_ReceiveByte>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     2cc:	8e e5       	ldi	r24, 0x5E	; 94
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	ef d6       	rcall	.+3550   	; 0x10b0 <CDC_Device_USBTask>
		HID_Device_USBTask(&Mouse_HID_Interface);
     2d2:	89 e7       	ldi	r24, 0x79	; 121
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	0e 94 03 0a 	call	0x1406	; 0x1406 <HID_Device_USBTask>
		USB_USBTask();
     2da:	a6 d5       	rcall	.+2892   	; 0xe28 <USB_USBTask>
     2dc:	f3 cf       	rjmp	.-26     	; 0x2c4 <main+0x8>

000002de <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     2de:	80 e8       	ldi	r24, 0x80	; 128
}
     2e0:	80 cf       	rjmp	.-256    	; 0x1e2 <LEDs_SetAllLEDs>

000002e2 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     2e2:	80 e0       	ldi	r24, 0x00	; 0
}
     2e4:	7e cf       	rjmp	.-260    	; 0x1e2 <LEDs_SetAllLEDs>

000002e6 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     2e6:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
     2e8:	89 e7       	ldi	r24, 0x79	; 121
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <HID_Device_ConfigureEndpoints>
     2f0:	18 2f       	mov	r17, r24
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     2f2:	8e e5       	ldi	r24, 0x5E	; 94
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	61 d6       	rcall	.+3266   	; 0xfba <CDC_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     2f8:	90 91 e2 00 	lds	r25, 0x00E2
     2fc:	94 60       	ori	r25, 0x04	; 4
     2fe:	90 93 e2 00 	sts	0x00E2, r25
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
     302:	21 2f       	mov	r18, r17
     304:	30 e0       	ldi	r19, 0x00	; 0
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     306:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
     308:	28 23       	and	r18, r24
     30a:	39 23       	and	r19, r25
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     30c:	20 ff       	sbrs	r18, 0
     30e:	02 c0       	rjmp	.+4      	; 0x314 <EVENT_USB_Device_ConfigurationChanged+0x2e>
     310:	80 e8       	ldi	r24, 0x80	; 128
     312:	01 c0       	rjmp	.+2      	; 0x316 <EVENT_USB_Device_ConfigurationChanged+0x30>
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	65 df       	rcall	.-310    	; 0x1e2 <LEDs_SetAllLEDs>
}
     318:	1f 91       	pop	r17
     31a:	08 95       	ret

0000031c <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     31c:	8e e5       	ldi	r24, 0x5E	; 94
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	9f d5       	rcall	.+2878   	; 0xe60 <CDC_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Mouse_HID_Interface);
     322:	89 e7       	ldi	r24, 0x79	; 121
     324:	91 e0       	ldi	r25, 0x01	; 1
}
     326:	19 c7       	rjmp	.+3634   	; 0x115a <HID_Device_ProcessControlRequest>

00000328 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     328:	80 91 87 01 	lds	r24, 0x0187
     32c:	90 91 88 01 	lds	r25, 0x0188
     330:	00 97       	sbiw	r24, 0x00	; 0
     332:	29 f0       	breq	.+10     	; 0x33e <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     334:	01 97       	sbiw	r24, 0x01	; 1
     336:	90 93 88 01 	sts	0x0188, r25
     33a:	80 93 87 01 	sts	0x0187, r24
     33e:	08 95       	ret

00000340 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     340:	ef 92       	push	r14
     342:	ff 92       	push	r15
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
	USB_MouseReport_Data_t* MouseReport = (USB_MouseReport_Data_t*)ReportData;
     34c:	e2 2e       	mov	r14, r18
     34e:	e7 01       	movw	r28, r14
     350:	7e 01       	movw	r14, r28
     352:	f3 2e       	mov	r15, r19
     354:	e7 01       	movw	r28, r14

	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
     356:	4a df       	rcall	.-364    	; 0x1ec <Joystick_GetStatus>
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     358:	9c b1       	in	r25, 0x0c	; 12
     35a:	90 95       	com	r25
     35c:	94 70       	andi	r25, 0x04	; 4
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	if (JoyStatus_LCL & JOY_UP)
     35e:	87 ff       	sbrs	r24, 7
     360:	02 c0       	rjmp	.+4      	; 0x366 <CALLBACK_HID_Device_CreateHIDReport+0x26>
	  MouseReport->Y = -1;
     362:	2f ef       	ldi	r18, 0xFF	; 255
     364:	03 c0       	rjmp	.+6      	; 0x36c <CALLBACK_HID_Device_CreateHIDReport+0x2c>
	else if (JoyStatus_LCL & JOY_DOWN)
     366:	84 ff       	sbrs	r24, 4
     368:	02 c0       	rjmp	.+4      	; 0x36e <CALLBACK_HID_Device_CreateHIDReport+0x2e>
	  MouseReport->Y =  1;
     36a:	21 e0       	ldi	r18, 0x01	; 1
     36c:	2a 83       	std	Y+2, r18	; 0x02

	if (JoyStatus_LCL & JOY_LEFT)
     36e:	86 ff       	sbrs	r24, 6
     370:	02 c0       	rjmp	.+4      	; 0x376 <CALLBACK_HID_Device_CreateHIDReport+0x36>
	  MouseReport->X = -1;
     372:	2f ef       	ldi	r18, 0xFF	; 255
     374:	03 c0       	rjmp	.+6      	; 0x37c <CALLBACK_HID_Device_CreateHIDReport+0x3c>
	else if (JoyStatus_LCL & JOY_RIGHT)
     376:	83 ff       	sbrs	r24, 3
     378:	02 c0       	rjmp	.+4      	; 0x37e <CALLBACK_HID_Device_CreateHIDReport+0x3e>
	  MouseReport->X =  1;
     37a:	21 e0       	ldi	r18, 0x01	; 1
     37c:	29 83       	std	Y+1, r18	; 0x01

	if (JoyStatus_LCL & JOY_PRESS)
     37e:	85 ff       	sbrs	r24, 5
     380:	03 c0       	rjmp	.+6      	; 0x388 <CALLBACK_HID_Device_CreateHIDReport+0x48>
	  MouseReport->Button |= (1 << 0);
     382:	88 81       	ld	r24, Y
     384:	81 60       	ori	r24, 0x01	; 1
     386:	88 83       	st	Y, r24

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     388:	99 23       	and	r25, r25
     38a:	19 f0       	breq	.+6      	; 0x392 <CALLBACK_HID_Device_CreateHIDReport+0x52>
	  MouseReport->Button |= (1 << 1);
     38c:	88 81       	ld	r24, Y
     38e:	82 60       	ori	r24, 0x02	; 2
     390:	88 83       	st	Y, r24

	*ReportSize = sizeof(USB_MouseReport_Data_t);
     392:	83 e0       	ldi	r24, 0x03	; 3
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	f8 01       	movw	r30, r16
     398:	91 83       	std	Z+1, r25	; 0x01
     39a:	80 83       	st	Z, r24
	return true;
}
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	ff 90       	pop	r15
     3a8:	ef 90       	pop	r14
     3aa:	08 95       	ret

000003ac <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	// Unused (but mandatory for the HID class driver) in this demo, since there are no Host->Device reports
}
     3ac:	08 95       	ret

000003ae <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     3ae:	93 30       	cpi	r25, 0x03	; 3
     3b0:	89 f0       	breq	.+34     	; 0x3d4 <CALLBACK_USB_GetDescriptor+0x26>
     3b2:	94 30       	cpi	r25, 0x04	; 4
     3b4:	28 f4       	brcc	.+10     	; 0x3c0 <CALLBACK_USB_GetDescriptor+0x12>
     3b6:	91 30       	cpi	r25, 0x01	; 1
     3b8:	49 f1       	breq	.+82     	; 0x40c <CALLBACK_USB_GetDescriptor+0x5e>
     3ba:	92 30       	cpi	r25, 0x02	; 2
     3bc:	61 f5       	brne	.+88     	; 0x416 <CALLBACK_USB_GetDescriptor+0x68>
     3be:	05 c0       	rjmp	.+10     	; 0x3ca <CALLBACK_USB_GetDescriptor+0x1c>
     3c0:	91 32       	cpi	r25, 0x21	; 33
     3c2:	d1 f0       	breq	.+52     	; 0x3f8 <CALLBACK_USB_GetDescriptor+0x4a>
     3c4:	92 32       	cpi	r25, 0x22	; 34
     3c6:	39 f5       	brne	.+78     	; 0x416 <CALLBACK_USB_GetDescriptor+0x68>
     3c8:	1c c0       	rjmp	.+56     	; 0x402 <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     3ca:	2f e5       	ldi	r18, 0x5F	; 95
     3cc:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     3ce:	e8 ef       	ldi	r30, 0xF8	; 248
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     3d2:	25 c0       	rjmp	.+74     	; 0x41e <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
     3d4:	81 30       	cpi	r24, 0x01	; 1
     3d6:	41 f0       	breq	.+16     	; 0x3e8 <CALLBACK_USB_GetDescriptor+0x3a>
     3d8:	81 30       	cpi	r24, 0x01	; 1
     3da:	18 f0       	brcs	.+6      	; 0x3e2 <CALLBACK_USB_GetDescriptor+0x34>
     3dc:	82 30       	cpi	r24, 0x02	; 2
     3de:	d9 f4       	brne	.+54     	; 0x416 <CALLBACK_USB_GetDescriptor+0x68>
     3e0:	06 c0       	rjmp	.+12     	; 0x3ee <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3e2:	e7 e5       	ldi	r30, 0x57	; 87
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3e8:	eb e5       	ldi	r30, 0x5B	; 91
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3ee:	e5 e7       	ldi	r30, 0x75	; 117
     3f0:	f1 e0       	ldi	r31, 0x01	; 1
     3f2:	24 91       	lpm	r18, Z+
     3f4:	30 e0       	ldi	r19, 0x00	; 0
					break;
     3f6:	13 c0       	rjmp	.+38     	; 0x41e <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     3f8:	29 e0       	ldi	r18, 0x09	; 9
     3fa:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
     3fc:	e7 e4       	ldi	r30, 0x47	; 71
     3fe:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     400:	0e c0       	rjmp	.+28     	; 0x41e <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
     402:	2a e3       	ldi	r18, 0x3A	; 58
     404:	30 e0       	ldi	r19, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &MouseReport;
     406:	ec ea       	ldi	r30, 0xAC	; 172
     408:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(MouseReport);
			break;
     40a:	09 c0       	rjmp	.+18     	; 0x41e <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     40c:	22 e1       	ldi	r18, 0x12	; 18
     40e:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     410:	e6 ee       	ldi	r30, 0xE6	; 230
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	04 c0       	rjmp	.+8      	; 0x41e <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     41a:	e0 e0       	ldi	r30, 0x00	; 0
     41c:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &MouseReport;
			Size    = sizeof(MouseReport);
			break;
	}

	*DescriptorAddress = Address;
     41e:	da 01       	movw	r26, r20
     420:	11 96       	adiw	r26, 0x01	; 1
     422:	fc 93       	st	X, r31
     424:	ee 93       	st	-X, r30
	return Size;
}
     426:	c9 01       	movw	r24, r18
     428:	08 95       	ret

0000042a <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     42a:	8f 92       	push	r8
     42c:	9f 92       	push	r9
     42e:	bf 92       	push	r11
     430:	cf 92       	push	r12
     432:	df 92       	push	r13
     434:	ef 92       	push	r14
     436:	ff 92       	push	r15
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	df 93       	push	r29
     43e:	cf 93       	push	r28
     440:	0f 92       	push	r0
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
     446:	e8 2e       	mov	r14, r24
     448:	4b 01       	movw	r8, r22
     44a:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     44c:	99 83       	std	Y+1, r25	; 0x01
     44e:	f3 d1       	rcall	.+998    	; 0x836 <Endpoint_WaitUntilReady>
     450:	b8 2e       	mov	r11, r24
     452:	99 81       	ldd	r25, Y+1	; 0x01
     454:	88 23       	and	r24, r24
     456:	c1 f5       	brne	.+112    	; 0x4c8 <Endpoint_Write_Stream_LE+0x9e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     458:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     45a:	01 15       	cp	r16, r1
     45c:	11 05       	cpc	r17, r1
     45e:	39 f0       	breq	.+14     	; 0x46e <Endpoint_Write_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
     460:	f8 01       	movw	r30, r16
     462:	20 81       	ld	r18, Z
     464:	31 81       	ldd	r19, Z+1	; 0x01
     466:	82 1a       	sub	r8, r18
     468:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     46a:	e2 0e       	add	r14, r18
     46c:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     46e:	cc 24       	eor	r12, r12
     470:	dd 24       	eor	r13, r13
     472:	25 c0       	rjmp	.+74     	; 0x4be <Endpoint_Write_Stream_LE+0x94>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     474:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     478:	85 fd       	sbrc	r24, 5
     47a:	16 c0       	rjmp	.+44     	; 0x4a8 <Endpoint_Write_Stream_LE+0x7e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     47c:	80 91 e8 00 	lds	r24, 0x00E8
     480:	8e 77       	andi	r24, 0x7E	; 126
     482:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     486:	01 15       	cp	r16, r1
     488:	11 05       	cpc	r17, r1
     48a:	51 f0       	breq	.+20     	; 0x4a0 <Endpoint_Write_Stream_LE+0x76>
			{
				*BytesProcessed += BytesInTransfer;
     48c:	f8 01       	movw	r30, r16
     48e:	80 81       	ld	r24, Z
     490:	91 81       	ldd	r25, Z+1	; 0x01
     492:	8c 0d       	add	r24, r12
     494:	9d 1d       	adc	r25, r13
     496:	91 83       	std	Z+1, r25	; 0x01
     498:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     49a:	25 e0       	ldi	r18, 0x05	; 5
     49c:	b2 2e       	mov	r11, r18
     49e:	14 c0       	rjmp	.+40     	; 0x4c8 <Endpoint_Write_Stream_LE+0x9e>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     4a0:	ca d1       	rcall	.+916    	; 0x836 <Endpoint_WaitUntilReady>
     4a2:	88 23       	and	r24, r24
     4a4:	61 f0       	breq	.+24     	; 0x4be <Endpoint_Write_Stream_LE+0x94>
     4a6:	0f c0       	rjmp	.+30     	; 0x4c6 <Endpoint_Write_Stream_LE+0x9c>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     4a8:	f7 01       	movw	r30, r14
     4aa:	81 91       	ld	r24, Z+
     4ac:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     4ae:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     4b2:	08 94       	sec
     4b4:	81 08       	sbc	r8, r1
     4b6:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     4b8:	08 94       	sec
     4ba:	c1 1c       	adc	r12, r1
     4bc:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     4be:	81 14       	cp	r8, r1
     4c0:	91 04       	cpc	r9, r1
     4c2:	c1 f6       	brne	.-80     	; 0x474 <Endpoint_Write_Stream_LE+0x4a>
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <Endpoint_Write_Stream_LE+0x9e>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     4c6:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     4c8:	8b 2d       	mov	r24, r11
     4ca:	0f 90       	pop	r0
     4cc:	cf 91       	pop	r28
     4ce:	df 91       	pop	r29
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	df 90       	pop	r13
     4da:	cf 90       	pop	r12
     4dc:	bf 90       	pop	r11
     4de:	9f 90       	pop	r9
     4e0:	8f 90       	pop	r8
     4e2:	08 95       	ret

000004e4 <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     4e4:	48 2f       	mov	r20, r24
     4e6:	59 2f       	mov	r21, r25
     4e8:	fa 01       	movw	r30, r20
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     4ea:	80 91 99 01 	lds	r24, 0x0199
     4ee:	90 91 9a 01 	lds	r25, 0x019A
     4f2:	86 17       	cp	r24, r22
     4f4:	97 07       	cpc	r25, r23
     4f6:	18 f4       	brcc	.+6      	; 0x4fe <Endpoint_Write_Control_Stream_LE+0x1a>
     4f8:	bc 01       	movw	r22, r24
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	3c c0       	rjmp	.+120    	; 0x576 <Endpoint_Write_Control_Stream_LE+0x92>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     4fe:	61 15       	cp	r22, r1
     500:	71 05       	cpc	r23, r1
     502:	d9 f7       	brne	.-10     	; 0x4fa <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     504:	80 91 e8 00 	lds	r24, 0x00E8
     508:	8e 77       	andi	r24, 0x7E	; 126
     50a:	80 93 e8 00 	sts	0x00E8, r24
     50e:	f5 cf       	rjmp	.-22     	; 0x4fa <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     510:	80 91 92 01 	lds	r24, 0x0192

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     514:	88 23       	and	r24, r24
     516:	09 f4       	brne	.+2      	; 0x51a <Endpoint_Write_Control_Stream_LE+0x36>
     518:	44 c0       	rjmp	.+136    	; 0x5a2 <Endpoint_Write_Control_Stream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     51a:	85 30       	cpi	r24, 0x05	; 5
     51c:	f1 f1       	breq	.+124    	; 0x59a <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     51e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     522:	83 fd       	sbrc	r24, 3
     524:	3c c0       	rjmp	.+120    	; 0x59e <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     526:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     52a:	82 fd       	sbrc	r24, 2
     52c:	30 c0       	rjmp	.+96     	; 0x58e <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     52e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     532:	80 ff       	sbrs	r24, 0
     534:	20 c0       	rjmp	.+64     	; 0x576 <Endpoint_Write_Control_Stream_LE+0x92>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     536:	90 91 f3 00 	lds	r25, 0x00F3
     53a:	80 91 f2 00 	lds	r24, 0x00F2
     53e:	39 2f       	mov	r19, r25
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	82 2b       	or	r24, r18
     546:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     548:	06 c0       	rjmp	.+12     	; 0x556 <Endpoint_Write_Control_Stream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     54a:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     54c:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     550:	61 50       	subi	r22, 0x01	; 1
     552:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     554:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     556:	61 15       	cp	r22, r1
     558:	71 05       	cpc	r23, r1
     55a:	19 f0       	breq	.+6      	; 0x562 <Endpoint_Write_Control_Stream_LE+0x7e>
     55c:	88 30       	cpi	r24, 0x08	; 8
     55e:	91 05       	cpc	r25, r1
     560:	a0 f3       	brcs	.-24     	; 0x54a <Endpoint_Write_Control_Stream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     562:	41 e0       	ldi	r20, 0x01	; 1
     564:	88 30       	cpi	r24, 0x08	; 8
     566:	91 05       	cpc	r25, r1
     568:	09 f0       	breq	.+2      	; 0x56c <Endpoint_Write_Control_Stream_LE+0x88>
     56a:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     56c:	80 91 e8 00 	lds	r24, 0x00E8
     570:	8e 77       	andi	r24, 0x7E	; 126
     572:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     576:	61 15       	cp	r22, r1
     578:	71 05       	cpc	r23, r1
     57a:	51 f6       	brne	.-108    	; 0x510 <Endpoint_Write_Control_Stream_LE+0x2c>
     57c:	44 23       	and	r20, r20
     57e:	41 f6       	brne	.-112    	; 0x510 <Endpoint_Write_Control_Stream_LE+0x2c>
     580:	06 c0       	rjmp	.+12     	; 0x58e <Endpoint_Write_Control_Stream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     582:	80 91 92 01 	lds	r24, 0x0192

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     586:	88 23       	and	r24, r24
     588:	61 f0       	breq	.+24     	; 0x5a2 <Endpoint_Write_Control_Stream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     58a:	85 30       	cpi	r24, 0x05	; 5
     58c:	61 f0       	breq	.+24     	; 0x5a6 <Endpoint_Write_Control_Stream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     58e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     592:	82 ff       	sbrs	r24, 2
     594:	f6 cf       	rjmp	.-20     	; 0x582 <Endpoint_Write_Control_Stream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     59a:	83 e0       	ldi	r24, 0x03	; 3
     59c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5a6:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     5a8:	08 95       	ret

000005aa <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     5aa:	61 15       	cp	r22, r1
     5ac:	71 05       	cpc	r23, r1
     5ae:	59 f5       	brne	.+86     	; 0x606 <Endpoint_Read_Control_Stream_LE+0x5c>
     5b0:	25 c0       	rjmp	.+74     	; 0x5fc <Endpoint_Read_Control_Stream_LE+0x52>
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5b2:	40 91 92 01 	lds	r20, 0x0192

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5b6:	44 23       	and	r20, r20
     5b8:	d1 f1       	breq	.+116    	; 0x62e <Endpoint_Read_Control_Stream_LE+0x84>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5ba:	45 30       	cpi	r20, 0x05	; 5
     5bc:	a1 f1       	breq	.+104    	; 0x626 <Endpoint_Read_Control_Stream_LE+0x7c>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     5be:	40 91 e8 00 	lds	r20, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     5c2:	43 fd       	sbrc	r20, 3
     5c4:	32 c0       	rjmp	.+100    	; 0x62a <Endpoint_Read_Control_Stream_LE+0x80>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5c6:	40 91 e8 00 	lds	r20, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     5ca:	42 ff       	sbrs	r20, 2
     5cc:	f2 cf       	rjmp	.-28     	; 0x5b2 <Endpoint_Read_Control_Stream_LE+0x8>
     5ce:	e8 2f       	mov	r30, r24
     5d0:	f9 2f       	mov	r31, r25
     5d2:	07 c0       	rjmp	.+14     	; 0x5e2 <Endpoint_Read_Control_Stream_LE+0x38>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     5d4:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     5d8:	81 93       	st	Z+, r24
     5da:	cf 01       	movw	r24, r30
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     5dc:	61 50       	subi	r22, 0x01	; 1
     5de:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     5e0:	69 f0       	breq	.+26     	; 0x5fc <Endpoint_Read_Control_Stream_LE+0x52>
     5e2:	cf 01       	movw	r24, r30
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     5e4:	50 91 f3 00 	lds	r21, 0x00F3
     5e8:	40 91 f2 00 	lds	r20, 0x00F2
     5ec:	35 2f       	mov	r19, r21
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	42 2b       	or	r20, r18
     5f4:	53 2b       	or	r21, r19
     5f6:	41 15       	cp	r20, r1
     5f8:	51 05       	cpc	r21, r1
     5fa:	61 f7       	brne	.-40     	; 0x5d4 <Endpoint_Read_Control_Stream_LE+0x2a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     5fc:	40 91 e8 00 	lds	r20, 0x00E8
     600:	4b 77       	andi	r20, 0x7B	; 123
     602:	40 93 e8 00 	sts	0x00E8, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     606:	61 15       	cp	r22, r1
     608:	71 05       	cpc	r23, r1
     60a:	99 f6       	brne	.-90     	; 0x5b2 <Endpoint_Read_Control_Stream_LE+0x8>
     60c:	06 c0       	rjmp	.+12     	; 0x61a <Endpoint_Read_Control_Stream_LE+0x70>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     60e:	80 91 92 01 	lds	r24, 0x0192

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     612:	88 23       	and	r24, r24
     614:	61 f0       	breq	.+24     	; 0x62e <Endpoint_Read_Control_Stream_LE+0x84>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     616:	85 30       	cpi	r24, 0x05	; 5
     618:	61 f0       	breq	.+24     	; 0x632 <Endpoint_Read_Control_Stream_LE+0x88>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     61a:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     61e:	80 ff       	sbrs	r24, 0
     620:	f6 cf       	rjmp	.-20     	; 0x60e <Endpoint_Read_Control_Stream_LE+0x64>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     626:	83 e0       	ldi	r24, 0x03	; 3
     628:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     62e:	82 e0       	ldi	r24, 0x02	; 2
     630:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     632:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     634:	08 95       	ret

00000636 <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     636:	e8 2f       	mov	r30, r24
     638:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     63a:	80 91 99 01 	lds	r24, 0x0199
     63e:	90 91 9a 01 	lds	r25, 0x019A
     642:	86 17       	cp	r24, r22
     644:	97 07       	cpc	r25, r23
     646:	18 f4       	brcc	.+6      	; 0x64e <Endpoint_Write_Control_PStream_LE+0x18>
     648:	bc 01       	movw	r22, r24
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	3e c0       	rjmp	.+124    	; 0x6ca <Endpoint_Write_Control_PStream_LE+0x94>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     64e:	61 15       	cp	r22, r1
     650:	71 05       	cpc	r23, r1
     652:	d9 f7       	brne	.-10     	; 0x64a <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     654:	80 91 e8 00 	lds	r24, 0x00E8
     658:	8e 77       	andi	r24, 0x7E	; 126
     65a:	80 93 e8 00 	sts	0x00E8, r24
     65e:	f5 cf       	rjmp	.-22     	; 0x64a <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     660:	80 91 92 01 	lds	r24, 0x0192

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     664:	88 23       	and	r24, r24
     666:	09 f4       	brne	.+2      	; 0x66a <Endpoint_Write_Control_PStream_LE+0x34>
     668:	46 c0       	rjmp	.+140    	; 0x6f6 <Endpoint_Write_Control_PStream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     66a:	85 30       	cpi	r24, 0x05	; 5
     66c:	09 f4       	brne	.+2      	; 0x670 <Endpoint_Write_Control_PStream_LE+0x3a>
     66e:	3f c0       	rjmp	.+126    	; 0x6ee <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     670:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     674:	83 fd       	sbrc	r24, 3
     676:	3d c0       	rjmp	.+122    	; 0x6f2 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     678:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     67c:	82 fd       	sbrc	r24, 2
     67e:	31 c0       	rjmp	.+98     	; 0x6e2 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     680:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     684:	80 ff       	sbrs	r24, 0
     686:	21 c0       	rjmp	.+66     	; 0x6ca <Endpoint_Write_Control_PStream_LE+0x94>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     688:	90 91 f3 00 	lds	r25, 0x00F3
     68c:	80 91 f2 00 	lds	r24, 0x00F2
     690:	39 2f       	mov	r19, r25
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	82 2b       	or	r24, r18
     698:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     69a:	07 c0       	rjmp	.+14     	; 0x6aa <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     69c:	44 91       	lpm	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     69e:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     6a2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     6a4:	61 50       	subi	r22, 0x01	; 1
     6a6:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     6a8:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     6aa:	61 15       	cp	r22, r1
     6ac:	71 05       	cpc	r23, r1
     6ae:	19 f0       	breq	.+6      	; 0x6b6 <Endpoint_Write_Control_PStream_LE+0x80>
     6b0:	88 30       	cpi	r24, 0x08	; 8
     6b2:	91 05       	cpc	r25, r1
     6b4:	98 f3       	brcs	.-26     	; 0x69c <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     6b6:	41 e0       	ldi	r20, 0x01	; 1
     6b8:	88 30       	cpi	r24, 0x08	; 8
     6ba:	91 05       	cpc	r25, r1
     6bc:	09 f0       	breq	.+2      	; 0x6c0 <Endpoint_Write_Control_PStream_LE+0x8a>
     6be:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6c0:	80 91 e8 00 	lds	r24, 0x00E8
     6c4:	8e 77       	andi	r24, 0x7E	; 126
     6c6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     6ca:	61 15       	cp	r22, r1
     6cc:	71 05       	cpc	r23, r1
     6ce:	41 f6       	brne	.-112    	; 0x660 <Endpoint_Write_Control_PStream_LE+0x2a>
     6d0:	44 23       	and	r20, r20
     6d2:	31 f6       	brne	.-116    	; 0x660 <Endpoint_Write_Control_PStream_LE+0x2a>
     6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     6d6:	80 91 92 01 	lds	r24, 0x0192

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     6da:	88 23       	and	r24, r24
     6dc:	61 f0       	breq	.+24     	; 0x6f6 <Endpoint_Write_Control_PStream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     6de:	85 30       	cpi	r24, 0x05	; 5
     6e0:	61 f0       	breq	.+24     	; 0x6fa <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6e2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     6e6:	82 ff       	sbrs	r24, 2
     6e8:	f6 cf       	rjmp	.-20     	; 0x6d6 <Endpoint_Write_Control_PStream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     6ee:	83 e0       	ldi	r24, 0x03	; 3
     6f0:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     6f6:	82 e0       	ldi	r24, 0x02	; 2
     6f8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     6fa:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     6fc:	08 95       	ret

000006fe <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     6fe:	98 2f       	mov	r25, r24
     700:	2c c0       	rjmp	.+88     	; 0x75a <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     702:	29 2f       	mov	r18, r25
     704:	2f 70       	andi	r18, 0x0F	; 15
     706:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     70a:	98 17       	cp	r25, r24
     70c:	39 f0       	breq	.+14     	; 0x71c <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     70e:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     712:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     716:	50 91 f0 00 	lds	r21, 0x00F0
     71a:	03 c0       	rjmp	.+6      	; 0x722 <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     71c:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     71e:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     720:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     722:	21 ff       	sbrs	r18, 1
     724:	19 c0       	rjmp	.+50     	; 0x758 <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     726:	30 91 eb 00 	lds	r19, 0x00EB
     72a:	3e 7f       	andi	r19, 0xFE	; 254
     72c:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     730:	30 91 ed 00 	lds	r19, 0x00ED
     734:	3d 7f       	andi	r19, 0xFD	; 253
     736:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     73a:	30 91 eb 00 	lds	r19, 0x00EB
     73e:	31 60       	ori	r19, 0x01	; 1
     740:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     744:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     748:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     74c:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     750:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     754:	27 ff       	sbrs	r18, 7
     756:	08 c0       	rjmp	.+16     	; 0x768 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     758:	9f 5f       	subi	r25, 0xFF	; 255
     75a:	97 30       	cpi	r25, 0x07	; 7
     75c:	90 f2       	brcs	.-92     	; 0x702 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     75e:	8f 70       	andi	r24, 0x0F	; 15
     760:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     768:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     76a:	08 95       	ret

0000076c <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     77a:	e8 2e       	mov	r14, r24
     77c:	e7 01       	movw	r28, r14
     77e:	7e 01       	movw	r14, r28
     780:	f9 2e       	mov	r15, r25
     782:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     784:	00 e0       	ldi	r16, 0x00	; 0
     786:	2a c0       	rjmp	.+84     	; 0x7dc <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
     788:	98 81       	ld	r25, Y
     78a:	99 23       	and	r25, r25
     78c:	29 f1       	breq	.+74     	; 0x7d8 <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     78e:	6b 81       	ldd	r22, Y+3	; 0x03
     790:	e9 81       	ldd	r30, Y+1	; 0x01
     792:	fa 81       	ldd	r31, Y+2	; 0x02
     794:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     796:	89 2f       	mov	r24, r25
     798:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     79a:	87 30       	cpi	r24, 0x07	; 7
     79c:	18 f5       	brcc	.+70     	; 0x7e4 <Endpoint_ConfigureEndpointTable+0x78>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     79e:	62 95       	swap	r22
     7a0:	66 0f       	add	r22, r22
     7a2:	66 0f       	add	r22, r22
     7a4:	60 7c       	andi	r22, 0xC0	; 192
     7a6:	99 1f       	adc	r25, r25
     7a8:	99 27       	eor	r25, r25
     7aa:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7ac:	69 2b       	or	r22, r25
     7ae:	22 30       	cpi	r18, 0x02	; 2
     7b0:	10 f0       	brcs	.+4      	; 0x7b6 <Endpoint_ConfigureEndpointTable+0x4a>
     7b2:	96 e0       	ldi	r25, 0x06	; 6
     7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <Endpoint_ConfigureEndpointTable+0x4c>
     7b6:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     7b8:	28 e0       	ldi	r18, 0x08	; 8
     7ba:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     7bc:	40 e0       	ldi	r20, 0x00	; 0
     7be:	03 c0       	rjmp	.+6      	; 0x7c6 <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     7c0:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     7c2:	22 0f       	add	r18, r18
     7c4:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     7c6:	2e 17       	cp	r18, r30
     7c8:	3f 07       	cpc	r19, r31
     7ca:	d0 f3       	brcs	.-12     	; 0x7c0 <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     7cc:	42 95       	swap	r20
     7ce:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7d0:	49 2b       	or	r20, r25
     7d2:	95 df       	rcall	.-214    	; 0x6fe <Endpoint_ConfigureEndpoint_Prv>
     7d4:	88 23       	and	r24, r24
     7d6:	31 f0       	breq	.+12     	; 0x7e4 <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     7d8:	0f 5f       	subi	r16, 0xFF	; 255
     7da:	25 96       	adiw	r28, 0x05	; 5
     7dc:	01 17       	cp	r16, r17
     7de:	a0 f2       	brcs	.-88     	; 0x788 <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	01 c0       	rjmp	.+2      	; 0x7e6 <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     7e4:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	ff 90       	pop	r15
     7f0:	ef 90       	pop	r14
     7f2:	08 95       	ret

000007f4 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     7f4:	80 91 93 01 	lds	r24, 0x0193
     7f8:	87 ff       	sbrs	r24, 7
     7fa:	13 c0       	rjmp	.+38     	; 0x822 <Endpoint_ClearStatusStage+0x2e>
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7fe:	80 91 92 01 	lds	r24, 0x0192
     802:	88 23       	and	r24, r24
     804:	b9 f0       	breq	.+46     	; 0x834 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     806:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     80a:	82 ff       	sbrs	r24, 2
     80c:	f8 cf       	rjmp	.-16     	; 0x7fe <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     80e:	80 91 e8 00 	lds	r24, 0x00E8
     812:	8b 77       	andi	r24, 0x7B	; 123
     814:	80 93 e8 00 	sts	0x00E8, r24
     818:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     81a:	80 91 92 01 	lds	r24, 0x0192
     81e:	88 23       	and	r24, r24
     820:	49 f0       	breq	.+18     	; 0x834 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     822:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     826:	80 ff       	sbrs	r24, 0
     828:	f8 cf       	rjmp	.-16     	; 0x81a <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     82a:	80 91 e8 00 	lds	r24, 0x00E8
     82e:	8e 77       	andi	r24, 0x7E	; 126
     830:	80 93 e8 00 	sts	0x00E8, r24
     834:	08 95       	ret

00000836 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     836:	80 91 e4 00 	lds	r24, 0x00E4
     83a:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     83e:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     840:	20 91 ec 00 	lds	r18, 0x00EC
     844:	20 ff       	sbrs	r18, 0
     846:	26 c0       	rjmp	.+76     	; 0x894 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     848:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     84c:	20 fd       	sbrc	r18, 0
     84e:	16 c0       	rjmp	.+44     	; 0x87c <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     850:	20 91 92 01 	lds	r18, 0x0192

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     854:	22 23       	and	r18, r18
     856:	a1 f0       	breq	.+40     	; 0x880 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     858:	25 30       	cpi	r18, 0x05	; 5
     85a:	a1 f0       	breq	.+40     	; 0x884 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     85c:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     860:	25 fd       	sbrc	r18, 5
     862:	12 c0       	rjmp	.+36     	; 0x888 <Endpoint_WaitUntilReady+0x52>
     864:	20 91 e4 00 	lds	r18, 0x00E4
     868:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     86c:	28 17       	cp	r18, r24
     86e:	39 07       	cpc	r19, r25
     870:	39 f3       	breq	.-50     	; 0x840 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     872:	44 23       	and	r20, r20
     874:	59 f0       	breq	.+22     	; 0x88c <Endpoint_WaitUntilReady+0x56>
     876:	41 50       	subi	r20, 0x01	; 1
     878:	c9 01       	movw	r24, r18
     87a:	e2 cf       	rjmp	.-60     	; 0x840 <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     884:	83 e0       	ldi	r24, 0x03	; 3
     886:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     88c:	84 e0       	ldi	r24, 0x04	; 4
     88e:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     890:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     892:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     894:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     898:	22 ff       	sbrs	r18, 2
     89a:	da cf       	rjmp	.-76     	; 0x850 <Endpoint_WaitUntilReady+0x1a>
     89c:	f9 cf       	rjmp	.-14     	; 0x890 <Endpoint_WaitUntilReady+0x5a>

0000089e <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     8a6:	4b d0       	rcall	.+150    	; 0x93e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     8a8:	52 d0       	rcall	.+164    	; 0x94e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     8aa:	c8 ed       	ldi	r28, 0xD8	; 216
     8ac:	d0 e0       	ldi	r29, 0x00	; 0
     8ae:	88 81       	ld	r24, Y
     8b0:	8f 77       	andi	r24, 0x7F	; 127
     8b2:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     8b4:	88 81       	ld	r24, Y
     8b6:	80 68       	ori	r24, 0x80	; 128
     8b8:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     8ba:	88 81       	ld	r24, Y
     8bc:	8f 7d       	andi	r24, 0xDF	; 223
     8be:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8c0:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     8c2:	10 92 92 01 	sts	0x0192, r1
	USB_Device_ConfigurationNumber  = 0;
     8c6:	10 92 8e 01 	sts	0x018E, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     8ca:	10 92 90 01 	sts	0x0190, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     8ce:	10 92 8f 01 	sts	0x018F, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     8d2:	00 ee       	ldi	r16, 0xE0	; 224
     8d4:	10 e0       	ldi	r17, 0x00	; 0
     8d6:	f8 01       	movw	r30, r16
     8d8:	80 81       	ld	r24, Z
     8da:	8b 7f       	andi	r24, 0xFB	; 251
     8dc:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     8de:	88 81       	ld	r24, Y
     8e0:	81 60       	ori	r24, 0x01	; 1
     8e2:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	42 e0       	ldi	r20, 0x02	; 2
     8ea:	09 df       	rcall	.-494    	; 0x6fe <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     8ec:	e1 ee       	ldi	r30, 0xE1	; 225
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	8e 7f       	andi	r24, 0xFE	; 254
     8f4:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     8f6:	e2 ee       	ldi	r30, 0xE2	; 226
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	80 81       	ld	r24, Z
     8fc:	81 60       	ori	r24, 0x01	; 1
     8fe:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     900:	80 81       	ld	r24, Z
     902:	88 60       	ori	r24, 0x08	; 8
     904:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     906:	f8 01       	movw	r30, r16
     908:	80 81       	ld	r24, Z
     90a:	8e 7f       	andi	r24, 0xFE	; 254
     90c:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     90e:	88 81       	ld	r24, Y
     910:	80 61       	ori	r24, 0x10	; 16
     912:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	08 95       	ret

0000091e <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     91e:	e8 ed       	ldi	r30, 0xD8	; 216
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	8f 7e       	andi	r24, 0xEF	; 239
     926:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     928:	e7 ed       	ldi	r30, 0xD7	; 215
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	81 60       	ori	r24, 0x01	; 1
     930:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     932:	84 e0       	ldi	r24, 0x04	; 4
     934:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	80 93 91 01 	sts	0x0191, r24

	USB_ResetInterface();
}
     93c:	b0 cf       	rjmp	.-160    	; 0x89e <USB_ResetInterface>

0000093e <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     93e:	e8 ed       	ldi	r30, 0xD8	; 216
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	80 81       	ld	r24, Z
     944:	8e 7f       	andi	r24, 0xFE	; 254
     946:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     948:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     94c:	08 95       	ret

0000094e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     94e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     952:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     956:	08 95       	ret

00000958 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     958:	1f 92       	push	r1
     95a:	0f 92       	push	r0
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	0f 92       	push	r0
     960:	11 24       	eor	r1, r1
     962:	2f 93       	push	r18
     964:	3f 93       	push	r19
     966:	4f 93       	push	r20
     968:	5f 93       	push	r21
     96a:	6f 93       	push	r22
     96c:	7f 93       	push	r23
     96e:	8f 93       	push	r24
     970:	9f 93       	push	r25
     972:	af 93       	push	r26
     974:	bf 93       	push	r27
     976:	ef 93       	push	r30
     978:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     97a:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     97e:	82 ff       	sbrs	r24, 2
     980:	0a c0       	rjmp	.+20     	; 0x996 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     982:	80 91 e2 00 	lds	r24, 0x00E2
     986:	82 ff       	sbrs	r24, 2
     988:	06 c0       	rjmp	.+12     	; 0x996 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     98a:	80 91 e1 00 	lds	r24, 0x00E1
     98e:	8b 7f       	andi	r24, 0xFB	; 251
     990:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     994:	c9 dc       	rcall	.-1646   	; 0x328 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     996:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     99a:	80 ff       	sbrs	r24, 0
     99c:	1d c0       	rjmp	.+58     	; 0x9d8 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     99e:	80 91 d8 00 	lds	r24, 0x00D8
     9a2:	80 ff       	sbrs	r24, 0
     9a4:	19 c0       	rjmp	.+50     	; 0x9d8 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     9a6:	80 91 da 00 	lds	r24, 0x00DA
     9aa:	8e 7f       	andi	r24, 0xFE	; 254
     9ac:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     9b0:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     9b4:	80 ff       	sbrs	r24, 0
     9b6:	0c c0       	rjmp	.+24     	; 0x9d0 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     9b8:	80 e1       	ldi	r24, 0x10	; 16
     9ba:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     9bc:	82 e1       	ldi	r24, 0x12	; 18
     9be:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     9c0:	09 b4       	in	r0, 0x29	; 41
     9c2:	00 fe       	sbrs	r0, 0
     9c4:	fd cf       	rjmp	.-6      	; 0x9c0 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	80 93 92 01 	sts	0x0192, r24
			EVENT_USB_Device_Connect();
     9cc:	88 dc       	rcall	.-1776   	; 0x2de <EVENT_USB_Device_Connect>
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     9d0:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     9d2:	10 92 92 01 	sts	0x0192, r1
			EVENT_USB_Device_Disconnect();
     9d6:	85 dc       	rcall	.-1782   	; 0x2e2 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     9d8:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     9dc:	80 ff       	sbrs	r24, 0
     9de:	18 c0       	rjmp	.+48     	; 0xa10 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     9e0:	80 91 e2 00 	lds	r24, 0x00E2
     9e4:	80 ff       	sbrs	r24, 0
     9e6:	14 c0       	rjmp	.+40     	; 0xa10 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     9e8:	80 91 e2 00 	lds	r24, 0x00E2
     9ec:	8e 7f       	andi	r24, 0xFE	; 254
     9ee:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9f2:	80 91 e2 00 	lds	r24, 0x00E2
     9f6:	80 61       	ori	r24, 0x10	; 16
     9f8:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     9fc:	80 91 d8 00 	lds	r24, 0x00D8
     a00:	80 62       	ori	r24, 0x20	; 32
     a02:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a06:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     a08:	85 e0       	ldi	r24, 0x05	; 5
     a0a:	80 93 92 01 	sts	0x0192, r24
		EVENT_USB_Device_Suspend();
     a0e:	0b d2       	rcall	.+1046   	; 0xe26 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     a10:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     a14:	84 ff       	sbrs	r24, 4
     a16:	2d c0       	rjmp	.+90     	; 0xa72 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     a18:	80 91 e2 00 	lds	r24, 0x00E2
     a1c:	84 ff       	sbrs	r24, 4
     a1e:	29 c0       	rjmp	.+82     	; 0xa72 <__vector_10+0x11a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a20:	80 e1       	ldi	r24, 0x10	; 16
     a22:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a24:	82 e1       	ldi	r24, 0x12	; 18
     a26:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     a28:	09 b4       	in	r0, 0x29	; 41
     a2a:	00 fe       	sbrs	r0, 0
     a2c:	fd cf       	rjmp	.-6      	; 0xa28 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     a2e:	80 91 d8 00 	lds	r24, 0x00D8
     a32:	8f 7d       	andi	r24, 0xDF	; 223
     a34:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     a38:	80 91 e1 00 	lds	r24, 0x00E1
     a3c:	8f 7e       	andi	r24, 0xEF	; 239
     a3e:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     a42:	80 91 e2 00 	lds	r24, 0x00E2
     a46:	8f 7e       	andi	r24, 0xEF	; 239
     a48:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a4c:	80 91 e2 00 	lds	r24, 0x00E2
     a50:	81 60       	ori	r24, 0x01	; 1
     a52:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     a56:	80 91 8e 01 	lds	r24, 0x018E
     a5a:	88 23       	and	r24, r24
     a5c:	21 f4       	brne	.+8      	; 0xa66 <__vector_10+0x10e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     a5e:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     a62:	87 ff       	sbrs	r24, 7
     a64:	02 c0       	rjmp	.+4      	; 0xa6a <__vector_10+0x112>
     a66:	84 e0       	ldi	r24, 0x04	; 4
     a68:	01 c0       	rjmp	.+2      	; 0xa6c <__vector_10+0x114>
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	80 93 92 01 	sts	0x0192, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     a70:	da d1       	rcall	.+948    	; 0xe26 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     a72:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     a76:	83 ff       	sbrs	r24, 3
     a78:	27 c0       	rjmp	.+78     	; 0xac8 <__vector_10+0x170>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     a7a:	80 91 e2 00 	lds	r24, 0x00E2
     a7e:	83 ff       	sbrs	r24, 3
     a80:	23 c0       	rjmp	.+70     	; 0xac8 <__vector_10+0x170>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     a82:	80 91 e1 00 	lds	r24, 0x00E1
     a86:	87 7f       	andi	r24, 0xF7	; 247
     a88:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     a8c:	82 e0       	ldi	r24, 0x02	; 2
     a8e:	80 93 92 01 	sts	0x0192, r24
		USB_Device_ConfigurationNumber = 0;
     a92:	10 92 8e 01 	sts	0x018E, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a96:	80 91 e1 00 	lds	r24, 0x00E1
     a9a:	8e 7f       	andi	r24, 0xFE	; 254
     a9c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     aa0:	80 91 e2 00 	lds	r24, 0x00E2
     aa4:	8e 7f       	andi	r24, 0xFE	; 254
     aa6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     aaa:	80 91 e2 00 	lds	r24, 0x00E2
     aae:	80 61       	ori	r24, 0x10	; 16
     ab0:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	42 e0       	ldi	r20, 0x02	; 2
     aba:	21 de       	rcall	.-958    	; 0x6fe <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     abc:	80 91 f0 00 	lds	r24, 0x00F0
     ac0:	88 60       	ori	r24, 0x08	; 8
     ac2:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     ac6:	af d1       	rcall	.+862    	; 0xe26 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     ac8:	ff 91       	pop	r31
     aca:	ef 91       	pop	r30
     acc:	bf 91       	pop	r27
     ace:	af 91       	pop	r26
     ad0:	9f 91       	pop	r25
     ad2:	8f 91       	pop	r24
     ad4:	7f 91       	pop	r23
     ad6:	6f 91       	pop	r22
     ad8:	5f 91       	pop	r21
     ada:	4f 91       	pop	r20
     adc:	3f 91       	pop	r19
     ade:	2f 91       	pop	r18
     ae0:	0f 90       	pop	r0
     ae2:	0f be       	out	0x3f, r0	; 63
     ae4:	0f 90       	pop	r0
     ae6:	1f 90       	pop	r1
     ae8:	18 95       	reti

00000aea <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     aea:	1f 92       	push	r1
     aec:	0f 92       	push	r0
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	0f 92       	push	r0
     af2:	11 24       	eor	r1, r1
     af4:	1f 93       	push	r17
     af6:	2f 93       	push	r18
     af8:	3f 93       	push	r19
     afa:	4f 93       	push	r20
     afc:	5f 93       	push	r21
     afe:	6f 93       	push	r22
     b00:	7f 93       	push	r23
     b02:	8f 93       	push	r24
     b04:	9f 93       	push	r25
     b06:	af 93       	push	r26
     b08:	bf 93       	push	r27
     b0a:	ef 93       	push	r30
     b0c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     b0e:	10 91 e9 00 	lds	r17, 0x00E9
     b12:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b14:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b18:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     b1c:	80 91 f0 00 	lds	r24, 0x00F0
     b20:	87 7f       	andi	r24, 0xF7	; 247
     b22:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     b26:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     b28:	1b d0       	rcall	.+54     	; 0xb60 <USB_Device_ProcessControlRequest>
     b2a:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     b2e:	80 91 f0 00 	lds	r24, 0x00F0
     b32:	88 60       	ori	r24, 0x08	; 8
     b34:	80 93 f0 00 	sts	0x00F0, r24
     b38:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     b3c:	ff 91       	pop	r31
     b3e:	ef 91       	pop	r30
     b40:	bf 91       	pop	r27
     b42:	af 91       	pop	r26
     b44:	9f 91       	pop	r25
     b46:	8f 91       	pop	r24
     b48:	7f 91       	pop	r23
     b4a:	6f 91       	pop	r22
     b4c:	5f 91       	pop	r21
     b4e:	4f 91       	pop	r20
     b50:	3f 91       	pop	r19
     b52:	2f 91       	pop	r18
     b54:	1f 91       	pop	r17
     b56:	0f 90       	pop	r0
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	0f 90       	pop	r0
     b5c:	1f 90       	pop	r1
     b5e:	18 95       	reti

00000b60 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     b60:	1f 93       	push	r17
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	ac 97       	sbiw	r28, 0x2c	; 44
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     b76:	e3 e9       	ldi	r30, 0x93	; 147
     b78:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     b7a:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     b7e:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     b80:	21 e0       	ldi	r18, 0x01	; 1
     b82:	eb 39       	cpi	r30, 0x9B	; 155
     b84:	f2 07       	cpc	r31, r18
     b86:	c9 f7       	brne	.-14     	; 0xb7a <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     b88:	c9 db       	rcall	.-2158   	; 0x31c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b8a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     b8e:	83 ff       	sbrs	r24, 3
     b90:	32 c1       	rjmp	.+612    	; 0xdf6 <USB_Device_ProcessControlRequest+0x296>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     b92:	80 91 93 01 	lds	r24, 0x0193

		switch (USB_ControlRequest.bRequest)
     b96:	20 91 94 01 	lds	r18, 0x0194
     b9a:	25 30       	cpi	r18, 0x05	; 5
     b9c:	09 f4       	brne	.+2      	; 0xba0 <USB_Device_ProcessControlRequest+0x40>
     b9e:	84 c0       	rjmp	.+264    	; 0xca8 <USB_Device_ProcessControlRequest+0x148>
     ba0:	26 30       	cpi	r18, 0x06	; 6
     ba2:	40 f4       	brcc	.+16     	; 0xbb4 <USB_Device_ProcessControlRequest+0x54>
     ba4:	21 30       	cpi	r18, 0x01	; 1
     ba6:	a1 f1       	breq	.+104    	; 0xc10 <USB_Device_ProcessControlRequest+0xb0>
     ba8:	21 30       	cpi	r18, 0x01	; 1
     baa:	70 f0       	brcs	.+28     	; 0xbc8 <USB_Device_ProcessControlRequest+0x68>
     bac:	23 30       	cpi	r18, 0x03	; 3
     bae:	09 f0       	breq	.+2      	; 0xbb2 <USB_Device_ProcessControlRequest+0x52>
     bb0:	22 c1       	rjmp	.+580    	; 0xdf6 <USB_Device_ProcessControlRequest+0x296>
     bb2:	2e c0       	rjmp	.+92     	; 0xc10 <USB_Device_ProcessControlRequest+0xb0>
     bb4:	28 30       	cpi	r18, 0x08	; 8
     bb6:	09 f4       	brne	.+2      	; 0xbba <USB_Device_ProcessControlRequest+0x5a>
     bb8:	f0 c0       	rjmp	.+480    	; 0xd9a <USB_Device_ProcessControlRequest+0x23a>
     bba:	29 30       	cpi	r18, 0x09	; 9
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <USB_Device_ProcessControlRequest+0x60>
     bbe:	ff c0       	rjmp	.+510    	; 0xdbe <USB_Device_ProcessControlRequest+0x25e>
     bc0:	26 30       	cpi	r18, 0x06	; 6
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <USB_Device_ProcessControlRequest+0x66>
     bc4:	18 c1       	rjmp	.+560    	; 0xdf6 <USB_Device_ProcessControlRequest+0x296>
     bc6:	93 c0       	rjmp	.+294    	; 0xcee <USB_Device_ProcessControlRequest+0x18e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bc8:	80 38       	cpi	r24, 0x80	; 128
     bca:	21 f0       	breq	.+8      	; 0xbd4 <USB_Device_ProcessControlRequest+0x74>
     bcc:	82 38       	cpi	r24, 0x82	; 130
     bce:	09 f0       	breq	.+2      	; 0xbd2 <USB_Device_ProcessControlRequest+0x72>
     bd0:	12 c1       	rjmp	.+548    	; 0xdf6 <USB_Device_ProcessControlRequest+0x296>
     bd2:	08 c0       	rjmp	.+16     	; 0xbe4 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     bd4:	80 91 8f 01 	lds	r24, 0x018F
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     bd8:	90 91 90 01 	lds	r25, 0x0190
     bdc:	99 23       	and	r25, r25
     bde:	71 f0       	breq	.+28     	; 0xbfc <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     be0:	82 60       	ori	r24, 0x02	; 2
     be2:	0c c0       	rjmp	.+24     	; 0xbfc <USB_Device_ProcessControlRequest+0x9c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     be4:	80 91 97 01 	lds	r24, 0x0197
     be8:	8f 70       	andi	r24, 0x0F	; 15
     bea:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     bee:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	95 ff       	sbrs	r25, 5
     bf6:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bf8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bfc:	90 91 e8 00 	lds	r25, 0x00E8
     c00:	97 7f       	andi	r25, 0xF7	; 247
     c02:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     c06:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     c0a:	10 92 f1 00 	sts	0x00F1, r1
     c0e:	d0 c0       	rjmp	.+416    	; 0xdb0 <USB_Device_ProcessControlRequest+0x250>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c10:	88 23       	and	r24, r24
     c12:	19 f0       	breq	.+6      	; 0xc1a <USB_Device_ProcessControlRequest+0xba>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	09 f0       	breq	.+2      	; 0xc1a <USB_Device_ProcessControlRequest+0xba>
     c18:	ee c0       	rjmp	.+476    	; 0xdf6 <USB_Device_ProcessControlRequest+0x296>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	8f 71       	andi	r24, 0x1F	; 31
     c1e:	90 70       	andi	r25, 0x00	; 0
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	29 f0       	breq	.+10     	; 0xc2e <USB_Device_ProcessControlRequest+0xce>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	91 05       	cpc	r25, r1
     c28:	09 f0       	breq	.+2      	; 0xc2c <USB_Device_ProcessControlRequest+0xcc>
     c2a:	e5 c0       	rjmp	.+458    	; 0xdf6 <USB_Device_ProcessControlRequest+0x296>
     c2c:	0b c0       	rjmp	.+22     	; 0xc44 <USB_Device_ProcessControlRequest+0xe4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     c2e:	80 91 95 01 	lds	r24, 0x0195
     c32:	81 30       	cpi	r24, 0x01	; 1
     c34:	09 f0       	breq	.+2      	; 0xc38 <USB_Device_ProcessControlRequest+0xd8>
     c36:	df c0       	rjmp	.+446    	; 0xdf6 <USB_Device_ProcessControlRequest+0x296>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     c38:	23 30       	cpi	r18, 0x03	; 3
     c3a:	09 f0       	breq	.+2      	; 0xc3e <USB_Device_ProcessControlRequest+0xde>
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	80 93 90 01 	sts	0x0190, r24
     c42:	2c c0       	rjmp	.+88     	; 0xc9c <USB_Device_ProcessControlRequest+0x13c>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     c44:	80 91 95 01 	lds	r24, 0x0195
     c48:	88 23       	and	r24, r24
     c4a:	41 f5       	brne	.+80     	; 0xc9c <USB_Device_ProcessControlRequest+0x13c>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c4c:	20 91 97 01 	lds	r18, 0x0197
     c50:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     c52:	09 f4       	brne	.+2      	; 0xc56 <USB_Device_ProcessControlRequest+0xf6>
     c54:	d0 c0       	rjmp	.+416    	; 0xdf6 <USB_Device_ProcessControlRequest+0x296>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c56:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     c5a:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     c5e:	80 ff       	sbrs	r24, 0
     c60:	1d c0       	rjmp	.+58     	; 0xc9c <USB_Device_ProcessControlRequest+0x13c>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     c62:	80 91 94 01 	lds	r24, 0x0194
     c66:	83 30       	cpi	r24, 0x03	; 3
     c68:	21 f4       	brne	.+8      	; 0xc72 <USB_Device_ProcessControlRequest+0x112>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c6a:	80 91 eb 00 	lds	r24, 0x00EB
     c6e:	80 62       	ori	r24, 0x20	; 32
     c70:	13 c0       	rjmp	.+38     	; 0xc98 <USB_Device_ProcessControlRequest+0x138>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     c72:	80 91 eb 00 	lds	r24, 0x00EB
     c76:	80 61       	ori	r24, 0x10	; 16
     c78:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <USB_Device_ProcessControlRequest+0x126>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	2a 95       	dec	r18
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <USB_Device_ProcessControlRequest+0x122>
     c8a:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     c8e:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     c92:	80 91 eb 00 	lds	r24, 0x00EB
     c96:	88 60       	ori	r24, 0x08	; 8
     c98:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c9c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ca0:	80 91 e8 00 	lds	r24, 0x00E8
     ca4:	87 7f       	andi	r24, 0xF7	; 247
     ca6:	87 c0       	rjmp	.+270    	; 0xdb6 <USB_Device_ProcessControlRequest+0x256>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ca8:	88 23       	and	r24, r24
     caa:	09 f0       	breq	.+2      	; 0xcae <USB_Device_ProcessControlRequest+0x14e>
     cac:	a4 c0       	rjmp	.+328    	; 0xdf6 <USB_Device_ProcessControlRequest+0x296>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     cae:	10 91 95 01 	lds	r17, 0x0195
     cb2:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     cb4:	80 91 e3 00 	lds	r24, 0x00E3
     cb8:	80 78       	andi	r24, 0x80	; 128
     cba:	81 2b       	or	r24, r17
     cbc:	80 93 e3 00 	sts	0x00E3, r24
     cc0:	80 91 e8 00 	lds	r24, 0x00E8
     cc4:	87 7f       	andi	r24, 0xF7	; 247
     cc6:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     cca:	94 dd       	rcall	.-1240   	; 0x7f4 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ccc:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     cd0:	80 ff       	sbrs	r24, 0
     cd2:	fc cf       	rjmp	.-8      	; 0xccc <USB_Device_ProcessControlRequest+0x16c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     cd4:	80 91 e3 00 	lds	r24, 0x00E3
     cd8:	80 68       	ori	r24, 0x80	; 128
     cda:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     cde:	11 23       	and	r17, r17
     ce0:	11 f0       	breq	.+4      	; 0xce6 <USB_Device_ProcessControlRequest+0x186>
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	01 c0       	rjmp	.+2      	; 0xce8 <USB_Device_ProcessControlRequest+0x188>
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	80 93 92 01 	sts	0x0192, r24
     cec:	84 c0       	rjmp	.+264    	; 0xdf6 <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     cee:	80 58       	subi	r24, 0x80	; 128
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	08 f0       	brcs	.+2      	; 0xcf6 <USB_Device_ProcessControlRequest+0x196>
     cf4:	80 c0       	rjmp	.+256    	; 0xdf6 <USB_Device_ProcessControlRequest+0x296>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     cf6:	80 91 95 01 	lds	r24, 0x0195
     cfa:	90 91 96 01 	lds	r25, 0x0196
     cfe:	23 e0       	ldi	r18, 0x03	; 3
     d00:	8c 3d       	cpi	r24, 0xDC	; 220
     d02:	92 07       	cpc	r25, r18
     d04:	91 f5       	brne	.+100    	; 0xd6a <USB_Device_ProcessControlRequest+0x20a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     d06:	83 e0       	ldi	r24, 0x03	; 3
     d08:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     d0a:	8a e2       	ldi	r24, 0x2A	; 42
     d0c:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     d0e:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     d10:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     d12:	de 01       	movw	r26, r28
     d14:	15 96       	adiw	r26, 0x05	; 5
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     d1a:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     d1c:	61 e2       	ldi	r22, 0x21	; 33
     d1e:	e4 2f       	mov	r30, r20
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	60 93 57 00 	sts	0x0057, r22
     d26:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
     d28:	80 ff       	sbrs	r24, 0
     d2a:	03 c0       	rjmp	.+6      	; 0xd32 <USB_Device_ProcessControlRequest+0x1d2>
					{
						SerialByte >>= 4;
     d2c:	e2 95       	swap	r30
     d2e:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     d30:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     d32:	ef 70       	andi	r30, 0x0F	; 15
     d34:	2e 2f       	mov	r18, r30
     d36:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     d38:	ea 30       	cpi	r30, 0x0A	; 10
     d3a:	18 f0       	brcs	.+6      	; 0xd42 <USB_Device_ProcessControlRequest+0x1e2>
     d3c:	29 5c       	subi	r18, 0xC9	; 201
     d3e:	3f 4f       	sbci	r19, 0xFF	; 255
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <USB_Device_ProcessControlRequest+0x1e6>
     d42:	20 5d       	subi	r18, 0xD0	; 208
     d44:	3f 4f       	sbci	r19, 0xFF	; 255
     d46:	2d 93       	st	X+, r18
     d48:	3d 93       	st	X+, r19
     d4a:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d4c:	84 31       	cpi	r24, 0x14	; 20
     d4e:	91 05       	cpc	r25, r1
     d50:	31 f7       	brne	.-52     	; 0xd1e <USB_Device_ProcessControlRequest+0x1be>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d52:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d54:	80 91 e8 00 	lds	r24, 0x00E8
     d58:	87 7f       	andi	r24, 0xF7	; 247
     d5a:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     d5e:	ce 01       	movw	r24, r28
     d60:	03 96       	adiw	r24, 0x03	; 3
     d62:	6a e2       	ldi	r22, 0x2A	; 42
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	be db       	rcall	.-2180   	; 0x4e4 <Endpoint_Write_Control_Stream_LE>
     d68:	12 c0       	rjmp	.+36     	; 0xd8e <USB_Device_ProcessControlRequest+0x22e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     d6a:	60 91 97 01 	lds	r22, 0x0197
     d6e:	ae 01       	movw	r20, r28
     d70:	4f 5f       	subi	r20, 0xFF	; 255
     d72:	5f 4f       	sbci	r21, 0xFF	; 255
     d74:	1c db       	rcall	.-2504   	; 0x3ae <CALLBACK_USB_GetDescriptor>
     d76:	bc 01       	movw	r22, r24
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	09 f4       	brne	.+2      	; 0xd7e <USB_Device_ProcessControlRequest+0x21e>
     d7c:	3c c0       	rjmp	.+120    	; 0xdf6 <USB_Device_ProcessControlRequest+0x296>
     d7e:	80 91 e8 00 	lds	r24, 0x00E8
     d82:	87 7f       	andi	r24, 0xF7	; 247
     d84:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	9a 81       	ldd	r25, Y+2	; 0x02
     d8c:	54 dc       	rcall	.-1880   	; 0x636 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d8e:	80 91 e8 00 	lds	r24, 0x00E8
     d92:	8b 77       	andi	r24, 0x7B	; 123
     d94:	80 93 e8 00 	sts	0x00E8, r24
     d98:	2e c0       	rjmp	.+92     	; 0xdf6 <USB_Device_ProcessControlRequest+0x296>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     d9a:	80 38       	cpi	r24, 0x80	; 128
     d9c:	61 f5       	brne	.+88     	; 0xdf6 <USB_Device_ProcessControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d9e:	80 91 e8 00 	lds	r24, 0x00E8
     da2:	87 7f       	andi	r24, 0xF7	; 247
     da4:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     da8:	80 91 8e 01 	lds	r24, 0x018E
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     dac:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     db0:	80 91 e8 00 	lds	r24, 0x00E8
     db4:	8e 77       	andi	r24, 0x7E	; 126
     db6:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     dba:	1c dd       	rcall	.-1480   	; 0x7f4 <Endpoint_ClearStatusStage>
     dbc:	1c c0       	rjmp	.+56     	; 0xdf6 <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     dbe:	88 23       	and	r24, r24
     dc0:	d1 f4       	brne	.+52     	; 0xdf6 <USB_Device_ProcessControlRequest+0x296>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     dc2:	90 91 95 01 	lds	r25, 0x0195
     dc6:	92 30       	cpi	r25, 0x02	; 2
     dc8:	b0 f4       	brcc	.+44     	; 0xdf6 <USB_Device_ProcessControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dca:	80 91 e8 00 	lds	r24, 0x00E8
     dce:	87 7f       	andi	r24, 0xF7	; 247
     dd0:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     dd4:	90 93 8e 01 	sts	0x018E, r25

	Endpoint_ClearStatusStage();
     dd8:	0d dd       	rcall	.-1510   	; 0x7f4 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     dda:	80 91 8e 01 	lds	r24, 0x018E
     dde:	88 23       	and	r24, r24
     de0:	21 f4       	brne	.+8      	; 0xdea <USB_Device_ProcessControlRequest+0x28a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     de2:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     de6:	87 ff       	sbrs	r24, 7
     de8:	02 c0       	rjmp	.+4      	; 0xdee <USB_Device_ProcessControlRequest+0x28e>
     dea:	84 e0       	ldi	r24, 0x04	; 4
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <USB_Device_ProcessControlRequest+0x290>
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	80 93 92 01 	sts	0x0192, r24

	EVENT_USB_Device_ConfigurationChanged();
     df4:	78 da       	rcall	.-2832   	; 0x2e6 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     df6:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     dfa:	83 ff       	sbrs	r24, 3
     dfc:	0a c0       	rjmp	.+20     	; 0xe12 <USB_Device_ProcessControlRequest+0x2b2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dfe:	80 91 e8 00 	lds	r24, 0x00E8
     e02:	87 7f       	andi	r24, 0xF7	; 247
     e04:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e08:	80 91 eb 00 	lds	r24, 0x00EB
     e0c:	80 62       	ori	r24, 0x20	; 32
     e0e:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     e12:	ac 96       	adiw	r28, 0x2c	; 44
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	de bf       	out	0x3e, r29	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	1f 91       	pop	r17
     e24:	08 95       	ret

00000e26 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     e26:	08 95       	ret

00000e28 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     e28:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     e2a:	80 91 92 01 	lds	r24, 0x0192
     e2e:	88 23       	and	r24, r24
     e30:	a9 f0       	breq	.+42     	; 0xe5c <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e32:	80 91 e9 00 	lds	r24, 0x00E9
     e36:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e38:	90 91 ec 00 	lds	r25, 0x00EC
     e3c:	90 ff       	sbrs	r25, 0
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <USB_USBTask+0x1c>
     e40:	10 e8       	ldi	r17, 0x80	; 128
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <USB_USBTask+0x1e>
     e44:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e46:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e48:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e4c:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     e50:	83 ff       	sbrs	r24, 3
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
     e54:	85 de       	rcall	.-758    	; 0xb60 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e56:	1f 70       	andi	r17, 0x0F	; 15
     e58:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     e5c:	1f 91       	pop	r17
     e5e:	08 95       	ret

00000e60 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e66:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     e6a:	83 ff       	sbrs	r24, 3
     e6c:	a3 c0       	rjmp	.+326    	; 0xfb4 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     e6e:	88 81       	ld	r24, Y
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	20 91 97 01 	lds	r18, 0x0197
     e76:	30 91 98 01 	lds	r19, 0x0198
     e7a:	28 17       	cp	r18, r24
     e7c:	39 07       	cpc	r19, r25
     e7e:	09 f0       	breq	.+2      	; 0xe82 <CDC_Device_ProcessControlRequest+0x22>
     e80:	99 c0       	rjmp	.+306    	; 0xfb4 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	switch (USB_ControlRequest.bRequest)
     e82:	80 91 94 01 	lds	r24, 0x0194
     e86:	81 32       	cpi	r24, 0x21	; 33
     e88:	69 f0       	breq	.+26     	; 0xea4 <CDC_Device_ProcessControlRequest+0x44>
     e8a:	82 32       	cpi	r24, 0x22	; 34
     e8c:	20 f4       	brcc	.+8      	; 0xe96 <CDC_Device_ProcessControlRequest+0x36>
     e8e:	80 32       	cpi	r24, 0x20	; 32
     e90:	09 f0       	breq	.+2      	; 0xe94 <CDC_Device_ProcessControlRequest+0x34>
     e92:	90 c0       	rjmp	.+288    	; 0xfb4 <CDC_Device_ProcessControlRequest+0x154>
     e94:	3c c0       	rjmp	.+120    	; 0xf0e <CDC_Device_ProcessControlRequest+0xae>
     e96:	82 32       	cpi	r24, 0x22	; 34
     e98:	09 f4       	brne	.+2      	; 0xe9c <CDC_Device_ProcessControlRequest+0x3c>
     e9a:	6b c0       	rjmp	.+214    	; 0xf72 <CDC_Device_ProcessControlRequest+0x112>
     e9c:	83 32       	cpi	r24, 0x23	; 35
     e9e:	09 f0       	breq	.+2      	; 0xea2 <CDC_Device_ProcessControlRequest+0x42>
     ea0:	89 c0       	rjmp	.+274    	; 0xfb4 <CDC_Device_ProcessControlRequest+0x154>
     ea2:	7a c0       	rjmp	.+244    	; 0xf98 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     ea4:	80 91 93 01 	lds	r24, 0x0193
     ea8:	81 3a       	cpi	r24, 0xA1	; 161
     eaa:	09 f0       	breq	.+2      	; 0xeae <CDC_Device_ProcessControlRequest+0x4e>
     eac:	83 c0       	rjmp	.+262    	; 0xfb4 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     eae:	80 91 e8 00 	lds	r24, 0x00E8
     eb2:	87 7f       	andi	r24, 0xF7	; 247
     eb4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     eb8:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     ebc:	80 ff       	sbrs	r24, 0
     ebe:	fc cf       	rjmp	.-8      	; 0xeb8 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     ec0:	8c 89       	ldd	r24, Y+20	; 0x14
     ec2:	9d 89       	ldd	r25, Y+21	; 0x15
     ec4:	ae 89       	ldd	r26, Y+22	; 0x16
     ec6:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     ec8:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     ecc:	29 2f       	mov	r18, r25
     ece:	3a 2f       	mov	r19, r26
     ed0:	4b 2f       	mov	r20, r27
     ed2:	55 27       	eor	r21, r21
     ed4:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
     ed8:	9d 01       	movw	r18, r26
     eda:	44 27       	eor	r20, r20
     edc:	55 27       	eor	r21, r21
     ede:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
     ee2:	8b 2f       	mov	r24, r27
     ee4:	99 27       	eor	r25, r25
     ee6:	aa 27       	eor	r26, r26
     ee8:	bb 27       	eor	r27, r27
     eea:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     eee:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ef0:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     ef4:	89 8d       	ldd	r24, Y+25	; 0x19
     ef6:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     efa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     efc:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f00:	80 91 e8 00 	lds	r24, 0x00E8
     f04:	8e 77       	andi	r24, 0x7E	; 126
     f06:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     f0a:	74 dc       	rcall	.-1816   	; 0x7f4 <Endpoint_ClearStatusStage>
     f0c:	53 c0       	rjmp	.+166    	; 0xfb4 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f0e:	80 91 93 01 	lds	r24, 0x0193
     f12:	81 32       	cpi	r24, 0x21	; 33
     f14:	09 f0       	breq	.+2      	; 0xf18 <CDC_Device_ProcessControlRequest+0xb8>
     f16:	4e c0       	rjmp	.+156    	; 0xfb4 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f18:	80 91 e8 00 	lds	r24, 0x00E8
     f1c:	87 7f       	andi	r24, 0xF7	; 247
     f1e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     f22:	05 c0       	rjmp	.+10     	; 0xf2e <CDC_Device_ProcessControlRequest+0xce>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     f24:	80 91 92 01 	lds	r24, 0x0192
     f28:	88 23       	and	r24, r24
     f2a:	09 f4       	brne	.+2      	; 0xf2e <CDC_Device_ProcessControlRequest+0xce>
     f2c:	43 c0       	rjmp	.+134    	; 0xfb4 <CDC_Device_ProcessControlRequest+0x154>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f2e:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     f32:	82 ff       	sbrs	r24, 2
     f34:	f7 cf       	rjmp	.-18     	; 0xf24 <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     f36:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
     f3a:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
     f3e:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
     f42:	80 91 f1 00 	lds	r24, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     f46:	3c 8b       	std	Y+20, r19	; 0x14
     f48:	2d 8b       	std	Y+21, r18	; 0x15
     f4a:	9e 8b       	std	Y+22, r25	; 0x16
     f4c:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f4e:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     f52:	88 8f       	std	Y+24, r24	; 0x18
     f54:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     f58:	89 8f       	std	Y+25, r24	; 0x19
     f5a:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     f5e:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f60:	80 91 e8 00 	lds	r24, 0x00E8
     f64:	8b 77       	andi	r24, 0x7B	; 123
     f66:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     f6a:	44 dc       	rcall	.-1912   	; 0x7f4 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f6c:	ce 01       	movw	r24, r28
     f6e:	f4 d0       	rcall	.+488    	; 0x1158 <CDC_Device_Event_Stub>
     f70:	21 c0       	rjmp	.+66     	; 0xfb4 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f72:	80 91 93 01 	lds	r24, 0x0193
     f76:	81 32       	cpi	r24, 0x21	; 33
     f78:	e9 f4       	brne	.+58     	; 0xfb4 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f7a:	80 91 e8 00 	lds	r24, 0x00E8
     f7e:	87 7f       	andi	r24, 0xF7	; 247
     f80:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f84:	37 dc       	rcall	.-1938   	; 0x7f4 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     f86:	80 91 95 01 	lds	r24, 0x0195
     f8a:	90 91 96 01 	lds	r25, 0x0196
     f8e:	99 8b       	std	Y+17, r25	; 0x11
     f90:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     f92:	ce 01       	movw	r24, r28
     f94:	e1 d0       	rcall	.+450    	; 0x1158 <CDC_Device_Event_Stub>
     f96:	0e c0       	rjmp	.+28     	; 0xfb4 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f98:	80 91 93 01 	lds	r24, 0x0193
     f9c:	81 32       	cpi	r24, 0x21	; 33
     f9e:	51 f4       	brne	.+20     	; 0xfb4 <CDC_Device_ProcessControlRequest+0x154>
     fa0:	80 91 e8 00 	lds	r24, 0x00E8
     fa4:	87 7f       	andi	r24, 0xF7	; 247
     fa6:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     faa:	24 dc       	rcall	.-1976   	; 0x7f4 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     fac:	ce 01       	movw	r24, r28
     fae:	60 91 95 01 	lds	r22, 0x0195
     fb2:	d2 d0       	rcall	.+420    	; 0x1158 <CDC_Device_Event_Stub>
			}

			break;
	}
}
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	08 95       	ret

00000fba <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     fc0:	40 96       	adiw	r24, 0x10	; 16
     fc2:	fc 01       	movw	r30, r24
     fc4:	8b e0       	ldi	r24, 0x0B	; 11
     fc6:	df 01       	movw	r26, r30
     fc8:	1d 92       	st	X+, r1
     fca:	8a 95       	dec	r24
     fcc:	e9 f7       	brne	.-6      	; 0xfc8 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     fce:	82 e0       	ldi	r24, 0x02	; 2
     fd0:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     fd2:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     fd4:	83 e0       	ldi	r24, 0x03	; 3
     fd6:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     fd8:	ce 01       	movw	r24, r28
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	61 e0       	ldi	r22, 0x01	; 1
     fde:	c6 db       	rcall	.-2164   	; 0x76c <Endpoint_ConfigureEndpointTable>
     fe0:	88 23       	and	r24, r24
     fe2:	59 f0       	breq	.+22     	; 0xffa <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     fe4:	ce 01       	movw	r24, r28
     fe6:	06 96       	adiw	r24, 0x06	; 6
     fe8:	61 e0       	ldi	r22, 0x01	; 1
     fea:	c0 db       	rcall	.-2176   	; 0x76c <Endpoint_ConfigureEndpointTable>
     fec:	88 23       	and	r24, r24
     fee:	29 f0       	breq	.+10     	; 0xffa <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     ff0:	ce 01       	movw	r24, r28
     ff2:	0b 96       	adiw	r24, 0x0b	; 11
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	ba db       	rcall	.-2188   	; 0x76c <Endpoint_ConfigureEndpointTable>
     ff8:	01 c0       	rjmp	.+2      	; 0xffc <CDC_Device_ConfigureEndpoints+0x42>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
     ffa:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	08 95       	ret

00001002 <CDC_Device_SendString>:
	#endif
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
    1002:	fc 01       	movw	r30, r24
    1004:	cb 01       	movw	r24, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1006:	20 91 92 01 	lds	r18, 0x0192
    100a:	24 30       	cpi	r18, 0x04	; 4
    100c:	c1 f4       	brne	.+48     	; 0x103e <CDC_Device_SendString+0x3c>
    100e:	24 89       	ldd	r18, Z+20	; 0x14
    1010:	35 89       	ldd	r19, Z+21	; 0x15
    1012:	46 89       	ldd	r20, Z+22	; 0x16
    1014:	57 89       	ldd	r21, Z+23	; 0x17
    1016:	21 15       	cp	r18, r1
    1018:	31 05       	cpc	r19, r1
    101a:	41 05       	cpc	r20, r1
    101c:	51 05       	cpc	r21, r1
    101e:	89 f0       	breq	.+34     	; 0x1042 <CDC_Device_SendString+0x40>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1020:	21 81       	ldd	r18, Z+1	; 0x01
    1022:	2f 70       	andi	r18, 0x0F	; 15
    1024:	20 93 e9 00 	sts	0x00E9, r18
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
    1028:	fb 01       	movw	r30, r22
    102a:	01 90       	ld	r0, Z+
    102c:	00 20       	and	r0, r0
    102e:	e9 f7       	brne	.-6      	; 0x102a <CDC_Device_SendString+0x28>
    1030:	31 97       	sbiw	r30, 0x01	; 1
    1032:	e6 1b       	sub	r30, r22
    1034:	f7 0b       	sbc	r31, r23
    1036:	bf 01       	movw	r22, r30
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	f6 c9       	rjmp	.-3092   	; 0x42a <Endpoint_Write_Stream_LE>

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    103e:	82 e0       	ldi	r24, 0x02	; 2
    1040:	08 95       	ret
    1042:	82 e0       	ldi	r24, 0x02	; 2

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
}
    1044:	08 95       	ret

00001046 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1046:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1048:	80 91 92 01 	lds	r24, 0x0192
    104c:	84 30       	cpi	r24, 0x04	; 4
    104e:	51 f5       	brne	.+84     	; 0x10a4 <CDC_Device_Flush+0x5e>
    1050:	24 89       	ldd	r18, Z+20	; 0x14
    1052:	35 89       	ldd	r19, Z+21	; 0x15
    1054:	46 89       	ldd	r20, Z+22	; 0x16
    1056:	57 89       	ldd	r21, Z+23	; 0x17
    1058:	21 15       	cp	r18, r1
    105a:	31 05       	cpc	r19, r1
    105c:	41 05       	cpc	r20, r1
    105e:	51 05       	cpc	r21, r1
    1060:	09 f1       	breq	.+66     	; 0x10a4 <CDC_Device_Flush+0x5e>
    1062:	81 81       	ldd	r24, Z+1	; 0x01
    1064:	8f 70       	andi	r24, 0x0F	; 15
    1066:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    106a:	90 91 f3 00 	lds	r25, 0x00F3
    106e:	80 91 f2 00 	lds	r24, 0x00F2
    1072:	39 2f       	mov	r19, r25
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	82 2b       	or	r24, r18
    107a:	93 2b       	or	r25, r19

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	a1 f0       	breq	.+40     	; 0x10a8 <CDC_Device_Flush+0x62>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1080:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1084:	80 91 e8 00 	lds	r24, 0x00E8
    1088:	8e 77       	andi	r24, 0x7E	; 126
    108a:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    108e:	95 fd       	sbrc	r25, 5
    1090:	0d c0       	rjmp	.+26     	; 0x10ac <CDC_Device_Flush+0x66>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1092:	d1 db       	rcall	.-2142   	; 0x836 <Endpoint_WaitUntilReady>
    1094:	88 23       	and	r24, r24
    1096:	59 f4       	brne	.+22     	; 0x10ae <CDC_Device_Flush+0x68>
    1098:	90 91 e8 00 	lds	r25, 0x00E8
    109c:	9e 77       	andi	r25, 0x7E	; 126
    109e:	90 93 e8 00 	sts	0x00E8, r25
    10a2:	08 95       	ret
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	08 95       	ret
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	08 95       	ret
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
    10ac:	80 e0       	ldi	r24, 0x00	; 0
}
    10ae:	08 95       	ret

000010b0 <CDC_Device_USBTask>:
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    10b0:	20 91 92 01 	lds	r18, 0x0192
    10b4:	24 30       	cpi	r18, 0x04	; 4
    10b6:	99 f4       	brne	.+38     	; 0x10de <CDC_Device_USBTask+0x2e>
    10b8:	fc 01       	movw	r30, r24
    10ba:	24 89       	ldd	r18, Z+20	; 0x14
    10bc:	35 89       	ldd	r19, Z+21	; 0x15
    10be:	46 89       	ldd	r20, Z+22	; 0x16
    10c0:	57 89       	ldd	r21, Z+23	; 0x17
    10c2:	21 15       	cp	r18, r1
    10c4:	31 05       	cpc	r19, r1
    10c6:	41 05       	cpc	r20, r1
    10c8:	51 05       	cpc	r21, r1
    10ca:	49 f0       	breq	.+18     	; 0x10de <CDC_Device_USBTask+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10cc:	21 81       	ldd	r18, Z+1	; 0x01
    10ce:	2f 70       	andi	r18, 0x0F	; 15
    10d0:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10d4:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    10d8:	20 ff       	sbrs	r18, 0
    10da:	01 c0       	rjmp	.+2      	; 0x10de <CDC_Device_USBTask+0x2e>
	  CDC_Device_Flush(CDCInterfaceInfo);
    10dc:	b4 cf       	rjmp	.-152    	; 0x1046 <CDC_Device_Flush>
    10de:	08 95       	ret

000010e0 <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    10e0:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    10e2:	80 91 92 01 	lds	r24, 0x0192
    10e6:	84 30       	cpi	r24, 0x04	; 4
    10e8:	99 f5       	brne	.+102    	; 0x1150 <CDC_Device_ReceiveByte+0x70>
    10ea:	24 89       	ldd	r18, Z+20	; 0x14
    10ec:	35 89       	ldd	r19, Z+21	; 0x15
    10ee:	46 89       	ldd	r20, Z+22	; 0x16
    10f0:	57 89       	ldd	r21, Z+23	; 0x17
    10f2:	21 15       	cp	r18, r1
    10f4:	31 05       	cpc	r19, r1
    10f6:	41 05       	cpc	r20, r1
    10f8:	51 05       	cpc	r21, r1
    10fa:	51 f1       	breq	.+84     	; 0x1150 <CDC_Device_ReceiveByte+0x70>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10fc:	86 81       	ldd	r24, Z+6	; 0x06
    10fe:	8f 70       	andi	r24, 0x0F	; 15
    1100:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1104:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1108:	82 ff       	sbrs	r24, 2
    110a:	22 c0       	rjmp	.+68     	; 0x1150 <CDC_Device_ReceiveByte+0x70>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    110c:	90 91 f3 00 	lds	r25, 0x00F3
    1110:	80 91 f2 00 	lds	r24, 0x00F2
    1114:	39 2f       	mov	r19, r25
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	82 2b       	or	r24, r18
    111c:	93 2b       	or	r25, r19
	{
		if (Endpoint_BytesInEndpoint())
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	21 f0       	breq	.+8      	; 0x112a <CDC_Device_ReceiveByte+0x4a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1122:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	02 c0       	rjmp	.+4      	; 0x112e <CDC_Device_ReceiveByte+0x4e>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    112a:	2f ef       	ldi	r18, 0xFF	; 255
    112c:	3f ef       	ldi	r19, 0xFF	; 255
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    112e:	90 91 f3 00 	lds	r25, 0x00F3
    1132:	80 91 f2 00 	lds	r24, 0x00F2
    1136:	59 2f       	mov	r21, r25
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	84 2b       	or	r24, r20
    113e:	95 2b       	or	r25, r21
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	41 f4       	brne	.+16     	; 0x1154 <CDC_Device_ReceiveByte+0x74>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1144:	80 91 e8 00 	lds	r24, 0x00E8
    1148:	8b 77       	andi	r24, 0x7B	; 123
    114a:	80 93 e8 00 	sts	0x00E8, r24
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <CDC_Device_ReceiveByte+0x74>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1150:	2f ef       	ldi	r18, 0xFF	; 255
    1152:	3f ef       	ldi	r19, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1154:	c9 01       	movw	r24, r18
    1156:	08 95       	ret

00001158 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    1158:	08 95       	ret

0000115a <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    115a:	6f 92       	push	r6
    115c:	7f 92       	push	r7
    115e:	8f 92       	push	r8
    1160:	9f 92       	push	r9
    1162:	af 92       	push	r10
    1164:	bf 92       	push	r11
    1166:	cf 92       	push	r12
    1168:	df 92       	push	r13
    116a:	ef 92       	push	r14
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <HID_Device_ProcessControlRequest+0x1e>
    1178:	0f 92       	push	r0
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1180:	6d b6       	in	r6, 0x3d	; 61
    1182:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1184:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1188:	83 ff       	sbrs	r24, 3
    118a:	0d c1       	rjmp	.+538    	; 0x13a6 <HID_Device_ProcessControlRequest+0x24c>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    118c:	f7 01       	movw	r30, r14
    118e:	80 81       	ld	r24, Z
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	20 91 97 01 	lds	r18, 0x0197
    1196:	30 91 98 01 	lds	r19, 0x0198
    119a:	28 17       	cp	r18, r24
    119c:	39 07       	cpc	r19, r25
    119e:	09 f0       	breq	.+2      	; 0x11a2 <HID_Device_ProcessControlRequest+0x48>
    11a0:	02 c1       	rjmp	.+516    	; 0x13a6 <HID_Device_ProcessControlRequest+0x24c>
	  return;

	switch (USB_ControlRequest.bRequest)
    11a2:	80 91 94 01 	lds	r24, 0x0194
    11a6:	83 30       	cpi	r24, 0x03	; 3
    11a8:	09 f4       	brne	.+2      	; 0x11ac <HID_Device_ProcessControlRequest+0x52>
    11aa:	a4 c0       	rjmp	.+328    	; 0x12f4 <HID_Device_ProcessControlRequest+0x19a>
    11ac:	84 30       	cpi	r24, 0x04	; 4
    11ae:	30 f4       	brcc	.+12     	; 0x11bc <HID_Device_ProcessControlRequest+0x62>
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	71 f0       	breq	.+28     	; 0x11d0 <HID_Device_ProcessControlRequest+0x76>
    11b4:	82 30       	cpi	r24, 0x02	; 2
    11b6:	09 f0       	breq	.+2      	; 0x11ba <HID_Device_ProcessControlRequest+0x60>
    11b8:	f6 c0       	rjmp	.+492    	; 0x13a6 <HID_Device_ProcessControlRequest+0x24c>
    11ba:	d9 c0       	rjmp	.+434    	; 0x136e <HID_Device_ProcessControlRequest+0x214>
    11bc:	8a 30       	cpi	r24, 0x0A	; 10
    11be:	09 f4       	brne	.+2      	; 0x11c2 <HID_Device_ProcessControlRequest+0x68>
    11c0:	be c0       	rjmp	.+380    	; 0x133e <HID_Device_ProcessControlRequest+0x1e4>
    11c2:	8b 30       	cpi	r24, 0x0B	; 11
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <HID_Device_ProcessControlRequest+0x6e>
    11c6:	a7 c0       	rjmp	.+334    	; 0x1316 <HID_Device_ProcessControlRequest+0x1bc>
    11c8:	89 30       	cpi	r24, 0x09	; 9
    11ca:	09 f0       	breq	.+2      	; 0x11ce <HID_Device_ProcessControlRequest+0x74>
    11cc:	ec c0       	rjmp	.+472    	; 0x13a6 <HID_Device_ProcessControlRequest+0x24c>
    11ce:	4c c0       	rjmp	.+152    	; 0x1268 <HID_Device_ProcessControlRequest+0x10e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    11d0:	80 91 93 01 	lds	r24, 0x0193
    11d4:	81 3a       	cpi	r24, 0xA1	; 161
    11d6:	09 f0       	breq	.+2      	; 0x11da <HID_Device_ProcessControlRequest+0x80>
    11d8:	e6 c0       	rjmp	.+460    	; 0x13a6 <HID_Device_ProcessControlRequest+0x24c>
    11da:	cd b6       	in	r12, 0x3d	; 61
    11dc:	de b6       	in	r13, 0x3e	; 62
    11de:	9d b6       	in	r9, 0x3d	; 61
    11e0:	8d 2c       	mov	r8, r13
			{
				uint16_t ReportSize = 0;
    11e2:	1b 82       	std	Y+3, r1	; 0x03
    11e4:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    11e6:	80 91 95 01 	lds	r24, 0x0195
    11ea:	00 91 96 01 	lds	r16, 0x0196
    11ee:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    11f0:	f7 01       	movw	r30, r14
    11f2:	40 85       	ldd	r20, Z+8	; 0x08
    11f4:	c4 1a       	sub	r12, r20
    11f6:	d1 08       	sbc	r13, r1
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de be       	out	0x3e, r13	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd be       	out	0x3d, r12	; 61
    1202:	08 94       	sec
    1204:	c1 1c       	adc	r12, r1
    1206:	d1 1c       	adc	r13, r1
    1208:	bc 2c       	mov	r11, r12
    120a:	ad 2c       	mov	r10, r13

				memset(ReportData, 0, sizeof(ReportData));
    120c:	c6 01       	movw	r24, r12
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	dc d1       	rcall	.+952    	; 0x15ce <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1216:	40 2f       	mov	r20, r16
    1218:	41 50       	subi	r20, 0x01	; 1
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    121a:	c7 01       	movw	r24, r14
    121c:	be 01       	movw	r22, r28
    121e:	6f 5f       	subi	r22, 0xFF	; 255
    1220:	7f 4f       	sbci	r23, 0xFF	; 255
    1222:	96 01       	movw	r18, r12
    1224:	8e 01       	movw	r16, r28
    1226:	0e 5f       	subi	r16, 0xFE	; 254
    1228:	1f 4f       	sbci	r17, 0xFF	; 255
    122a:	8a d8       	rcall	.-3820   	; 0x340 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    122c:	f7 01       	movw	r30, r14
    122e:	26 81       	ldd	r18, Z+6	; 0x06
    1230:	37 81       	ldd	r19, Z+7	; 0x07
    1232:	21 15       	cp	r18, r1
    1234:	31 05       	cpc	r19, r1
    1236:	29 f0       	breq	.+10     	; 0x1242 <HID_Device_ProcessControlRequest+0xe8>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1238:	40 85       	ldd	r20, Z+8	; 0x08
    123a:	c9 01       	movw	r24, r18
    123c:	b6 01       	movw	r22, r12
    123e:	50 e0       	ldi	r21, 0x00	; 0
    1240:	bd d1       	rcall	.+890    	; 0x15bc <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1242:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1246:	80 91 e8 00 	lds	r24, 0x00E8
    124a:	87 7f       	andi	r24, 0xF7	; 247
    124c:	80 93 e8 00 	sts	0x00E8, r24
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1250:	6a 81       	ldd	r22, Y+2	; 0x02
    1252:	7b 81       	ldd	r23, Y+3	; 0x03
    1254:	8b 2d       	mov	r24, r11
    1256:	9a 2d       	mov	r25, r10
    1258:	45 d9       	rcall	.-3446   	; 0x4e4 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    125a:	80 91 e8 00 	lds	r24, 0x00E8
    125e:	8b 77       	andi	r24, 0x7B	; 123
    1260:	80 93 e8 00 	sts	0x00E8, r24
    1264:	94 01       	movw	r18, r8
    1266:	3e c0       	rjmp	.+124    	; 0x12e4 <HID_Device_ProcessControlRequest+0x18a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1268:	80 91 93 01 	lds	r24, 0x0193
    126c:	81 32       	cpi	r24, 0x21	; 33
    126e:	09 f0       	breq	.+2      	; 0x1272 <HID_Device_ProcessControlRequest+0x118>
    1270:	9a c0       	rjmp	.+308    	; 0x13a6 <HID_Device_ProcessControlRequest+0x24c>
    1272:	cd b6       	in	r12, 0x3d	; 61
    1274:	de b6       	in	r13, 0x3e	; 62
    1276:	bd b6       	in	r11, 0x3d	; 61
    1278:	9d 2c       	mov	r9, r13
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    127a:	00 91 99 01 	lds	r16, 0x0199
    127e:	10 91 9a 01 	lds	r17, 0x019A
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1282:	a0 90 95 01 	lds	r10, 0x0195
    1286:	80 90 96 01 	lds	r8, 0x0196
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    128a:	8d b7       	in	r24, 0x3d	; 61
    128c:	9e b7       	in	r25, 0x3e	; 62
    128e:	80 1b       	sub	r24, r16
    1290:	91 0b       	sbc	r25, r17
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	9e bf       	out	0x3e, r25	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	8d bf       	out	0x3d, r24	; 61
    129c:	cd b6       	in	r12, 0x3d	; 61
    129e:	de b6       	in	r13, 0x3e	; 62
    12a0:	08 94       	sec
    12a2:	c1 1c       	adc	r12, r1
    12a4:	d1 1c       	adc	r13, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12a6:	80 91 e8 00 	lds	r24, 0x00E8
    12aa:	87 7f       	andi	r24, 0xF7	; 247
    12ac:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    12b0:	c6 01       	movw	r24, r12
    12b2:	b8 01       	movw	r22, r16
    12b4:	7a d9       	rcall	.-3340   	; 0x5aa <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12b6:	80 91 e8 00 	lds	r24, 0x00E8
    12ba:	8e 77       	andi	r24, 0x7E	; 126
    12bc:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	aa 20       	and	r10, r10
    12c6:	11 f4       	brne	.+4      	; 0x12cc <HID_Device_ProcessControlRequest+0x172>
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    12cc:	48 2d       	mov	r20, r8
    12ce:	41 50       	subi	r20, 0x01	; 1

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    12d0:	96 01       	movw	r18, r12
    12d2:	28 0f       	add	r18, r24
    12d4:	39 1f       	adc	r19, r25
    12d6:	08 1b       	sub	r16, r24
    12d8:	19 0b       	sbc	r17, r25
    12da:	c7 01       	movw	r24, r14
    12dc:	6a 2d       	mov	r22, r10
    12de:	66 d8       	rcall	.-3892   	; 0x3ac <CALLBACK_HID_Device_ProcessHIDReport>
    12e0:	3b 2d       	mov	r19, r11
    12e2:	29 2d       	mov	r18, r9
    12e4:	83 2f       	mov	r24, r19
    12e6:	92 2f       	mov	r25, r18
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	9e bf       	out	0x3e, r25	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	8d bf       	out	0x3d, r24	; 61
    12f2:	59 c0       	rjmp	.+178    	; 0x13a6 <HID_Device_ProcessControlRequest+0x24c>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    12f4:	80 91 93 01 	lds	r24, 0x0193
    12f8:	81 3a       	cpi	r24, 0xA1	; 161
    12fa:	09 f0       	breq	.+2      	; 0x12fe <HID_Device_ProcessControlRequest+0x1a4>
    12fc:	54 c0       	rjmp	.+168    	; 0x13a6 <HID_Device_ProcessControlRequest+0x24c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12fe:	80 91 e8 00 	lds	r24, 0x00E8
    1302:	87 7f       	andi	r24, 0xF7	; 247
    1304:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1308:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    130c:	80 ff       	sbrs	r24, 0
    130e:	fc cf       	rjmp	.-8      	; 0x1308 <HID_Device_ProcessControlRequest+0x1ae>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1310:	f7 01       	movw	r30, r14
    1312:	81 85       	ldd	r24, Z+9	; 0x09
    1314:	40 c0       	rjmp	.+128    	; 0x1396 <HID_Device_ProcessControlRequest+0x23c>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1316:	80 91 93 01 	lds	r24, 0x0193
    131a:	81 32       	cpi	r24, 0x21	; 33
    131c:	09 f0       	breq	.+2      	; 0x1320 <HID_Device_ProcessControlRequest+0x1c6>
    131e:	43 c0       	rjmp	.+134    	; 0x13a6 <HID_Device_ProcessControlRequest+0x24c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1320:	80 91 e8 00 	lds	r24, 0x00E8
    1324:	87 7f       	andi	r24, 0xF7	; 247
    1326:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    132a:	64 da       	rcall	.-2872   	; 0x7f4 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    132c:	90 91 95 01 	lds	r25, 0x0195
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	99 23       	and	r25, r25
    1334:	09 f4       	brne	.+2      	; 0x1338 <HID_Device_ProcessControlRequest+0x1de>
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	f7 01       	movw	r30, r14
    133a:	81 87       	std	Z+9, r24	; 0x09
    133c:	34 c0       	rjmp	.+104    	; 0x13a6 <HID_Device_ProcessControlRequest+0x24c>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    133e:	80 91 93 01 	lds	r24, 0x0193
    1342:	81 32       	cpi	r24, 0x21	; 33
    1344:	81 f5       	brne	.+96     	; 0x13a6 <HID_Device_ProcessControlRequest+0x24c>
    1346:	80 91 e8 00 	lds	r24, 0x00E8
    134a:	87 7f       	andi	r24, 0xF7	; 247
    134c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1350:	51 da       	rcall	.-2910   	; 0x7f4 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1352:	80 91 95 01 	lds	r24, 0x0195
    1356:	90 91 96 01 	lds	r25, 0x0196
    135a:	80 70       	andi	r24, 0x00	; 0
    135c:	36 e0       	ldi	r19, 0x06	; 6
    135e:	96 95       	lsr	r25
    1360:	87 95       	ror	r24
    1362:	3a 95       	dec	r19
    1364:	e1 f7       	brne	.-8      	; 0x135e <HID_Device_ProcessControlRequest+0x204>
    1366:	f7 01       	movw	r30, r14
    1368:	95 87       	std	Z+13, r25	; 0x0d
    136a:	84 87       	std	Z+12, r24	; 0x0c
    136c:	1c c0       	rjmp	.+56     	; 0x13a6 <HID_Device_ProcessControlRequest+0x24c>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    136e:	80 91 93 01 	lds	r24, 0x0193
    1372:	81 3a       	cpi	r24, 0xA1	; 161
    1374:	c1 f4       	brne	.+48     	; 0x13a6 <HID_Device_ProcessControlRequest+0x24c>
    1376:	80 91 e8 00 	lds	r24, 0x00E8
    137a:	87 7f       	andi	r24, 0xF7	; 247
    137c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1380:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1384:	80 ff       	sbrs	r24, 0
    1386:	fc cf       	rjmp	.-8      	; 0x1380 <HID_Device_ProcessControlRequest+0x226>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1388:	f7 01       	movw	r30, r14
    138a:	84 85       	ldd	r24, Z+12	; 0x0c
    138c:	95 85       	ldd	r25, Z+13	; 0x0d
    138e:	96 95       	lsr	r25
    1390:	87 95       	ror	r24
    1392:	96 95       	lsr	r25
    1394:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1396:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    139a:	80 91 e8 00 	lds	r24, 0x00E8
    139e:	8e 77       	andi	r24, 0x7E	; 126
    13a0:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    13a4:	27 da       	rcall	.-2994   	; 0x7f4 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	7e be       	out	0x3e, r7	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	6d be       	out	0x3d, r6	; 61
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	ff 90       	pop	r15
    13c0:	ef 90       	pop	r14
    13c2:	df 90       	pop	r13
    13c4:	cf 90       	pop	r12
    13c6:	bf 90       	pop	r11
    13c8:	af 90       	pop	r10
    13ca:	9f 90       	pop	r9
    13cc:	8f 90       	pop	r8
    13ce:	7f 90       	pop	r7
    13d0:	6f 90       	pop	r6
    13d2:	08 95       	ret

000013d4 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    13da:	09 96       	adiw	r24, 0x09	; 9
    13dc:	dc 01       	movw	r26, r24
    13de:	87 e0       	ldi	r24, 0x07	; 7
    13e0:	ed 01       	movw	r28, r26
    13e2:	19 92       	st	Y+, r1
    13e4:	8a 95       	dec	r24
    13e6:	e9 f7       	brne	.-6      	; 0x13e2 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    13ec:	84 ef       	ldi	r24, 0xF4	; 244
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	95 87       	std	Z+13, r25	; 0x0d
    13f2:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    13f4:	83 e0       	ldi	r24, 0x03	; 3
    13f6:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    13f8:	cf 01       	movw	r24, r30
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	61 e0       	ldi	r22, 0x01	; 1
    13fe:	b6 d9       	rcall	.-3220   	; 0x76c <Endpoint_ConfigureEndpointTable>
	  return false;	
	
	return true;
}
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1406:	5f 92       	push	r5
    1408:	6f 92       	push	r6
    140a:	7f 92       	push	r7
    140c:	8f 92       	push	r8
    140e:	9f 92       	push	r9
    1410:	af 92       	push	r10
    1412:	bf 92       	push	r11
    1414:	cf 92       	push	r12
    1416:	df 92       	push	r13
    1418:	ef 92       	push	r14
    141a:	ff 92       	push	r15
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <HID_Device_USBTask+0x20>
    1426:	00 d0       	rcall	.+0      	; 0x1428 <HID_Device_USBTask+0x22>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    142e:	6d b6       	in	r6, 0x3d	; 61
    1430:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1432:	80 91 92 01 	lds	r24, 0x0192
    1436:	84 30       	cpi	r24, 0x04	; 4
    1438:	09 f0       	breq	.+2      	; 0x143c <HID_Device_USBTask+0x36>
    143a:	9a c0       	rjmp	.+308    	; 0x1570 <HID_Device_USBTask+0x16a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    143c:	80 91 e4 00 	lds	r24, 0x00E4
    1440:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1444:	f7 01       	movw	r30, r14
    1446:	22 85       	ldd	r18, Z+10	; 0x0a
    1448:	33 85       	ldd	r19, Z+11	; 0x0b
    144a:	28 17       	cp	r18, r24
    144c:	39 07       	cpc	r19, r25
    144e:	09 f4       	brne	.+2      	; 0x1452 <HID_Device_USBTask+0x4c>
    1450:	8f c0       	rjmp	.+286    	; 0x1570 <HID_Device_USBTask+0x16a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1452:	81 81       	ldd	r24, Z+1	; 0x01
    1454:	8f 70       	andi	r24, 0x0F	; 15
    1456:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    145a:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    145e:	85 ff       	sbrs	r24, 5
    1460:	87 c0       	rjmp	.+270    	; 0x1570 <HID_Device_USBTask+0x16a>
    1462:	8d b6       	in	r8, 0x3d	; 61
    1464:	57 2c       	mov	r5, r7
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1466:	40 85       	ldd	r20, Z+8	; 0x08
    1468:	cd b6       	in	r12, 0x3d	; 61
    146a:	de b6       	in	r13, 0x3e	; 62
    146c:	c4 1a       	sub	r12, r20
    146e:	d1 08       	sbc	r13, r1
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de be       	out	0x3e, r13	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd be       	out	0x3d, r12	; 61
    147a:	0d b7       	in	r16, 0x3d	; 61
    147c:	1e b7       	in	r17, 0x3e	; 62
    147e:	0f 5f       	subi	r16, 0xFF	; 255
    1480:	1f 4f       	sbci	r17, 0xFF	; 255
    1482:	b0 2e       	mov	r11, r16
    1484:	a1 2e       	mov	r10, r17
		uint8_t  ReportID     = 0;
    1486:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    1488:	1b 82       	std	Y+3, r1	; 0x03
    148a:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    148c:	c8 01       	movw	r24, r16
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	9c d0       	rcall	.+312    	; 0x15ce <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1496:	c7 01       	movw	r24, r14
    1498:	be 01       	movw	r22, r28
    149a:	6f 5f       	subi	r22, 0xFF	; 255
    149c:	7f 4f       	sbci	r23, 0xFF	; 255
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	98 01       	movw	r18, r16
    14a2:	8e 01       	movw	r16, r28
    14a4:	0e 5f       	subi	r16, 0xFE	; 254
    14a6:	1f 4f       	sbci	r17, 0xFF	; 255
    14a8:	0e 94 a0 01 	call	0x340	; 0x340 <CALLBACK_HID_Device_CreateHIDReport>
    14ac:	98 2e       	mov	r9, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    14ae:	f7 01       	movw	r30, r14
    14b0:	84 85       	ldd	r24, Z+12	; 0x0c
    14b2:	95 85       	ldd	r25, Z+13	; 0x0d
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	59 f0       	breq	.+22     	; 0x14ce <HID_Device_USBTask+0xc8>
	  return false;	
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	26 85       	ldd	r18, Z+14	; 0x0e
    14be:	37 85       	ldd	r19, Z+15	; 0x0f
    14c0:	21 15       	cp	r18, r1
    14c2:	31 05       	cpc	r19, r1
    14c4:	11 f0       	breq	.+4      	; 0x14ca <HID_Device_USBTask+0xc4>
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	90 e0       	ldi	r25, 0x00	; 0
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    14ca:	6c 01       	movw	r12, r24
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <HID_Device_USBTask+0xcc>
    14ce:	cc 24       	eor	r12, r12
    14d0:	dd 24       	eor	r13, r13

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    14d2:	f7 01       	movw	r30, r14
    14d4:	06 81       	ldd	r16, Z+6	; 0x06
    14d6:	17 81       	ldd	r17, Z+7	; 0x07
    14d8:	01 15       	cp	r16, r1
    14da:	11 05       	cpc	r17, r1
    14dc:	a1 f0       	breq	.+40     	; 0x1506 <HID_Device_USBTask+0x100>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    14de:	4a 81       	ldd	r20, Y+2	; 0x02
    14e0:	5b 81       	ldd	r21, Y+3	; 0x03
    14e2:	8b 2d       	mov	r24, r11
    14e4:	9a 2d       	mov	r25, r10
    14e6:	b8 01       	movw	r22, r16
    14e8:	5c d0       	rcall	.+184    	; 0x15a2 <memcmp>
    14ea:	21 e0       	ldi	r18, 0x01	; 1
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <HID_Device_USBTask+0xec>
    14f0:	20 e0       	ldi	r18, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    14f2:	f7 01       	movw	r30, r14
    14f4:	40 85       	ldd	r20, Z+8	; 0x08
    14f6:	c8 01       	movw	r24, r16
    14f8:	6b 2d       	mov	r22, r11
    14fa:	7a 2d       	mov	r23, r10
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	2c 83       	std	Y+4, r18	; 0x04
    1500:	5d d0       	rcall	.+186    	; 0x15bc <memcpy>
    1502:	2c 81       	ldd	r18, Y+4	; 0x04
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <HID_Device_USBTask+0x102>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1506:	20 e0       	ldi	r18, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	9b 81       	ldd	r25, Y+3	; 0x03
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	11 f1       	breq	.+68     	; 0x1554 <HID_Device_USBTask+0x14e>
    1510:	99 20       	and	r9, r9
    1512:	29 f4       	brne	.+10     	; 0x151e <HID_Device_USBTask+0x118>
    1514:	22 23       	and	r18, r18
    1516:	19 f4       	brne	.+6      	; 0x151e <HID_Device_USBTask+0x118>
    1518:	c1 14       	cp	r12, r1
    151a:	d1 04       	cpc	r13, r1
    151c:	d9 f0       	breq	.+54     	; 0x1554 <HID_Device_USBTask+0x14e>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    151e:	f7 01       	movw	r30, r14
    1520:	84 85       	ldd	r24, Z+12	; 0x0c
    1522:	95 85       	ldd	r25, Z+13	; 0x0d
    1524:	97 87       	std	Z+15, r25	; 0x0f
    1526:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1528:	81 81       	ldd	r24, Z+1	; 0x01
    152a:	8f 70       	andi	r24, 0x0F	; 15
    152c:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	88 23       	and	r24, r24
    1534:	11 f0       	breq	.+4      	; 0x153a <HID_Device_USBTask+0x134>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1536:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    153a:	6a 81       	ldd	r22, Y+2	; 0x02
    153c:	7b 81       	ldd	r23, Y+3	; 0x03
    153e:	8b 2d       	mov	r24, r11
    1540:	9a 2d       	mov	r25, r10
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	0e 94 15 02 	call	0x42a	; 0x42a <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    154a:	80 91 e8 00 	lds	r24, 0x00E8
    154e:	8e 77       	andi	r24, 0x7E	; 126
    1550:	80 93 e8 00 	sts	0x00E8, r24
    1554:	80 91 e4 00 	lds	r24, 0x00E4
    1558:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    155c:	f7 01       	movw	r30, r14
    155e:	93 87       	std	Z+11, r25	; 0x0b
    1560:	82 87       	std	Z+10, r24	; 0x0a
    1562:	88 2d       	mov	r24, r8
    1564:	95 2d       	mov	r25, r5
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	9e bf       	out	0x3e, r25	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	8d bf       	out	0x3d, r24	; 61
	}
}
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	7e be       	out	0x3e, r7	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	6d be       	out	0x3d, r6	; 61
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	df 90       	pop	r13
    1590:	cf 90       	pop	r12
    1592:	bf 90       	pop	r11
    1594:	af 90       	pop	r10
    1596:	9f 90       	pop	r9
    1598:	8f 90       	pop	r8
    159a:	7f 90       	pop	r7
    159c:	6f 90       	pop	r6
    159e:	5f 90       	pop	r5
    15a0:	08 95       	ret

000015a2 <memcmp>:
    15a2:	fb 01       	movw	r30, r22
    15a4:	dc 01       	movw	r26, r24
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <memcmp+0xe>
    15a8:	8d 91       	ld	r24, X+
    15aa:	01 90       	ld	r0, Z+
    15ac:	80 19       	sub	r24, r0
    15ae:	21 f4       	brne	.+8      	; 0x15b8 <memcmp+0x16>
    15b0:	41 50       	subi	r20, 0x01	; 1
    15b2:	50 40       	sbci	r21, 0x00	; 0
    15b4:	c8 f7       	brcc	.-14     	; 0x15a8 <memcmp+0x6>
    15b6:	88 1b       	sub	r24, r24
    15b8:	99 0b       	sbc	r25, r25
    15ba:	08 95       	ret

000015bc <memcpy>:
    15bc:	fb 01       	movw	r30, r22
    15be:	dc 01       	movw	r26, r24
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <memcpy+0xa>
    15c2:	01 90       	ld	r0, Z+
    15c4:	0d 92       	st	X+, r0
    15c6:	41 50       	subi	r20, 0x01	; 1
    15c8:	50 40       	sbci	r21, 0x00	; 0
    15ca:	d8 f7       	brcc	.-10     	; 0x15c2 <memcpy+0x6>
    15cc:	08 95       	ret

000015ce <memset>:
    15ce:	dc 01       	movw	r26, r24
    15d0:	01 c0       	rjmp	.+2      	; 0x15d4 <memset+0x6>
    15d2:	6d 93       	st	X+, r22
    15d4:	41 50       	subi	r20, 0x01	; 1
    15d6:	50 40       	sbci	r21, 0x00	; 0
    15d8:	e0 f7       	brcc	.-8      	; 0x15d2 <memset+0x4>
    15da:	08 95       	ret

000015dc <_exit>:
    15dc:	f8 94       	cli

000015de <__stop_program>:
    15de:	ff cf       	rjmp	.-2      	; 0x15de <__stop_program>
