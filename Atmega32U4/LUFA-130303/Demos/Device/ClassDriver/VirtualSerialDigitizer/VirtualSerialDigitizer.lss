
VirtualSerialDigitizer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  000014c4  00001558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080012c  0080012c  00001584  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000498  00000000  00000000  0000218b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000d2a  00000000  00000000  00002623  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000895f  00000000  00000000  0000334d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002064  00000000  00000000  0000bcac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006d07  00000000  00000000  0000dd10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006f0  00000000  00000000  00014a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003cc5  00000000  00000000  00015108  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000041a9  00000000  00000000  00018dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000118d  00000000  00000000  0001cf76  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006f0  00000000  00000000  0001e103  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
       0:	d7 c0       	rjmp	.+430    	; 0x1b0 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
       4:	f1 c0       	rjmp	.+482    	; 0x1e8 <__bad_interrupt>
       6:	00 00       	nop
       8:	ef c0       	rjmp	.+478    	; 0x1e8 <__bad_interrupt>
       a:	00 00       	nop
       c:	ed c0       	rjmp	.+474    	; 0x1e8 <__bad_interrupt>
       e:	00 00       	nop
      10:	eb c0       	rjmp	.+470    	; 0x1e8 <__bad_interrupt>
      12:	00 00       	nop
      14:	e9 c0       	rjmp	.+466    	; 0x1e8 <__bad_interrupt>
      16:	00 00       	nop
      18:	e7 c0       	rjmp	.+462    	; 0x1e8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e5 c0       	rjmp	.+458    	; 0x1e8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e3 c0       	rjmp	.+454    	; 0x1e8 <__bad_interrupt>
      22:	00 00       	nop
      24:	e1 c0       	rjmp	.+450    	; 0x1e8 <__bad_interrupt>
      26:	00 00       	nop
      28:	2b c4       	rjmp	.+2134   	; 0x880 <__vector_10>
      2a:	00 00       	nop
      2c:	f2 c4       	rjmp	.+2532   	; 0xa12 <__vector_11>
      2e:	00 00       	nop
      30:	db c0       	rjmp	.+438    	; 0x1e8 <__bad_interrupt>
      32:	00 00       	nop
      34:	d9 c0       	rjmp	.+434    	; 0x1e8 <__bad_interrupt>
      36:	00 00       	nop
      38:	d7 c0       	rjmp	.+430    	; 0x1e8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d5 c0       	rjmp	.+426    	; 0x1e8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d3 c0       	rjmp	.+422    	; 0x1e8 <__bad_interrupt>
      42:	00 00       	nop
      44:	d1 c0       	rjmp	.+418    	; 0x1e8 <__bad_interrupt>
      46:	00 00       	nop
      48:	cf c0       	rjmp	.+414    	; 0x1e8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	cd c0       	rjmp	.+410    	; 0x1e8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	cb c0       	rjmp	.+406    	; 0x1e8 <__bad_interrupt>
      52:	00 00       	nop
      54:	c9 c0       	rjmp	.+402    	; 0x1e8 <__bad_interrupt>
      56:	00 00       	nop
      58:	c7 c0       	rjmp	.+398    	; 0x1e8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c5 c0       	rjmp	.+394    	; 0x1e8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c3 c0       	rjmp	.+390    	; 0x1e8 <__bad_interrupt>
      62:	00 00       	nop
      64:	c1 c0       	rjmp	.+386    	; 0x1e8 <__bad_interrupt>
      66:	00 00       	nop
      68:	bf c0       	rjmp	.+382    	; 0x1e8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	bd c0       	rjmp	.+378    	; 0x1e8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	bb c0       	rjmp	.+374    	; 0x1e8 <__bad_interrupt>
      72:	00 00       	nop
      74:	b9 c0       	rjmp	.+370    	; 0x1e8 <__bad_interrupt>
      76:	00 00       	nop
      78:	b7 c0       	rjmp	.+366    	; 0x1e8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b5 c0       	rjmp	.+362    	; 0x1e8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b3 c0       	rjmp	.+358    	; 0x1e8 <__bad_interrupt>
      82:	00 00       	nop
      84:	b1 c0       	rjmp	.+354    	; 0x1e8 <__bad_interrupt>
      86:	00 00       	nop
      88:	af c0       	rjmp	.+350    	; 0x1e8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ad c0       	rjmp	.+346    	; 0x1e8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ab c0       	rjmp	.+342    	; 0x1e8 <__bad_interrupt>
      92:	00 00       	nop
      94:	a9 c0       	rjmp	.+338    	; 0x1e8 <__bad_interrupt>
      96:	00 00       	nop
      98:	a7 c0       	rjmp	.+334    	; 0x1e8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	a5 c0       	rjmp	.+330    	; 0x1e8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	a3 c0       	rjmp	.+326    	; 0x1e8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	a1 c0       	rjmp	.+322    	; 0x1e8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	9f c0       	rjmp	.+318    	; 0x1e8 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <DigitizerReport>:
      ac:	05 0d 09 04 a1 01 09 22 a1 02 09 42 15 00 25 01     ......."...B..%.
      bc:	75 01 95 01 81 02 09 32 81 02 95 06 81 01 75 08     u......2......u.
      cc:	09 51 95 01 81 02 05 01 26 ff 0f 75 10 55 0e 65     .Q......&..u.U.e
      dc:	33 09 30 35 00 46 5b 04 81 02 46 8a 03 09 31 81     3.05.F[...F...1.
      ec:	02 c0 c0                                            ...

000000ef <DeviceDescriptor>:
      ef:	12 01 10 01 00 00 00 08 eb 03 62 20 01 00 01 02     ..........b ....
      ff:	dc 01                                               ..

00000101 <ConfigurationDescriptor>:
     101:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
     111:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
     121:	24 02 06 05 24 06 00 01 07 05 82 03 08 00 ff 09     $...$...........
     131:	04 01 00 02 0a 00 00 00 07 05 04 02 10 00 05 07     ................
     141:	05 83 02 10 00 05 09 04 02 00 01 03 00 00 00 09     ................
     151:	21 11 01 00 01 22 43 00 07 05 81 03 08 00 05        !...."C........

00000160 <LanguageString>:
     160:	04 03 09 04                                         ....

00000164 <ManufacturerString>:
     164:	24 03 49 00 6e 00 74 00 65 00 6c 00 6c 00 69 00     $.I.n.t.e.l.l.i.
     174:	67 00 65 00 6e 00 74 00 20 00 41 00 67 00 65 00     g.e.n.t. .A.g.e.
     184:	6e 00 74 00 00 00                                   n.t...

0000018a <ProductString>:
     18a:	24 03 43 00 44 00 43 00 20 00 61 00 6e 00 64 00     $.C.D.C. .a.n.d.
     19a:	20 00 44 00 69 00 67 00 69 00 74 00 69 00 7a 00      .D.i.g.i.t.i.z.
     1aa:	65 00 72 00 00 00                                   e.r...

000001b0 <__ctors_end>:
     1b0:	11 24       	eor	r1, r1
     1b2:	1f be       	out	0x3f, r1	; 63
     1b4:	cf ef       	ldi	r28, 0xFF	; 255
     1b6:	da e0       	ldi	r29, 0x0A	; 10
     1b8:	de bf       	out	0x3e, r29	; 62
     1ba:	cd bf       	out	0x3d, r28	; 61

000001bc <__do_copy_data>:
     1bc:	11 e0       	ldi	r17, 0x01	; 1
     1be:	a0 e0       	ldi	r26, 0x00	; 0
     1c0:	b1 e0       	ldi	r27, 0x01	; 1
     1c2:	e4 ec       	ldi	r30, 0xC4	; 196
     1c4:	f4 e1       	ldi	r31, 0x14	; 20
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <__do_copy_data+0x10>
     1c8:	05 90       	lpm	r0, Z+
     1ca:	0d 92       	st	X+, r0
     1cc:	ac 32       	cpi	r26, 0x2C	; 44
     1ce:	b1 07       	cpc	r27, r17
     1d0:	d9 f7       	brne	.-10     	; 0x1c8 <__do_copy_data+0xc>

000001d2 <__do_clear_bss>:
     1d2:	11 e0       	ldi	r17, 0x01	; 1
     1d4:	ac e2       	ldi	r26, 0x2C	; 44
     1d6:	b1 e0       	ldi	r27, 0x01	; 1
     1d8:	01 c0       	rjmp	.+2      	; 0x1dc <.do_clear_bss_start>

000001da <.do_clear_bss_loop>:
     1da:	1d 92       	st	X+, r1

000001dc <.do_clear_bss_start>:
     1dc:	af 33       	cpi	r26, 0x3F	; 63
     1de:	b1 07       	cpc	r27, r17
     1e0:	e1 f7       	brne	.-8      	; 0x1da <.do_clear_bss_loop>
     1e2:	1f d0       	rcall	.+62     	; 0x222 <main>
     1e4:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <_exit>

000001e8 <__bad_interrupt>:
     1e8:	0b cf       	rjmp	.-490    	; 0x0 <__vectors>

000001ea <LEDs_SetAllLEDs>:
				PORTE &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTE  = ((PORTE & ~LEDS_ALL_LEDS) | LEDMask);
     1ea:	9e b1       	in	r25, 0x0e	; 14
     1ec:	9f 7b       	andi	r25, 0xBF	; 191
     1ee:	98 2b       	or	r25, r24
     1f0:	9e b9       	out	0x0e, r25	; 14
			}
     1f2:	08 95       	ret

000001f4 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1f4:	84 b7       	in	r24, 0x34	; 52
     1f6:	87 7f       	andi	r24, 0xF7	; 247
     1f8:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1fa:	88 e1       	ldi	r24, 0x18	; 24
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	f8 94       	cli
     200:	80 93 60 00 	sts	0x0060, r24
     204:	10 92 60 00 	sts	0x0060, r1
     208:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	80 e8       	ldi	r24, 0x80	; 128
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	f8 94       	cli
     212:	80 93 61 00 	sts	0x0061, r24
     216:	90 93 61 00 	sts	0x0061, r25
     21a:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRE  |=  LEDS_ALL_LEDS;
     21c:	6e 9a       	sbi	0x0d, 6	; 13
				PORTE &= ~LEDS_ALL_LEDS;
     21e:	76 98       	cbi	0x0e, 6	; 14
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
}
     220:	12 c3       	rjmp	.+1572   	; 0x846 <USB_Init>

00000222 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     222:	e8 df       	rcall	.-48     	; 0x1f4 <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     224:	80 e4       	ldi	r24, 0x40	; 64
     226:	e1 df       	rcall	.-62     	; 0x1ea <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     228:	78 94       	sei
	for (;;)
	{
		//CheckJoystickMovement();

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	ca d6       	rcall	.+3476   	; 0xfc4 <CDC_Device_ReceiveByte>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	91 e0       	ldi	r25, 0x01	; 1
     234:	af d6       	rcall	.+3422   	; 0xf94 <CDC_Device_USBTask>
		HID_Device_USBTask(&Digitizer_HID_Interface);
     236:	8b e1       	ldi	r24, 0x1B	; 27
     238:	91 e0       	ldi	r25, 0x01	; 1
     23a:	0e 94 75 09 	call	0x12ea	; 0x12ea <HID_Device_USBTask>
		USB_USBTask();
     23e:	88 d5       	rcall	.+2832   	; 0xd50 <USB_USBTask>
     240:	f4 cf       	rjmp	.-24     	; 0x22a <main+0x8>

00000242 <EVENT_USB_Device_Connect>:


/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     242:	80 e0       	ldi	r24, 0x00	; 0
}
     244:	d2 cf       	rjmp	.-92     	; 0x1ea <LEDs_SetAllLEDs>

00000246 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     246:	80 e4       	ldi	r24, 0x40	; 64
}
     248:	d0 cf       	rjmp	.-96     	; 0x1ea <LEDs_SetAllLEDs>

0000024a <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     24a:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Digitizer_HID_Interface);
     24c:	8b e1       	ldi	r24, 0x1B	; 27
     24e:	91 e0       	ldi	r25, 0x01	; 1
     250:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <HID_Device_ConfigureEndpoints>
     254:	18 2f       	mov	r17, r24
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	91 e0       	ldi	r25, 0x01	; 1
     25a:	43 d6       	rcall	.+3206   	; 0xee2 <CDC_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     25c:	90 91 e2 00 	lds	r25, 0x00E2
     260:	94 60       	ori	r25, 0x04	; 4
     262:	90 93 e2 00 	sts	0x00E2, r25
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Digitizer_HID_Interface);
     266:	21 2f       	mov	r18, r17
     268:	30 e0       	ldi	r19, 0x00	; 0
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     26a:	90 e0       	ldi	r25, 0x00	; 0
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Digitizer_HID_Interface);
     26c:	28 23       	and	r18, r24
     26e:	39 23       	and	r19, r25
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     270:	20 ff       	sbrs	r18, 0
     272:	02 c0       	rjmp	.+4      	; 0x278 <EVENT_USB_Device_ConfigurationChanged+0x2e>
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	01 c0       	rjmp	.+2      	; 0x27a <EVENT_USB_Device_ConfigurationChanged+0x30>
     278:	80 e4       	ldi	r24, 0x40	; 64
     27a:	b7 df       	rcall	.-146    	; 0x1ea <LEDs_SetAllLEDs>
}
     27c:	1f 91       	pop	r17
     27e:	08 95       	ret

00000280 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	81 d5       	rcall	.+2818   	; 0xd88 <CDC_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Digitizer_HID_Interface);
     286:	8b e1       	ldi	r24, 0x1B	; 27
     288:	91 e0       	ldi	r25, 0x01	; 1
}
     28a:	d9 c6       	rjmp	.+3506   	; 0x103e <HID_Device_ProcessControlRequest>

0000028c <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     28c:	80 91 29 01 	lds	r24, 0x0129
     290:	90 91 2a 01 	lds	r25, 0x012A
     294:	00 97       	sbiw	r24, 0x00	; 0
     296:	29 f0       	breq	.+10     	; 0x2a2 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	90 93 2a 01 	sts	0x012A, r25
     29e:	80 93 29 01 	sts	0x0129, r24
     2a2:	08 95       	ret

000002a4 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	d8 01       	movw	r26, r16
	USB_DigitizerReport_Data_t* DigitizerReport = (USB_DigitizerReport_Data_t*)ReportData;
     2aa:	f9 01       	movw	r30, r18

    if (1) 
    {
        DigitizerReport->X = 100; 
     2ac:	84 e6       	ldi	r24, 0x64	; 100
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	93 83       	std	Z+3, r25	; 0x03
     2b2:	82 83       	std	Z+2, r24	; 0x02
        DigitizerReport->Y = 150; 
     2b4:	86 e9       	ldi	r24, 0x96	; 150
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	95 83       	std	Z+5, r25	; 0x05
     2ba:	84 83       	std	Z+4, r24	; 0x04
        DigitizerReport->Finger =0x03; 
     2bc:	83 e0       	ldi	r24, 0x03	; 3
     2be:	80 83       	st	Z, r24
        DigitizerReport->Temp= 0x00; 
     2c0:	11 82       	std	Z+1, r1	; 0x01
    } 

    *ReportSize = sizeof(USB_DigitizerReport_Data_t);
     2c2:	86 e0       	ldi	r24, 0x06	; 6
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	11 96       	adiw	r26, 0x01	; 1
     2c8:	9c 93       	st	X, r25
     2ca:	8e 93       	st	-X, r24
    return true;
}
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	08 95       	ret

000002d4 <CALLBACK_HID_Device_ProcessHIDReport>:
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	// Unused (but mandatory for the HID class driver) in this demo, since there are no Host->Device reports
}
     2d4:	08 95       	ret

000002d6 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     2d6:	93 30       	cpi	r25, 0x03	; 3
     2d8:	89 f0       	breq	.+34     	; 0x2fc <CALLBACK_USB_GetDescriptor+0x26>
     2da:	94 30       	cpi	r25, 0x04	; 4
     2dc:	28 f4       	brcc	.+10     	; 0x2e8 <CALLBACK_USB_GetDescriptor+0x12>
     2de:	91 30       	cpi	r25, 0x01	; 1
     2e0:	49 f1       	breq	.+82     	; 0x334 <CALLBACK_USB_GetDescriptor+0x5e>
     2e2:	92 30       	cpi	r25, 0x02	; 2
     2e4:	61 f5       	brne	.+88     	; 0x33e <CALLBACK_USB_GetDescriptor+0x68>
     2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <CALLBACK_USB_GetDescriptor+0x1c>
     2e8:	91 32       	cpi	r25, 0x21	; 33
     2ea:	d1 f0       	breq	.+52     	; 0x320 <CALLBACK_USB_GetDescriptor+0x4a>
     2ec:	92 32       	cpi	r25, 0x22	; 34
     2ee:	39 f5       	brne	.+78     	; 0x33e <CALLBACK_USB_GetDescriptor+0x68>
     2f0:	1c c0       	rjmp	.+56     	; 0x32a <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     2f2:	2f e5       	ldi	r18, 0x5F	; 95
     2f4:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     2f6:	e1 e0       	ldi	r30, 0x01	; 1
     2f8:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     2fa:	25 c0       	rjmp	.+74     	; 0x346 <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
     2fc:	81 30       	cpi	r24, 0x01	; 1
     2fe:	41 f0       	breq	.+16     	; 0x310 <CALLBACK_USB_GetDescriptor+0x3a>
     300:	81 30       	cpi	r24, 0x01	; 1
     302:	18 f0       	brcs	.+6      	; 0x30a <CALLBACK_USB_GetDescriptor+0x34>
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	d9 f4       	brne	.+54     	; 0x33e <CALLBACK_USB_GetDescriptor+0x68>
     308:	06 c0       	rjmp	.+12     	; 0x316 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     30a:	e0 e6       	ldi	r30, 0x60	; 96
     30c:	f1 e0       	ldi	r31, 0x01	; 1
     30e:	05 c0       	rjmp	.+10     	; 0x31a <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     310:	e4 e6       	ldi	r30, 0x64	; 100
     312:	f1 e0       	ldi	r31, 0x01	; 1
     314:	02 c0       	rjmp	.+4      	; 0x31a <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     316:	ea e8       	ldi	r30, 0x8A	; 138
     318:	f1 e0       	ldi	r31, 0x01	; 1
     31a:	24 91       	lpm	r18, Z+
     31c:	30 e0       	ldi	r19, 0x00	; 0
					break;
     31e:	13 c0       	rjmp	.+38     	; 0x346 <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_DigitizerHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     320:	29 e0       	ldi	r18, 0x09	; 9
     322:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_DigitizerHID;
     324:	e0 e5       	ldi	r30, 0x50	; 80
     326:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     328:	0e c0       	rjmp	.+28     	; 0x346 <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &DigitizerReport;
			Size    = sizeof(DigitizerReport);
     32a:	23 e4       	ldi	r18, 0x43	; 67
     32c:	30 e0       	ldi	r19, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_DigitizerHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &DigitizerReport;
     32e:	ec ea       	ldi	r30, 0xAC	; 172
     330:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(DigitizerReport);
			break;
     332:	09 c0       	rjmp	.+18     	; 0x346 <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     334:	22 e1       	ldi	r18, 0x12	; 18
     336:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     338:	ef ee       	ldi	r30, 0xEF	; 239
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	04 c0       	rjmp	.+8      	; 0x346 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     342:	e0 e0       	ldi	r30, 0x00	; 0
     344:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &DigitizerReport;
			Size    = sizeof(DigitizerReport);
			break;
	}

	*DescriptorAddress = Address;
     346:	da 01       	movw	r26, r20
     348:	11 96       	adiw	r26, 0x01	; 1
     34a:	fc 93       	st	X, r31
     34c:	ee 93       	st	-X, r30
	return Size;
}
     34e:	c9 01       	movw	r24, r18
     350:	08 95       	ret

00000352 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     352:	8f 92       	push	r8
     354:	9f 92       	push	r9
     356:	bf 92       	push	r11
     358:	cf 92       	push	r12
     35a:	df 92       	push	r13
     35c:	ef 92       	push	r14
     35e:	ff 92       	push	r15
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	df 93       	push	r29
     366:	cf 93       	push	r28
     368:	0f 92       	push	r0
     36a:	cd b7       	in	r28, 0x3d	; 61
     36c:	de b7       	in	r29, 0x3e	; 62
     36e:	e8 2e       	mov	r14, r24
     370:	4b 01       	movw	r8, r22
     372:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     374:	99 83       	std	Y+1, r25	; 0x01
     376:	f3 d1       	rcall	.+998    	; 0x75e <Endpoint_WaitUntilReady>
     378:	b8 2e       	mov	r11, r24
     37a:	99 81       	ldd	r25, Y+1	; 0x01
     37c:	88 23       	and	r24, r24
     37e:	c1 f5       	brne	.+112    	; 0x3f0 <Endpoint_Write_Stream_LE+0x9e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     380:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     382:	01 15       	cp	r16, r1
     384:	11 05       	cpc	r17, r1
     386:	39 f0       	breq	.+14     	; 0x396 <Endpoint_Write_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
     388:	f8 01       	movw	r30, r16
     38a:	20 81       	ld	r18, Z
     38c:	31 81       	ldd	r19, Z+1	; 0x01
     38e:	82 1a       	sub	r8, r18
     390:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     392:	e2 0e       	add	r14, r18
     394:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     396:	cc 24       	eor	r12, r12
     398:	dd 24       	eor	r13, r13
     39a:	25 c0       	rjmp	.+74     	; 0x3e6 <Endpoint_Write_Stream_LE+0x94>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     39c:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     3a0:	85 fd       	sbrc	r24, 5
     3a2:	16 c0       	rjmp	.+44     	; 0x3d0 <Endpoint_Write_Stream_LE+0x7e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3a4:	80 91 e8 00 	lds	r24, 0x00E8
     3a8:	8e 77       	andi	r24, 0x7E	; 126
     3aa:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     3ae:	01 15       	cp	r16, r1
     3b0:	11 05       	cpc	r17, r1
     3b2:	51 f0       	breq	.+20     	; 0x3c8 <Endpoint_Write_Stream_LE+0x76>
			{
				*BytesProcessed += BytesInTransfer;
     3b4:	f8 01       	movw	r30, r16
     3b6:	80 81       	ld	r24, Z
     3b8:	91 81       	ldd	r25, Z+1	; 0x01
     3ba:	8c 0d       	add	r24, r12
     3bc:	9d 1d       	adc	r25, r13
     3be:	91 83       	std	Z+1, r25	; 0x01
     3c0:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     3c2:	25 e0       	ldi	r18, 0x05	; 5
     3c4:	b2 2e       	mov	r11, r18
     3c6:	14 c0       	rjmp	.+40     	; 0x3f0 <Endpoint_Write_Stream_LE+0x9e>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     3c8:	ca d1       	rcall	.+916    	; 0x75e <Endpoint_WaitUntilReady>
     3ca:	88 23       	and	r24, r24
     3cc:	61 f0       	breq	.+24     	; 0x3e6 <Endpoint_Write_Stream_LE+0x94>
     3ce:	0f c0       	rjmp	.+30     	; 0x3ee <Endpoint_Write_Stream_LE+0x9c>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     3d0:	f7 01       	movw	r30, r14
     3d2:	81 91       	ld	r24, Z+
     3d4:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     3d6:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     3da:	08 94       	sec
     3dc:	81 08       	sbc	r8, r1
     3de:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     3e0:	08 94       	sec
     3e2:	c1 1c       	adc	r12, r1
     3e4:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     3e6:	81 14       	cp	r8, r1
     3e8:	91 04       	cpc	r9, r1
     3ea:	c1 f6       	brne	.-80     	; 0x39c <Endpoint_Write_Stream_LE+0x4a>
     3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <Endpoint_Write_Stream_LE+0x9e>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     3ee:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     3f0:	8b 2d       	mov	r24, r11
     3f2:	0f 90       	pop	r0
     3f4:	cf 91       	pop	r28
     3f6:	df 91       	pop	r29
     3f8:	1f 91       	pop	r17
     3fa:	0f 91       	pop	r16
     3fc:	ff 90       	pop	r15
     3fe:	ef 90       	pop	r14
     400:	df 90       	pop	r13
     402:	cf 90       	pop	r12
     404:	bf 90       	pop	r11
     406:	9f 90       	pop	r9
     408:	8f 90       	pop	r8
     40a:	08 95       	ret

0000040c <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     40c:	48 2f       	mov	r20, r24
     40e:	59 2f       	mov	r21, r25
     410:	fa 01       	movw	r30, r20
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     412:	80 91 3d 01 	lds	r24, 0x013D
     416:	90 91 3e 01 	lds	r25, 0x013E
     41a:	86 17       	cp	r24, r22
     41c:	97 07       	cpc	r25, r23
     41e:	18 f4       	brcc	.+6      	; 0x426 <Endpoint_Write_Control_Stream_LE+0x1a>
     420:	bc 01       	movw	r22, r24
     422:	40 e0       	ldi	r20, 0x00	; 0
     424:	3c c0       	rjmp	.+120    	; 0x49e <Endpoint_Write_Control_Stream_LE+0x92>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     426:	61 15       	cp	r22, r1
     428:	71 05       	cpc	r23, r1
     42a:	d9 f7       	brne	.-10     	; 0x422 <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     42c:	80 91 e8 00 	lds	r24, 0x00E8
     430:	8e 77       	andi	r24, 0x7E	; 126
     432:	80 93 e8 00 	sts	0x00E8, r24
     436:	f5 cf       	rjmp	.-22     	; 0x422 <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     438:	80 91 36 01 	lds	r24, 0x0136

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     43c:	88 23       	and	r24, r24
     43e:	09 f4       	brne	.+2      	; 0x442 <Endpoint_Write_Control_Stream_LE+0x36>
     440:	44 c0       	rjmp	.+136    	; 0x4ca <Endpoint_Write_Control_Stream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     442:	85 30       	cpi	r24, 0x05	; 5
     444:	f1 f1       	breq	.+124    	; 0x4c2 <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     446:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     44a:	83 fd       	sbrc	r24, 3
     44c:	3c c0       	rjmp	.+120    	; 0x4c6 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     44e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     452:	82 fd       	sbrc	r24, 2
     454:	30 c0       	rjmp	.+96     	; 0x4b6 <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     456:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     45a:	80 ff       	sbrs	r24, 0
     45c:	20 c0       	rjmp	.+64     	; 0x49e <Endpoint_Write_Control_Stream_LE+0x92>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     45e:	90 91 f3 00 	lds	r25, 0x00F3
     462:	80 91 f2 00 	lds	r24, 0x00F2
     466:	39 2f       	mov	r19, r25
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	82 2b       	or	r24, r18
     46e:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     470:	06 c0       	rjmp	.+12     	; 0x47e <Endpoint_Write_Control_Stream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     472:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     474:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     478:	61 50       	subi	r22, 0x01	; 1
     47a:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     47c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     47e:	61 15       	cp	r22, r1
     480:	71 05       	cpc	r23, r1
     482:	19 f0       	breq	.+6      	; 0x48a <Endpoint_Write_Control_Stream_LE+0x7e>
     484:	88 30       	cpi	r24, 0x08	; 8
     486:	91 05       	cpc	r25, r1
     488:	a0 f3       	brcs	.-24     	; 0x472 <Endpoint_Write_Control_Stream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     48a:	41 e0       	ldi	r20, 0x01	; 1
     48c:	88 30       	cpi	r24, 0x08	; 8
     48e:	91 05       	cpc	r25, r1
     490:	09 f0       	breq	.+2      	; 0x494 <Endpoint_Write_Control_Stream_LE+0x88>
     492:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     494:	80 91 e8 00 	lds	r24, 0x00E8
     498:	8e 77       	andi	r24, 0x7E	; 126
     49a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     49e:	61 15       	cp	r22, r1
     4a0:	71 05       	cpc	r23, r1
     4a2:	51 f6       	brne	.-108    	; 0x438 <Endpoint_Write_Control_Stream_LE+0x2c>
     4a4:	44 23       	and	r20, r20
     4a6:	41 f6       	brne	.-112    	; 0x438 <Endpoint_Write_Control_Stream_LE+0x2c>
     4a8:	06 c0       	rjmp	.+12     	; 0x4b6 <Endpoint_Write_Control_Stream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4aa:	80 91 36 01 	lds	r24, 0x0136

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4ae:	88 23       	and	r24, r24
     4b0:	61 f0       	breq	.+24     	; 0x4ca <Endpoint_Write_Control_Stream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4b2:	85 30       	cpi	r24, 0x05	; 5
     4b4:	61 f0       	breq	.+24     	; 0x4ce <Endpoint_Write_Control_Stream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4b6:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     4ba:	82 ff       	sbrs	r24, 2
     4bc:	f6 cf       	rjmp	.-20     	; 0x4aa <Endpoint_Write_Control_Stream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     4c2:	83 e0       	ldi	r24, 0x03	; 3
     4c4:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     4ca:	82 e0       	ldi	r24, 0x02	; 2
     4cc:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     4ce:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     4d0:	08 95       	ret

000004d2 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     4d2:	61 15       	cp	r22, r1
     4d4:	71 05       	cpc	r23, r1
     4d6:	59 f5       	brne	.+86     	; 0x52e <Endpoint_Read_Control_Stream_LE+0x5c>
     4d8:	25 c0       	rjmp	.+74     	; 0x524 <Endpoint_Read_Control_Stream_LE+0x52>
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4da:	40 91 36 01 	lds	r20, 0x0136

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4de:	44 23       	and	r20, r20
     4e0:	d1 f1       	breq	.+116    	; 0x556 <Endpoint_Read_Control_Stream_LE+0x84>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4e2:	45 30       	cpi	r20, 0x05	; 5
     4e4:	a1 f1       	breq	.+104    	; 0x54e <Endpoint_Read_Control_Stream_LE+0x7c>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     4e6:	40 91 e8 00 	lds	r20, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     4ea:	43 fd       	sbrc	r20, 3
     4ec:	32 c0       	rjmp	.+100    	; 0x552 <Endpoint_Read_Control_Stream_LE+0x80>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4ee:	40 91 e8 00 	lds	r20, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     4f2:	42 ff       	sbrs	r20, 2
     4f4:	f2 cf       	rjmp	.-28     	; 0x4da <Endpoint_Read_Control_Stream_LE+0x8>
     4f6:	e8 2f       	mov	r30, r24
     4f8:	f9 2f       	mov	r31, r25
     4fa:	07 c0       	rjmp	.+14     	; 0x50a <Endpoint_Read_Control_Stream_LE+0x38>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     4fc:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     500:	81 93       	st	Z+, r24
     502:	cf 01       	movw	r24, r30
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     504:	61 50       	subi	r22, 0x01	; 1
     506:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     508:	69 f0       	breq	.+26     	; 0x524 <Endpoint_Read_Control_Stream_LE+0x52>
     50a:	cf 01       	movw	r24, r30
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     50c:	50 91 f3 00 	lds	r21, 0x00F3
     510:	40 91 f2 00 	lds	r20, 0x00F2
     514:	35 2f       	mov	r19, r21
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	42 2b       	or	r20, r18
     51c:	53 2b       	or	r21, r19
     51e:	41 15       	cp	r20, r1
     520:	51 05       	cpc	r21, r1
     522:	61 f7       	brne	.-40     	; 0x4fc <Endpoint_Read_Control_Stream_LE+0x2a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     524:	40 91 e8 00 	lds	r20, 0x00E8
     528:	4b 77       	andi	r20, 0x7B	; 123
     52a:	40 93 e8 00 	sts	0x00E8, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     52e:	61 15       	cp	r22, r1
     530:	71 05       	cpc	r23, r1
     532:	99 f6       	brne	.-90     	; 0x4da <Endpoint_Read_Control_Stream_LE+0x8>
     534:	06 c0       	rjmp	.+12     	; 0x542 <Endpoint_Read_Control_Stream_LE+0x70>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     536:	80 91 36 01 	lds	r24, 0x0136

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     53a:	88 23       	and	r24, r24
     53c:	61 f0       	breq	.+24     	; 0x556 <Endpoint_Read_Control_Stream_LE+0x84>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     53e:	85 30       	cpi	r24, 0x05	; 5
     540:	61 f0       	breq	.+24     	; 0x55a <Endpoint_Read_Control_Stream_LE+0x88>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     542:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     546:	80 ff       	sbrs	r24, 0
     548:	f6 cf       	rjmp	.-20     	; 0x536 <Endpoint_Read_Control_Stream_LE+0x64>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     54e:	83 e0       	ldi	r24, 0x03	; 3
     550:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     556:	82 e0       	ldi	r24, 0x02	; 2
     558:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     55a:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     55c:	08 95       	ret

0000055e <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     55e:	e8 2f       	mov	r30, r24
     560:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     562:	80 91 3d 01 	lds	r24, 0x013D
     566:	90 91 3e 01 	lds	r25, 0x013E
     56a:	86 17       	cp	r24, r22
     56c:	97 07       	cpc	r25, r23
     56e:	18 f4       	brcc	.+6      	; 0x576 <Endpoint_Write_Control_PStream_LE+0x18>
     570:	bc 01       	movw	r22, r24
     572:	40 e0       	ldi	r20, 0x00	; 0
     574:	3e c0       	rjmp	.+124    	; 0x5f2 <Endpoint_Write_Control_PStream_LE+0x94>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     576:	61 15       	cp	r22, r1
     578:	71 05       	cpc	r23, r1
     57a:	d9 f7       	brne	.-10     	; 0x572 <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     57c:	80 91 e8 00 	lds	r24, 0x00E8
     580:	8e 77       	andi	r24, 0x7E	; 126
     582:	80 93 e8 00 	sts	0x00E8, r24
     586:	f5 cf       	rjmp	.-22     	; 0x572 <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     588:	80 91 36 01 	lds	r24, 0x0136

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     58c:	88 23       	and	r24, r24
     58e:	09 f4       	brne	.+2      	; 0x592 <Endpoint_Write_Control_PStream_LE+0x34>
     590:	46 c0       	rjmp	.+140    	; 0x61e <Endpoint_Write_Control_PStream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     592:	85 30       	cpi	r24, 0x05	; 5
     594:	09 f4       	brne	.+2      	; 0x598 <Endpoint_Write_Control_PStream_LE+0x3a>
     596:	3f c0       	rjmp	.+126    	; 0x616 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     598:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     59c:	83 fd       	sbrc	r24, 3
     59e:	3d c0       	rjmp	.+122    	; 0x61a <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5a0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     5a4:	82 fd       	sbrc	r24, 2
     5a6:	31 c0       	rjmp	.+98     	; 0x60a <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5a8:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     5ac:	80 ff       	sbrs	r24, 0
     5ae:	21 c0       	rjmp	.+66     	; 0x5f2 <Endpoint_Write_Control_PStream_LE+0x94>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     5b0:	90 91 f3 00 	lds	r25, 0x00F3
     5b4:	80 91 f2 00 	lds	r24, 0x00F2
     5b8:	39 2f       	mov	r19, r25
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	82 2b       	or	r24, r18
     5c0:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     5c2:	07 c0       	rjmp	.+14     	; 0x5d2 <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     5c4:	44 91       	lpm	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     5c6:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     5ca:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     5cc:	61 50       	subi	r22, 0x01	; 1
     5ce:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     5d0:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     5d2:	61 15       	cp	r22, r1
     5d4:	71 05       	cpc	r23, r1
     5d6:	19 f0       	breq	.+6      	; 0x5de <Endpoint_Write_Control_PStream_LE+0x80>
     5d8:	88 30       	cpi	r24, 0x08	; 8
     5da:	91 05       	cpc	r25, r1
     5dc:	98 f3       	brcs	.-26     	; 0x5c4 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     5de:	41 e0       	ldi	r20, 0x01	; 1
     5e0:	88 30       	cpi	r24, 0x08	; 8
     5e2:	91 05       	cpc	r25, r1
     5e4:	09 f0       	breq	.+2      	; 0x5e8 <Endpoint_Write_Control_PStream_LE+0x8a>
     5e6:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5e8:	80 91 e8 00 	lds	r24, 0x00E8
     5ec:	8e 77       	andi	r24, 0x7E	; 126
     5ee:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     5f2:	61 15       	cp	r22, r1
     5f4:	71 05       	cpc	r23, r1
     5f6:	41 f6       	brne	.-112    	; 0x588 <Endpoint_Write_Control_PStream_LE+0x2a>
     5f8:	44 23       	and	r20, r20
     5fa:	31 f6       	brne	.-116    	; 0x588 <Endpoint_Write_Control_PStream_LE+0x2a>
     5fc:	06 c0       	rjmp	.+12     	; 0x60a <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5fe:	80 91 36 01 	lds	r24, 0x0136

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     602:	88 23       	and	r24, r24
     604:	61 f0       	breq	.+24     	; 0x61e <Endpoint_Write_Control_PStream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     606:	85 30       	cpi	r24, 0x05	; 5
     608:	61 f0       	breq	.+24     	; 0x622 <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     60a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     60e:	82 ff       	sbrs	r24, 2
     610:	f6 cf       	rjmp	.-20     	; 0x5fe <Endpoint_Write_Control_PStream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     616:	83 e0       	ldi	r24, 0x03	; 3
     618:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     622:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     624:	08 95       	ret

00000626 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     626:	98 2f       	mov	r25, r24
     628:	2c c0       	rjmp	.+88     	; 0x682 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     62a:	29 2f       	mov	r18, r25
     62c:	2f 70       	andi	r18, 0x0F	; 15
     62e:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     632:	98 17       	cp	r25, r24
     634:	39 f0       	breq	.+14     	; 0x644 <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     636:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     63a:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     63e:	50 91 f0 00 	lds	r21, 0x00F0
     642:	03 c0       	rjmp	.+6      	; 0x64a <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     644:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     646:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     648:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     64a:	21 ff       	sbrs	r18, 1
     64c:	19 c0       	rjmp	.+50     	; 0x680 <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     64e:	30 91 eb 00 	lds	r19, 0x00EB
     652:	3e 7f       	andi	r19, 0xFE	; 254
     654:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     658:	30 91 ed 00 	lds	r19, 0x00ED
     65c:	3d 7f       	andi	r19, 0xFD	; 253
     65e:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     662:	30 91 eb 00 	lds	r19, 0x00EB
     666:	31 60       	ori	r19, 0x01	; 1
     668:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     66c:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     670:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     674:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     678:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     67c:	27 ff       	sbrs	r18, 7
     67e:	08 c0       	rjmp	.+16     	; 0x690 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     680:	9f 5f       	subi	r25, 0xFF	; 255
     682:	97 30       	cpi	r25, 0x07	; 7
     684:	90 f2       	brcs	.-92     	; 0x62a <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     686:	8f 70       	andi	r24, 0x0F	; 15
     688:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     690:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     692:	08 95       	ret

00000694 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     6a2:	e8 2e       	mov	r14, r24
     6a4:	e7 01       	movw	r28, r14
     6a6:	7e 01       	movw	r14, r28
     6a8:	f9 2e       	mov	r15, r25
     6aa:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     6ac:	00 e0       	ldi	r16, 0x00	; 0
     6ae:	2a c0       	rjmp	.+84     	; 0x704 <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
     6b0:	98 81       	ld	r25, Y
     6b2:	99 23       	and	r25, r25
     6b4:	29 f1       	breq	.+74     	; 0x700 <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     6b6:	6b 81       	ldd	r22, Y+3	; 0x03
     6b8:	e9 81       	ldd	r30, Y+1	; 0x01
     6ba:	fa 81       	ldd	r31, Y+2	; 0x02
     6bc:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     6be:	89 2f       	mov	r24, r25
     6c0:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     6c2:	87 30       	cpi	r24, 0x07	; 7
     6c4:	18 f5       	brcc	.+70     	; 0x70c <Endpoint_ConfigureEndpointTable+0x78>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     6c6:	62 95       	swap	r22
     6c8:	66 0f       	add	r22, r22
     6ca:	66 0f       	add	r22, r22
     6cc:	60 7c       	andi	r22, 0xC0	; 192
     6ce:	99 1f       	adc	r25, r25
     6d0:	99 27       	eor	r25, r25
     6d2:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     6d4:	69 2b       	or	r22, r25
     6d6:	22 30       	cpi	r18, 0x02	; 2
     6d8:	10 f0       	brcs	.+4      	; 0x6de <Endpoint_ConfigureEndpointTable+0x4a>
     6da:	96 e0       	ldi	r25, 0x06	; 6
     6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <Endpoint_ConfigureEndpointTable+0x4c>
     6de:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     6e0:	28 e0       	ldi	r18, 0x08	; 8
     6e2:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     6e4:	40 e0       	ldi	r20, 0x00	; 0
     6e6:	03 c0       	rjmp	.+6      	; 0x6ee <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     6e8:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     6ea:	22 0f       	add	r18, r18
     6ec:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     6ee:	2e 17       	cp	r18, r30
     6f0:	3f 07       	cpc	r19, r31
     6f2:	d0 f3       	brcs	.-12     	; 0x6e8 <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     6f4:	42 95       	swap	r20
     6f6:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     6f8:	49 2b       	or	r20, r25
     6fa:	95 df       	rcall	.-214    	; 0x626 <Endpoint_ConfigureEndpoint_Prv>
     6fc:	88 23       	and	r24, r24
     6fe:	31 f0       	breq	.+12     	; 0x70c <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     700:	0f 5f       	subi	r16, 0xFF	; 255
     702:	25 96       	adiw	r28, 0x05	; 5
     704:	01 17       	cp	r16, r17
     706:	a0 f2       	brcs	.-88     	; 0x6b0 <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	01 c0       	rjmp	.+2      	; 0x70e <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     70c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	ff 90       	pop	r15
     718:	ef 90       	pop	r14
     71a:	08 95       	ret

0000071c <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     71c:	80 91 37 01 	lds	r24, 0x0137
     720:	87 ff       	sbrs	r24, 7
     722:	13 c0       	rjmp	.+38     	; 0x74a <Endpoint_ClearStatusStage+0x2e>
     724:	04 c0       	rjmp	.+8      	; 0x72e <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     726:	80 91 36 01 	lds	r24, 0x0136
     72a:	88 23       	and	r24, r24
     72c:	b9 f0       	breq	.+46     	; 0x75c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     72e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     732:	82 ff       	sbrs	r24, 2
     734:	f8 cf       	rjmp	.-16     	; 0x726 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     736:	80 91 e8 00 	lds	r24, 0x00E8
     73a:	8b 77       	andi	r24, 0x7B	; 123
     73c:	80 93 e8 00 	sts	0x00E8, r24
     740:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     742:	80 91 36 01 	lds	r24, 0x0136
     746:	88 23       	and	r24, r24
     748:	49 f0       	breq	.+18     	; 0x75c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     74a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     74e:	80 ff       	sbrs	r24, 0
     750:	f8 cf       	rjmp	.-16     	; 0x742 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     752:	80 91 e8 00 	lds	r24, 0x00E8
     756:	8e 77       	andi	r24, 0x7E	; 126
     758:	80 93 e8 00 	sts	0x00E8, r24
     75c:	08 95       	ret

0000075e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     75e:	80 91 e4 00 	lds	r24, 0x00E4
     762:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     766:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     768:	20 91 ec 00 	lds	r18, 0x00EC
     76c:	20 ff       	sbrs	r18, 0
     76e:	26 c0       	rjmp	.+76     	; 0x7bc <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     770:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     774:	20 fd       	sbrc	r18, 0
     776:	16 c0       	rjmp	.+44     	; 0x7a4 <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     778:	20 91 36 01 	lds	r18, 0x0136

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     77c:	22 23       	and	r18, r18
     77e:	a1 f0       	breq	.+40     	; 0x7a8 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     780:	25 30       	cpi	r18, 0x05	; 5
     782:	a1 f0       	breq	.+40     	; 0x7ac <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     784:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     788:	25 fd       	sbrc	r18, 5
     78a:	12 c0       	rjmp	.+36     	; 0x7b0 <Endpoint_WaitUntilReady+0x52>
     78c:	20 91 e4 00 	lds	r18, 0x00E4
     790:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     794:	28 17       	cp	r18, r24
     796:	39 07       	cpc	r19, r25
     798:	39 f3       	breq	.-50     	; 0x768 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     79a:	44 23       	and	r20, r20
     79c:	59 f0       	breq	.+22     	; 0x7b4 <Endpoint_WaitUntilReady+0x56>
     79e:	41 50       	subi	r20, 0x01	; 1
     7a0:	c9 01       	movw	r24, r18
     7a2:	e2 cf       	rjmp	.-60     	; 0x768 <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     7a8:	82 e0       	ldi	r24, 0x02	; 2
     7aa:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     7ac:	83 e0       	ldi	r24, 0x03	; 3
     7ae:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     7b4:	84 e0       	ldi	r24, 0x04	; 4
     7b6:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     7b8:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     7ba:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7bc:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     7c0:	22 ff       	sbrs	r18, 2
     7c2:	da cf       	rjmp	.-76     	; 0x778 <Endpoint_WaitUntilReady+0x1a>
     7c4:	f9 cf       	rjmp	.-14     	; 0x7b8 <Endpoint_WaitUntilReady+0x5a>

000007c6 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     7c6:	0f 93       	push	r16
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     7ce:	4b d0       	rcall	.+150    	; 0x866 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     7d0:	52 d0       	rcall	.+164    	; 0x876 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     7d2:	c8 ed       	ldi	r28, 0xD8	; 216
     7d4:	d0 e0       	ldi	r29, 0x00	; 0
     7d6:	88 81       	ld	r24, Y
     7d8:	8f 77       	andi	r24, 0x7F	; 127
     7da:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     7dc:	88 81       	ld	r24, Y
     7de:	80 68       	ori	r24, 0x80	; 128
     7e0:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     7e2:	88 81       	ld	r24, Y
     7e4:	8f 7d       	andi	r24, 0xDF	; 223
     7e6:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     7e8:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     7ea:	10 92 36 01 	sts	0x0136, r1
	USB_Device_ConfigurationNumber  = 0;
     7ee:	10 92 32 01 	sts	0x0132, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     7f2:	10 92 34 01 	sts	0x0134, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     7f6:	10 92 33 01 	sts	0x0133, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     7fa:	00 ee       	ldi	r16, 0xE0	; 224
     7fc:	10 e0       	ldi	r17, 0x00	; 0
     7fe:	f8 01       	movw	r30, r16
     800:	80 81       	ld	r24, Z
     802:	8b 7f       	andi	r24, 0xFB	; 251
     804:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     806:	88 81       	ld	r24, Y
     808:	81 60       	ori	r24, 0x01	; 1
     80a:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	42 e0       	ldi	r20, 0x02	; 2
     812:	09 df       	rcall	.-494    	; 0x626 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     814:	e1 ee       	ldi	r30, 0xE1	; 225
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	80 81       	ld	r24, Z
     81a:	8e 7f       	andi	r24, 0xFE	; 254
     81c:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     81e:	e2 ee       	ldi	r30, 0xE2	; 226
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	80 81       	ld	r24, Z
     824:	81 60       	ori	r24, 0x01	; 1
     826:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     828:	80 81       	ld	r24, Z
     82a:	88 60       	ori	r24, 0x08	; 8
     82c:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     82e:	f8 01       	movw	r30, r16
     830:	80 81       	ld	r24, Z
     832:	8e 7f       	andi	r24, 0xFE	; 254
     834:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     836:	88 81       	ld	r24, Y
     838:	80 61       	ori	r24, 0x10	; 16
     83a:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	08 95       	ret

00000846 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     846:	e8 ed       	ldi	r30, 0xD8	; 216
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
     84c:	8f 7e       	andi	r24, 0xEF	; 239
     84e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     850:	e7 ed       	ldi	r30, 0xD7	; 215
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	80 81       	ld	r24, Z
     856:	81 60       	ori	r24, 0x01	; 1
     858:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     85a:	84 e0       	ldi	r24, 0x04	; 4
     85c:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	80 93 35 01 	sts	0x0135, r24

	USB_ResetInterface();
}
     864:	b0 cf       	rjmp	.-160    	; 0x7c6 <USB_ResetInterface>

00000866 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     866:	e8 ed       	ldi	r30, 0xD8	; 216
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	80 81       	ld	r24, Z
     86c:	8e 7f       	andi	r24, 0xFE	; 254
     86e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     870:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     874:	08 95       	ret

00000876 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     876:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     87a:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     87e:	08 95       	ret

00000880 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     880:	1f 92       	push	r1
     882:	0f 92       	push	r0
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	0f 92       	push	r0
     888:	11 24       	eor	r1, r1
     88a:	2f 93       	push	r18
     88c:	3f 93       	push	r19
     88e:	4f 93       	push	r20
     890:	5f 93       	push	r21
     892:	6f 93       	push	r22
     894:	7f 93       	push	r23
     896:	8f 93       	push	r24
     898:	9f 93       	push	r25
     89a:	af 93       	push	r26
     89c:	bf 93       	push	r27
     89e:	ef 93       	push	r30
     8a0:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     8a2:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     8a6:	82 ff       	sbrs	r24, 2
     8a8:	0a c0       	rjmp	.+20     	; 0x8be <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     8aa:	80 91 e2 00 	lds	r24, 0x00E2
     8ae:	82 ff       	sbrs	r24, 2
     8b0:	06 c0       	rjmp	.+12     	; 0x8be <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     8b2:	80 91 e1 00 	lds	r24, 0x00E1
     8b6:	8b 7f       	andi	r24, 0xFB	; 251
     8b8:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     8bc:	e7 dc       	rcall	.-1586   	; 0x28c <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     8be:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     8c2:	80 ff       	sbrs	r24, 0
     8c4:	1d c0       	rjmp	.+58     	; 0x900 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     8c6:	80 91 d8 00 	lds	r24, 0x00D8
     8ca:	80 ff       	sbrs	r24, 0
     8cc:	19 c0       	rjmp	.+50     	; 0x900 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     8ce:	80 91 da 00 	lds	r24, 0x00DA
     8d2:	8e 7f       	andi	r24, 0xFE	; 254
     8d4:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     8d8:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     8dc:	80 ff       	sbrs	r24, 0
     8de:	0c c0       	rjmp	.+24     	; 0x8f8 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8e0:	80 e1       	ldi	r24, 0x10	; 16
     8e2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8e4:	82 e1       	ldi	r24, 0x12	; 18
     8e6:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     8e8:	09 b4       	in	r0, 0x29	; 41
     8ea:	00 fe       	sbrs	r0, 0
     8ec:	fd cf       	rjmp	.-6      	; 0x8e8 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	80 93 36 01 	sts	0x0136, r24
			EVENT_USB_Device_Connect();
     8f4:	a6 dc       	rcall	.-1716   	; 0x242 <EVENT_USB_Device_Connect>
     8f6:	04 c0       	rjmp	.+8      	; 0x900 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8f8:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     8fa:	10 92 36 01 	sts	0x0136, r1
			EVENT_USB_Device_Disconnect();
     8fe:	a3 dc       	rcall	.-1722   	; 0x246 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     900:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     904:	80 ff       	sbrs	r24, 0
     906:	18 c0       	rjmp	.+48     	; 0x938 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     908:	80 91 e2 00 	lds	r24, 0x00E2
     90c:	80 ff       	sbrs	r24, 0
     90e:	14 c0       	rjmp	.+40     	; 0x938 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     910:	80 91 e2 00 	lds	r24, 0x00E2
     914:	8e 7f       	andi	r24, 0xFE	; 254
     916:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     91a:	80 91 e2 00 	lds	r24, 0x00E2
     91e:	80 61       	ori	r24, 0x10	; 16
     920:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     924:	80 91 d8 00 	lds	r24, 0x00D8
     928:	80 62       	ori	r24, 0x20	; 32
     92a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     92e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     930:	85 e0       	ldi	r24, 0x05	; 5
     932:	80 93 36 01 	sts	0x0136, r24
		EVENT_USB_Device_Suspend();
     936:	0b d2       	rcall	.+1046   	; 0xd4e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     938:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     93c:	84 ff       	sbrs	r24, 4
     93e:	2d c0       	rjmp	.+90     	; 0x99a <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     940:	80 91 e2 00 	lds	r24, 0x00E2
     944:	84 ff       	sbrs	r24, 4
     946:	29 c0       	rjmp	.+82     	; 0x99a <__vector_10+0x11a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     94c:	82 e1       	ldi	r24, 0x12	; 18
     94e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     950:	09 b4       	in	r0, 0x29	; 41
     952:	00 fe       	sbrs	r0, 0
     954:	fd cf       	rjmp	.-6      	; 0x950 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     956:	80 91 d8 00 	lds	r24, 0x00D8
     95a:	8f 7d       	andi	r24, 0xDF	; 223
     95c:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     960:	80 91 e1 00 	lds	r24, 0x00E1
     964:	8f 7e       	andi	r24, 0xEF	; 239
     966:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     96a:	80 91 e2 00 	lds	r24, 0x00E2
     96e:	8f 7e       	andi	r24, 0xEF	; 239
     970:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     974:	80 91 e2 00 	lds	r24, 0x00E2
     978:	81 60       	ori	r24, 0x01	; 1
     97a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     97e:	80 91 32 01 	lds	r24, 0x0132
     982:	88 23       	and	r24, r24
     984:	21 f4       	brne	.+8      	; 0x98e <__vector_10+0x10e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     986:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     98a:	87 ff       	sbrs	r24, 7
     98c:	02 c0       	rjmp	.+4      	; 0x992 <__vector_10+0x112>
     98e:	84 e0       	ldi	r24, 0x04	; 4
     990:	01 c0       	rjmp	.+2      	; 0x994 <__vector_10+0x114>
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	80 93 36 01 	sts	0x0136, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     998:	da d1       	rcall	.+948    	; 0xd4e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     99a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     99e:	83 ff       	sbrs	r24, 3
     9a0:	27 c0       	rjmp	.+78     	; 0x9f0 <__vector_10+0x170>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     9a2:	80 91 e2 00 	lds	r24, 0x00E2
     9a6:	83 ff       	sbrs	r24, 3
     9a8:	23 c0       	rjmp	.+70     	; 0x9f0 <__vector_10+0x170>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     9aa:	80 91 e1 00 	lds	r24, 0x00E1
     9ae:	87 7f       	andi	r24, 0xF7	; 247
     9b0:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	80 93 36 01 	sts	0x0136, r24
		USB_Device_ConfigurationNumber = 0;
     9ba:	10 92 32 01 	sts	0x0132, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     9be:	80 91 e1 00 	lds	r24, 0x00E1
     9c2:	8e 7f       	andi	r24, 0xFE	; 254
     9c4:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     9c8:	80 91 e2 00 	lds	r24, 0x00E2
     9cc:	8e 7f       	andi	r24, 0xFE	; 254
     9ce:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9d2:	80 91 e2 00 	lds	r24, 0x00E2
     9d6:	80 61       	ori	r24, 0x10	; 16
     9d8:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	42 e0       	ldi	r20, 0x02	; 2
     9e2:	21 de       	rcall	.-958    	; 0x626 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     9e4:	80 91 f0 00 	lds	r24, 0x00F0
     9e8:	88 60       	ori	r24, 0x08	; 8
     9ea:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     9ee:	af d1       	rcall	.+862    	; 0xd4e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     9f0:	ff 91       	pop	r31
     9f2:	ef 91       	pop	r30
     9f4:	bf 91       	pop	r27
     9f6:	af 91       	pop	r26
     9f8:	9f 91       	pop	r25
     9fa:	8f 91       	pop	r24
     9fc:	7f 91       	pop	r23
     9fe:	6f 91       	pop	r22
     a00:	5f 91       	pop	r21
     a02:	4f 91       	pop	r20
     a04:	3f 91       	pop	r19
     a06:	2f 91       	pop	r18
     a08:	0f 90       	pop	r0
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	0f 90       	pop	r0
     a0e:	1f 90       	pop	r1
     a10:	18 95       	reti

00000a12 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     a12:	1f 92       	push	r1
     a14:	0f 92       	push	r0
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	0f 92       	push	r0
     a1a:	11 24       	eor	r1, r1
     a1c:	1f 93       	push	r17
     a1e:	2f 93       	push	r18
     a20:	3f 93       	push	r19
     a22:	4f 93       	push	r20
     a24:	5f 93       	push	r21
     a26:	6f 93       	push	r22
     a28:	7f 93       	push	r23
     a2a:	8f 93       	push	r24
     a2c:	9f 93       	push	r25
     a2e:	af 93       	push	r26
     a30:	bf 93       	push	r27
     a32:	ef 93       	push	r30
     a34:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     a36:	10 91 e9 00 	lds	r17, 0x00E9
     a3a:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a3c:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a40:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     a44:	80 91 f0 00 	lds	r24, 0x00F0
     a48:	87 7f       	andi	r24, 0xF7	; 247
     a4a:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     a4e:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     a50:	1b d0       	rcall	.+54     	; 0xa88 <USB_Device_ProcessControlRequest>
     a52:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a56:	80 91 f0 00 	lds	r24, 0x00F0
     a5a:	88 60       	ori	r24, 0x08	; 8
     a5c:	80 93 f0 00 	sts	0x00F0, r24
     a60:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     a64:	ff 91       	pop	r31
     a66:	ef 91       	pop	r30
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	1f 91       	pop	r17
     a7e:	0f 90       	pop	r0
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	0f 90       	pop	r0
     a84:	1f 90       	pop	r1
     a86:	18 95       	reti

00000a88 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a88:	1f 93       	push	r17
     a8a:	df 93       	push	r29
     a8c:	cf 93       	push	r28
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
     a92:	ac 97       	sbiw	r28, 0x2c	; 44
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	f8 94       	cli
     a98:	de bf       	out	0x3e, r29	; 62
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     a9e:	e7 e3       	ldi	r30, 0x37	; 55
     aa0:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     aa2:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     aa6:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     aa8:	21 e0       	ldi	r18, 0x01	; 1
     aaa:	ef 33       	cpi	r30, 0x3F	; 63
     aac:	f2 07       	cpc	r31, r18
     aae:	c9 f7       	brne	.-14     	; 0xaa2 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     ab0:	e7 db       	rcall	.-2098   	; 0x280 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ab2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     ab6:	83 ff       	sbrs	r24, 3
     ab8:	32 c1       	rjmp	.+612    	; 0xd1e <__stack+0x21f>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     aba:	80 91 37 01 	lds	r24, 0x0137

		switch (USB_ControlRequest.bRequest)
     abe:	20 91 38 01 	lds	r18, 0x0138
     ac2:	25 30       	cpi	r18, 0x05	; 5
     ac4:	09 f4       	brne	.+2      	; 0xac8 <USB_Device_ProcessControlRequest+0x40>
     ac6:	84 c0       	rjmp	.+264    	; 0xbd0 <__stack+0xd1>
     ac8:	26 30       	cpi	r18, 0x06	; 6
     aca:	40 f4       	brcc	.+16     	; 0xadc <USB_Device_ProcessControlRequest+0x54>
     acc:	21 30       	cpi	r18, 0x01	; 1
     ace:	a1 f1       	breq	.+104    	; 0xb38 <__stack+0x39>
     ad0:	21 30       	cpi	r18, 0x01	; 1
     ad2:	70 f0       	brcs	.+28     	; 0xaf0 <USB_Device_ProcessControlRequest+0x68>
     ad4:	23 30       	cpi	r18, 0x03	; 3
     ad6:	09 f0       	breq	.+2      	; 0xada <USB_Device_ProcessControlRequest+0x52>
     ad8:	22 c1       	rjmp	.+580    	; 0xd1e <__stack+0x21f>
     ada:	2e c0       	rjmp	.+92     	; 0xb38 <__stack+0x39>
     adc:	28 30       	cpi	r18, 0x08	; 8
     ade:	09 f4       	brne	.+2      	; 0xae2 <USB_Device_ProcessControlRequest+0x5a>
     ae0:	f0 c0       	rjmp	.+480    	; 0xcc2 <__stack+0x1c3>
     ae2:	29 30       	cpi	r18, 0x09	; 9
     ae4:	09 f4       	brne	.+2      	; 0xae8 <USB_Device_ProcessControlRequest+0x60>
     ae6:	ff c0       	rjmp	.+510    	; 0xce6 <__stack+0x1e7>
     ae8:	26 30       	cpi	r18, 0x06	; 6
     aea:	09 f0       	breq	.+2      	; 0xaee <USB_Device_ProcessControlRequest+0x66>
     aec:	18 c1       	rjmp	.+560    	; 0xd1e <__stack+0x21f>
     aee:	93 c0       	rjmp	.+294    	; 0xc16 <__stack+0x117>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     af0:	80 38       	cpi	r24, 0x80	; 128
     af2:	21 f0       	breq	.+8      	; 0xafc <USB_Device_ProcessControlRequest+0x74>
     af4:	82 38       	cpi	r24, 0x82	; 130
     af6:	09 f0       	breq	.+2      	; 0xafa <USB_Device_ProcessControlRequest+0x72>
     af8:	12 c1       	rjmp	.+548    	; 0xd1e <__stack+0x21f>
     afa:	08 c0       	rjmp	.+16     	; 0xb0c <__stack+0xd>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     afc:	80 91 33 01 	lds	r24, 0x0133
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     b00:	90 91 34 01 	lds	r25, 0x0134
     b04:	99 23       	and	r25, r25
     b06:	71 f0       	breq	.+28     	; 0xb24 <__stack+0x25>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     b08:	82 60       	ori	r24, 0x02	; 2
     b0a:	0c c0       	rjmp	.+24     	; 0xb24 <__stack+0x25>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b0c:	80 91 3b 01 	lds	r24, 0x013B
     b10:	8f 70       	andi	r24, 0x0F	; 15
     b12:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b16:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	95 ff       	sbrs	r25, 5
     b1e:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b20:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b24:	90 91 e8 00 	lds	r25, 0x00E8
     b28:	97 7f       	andi	r25, 0xF7	; 247
     b2a:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     b2e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     b32:	10 92 f1 00 	sts	0x00F1, r1
     b36:	d0 c0       	rjmp	.+416    	; 0xcd8 <__stack+0x1d9>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b38:	88 23       	and	r24, r24
     b3a:	19 f0       	breq	.+6      	; 0xb42 <__stack+0x43>
     b3c:	82 30       	cpi	r24, 0x02	; 2
     b3e:	09 f0       	breq	.+2      	; 0xb42 <__stack+0x43>
     b40:	ee c0       	rjmp	.+476    	; 0xd1e <__stack+0x21f>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	8f 71       	andi	r24, 0x1F	; 31
     b46:	90 70       	andi	r25, 0x00	; 0
     b48:	00 97       	sbiw	r24, 0x00	; 0
     b4a:	29 f0       	breq	.+10     	; 0xb56 <__stack+0x57>
     b4c:	82 30       	cpi	r24, 0x02	; 2
     b4e:	91 05       	cpc	r25, r1
     b50:	09 f0       	breq	.+2      	; 0xb54 <__stack+0x55>
     b52:	e5 c0       	rjmp	.+458    	; 0xd1e <__stack+0x21f>
     b54:	0b c0       	rjmp	.+22     	; 0xb6c <__stack+0x6d>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b56:	80 91 39 01 	lds	r24, 0x0139
     b5a:	81 30       	cpi	r24, 0x01	; 1
     b5c:	09 f0       	breq	.+2      	; 0xb60 <__stack+0x61>
     b5e:	df c0       	rjmp	.+446    	; 0xd1e <__stack+0x21f>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b60:	23 30       	cpi	r18, 0x03	; 3
     b62:	09 f0       	breq	.+2      	; 0xb66 <__stack+0x67>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	80 93 34 01 	sts	0x0134, r24
     b6a:	2c c0       	rjmp	.+88     	; 0xbc4 <__stack+0xc5>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     b6c:	80 91 39 01 	lds	r24, 0x0139
     b70:	88 23       	and	r24, r24
     b72:	41 f5       	brne	.+80     	; 0xbc4 <__stack+0xc5>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b74:	20 91 3b 01 	lds	r18, 0x013B
     b78:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b7a:	09 f4       	brne	.+2      	; 0xb7e <__stack+0x7f>
     b7c:	d0 c0       	rjmp	.+416    	; 0xd1e <__stack+0x21f>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b7e:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b82:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     b86:	80 ff       	sbrs	r24, 0
     b88:	1d c0       	rjmp	.+58     	; 0xbc4 <__stack+0xc5>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b8a:	80 91 38 01 	lds	r24, 0x0138
     b8e:	83 30       	cpi	r24, 0x03	; 3
     b90:	21 f4       	brne	.+8      	; 0xb9a <__stack+0x9b>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b92:	80 91 eb 00 	lds	r24, 0x00EB
     b96:	80 62       	ori	r24, 0x20	; 32
     b98:	13 c0       	rjmp	.+38     	; 0xbc0 <__stack+0xc1>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b9a:	80 91 eb 00 	lds	r24, 0x00EB
     b9e:	80 61       	ori	r24, 0x10	; 16
     ba0:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <__stack+0xaf>
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	2a 95       	dec	r18
     bb0:	e2 f7       	brpl	.-8      	; 0xbaa <__stack+0xab>
     bb2:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     bb6:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     bba:	80 91 eb 00 	lds	r24, 0x00EB
     bbe:	88 60       	ori	r24, 0x08	; 8
     bc0:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bc4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bc8:	80 91 e8 00 	lds	r24, 0x00E8
     bcc:	87 7f       	andi	r24, 0xF7	; 247
     bce:	87 c0       	rjmp	.+270    	; 0xcde <__stack+0x1df>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     bd0:	88 23       	and	r24, r24
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <__stack+0xd7>
     bd4:	a4 c0       	rjmp	.+328    	; 0xd1e <__stack+0x21f>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     bd6:	10 91 39 01 	lds	r17, 0x0139
     bda:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     bdc:	80 91 e3 00 	lds	r24, 0x00E3
     be0:	80 78       	andi	r24, 0x80	; 128
     be2:	81 2b       	or	r24, r17
     be4:	80 93 e3 00 	sts	0x00E3, r24
     be8:	80 91 e8 00 	lds	r24, 0x00E8
     bec:	87 7f       	andi	r24, 0xF7	; 247
     bee:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     bf2:	94 dd       	rcall	.-1240   	; 0x71c <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bf4:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     bf8:	80 ff       	sbrs	r24, 0
     bfa:	fc cf       	rjmp	.-8      	; 0xbf4 <__stack+0xf5>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     bfc:	80 91 e3 00 	lds	r24, 0x00E3
     c00:	80 68       	ori	r24, 0x80	; 128
     c02:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     c06:	11 23       	and	r17, r17
     c08:	11 f0       	breq	.+4      	; 0xc0e <__stack+0x10f>
     c0a:	83 e0       	ldi	r24, 0x03	; 3
     c0c:	01 c0       	rjmp	.+2      	; 0xc10 <__stack+0x111>
     c0e:	82 e0       	ldi	r24, 0x02	; 2
     c10:	80 93 36 01 	sts	0x0136, r24
     c14:	84 c0       	rjmp	.+264    	; 0xd1e <__stack+0x21f>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c16:	80 58       	subi	r24, 0x80	; 128
     c18:	82 30       	cpi	r24, 0x02	; 2
     c1a:	08 f0       	brcs	.+2      	; 0xc1e <__stack+0x11f>
     c1c:	80 c0       	rjmp	.+256    	; 0xd1e <__stack+0x21f>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     c1e:	80 91 39 01 	lds	r24, 0x0139
     c22:	90 91 3a 01 	lds	r25, 0x013A
     c26:	23 e0       	ldi	r18, 0x03	; 3
     c28:	8c 3d       	cpi	r24, 0xDC	; 220
     c2a:	92 07       	cpc	r25, r18
     c2c:	91 f5       	brne	.+100    	; 0xc92 <__stack+0x193>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     c2e:	83 e0       	ldi	r24, 0x03	; 3
     c30:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     c32:	8a e2       	ldi	r24, 0x2A	; 42
     c34:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c36:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c38:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     c3a:	de 01       	movw	r26, r28
     c3c:	15 96       	adiw	r26, 0x05	; 5
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     c42:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     c44:	61 e2       	ldi	r22, 0x21	; 33
     c46:	e4 2f       	mov	r30, r20
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	60 93 57 00 	sts	0x0057, r22
     c4e:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
     c50:	80 ff       	sbrs	r24, 0
     c52:	03 c0       	rjmp	.+6      	; 0xc5a <__stack+0x15b>
					{
						SerialByte >>= 4;
     c54:	e2 95       	swap	r30
     c56:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     c58:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     c5a:	ef 70       	andi	r30, 0x0F	; 15
     c5c:	2e 2f       	mov	r18, r30
     c5e:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     c60:	ea 30       	cpi	r30, 0x0A	; 10
     c62:	18 f0       	brcs	.+6      	; 0xc6a <__stack+0x16b>
     c64:	29 5c       	subi	r18, 0xC9	; 201
     c66:	3f 4f       	sbci	r19, 0xFF	; 255
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <__stack+0x16f>
     c6a:	20 5d       	subi	r18, 0xD0	; 208
     c6c:	3f 4f       	sbci	r19, 0xFF	; 255
     c6e:	2d 93       	st	X+, r18
     c70:	3d 93       	st	X+, r19
     c72:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c74:	84 31       	cpi	r24, 0x14	; 20
     c76:	91 05       	cpc	r25, r1
     c78:	31 f7       	brne	.-52     	; 0xc46 <__stack+0x147>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     c7a:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c7c:	80 91 e8 00 	lds	r24, 0x00E8
     c80:	87 7f       	andi	r24, 0xF7	; 247
     c82:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c86:	ce 01       	movw	r24, r28
     c88:	03 96       	adiw	r24, 0x03	; 3
     c8a:	6a e2       	ldi	r22, 0x2A	; 42
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	be db       	rcall	.-2180   	; 0x40c <Endpoint_Write_Control_Stream_LE>
     c90:	12 c0       	rjmp	.+36     	; 0xcb6 <__stack+0x1b7>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c92:	60 91 3b 01 	lds	r22, 0x013B
     c96:	ae 01       	movw	r20, r28
     c98:	4f 5f       	subi	r20, 0xFF	; 255
     c9a:	5f 4f       	sbci	r21, 0xFF	; 255
     c9c:	1c db       	rcall	.-2504   	; 0x2d6 <CALLBACK_USB_GetDescriptor>
     c9e:	bc 01       	movw	r22, r24
     ca0:	00 97       	sbiw	r24, 0x00	; 0
     ca2:	09 f4       	brne	.+2      	; 0xca6 <__stack+0x1a7>
     ca4:	3c c0       	rjmp	.+120    	; 0xd1e <__stack+0x21f>
     ca6:	80 91 e8 00 	lds	r24, 0x00E8
     caa:	87 7f       	andi	r24, 0xF7	; 247
     cac:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	9a 81       	ldd	r25, Y+2	; 0x02
     cb4:	54 dc       	rcall	.-1880   	; 0x55e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cb6:	80 91 e8 00 	lds	r24, 0x00E8
     cba:	8b 77       	andi	r24, 0x7B	; 123
     cbc:	80 93 e8 00 	sts	0x00E8, r24
     cc0:	2e c0       	rjmp	.+92     	; 0xd1e <__stack+0x21f>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     cc2:	80 38       	cpi	r24, 0x80	; 128
     cc4:	61 f5       	brne	.+88     	; 0xd1e <__stack+0x21f>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cc6:	80 91 e8 00 	lds	r24, 0x00E8
     cca:	87 7f       	andi	r24, 0xF7	; 247
     ccc:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     cd0:	80 91 32 01 	lds	r24, 0x0132
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cd4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cd8:	80 91 e8 00 	lds	r24, 0x00E8
     cdc:	8e 77       	andi	r24, 0x7E	; 126
     cde:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     ce2:	1c dd       	rcall	.-1480   	; 0x71c <Endpoint_ClearStatusStage>
     ce4:	1c c0       	rjmp	.+56     	; 0xd1e <__stack+0x21f>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ce6:	88 23       	and	r24, r24
     ce8:	d1 f4       	brne	.+52     	; 0xd1e <__stack+0x21f>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     cea:	90 91 39 01 	lds	r25, 0x0139
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	b0 f4       	brcc	.+44     	; 0xd1e <__stack+0x21f>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cf2:	80 91 e8 00 	lds	r24, 0x00E8
     cf6:	87 7f       	andi	r24, 0xF7	; 247
     cf8:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     cfc:	90 93 32 01 	sts	0x0132, r25

	Endpoint_ClearStatusStage();
     d00:	0d dd       	rcall	.-1510   	; 0x71c <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     d02:	80 91 32 01 	lds	r24, 0x0132
     d06:	88 23       	and	r24, r24
     d08:	21 f4       	brne	.+8      	; 0xd12 <__stack+0x213>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d0a:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     d0e:	87 ff       	sbrs	r24, 7
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <__stack+0x217>
     d12:	84 e0       	ldi	r24, 0x04	; 4
     d14:	01 c0       	rjmp	.+2      	; 0xd18 <__stack+0x219>
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	80 93 36 01 	sts	0x0136, r24

	EVENT_USB_Device_ConfigurationChanged();
     d1c:	96 da       	rcall	.-2772   	; 0x24a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d1e:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     d22:	83 ff       	sbrs	r24, 3
     d24:	0a c0       	rjmp	.+20     	; 0xd3a <__stack+0x23b>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d26:	80 91 e8 00 	lds	r24, 0x00E8
     d2a:	87 7f       	andi	r24, 0xF7	; 247
     d2c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d30:	80 91 eb 00 	lds	r24, 0x00EB
     d34:	80 62       	ori	r24, 0x20	; 32
     d36:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     d3a:	ac 96       	adiw	r28, 0x2c	; 44
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	1f 91       	pop	r17
     d4c:	08 95       	ret

00000d4e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     d4e:	08 95       	ret

00000d50 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     d50:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     d52:	80 91 36 01 	lds	r24, 0x0136
     d56:	88 23       	and	r24, r24
     d58:	a9 f0       	breq	.+42     	; 0xd84 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d5a:	80 91 e9 00 	lds	r24, 0x00E9
     d5e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d60:	90 91 ec 00 	lds	r25, 0x00EC
     d64:	90 ff       	sbrs	r25, 0
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <USB_USBTask+0x1c>
     d68:	10 e8       	ldi	r17, 0x80	; 128
     d6a:	01 c0       	rjmp	.+2      	; 0xd6e <USB_USBTask+0x1e>
     d6c:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d6e:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d70:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d74:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     d78:	83 ff       	sbrs	r24, 3
     d7a:	01 c0       	rjmp	.+2      	; 0xd7e <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
     d7c:	85 de       	rcall	.-758    	; 0xa88 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d7e:	1f 70       	andi	r17, 0x0F	; 15
     d80:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     d84:	1f 91       	pop	r17
     d86:	08 95       	ret

00000d88 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d8e:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     d92:	83 ff       	sbrs	r24, 3
     d94:	a3 c0       	rjmp	.+326    	; 0xedc <CDC_Device_ProcessControlRequest+0x154>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     d96:	88 81       	ld	r24, Y
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	20 91 3b 01 	lds	r18, 0x013B
     d9e:	30 91 3c 01 	lds	r19, 0x013C
     da2:	28 17       	cp	r18, r24
     da4:	39 07       	cpc	r19, r25
     da6:	09 f0       	breq	.+2      	; 0xdaa <CDC_Device_ProcessControlRequest+0x22>
     da8:	99 c0       	rjmp	.+306    	; 0xedc <CDC_Device_ProcessControlRequest+0x154>
	  return;

	switch (USB_ControlRequest.bRequest)
     daa:	80 91 38 01 	lds	r24, 0x0138
     dae:	81 32       	cpi	r24, 0x21	; 33
     db0:	69 f0       	breq	.+26     	; 0xdcc <CDC_Device_ProcessControlRequest+0x44>
     db2:	82 32       	cpi	r24, 0x22	; 34
     db4:	20 f4       	brcc	.+8      	; 0xdbe <CDC_Device_ProcessControlRequest+0x36>
     db6:	80 32       	cpi	r24, 0x20	; 32
     db8:	09 f0       	breq	.+2      	; 0xdbc <CDC_Device_ProcessControlRequest+0x34>
     dba:	90 c0       	rjmp	.+288    	; 0xedc <CDC_Device_ProcessControlRequest+0x154>
     dbc:	3c c0       	rjmp	.+120    	; 0xe36 <CDC_Device_ProcessControlRequest+0xae>
     dbe:	82 32       	cpi	r24, 0x22	; 34
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <CDC_Device_ProcessControlRequest+0x3c>
     dc2:	6b c0       	rjmp	.+214    	; 0xe9a <CDC_Device_ProcessControlRequest+0x112>
     dc4:	83 32       	cpi	r24, 0x23	; 35
     dc6:	09 f0       	breq	.+2      	; 0xdca <CDC_Device_ProcessControlRequest+0x42>
     dc8:	89 c0       	rjmp	.+274    	; 0xedc <CDC_Device_ProcessControlRequest+0x154>
     dca:	7a c0       	rjmp	.+244    	; 0xec0 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     dcc:	80 91 37 01 	lds	r24, 0x0137
     dd0:	81 3a       	cpi	r24, 0xA1	; 161
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <CDC_Device_ProcessControlRequest+0x4e>
     dd4:	83 c0       	rjmp	.+262    	; 0xedc <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dd6:	80 91 e8 00 	lds	r24, 0x00E8
     dda:	87 7f       	andi	r24, 0xF7	; 247
     ddc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     de0:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     de4:	80 ff       	sbrs	r24, 0
     de6:	fc cf       	rjmp	.-8      	; 0xde0 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     de8:	8c 89       	ldd	r24, Y+20	; 0x14
     dea:	9d 89       	ldd	r25, Y+21	; 0x15
     dec:	ae 89       	ldd	r26, Y+22	; 0x16
     dee:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     df0:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     df4:	29 2f       	mov	r18, r25
     df6:	3a 2f       	mov	r19, r26
     df8:	4b 2f       	mov	r20, r27
     dfa:	55 27       	eor	r21, r21
     dfc:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
     e00:	9d 01       	movw	r18, r26
     e02:	44 27       	eor	r20, r20
     e04:	55 27       	eor	r21, r21
     e06:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
     e0a:	8b 2f       	mov	r24, r27
     e0c:	99 27       	eor	r25, r25
     e0e:	aa 27       	eor	r26, r26
     e10:	bb 27       	eor	r27, r27
     e12:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     e16:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e18:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     e1c:	89 8d       	ldd	r24, Y+25	; 0x19
     e1e:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     e22:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e24:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e28:	80 91 e8 00 	lds	r24, 0x00E8
     e2c:	8e 77       	andi	r24, 0x7E	; 126
     e2e:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     e32:	74 dc       	rcall	.-1816   	; 0x71c <Endpoint_ClearStatusStage>
     e34:	53 c0       	rjmp	.+166    	; 0xedc <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e36:	80 91 37 01 	lds	r24, 0x0137
     e3a:	81 32       	cpi	r24, 0x21	; 33
     e3c:	09 f0       	breq	.+2      	; 0xe40 <CDC_Device_ProcessControlRequest+0xb8>
     e3e:	4e c0       	rjmp	.+156    	; 0xedc <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e40:	80 91 e8 00 	lds	r24, 0x00E8
     e44:	87 7f       	andi	r24, 0xF7	; 247
     e46:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     e4a:	05 c0       	rjmp	.+10     	; 0xe56 <CDC_Device_ProcessControlRequest+0xce>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     e4c:	80 91 36 01 	lds	r24, 0x0136
     e50:	88 23       	and	r24, r24
     e52:	09 f4       	brne	.+2      	; 0xe56 <CDC_Device_ProcessControlRequest+0xce>
     e54:	43 c0       	rjmp	.+134    	; 0xedc <CDC_Device_ProcessControlRequest+0x154>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e56:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     e5a:	82 ff       	sbrs	r24, 2
     e5c:	f7 cf       	rjmp	.-18     	; 0xe4c <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     e5e:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
     e62:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
     e66:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
     e6a:	80 91 f1 00 	lds	r24, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     e6e:	3c 8b       	std	Y+20, r19	; 0x14
     e70:	2d 8b       	std	Y+21, r18	; 0x15
     e72:	9e 8b       	std	Y+22, r25	; 0x16
     e74:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     e76:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     e7a:	88 8f       	std	Y+24, r24	; 0x18
     e7c:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     e80:	89 8f       	std	Y+25, r24	; 0x19
     e82:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     e86:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e88:	80 91 e8 00 	lds	r24, 0x00E8
     e8c:	8b 77       	andi	r24, 0x7B	; 123
     e8e:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     e92:	44 dc       	rcall	.-1912   	; 0x71c <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     e94:	ce 01       	movw	r24, r28
     e96:	d2 d0       	rcall	.+420    	; 0x103c <CDC_Device_Event_Stub>
     e98:	21 c0       	rjmp	.+66     	; 0xedc <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e9a:	80 91 37 01 	lds	r24, 0x0137
     e9e:	81 32       	cpi	r24, 0x21	; 33
     ea0:	e9 f4       	brne	.+58     	; 0xedc <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ea2:	80 91 e8 00 	lds	r24, 0x00E8
     ea6:	87 7f       	andi	r24, 0xF7	; 247
     ea8:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     eac:	37 dc       	rcall	.-1938   	; 0x71c <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     eae:	80 91 39 01 	lds	r24, 0x0139
     eb2:	90 91 3a 01 	lds	r25, 0x013A
     eb6:	99 8b       	std	Y+17, r25	; 0x11
     eb8:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     eba:	ce 01       	movw	r24, r28
     ebc:	bf d0       	rcall	.+382    	; 0x103c <CDC_Device_Event_Stub>
     ebe:	0e c0       	rjmp	.+28     	; 0xedc <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     ec0:	80 91 37 01 	lds	r24, 0x0137
     ec4:	81 32       	cpi	r24, 0x21	; 33
     ec6:	51 f4       	brne	.+20     	; 0xedc <CDC_Device_ProcessControlRequest+0x154>
     ec8:	80 91 e8 00 	lds	r24, 0x00E8
     ecc:	87 7f       	andi	r24, 0xF7	; 247
     ece:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     ed2:	24 dc       	rcall	.-1976   	; 0x71c <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     ed4:	ce 01       	movw	r24, r28
     ed6:	60 91 39 01 	lds	r22, 0x0139
     eda:	b0 d0       	rcall	.+352    	; 0x103c <CDC_Device_Event_Stub>
			}

			break;
	}
}
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	08 95       	ret

00000ee2 <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     ee8:	40 96       	adiw	r24, 0x10	; 16
     eea:	fc 01       	movw	r30, r24
     eec:	8b e0       	ldi	r24, 0x0B	; 11
     eee:	df 01       	movw	r26, r30
     ef0:	1d 92       	st	X+, r1
     ef2:	8a 95       	dec	r24
     ef4:	e9 f7       	brne	.-6      	; 0xef0 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     ef6:	82 e0       	ldi	r24, 0x02	; 2
     ef8:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     efa:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     efc:	83 e0       	ldi	r24, 0x03	; 3
     efe:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     f00:	ce 01       	movw	r24, r28
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	61 e0       	ldi	r22, 0x01	; 1
     f06:	c6 db       	rcall	.-2164   	; 0x694 <Endpoint_ConfigureEndpointTable>
     f08:	88 23       	and	r24, r24
     f0a:	59 f0       	breq	.+22     	; 0xf22 <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     f0c:	ce 01       	movw	r24, r28
     f0e:	06 96       	adiw	r24, 0x06	; 6
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	c0 db       	rcall	.-2176   	; 0x694 <Endpoint_ConfigureEndpointTable>
     f14:	88 23       	and	r24, r24
     f16:	29 f0       	breq	.+10     	; 0xf22 <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     f18:	ce 01       	movw	r24, r28
     f1a:	0b 96       	adiw	r24, 0x0b	; 11
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	ba db       	rcall	.-2188   	; 0x694 <Endpoint_ConfigureEndpointTable>
     f20:	01 c0       	rjmp	.+2      	; 0xf24 <CDC_Device_ConfigureEndpoints+0x42>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
     f22:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	08 95       	ret

00000f2a <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f2a:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f2c:	80 91 36 01 	lds	r24, 0x0136
     f30:	84 30       	cpi	r24, 0x04	; 4
     f32:	51 f5       	brne	.+84     	; 0xf88 <CDC_Device_Flush+0x5e>
     f34:	24 89       	ldd	r18, Z+20	; 0x14
     f36:	35 89       	ldd	r19, Z+21	; 0x15
     f38:	46 89       	ldd	r20, Z+22	; 0x16
     f3a:	57 89       	ldd	r21, Z+23	; 0x17
     f3c:	21 15       	cp	r18, r1
     f3e:	31 05       	cpc	r19, r1
     f40:	41 05       	cpc	r20, r1
     f42:	51 05       	cpc	r21, r1
     f44:	09 f1       	breq	.+66     	; 0xf88 <CDC_Device_Flush+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f46:	81 81       	ldd	r24, Z+1	; 0x01
     f48:	8f 70       	andi	r24, 0x0F	; 15
     f4a:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     f4e:	90 91 f3 00 	lds	r25, 0x00F3
     f52:	80 91 f2 00 	lds	r24, 0x00F2
     f56:	39 2f       	mov	r19, r25
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	82 2b       	or	r24, r18
     f5e:	93 2b       	or	r25, r19

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	a1 f0       	breq	.+40     	; 0xf8c <CDC_Device_Flush+0x62>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f64:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f68:	80 91 e8 00 	lds	r24, 0x00E8
     f6c:	8e 77       	andi	r24, 0x7E	; 126
     f6e:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     f72:	95 fd       	sbrc	r25, 5
     f74:	0d c0       	rjmp	.+26     	; 0xf90 <CDC_Device_Flush+0x66>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     f76:	f3 db       	rcall	.-2074   	; 0x75e <Endpoint_WaitUntilReady>
     f78:	88 23       	and	r24, r24
     f7a:	59 f4       	brne	.+22     	; 0xf92 <CDC_Device_Flush+0x68>
     f7c:	90 91 e8 00 	lds	r25, 0x00E8
     f80:	9e 77       	andi	r25, 0x7E	; 126
     f82:	90 93 e8 00 	sts	0x00E8, r25
     f86:	08 95       	ret
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	08 95       	ret
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	08 95       	ret
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
     f90:	80 e0       	ldi	r24, 0x00	; 0
}
     f92:	08 95       	ret

00000f94 <CDC_Device_USBTask>:
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f94:	20 91 36 01 	lds	r18, 0x0136
     f98:	24 30       	cpi	r18, 0x04	; 4
     f9a:	99 f4       	brne	.+38     	; 0xfc2 <CDC_Device_USBTask+0x2e>
     f9c:	fc 01       	movw	r30, r24
     f9e:	24 89       	ldd	r18, Z+20	; 0x14
     fa0:	35 89       	ldd	r19, Z+21	; 0x15
     fa2:	46 89       	ldd	r20, Z+22	; 0x16
     fa4:	57 89       	ldd	r21, Z+23	; 0x17
     fa6:	21 15       	cp	r18, r1
     fa8:	31 05       	cpc	r19, r1
     faa:	41 05       	cpc	r20, r1
     fac:	51 05       	cpc	r21, r1
     fae:	49 f0       	breq	.+18     	; 0xfc2 <CDC_Device_USBTask+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fb0:	21 81       	ldd	r18, Z+1	; 0x01
     fb2:	2f 70       	andi	r18, 0x0F	; 15
     fb4:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     fb8:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
     fbc:	20 ff       	sbrs	r18, 0
     fbe:	01 c0       	rjmp	.+2      	; 0xfc2 <CDC_Device_USBTask+0x2e>
	  CDC_Device_Flush(CDCInterfaceInfo);
     fc0:	b4 cf       	rjmp	.-152    	; 0xf2a <CDC_Device_Flush>
     fc2:	08 95       	ret

00000fc4 <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     fc4:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     fc6:	80 91 36 01 	lds	r24, 0x0136
     fca:	84 30       	cpi	r24, 0x04	; 4
     fcc:	99 f5       	brne	.+102    	; 0x1034 <CDC_Device_ReceiveByte+0x70>
     fce:	24 89       	ldd	r18, Z+20	; 0x14
     fd0:	35 89       	ldd	r19, Z+21	; 0x15
     fd2:	46 89       	ldd	r20, Z+22	; 0x16
     fd4:	57 89       	ldd	r21, Z+23	; 0x17
     fd6:	21 15       	cp	r18, r1
     fd8:	31 05       	cpc	r19, r1
     fda:	41 05       	cpc	r20, r1
     fdc:	51 05       	cpc	r21, r1
     fde:	51 f1       	breq	.+84     	; 0x1034 <CDC_Device_ReceiveByte+0x70>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fe0:	86 81       	ldd	r24, Z+6	; 0x06
     fe2:	8f 70       	andi	r24, 0x0F	; 15
     fe4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fe8:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     fec:	82 ff       	sbrs	r24, 2
     fee:	22 c0       	rjmp	.+68     	; 0x1034 <CDC_Device_ReceiveByte+0x70>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     ff0:	90 91 f3 00 	lds	r25, 0x00F3
     ff4:	80 91 f2 00 	lds	r24, 0x00F2
     ff8:	39 2f       	mov	r19, r25
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	82 2b       	or	r24, r18
    1000:	93 2b       	or	r25, r19
	{
		if (Endpoint_BytesInEndpoint())
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	21 f0       	breq	.+8      	; 0x100e <CDC_Device_ReceiveByte+0x4a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1006:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <CDC_Device_ReceiveByte+0x4e>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    100e:	2f ef       	ldi	r18, 0xFF	; 255
    1010:	3f ef       	ldi	r19, 0xFF	; 255
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1012:	90 91 f3 00 	lds	r25, 0x00F3
    1016:	80 91 f2 00 	lds	r24, 0x00F2
    101a:	59 2f       	mov	r21, r25
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	84 2b       	or	r24, r20
    1022:	95 2b       	or	r25, r21
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	41 f4       	brne	.+16     	; 0x1038 <CDC_Device_ReceiveByte+0x74>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1028:	80 91 e8 00 	lds	r24, 0x00E8
    102c:	8b 77       	andi	r24, 0x7B	; 123
    102e:	80 93 e8 00 	sts	0x00E8, r24
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <CDC_Device_ReceiveByte+0x74>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1034:	2f ef       	ldi	r18, 0xFF	; 255
    1036:	3f ef       	ldi	r19, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1038:	c9 01       	movw	r24, r18
    103a:	08 95       	ret

0000103c <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    103c:	08 95       	ret

0000103e <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    103e:	6f 92       	push	r6
    1040:	7f 92       	push	r7
    1042:	8f 92       	push	r8
    1044:	9f 92       	push	r9
    1046:	af 92       	push	r10
    1048:	bf 92       	push	r11
    104a:	cf 92       	push	r12
    104c:	df 92       	push	r13
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <HID_Device_ProcessControlRequest+0x1e>
    105c:	0f 92       	push	r0
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1064:	6d b6       	in	r6, 0x3d	; 61
    1066:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1068:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    106c:	83 ff       	sbrs	r24, 3
    106e:	0d c1       	rjmp	.+538    	; 0x128a <HID_Device_ProcessControlRequest+0x24c>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1070:	f7 01       	movw	r30, r14
    1072:	80 81       	ld	r24, Z
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	20 91 3b 01 	lds	r18, 0x013B
    107a:	30 91 3c 01 	lds	r19, 0x013C
    107e:	28 17       	cp	r18, r24
    1080:	39 07       	cpc	r19, r25
    1082:	09 f0       	breq	.+2      	; 0x1086 <HID_Device_ProcessControlRequest+0x48>
    1084:	02 c1       	rjmp	.+516    	; 0x128a <HID_Device_ProcessControlRequest+0x24c>
	  return;

	switch (USB_ControlRequest.bRequest)
    1086:	80 91 38 01 	lds	r24, 0x0138
    108a:	83 30       	cpi	r24, 0x03	; 3
    108c:	09 f4       	brne	.+2      	; 0x1090 <HID_Device_ProcessControlRequest+0x52>
    108e:	a4 c0       	rjmp	.+328    	; 0x11d8 <HID_Device_ProcessControlRequest+0x19a>
    1090:	84 30       	cpi	r24, 0x04	; 4
    1092:	30 f4       	brcc	.+12     	; 0x10a0 <HID_Device_ProcessControlRequest+0x62>
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	71 f0       	breq	.+28     	; 0x10b4 <HID_Device_ProcessControlRequest+0x76>
    1098:	82 30       	cpi	r24, 0x02	; 2
    109a:	09 f0       	breq	.+2      	; 0x109e <HID_Device_ProcessControlRequest+0x60>
    109c:	f6 c0       	rjmp	.+492    	; 0x128a <HID_Device_ProcessControlRequest+0x24c>
    109e:	d9 c0       	rjmp	.+434    	; 0x1252 <HID_Device_ProcessControlRequest+0x214>
    10a0:	8a 30       	cpi	r24, 0x0A	; 10
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <HID_Device_ProcessControlRequest+0x68>
    10a4:	be c0       	rjmp	.+380    	; 0x1222 <HID_Device_ProcessControlRequest+0x1e4>
    10a6:	8b 30       	cpi	r24, 0x0B	; 11
    10a8:	09 f4       	brne	.+2      	; 0x10ac <HID_Device_ProcessControlRequest+0x6e>
    10aa:	a7 c0       	rjmp	.+334    	; 0x11fa <HID_Device_ProcessControlRequest+0x1bc>
    10ac:	89 30       	cpi	r24, 0x09	; 9
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <HID_Device_ProcessControlRequest+0x74>
    10b0:	ec c0       	rjmp	.+472    	; 0x128a <HID_Device_ProcessControlRequest+0x24c>
    10b2:	4c c0       	rjmp	.+152    	; 0x114c <HID_Device_ProcessControlRequest+0x10e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    10b4:	80 91 37 01 	lds	r24, 0x0137
    10b8:	81 3a       	cpi	r24, 0xA1	; 161
    10ba:	09 f0       	breq	.+2      	; 0x10be <HID_Device_ProcessControlRequest+0x80>
    10bc:	e6 c0       	rjmp	.+460    	; 0x128a <HID_Device_ProcessControlRequest+0x24c>
    10be:	cd b6       	in	r12, 0x3d	; 61
    10c0:	de b6       	in	r13, 0x3e	; 62
    10c2:	9d b6       	in	r9, 0x3d	; 61
    10c4:	8d 2c       	mov	r8, r13
			{
				uint16_t ReportSize = 0;
    10c6:	1b 82       	std	Y+3, r1	; 0x03
    10c8:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    10ca:	80 91 39 01 	lds	r24, 0x0139
    10ce:	00 91 3a 01 	lds	r16, 0x013A
    10d2:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    10d4:	f7 01       	movw	r30, r14
    10d6:	40 85       	ldd	r20, Z+8	; 0x08
    10d8:	c4 1a       	sub	r12, r20
    10da:	d1 08       	sbc	r13, r1
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de be       	out	0x3e, r13	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd be       	out	0x3d, r12	; 61
    10e6:	08 94       	sec
    10e8:	c1 1c       	adc	r12, r1
    10ea:	d1 1c       	adc	r13, r1
    10ec:	bc 2c       	mov	r11, r12
    10ee:	ad 2c       	mov	r10, r13

				memset(ReportData, 0, sizeof(ReportData));
    10f0:	c6 01       	movw	r24, r12
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	50 e0       	ldi	r21, 0x00	; 0
    10f8:	dc d1       	rcall	.+952    	; 0x14b2 <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    10fa:	40 2f       	mov	r20, r16
    10fc:	41 50       	subi	r20, 0x01	; 1
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    10fe:	c7 01       	movw	r24, r14
    1100:	be 01       	movw	r22, r28
    1102:	6f 5f       	subi	r22, 0xFF	; 255
    1104:	7f 4f       	sbci	r23, 0xFF	; 255
    1106:	96 01       	movw	r18, r12
    1108:	8e 01       	movw	r16, r28
    110a:	0e 5f       	subi	r16, 0xFE	; 254
    110c:	1f 4f       	sbci	r17, 0xFF	; 255
    110e:	ca d8       	rcall	.-3692   	; 0x2a4 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1110:	f7 01       	movw	r30, r14
    1112:	26 81       	ldd	r18, Z+6	; 0x06
    1114:	37 81       	ldd	r19, Z+7	; 0x07
    1116:	21 15       	cp	r18, r1
    1118:	31 05       	cpc	r19, r1
    111a:	29 f0       	breq	.+10     	; 0x1126 <HID_Device_ProcessControlRequest+0xe8>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    111c:	40 85       	ldd	r20, Z+8	; 0x08
    111e:	c9 01       	movw	r24, r18
    1120:	b6 01       	movw	r22, r12
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	bd d1       	rcall	.+890    	; 0x14a0 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1126:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    112a:	80 91 e8 00 	lds	r24, 0x00E8
    112e:	87 7f       	andi	r24, 0xF7	; 247
    1130:	80 93 e8 00 	sts	0x00E8, r24
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1134:	6a 81       	ldd	r22, Y+2	; 0x02
    1136:	7b 81       	ldd	r23, Y+3	; 0x03
    1138:	8b 2d       	mov	r24, r11
    113a:	9a 2d       	mov	r25, r10
    113c:	67 d9       	rcall	.-3378   	; 0x40c <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    113e:	80 91 e8 00 	lds	r24, 0x00E8
    1142:	8b 77       	andi	r24, 0x7B	; 123
    1144:	80 93 e8 00 	sts	0x00E8, r24
    1148:	94 01       	movw	r18, r8
    114a:	3e c0       	rjmp	.+124    	; 0x11c8 <HID_Device_ProcessControlRequest+0x18a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    114c:	80 91 37 01 	lds	r24, 0x0137
    1150:	81 32       	cpi	r24, 0x21	; 33
    1152:	09 f0       	breq	.+2      	; 0x1156 <HID_Device_ProcessControlRequest+0x118>
    1154:	9a c0       	rjmp	.+308    	; 0x128a <HID_Device_ProcessControlRequest+0x24c>
    1156:	cd b6       	in	r12, 0x3d	; 61
    1158:	de b6       	in	r13, 0x3e	; 62
    115a:	bd b6       	in	r11, 0x3d	; 61
    115c:	9d 2c       	mov	r9, r13
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    115e:	00 91 3d 01 	lds	r16, 0x013D
    1162:	10 91 3e 01 	lds	r17, 0x013E
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1166:	a0 90 39 01 	lds	r10, 0x0139
    116a:	80 90 3a 01 	lds	r8, 0x013A
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    116e:	8d b7       	in	r24, 0x3d	; 61
    1170:	9e b7       	in	r25, 0x3e	; 62
    1172:	80 1b       	sub	r24, r16
    1174:	91 0b       	sbc	r25, r17
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	9e bf       	out	0x3e, r25	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	8d bf       	out	0x3d, r24	; 61
    1180:	cd b6       	in	r12, 0x3d	; 61
    1182:	de b6       	in	r13, 0x3e	; 62
    1184:	08 94       	sec
    1186:	c1 1c       	adc	r12, r1
    1188:	d1 1c       	adc	r13, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    118a:	80 91 e8 00 	lds	r24, 0x00E8
    118e:	87 7f       	andi	r24, 0xF7	; 247
    1190:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1194:	c6 01       	movw	r24, r12
    1196:	b8 01       	movw	r22, r16
    1198:	9c d9       	rcall	.-3272   	; 0x4d2 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    119a:	80 91 e8 00 	lds	r24, 0x00E8
    119e:	8e 77       	andi	r24, 0x7E	; 126
    11a0:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	aa 20       	and	r10, r10
    11aa:	11 f4       	brne	.+4      	; 0x11b0 <HID_Device_ProcessControlRequest+0x172>
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    11b0:	48 2d       	mov	r20, r8
    11b2:	41 50       	subi	r20, 0x01	; 1

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    11b4:	96 01       	movw	r18, r12
    11b6:	28 0f       	add	r18, r24
    11b8:	39 1f       	adc	r19, r25
    11ba:	08 1b       	sub	r16, r24
    11bc:	19 0b       	sbc	r17, r25
    11be:	c7 01       	movw	r24, r14
    11c0:	6a 2d       	mov	r22, r10
    11c2:	88 d8       	rcall	.-3824   	; 0x2d4 <CALLBACK_HID_Device_ProcessHIDReport>
    11c4:	3b 2d       	mov	r19, r11
    11c6:	29 2d       	mov	r18, r9
    11c8:	83 2f       	mov	r24, r19
    11ca:	92 2f       	mov	r25, r18
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	9e bf       	out	0x3e, r25	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	8d bf       	out	0x3d, r24	; 61
    11d6:	59 c0       	rjmp	.+178    	; 0x128a <HID_Device_ProcessControlRequest+0x24c>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    11d8:	80 91 37 01 	lds	r24, 0x0137
    11dc:	81 3a       	cpi	r24, 0xA1	; 161
    11de:	09 f0       	breq	.+2      	; 0x11e2 <HID_Device_ProcessControlRequest+0x1a4>
    11e0:	54 c0       	rjmp	.+168    	; 0x128a <HID_Device_ProcessControlRequest+0x24c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11e2:	80 91 e8 00 	lds	r24, 0x00E8
    11e6:	87 7f       	andi	r24, 0xF7	; 247
    11e8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11ec:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    11f0:	80 ff       	sbrs	r24, 0
    11f2:	fc cf       	rjmp	.-8      	; 0x11ec <HID_Device_ProcessControlRequest+0x1ae>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    11f4:	f7 01       	movw	r30, r14
    11f6:	81 85       	ldd	r24, Z+9	; 0x09
    11f8:	40 c0       	rjmp	.+128    	; 0x127a <HID_Device_ProcessControlRequest+0x23c>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    11fa:	80 91 37 01 	lds	r24, 0x0137
    11fe:	81 32       	cpi	r24, 0x21	; 33
    1200:	09 f0       	breq	.+2      	; 0x1204 <HID_Device_ProcessControlRequest+0x1c6>
    1202:	43 c0       	rjmp	.+134    	; 0x128a <HID_Device_ProcessControlRequest+0x24c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1204:	80 91 e8 00 	lds	r24, 0x00E8
    1208:	87 7f       	andi	r24, 0xF7	; 247
    120a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    120e:	86 da       	rcall	.-2804   	; 0x71c <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1210:	90 91 39 01 	lds	r25, 0x0139
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	99 23       	and	r25, r25
    1218:	09 f4       	brne	.+2      	; 0x121c <HID_Device_ProcessControlRequest+0x1de>
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	f7 01       	movw	r30, r14
    121e:	81 87       	std	Z+9, r24	; 0x09
    1220:	34 c0       	rjmp	.+104    	; 0x128a <HID_Device_ProcessControlRequest+0x24c>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1222:	80 91 37 01 	lds	r24, 0x0137
    1226:	81 32       	cpi	r24, 0x21	; 33
    1228:	81 f5       	brne	.+96     	; 0x128a <HID_Device_ProcessControlRequest+0x24c>
    122a:	80 91 e8 00 	lds	r24, 0x00E8
    122e:	87 7f       	andi	r24, 0xF7	; 247
    1230:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1234:	73 da       	rcall	.-2842   	; 0x71c <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1236:	80 91 39 01 	lds	r24, 0x0139
    123a:	90 91 3a 01 	lds	r25, 0x013A
    123e:	80 70       	andi	r24, 0x00	; 0
    1240:	36 e0       	ldi	r19, 0x06	; 6
    1242:	96 95       	lsr	r25
    1244:	87 95       	ror	r24
    1246:	3a 95       	dec	r19
    1248:	e1 f7       	brne	.-8      	; 0x1242 <HID_Device_ProcessControlRequest+0x204>
    124a:	f7 01       	movw	r30, r14
    124c:	95 87       	std	Z+13, r25	; 0x0d
    124e:	84 87       	std	Z+12, r24	; 0x0c
    1250:	1c c0       	rjmp	.+56     	; 0x128a <HID_Device_ProcessControlRequest+0x24c>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1252:	80 91 37 01 	lds	r24, 0x0137
    1256:	81 3a       	cpi	r24, 0xA1	; 161
    1258:	c1 f4       	brne	.+48     	; 0x128a <HID_Device_ProcessControlRequest+0x24c>
    125a:	80 91 e8 00 	lds	r24, 0x00E8
    125e:	87 7f       	andi	r24, 0xF7	; 247
    1260:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1264:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1268:	80 ff       	sbrs	r24, 0
    126a:	fc cf       	rjmp	.-8      	; 0x1264 <HID_Device_ProcessControlRequest+0x226>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    126c:	f7 01       	movw	r30, r14
    126e:	84 85       	ldd	r24, Z+12	; 0x0c
    1270:	95 85       	ldd	r25, Z+13	; 0x0d
    1272:	96 95       	lsr	r25
    1274:	87 95       	ror	r24
    1276:	96 95       	lsr	r25
    1278:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    127a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    127e:	80 91 e8 00 	lds	r24, 0x00E8
    1282:	8e 77       	andi	r24, 0x7E	; 126
    1284:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1288:	49 da       	rcall	.-2926   	; 0x71c <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	7e be       	out	0x3e, r7	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	6d be       	out	0x3d, r6	; 61
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	ff 90       	pop	r15
    12a4:	ef 90       	pop	r14
    12a6:	df 90       	pop	r13
    12a8:	cf 90       	pop	r12
    12aa:	bf 90       	pop	r11
    12ac:	af 90       	pop	r10
    12ae:	9f 90       	pop	r9
    12b0:	8f 90       	pop	r8
    12b2:	7f 90       	pop	r7
    12b4:	6f 90       	pop	r6
    12b6:	08 95       	ret

000012b8 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    12be:	09 96       	adiw	r24, 0x09	; 9
    12c0:	dc 01       	movw	r26, r24
    12c2:	87 e0       	ldi	r24, 0x07	; 7
    12c4:	ed 01       	movw	r28, r26
    12c6:	19 92       	st	Y+, r1
    12c8:	8a 95       	dec	r24
    12ca:	e9 f7       	brne	.-6      	; 0x12c6 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	81 87       	std	Z+9, r24	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    12d0:	84 ef       	ldi	r24, 0xF4	; 244
    12d2:	91 e0       	ldi	r25, 0x01	; 1
    12d4:	95 87       	std	Z+13, r25	; 0x0d
    12d6:	84 87       	std	Z+12, r24	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    12d8:	83 e0       	ldi	r24, 0x03	; 3
    12da:	84 83       	std	Z+4, r24	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    12dc:	cf 01       	movw	r24, r30
    12de:	01 96       	adiw	r24, 0x01	; 1
    12e0:	61 e0       	ldi	r22, 0x01	; 1
    12e2:	d8 d9       	rcall	.-3152   	; 0x694 <Endpoint_ConfigureEndpointTable>
	  return false;	
	
	return true;
}
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	08 95       	ret

000012ea <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    12ea:	5f 92       	push	r5
    12ec:	6f 92       	push	r6
    12ee:	7f 92       	push	r7
    12f0:	8f 92       	push	r8
    12f2:	9f 92       	push	r9
    12f4:	af 92       	push	r10
    12f6:	bf 92       	push	r11
    12f8:	cf 92       	push	r12
    12fa:	df 92       	push	r13
    12fc:	ef 92       	push	r14
    12fe:	ff 92       	push	r15
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	00 d0       	rcall	.+0      	; 0x130a <HID_Device_USBTask+0x20>
    130a:	00 d0       	rcall	.+0      	; 0x130c <HID_Device_USBTask+0x22>
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1312:	6d b6       	in	r6, 0x3d	; 61
    1314:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1316:	80 91 36 01 	lds	r24, 0x0136
    131a:	84 30       	cpi	r24, 0x04	; 4
    131c:	09 f0       	breq	.+2      	; 0x1320 <HID_Device_USBTask+0x36>
    131e:	9a c0       	rjmp	.+308    	; 0x1454 <HID_Device_USBTask+0x16a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1320:	80 91 e4 00 	lds	r24, 0x00E4
    1324:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1328:	f7 01       	movw	r30, r14
    132a:	22 85       	ldd	r18, Z+10	; 0x0a
    132c:	33 85       	ldd	r19, Z+11	; 0x0b
    132e:	28 17       	cp	r18, r24
    1330:	39 07       	cpc	r19, r25
    1332:	09 f4       	brne	.+2      	; 0x1336 <HID_Device_USBTask+0x4c>
    1334:	8f c0       	rjmp	.+286    	; 0x1454 <HID_Device_USBTask+0x16a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1336:	81 81       	ldd	r24, Z+1	; 0x01
    1338:	8f 70       	andi	r24, 0x0F	; 15
    133a:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    133e:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    1342:	85 ff       	sbrs	r24, 5
    1344:	87 c0       	rjmp	.+270    	; 0x1454 <HID_Device_USBTask+0x16a>
    1346:	8d b6       	in	r8, 0x3d	; 61
    1348:	57 2c       	mov	r5, r7
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    134a:	40 85       	ldd	r20, Z+8	; 0x08
    134c:	cd b6       	in	r12, 0x3d	; 61
    134e:	de b6       	in	r13, 0x3e	; 62
    1350:	c4 1a       	sub	r12, r20
    1352:	d1 08       	sbc	r13, r1
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	de be       	out	0x3e, r13	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	cd be       	out	0x3d, r12	; 61
    135e:	0d b7       	in	r16, 0x3d	; 61
    1360:	1e b7       	in	r17, 0x3e	; 62
    1362:	0f 5f       	subi	r16, 0xFF	; 255
    1364:	1f 4f       	sbci	r17, 0xFF	; 255
    1366:	b0 2e       	mov	r11, r16
    1368:	a1 2e       	mov	r10, r17
		uint8_t  ReportID     = 0;
    136a:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    136c:	1b 82       	std	Y+3, r1	; 0x03
    136e:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    1370:	c8 01       	movw	r24, r16
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	9c d0       	rcall	.+312    	; 0x14b2 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    137a:	c7 01       	movw	r24, r14
    137c:	be 01       	movw	r22, r28
    137e:	6f 5f       	subi	r22, 0xFF	; 255
    1380:	7f 4f       	sbci	r23, 0xFF	; 255
    1382:	40 e0       	ldi	r20, 0x00	; 0
    1384:	98 01       	movw	r18, r16
    1386:	8e 01       	movw	r16, r28
    1388:	0e 5f       	subi	r16, 0xFE	; 254
    138a:	1f 4f       	sbci	r17, 0xFF	; 255
    138c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <CALLBACK_HID_Device_CreateHIDReport>
    1390:	98 2e       	mov	r9, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1392:	f7 01       	movw	r30, r14
    1394:	84 85       	ldd	r24, Z+12	; 0x0c
    1396:	95 85       	ldd	r25, Z+13	; 0x0d
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	59 f0       	breq	.+22     	; 0x13b2 <HID_Device_USBTask+0xc8>
	  return false;	
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	26 85       	ldd	r18, Z+14	; 0x0e
    13a2:	37 85       	ldd	r19, Z+15	; 0x0f
    13a4:	21 15       	cp	r18, r1
    13a6:	31 05       	cpc	r19, r1
    13a8:	11 f0       	breq	.+4      	; 0x13ae <HID_Device_USBTask+0xc4>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    13ae:	6c 01       	movw	r12, r24
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <HID_Device_USBTask+0xcc>
    13b2:	cc 24       	eor	r12, r12
    13b4:	dd 24       	eor	r13, r13

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    13b6:	f7 01       	movw	r30, r14
    13b8:	06 81       	ldd	r16, Z+6	; 0x06
    13ba:	17 81       	ldd	r17, Z+7	; 0x07
    13bc:	01 15       	cp	r16, r1
    13be:	11 05       	cpc	r17, r1
    13c0:	a1 f0       	breq	.+40     	; 0x13ea <HID_Device_USBTask+0x100>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    13c2:	4a 81       	ldd	r20, Y+2	; 0x02
    13c4:	5b 81       	ldd	r21, Y+3	; 0x03
    13c6:	8b 2d       	mov	r24, r11
    13c8:	9a 2d       	mov	r25, r10
    13ca:	b8 01       	movw	r22, r16
    13cc:	5c d0       	rcall	.+184    	; 0x1486 <memcmp>
    13ce:	21 e0       	ldi	r18, 0x01	; 1
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	09 f4       	brne	.+2      	; 0x13d6 <HID_Device_USBTask+0xec>
    13d4:	20 e0       	ldi	r18, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    13d6:	f7 01       	movw	r30, r14
    13d8:	40 85       	ldd	r20, Z+8	; 0x08
    13da:	c8 01       	movw	r24, r16
    13dc:	6b 2d       	mov	r22, r11
    13de:	7a 2d       	mov	r23, r10
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	2c 83       	std	Y+4, r18	; 0x04
    13e4:	5d d0       	rcall	.+186    	; 0x14a0 <memcpy>
    13e6:	2c 81       	ldd	r18, Y+4	; 0x04
    13e8:	01 c0       	rjmp	.+2      	; 0x13ec <HID_Device_USBTask+0x102>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    13ea:	20 e0       	ldi	r18, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	9b 81       	ldd	r25, Y+3	; 0x03
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	11 f1       	breq	.+68     	; 0x1438 <HID_Device_USBTask+0x14e>
    13f4:	99 20       	and	r9, r9
    13f6:	29 f4       	brne	.+10     	; 0x1402 <HID_Device_USBTask+0x118>
    13f8:	22 23       	and	r18, r18
    13fa:	19 f4       	brne	.+6      	; 0x1402 <HID_Device_USBTask+0x118>
    13fc:	c1 14       	cp	r12, r1
    13fe:	d1 04       	cpc	r13, r1
    1400:	d9 f0       	breq	.+54     	; 0x1438 <HID_Device_USBTask+0x14e>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1402:	f7 01       	movw	r30, r14
    1404:	84 85       	ldd	r24, Z+12	; 0x0c
    1406:	95 85       	ldd	r25, Z+13	; 0x0d
    1408:	97 87       	std	Z+15, r25	; 0x0f
    140a:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    140c:	81 81       	ldd	r24, Z+1	; 0x01
    140e:	8f 70       	andi	r24, 0x0F	; 15
    1410:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	88 23       	and	r24, r24
    1418:	11 f0       	breq	.+4      	; 0x141e <HID_Device_USBTask+0x134>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    141a:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    141e:	6a 81       	ldd	r22, Y+2	; 0x02
    1420:	7b 81       	ldd	r23, Y+3	; 0x03
    1422:	8b 2d       	mov	r24, r11
    1424:	9a 2d       	mov	r25, r10
    1426:	40 e0       	ldi	r20, 0x00	; 0
    1428:	50 e0       	ldi	r21, 0x00	; 0
    142a:	0e 94 a9 01 	call	0x352	; 0x352 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    142e:	80 91 e8 00 	lds	r24, 0x00E8
    1432:	8e 77       	andi	r24, 0x7E	; 126
    1434:	80 93 e8 00 	sts	0x00E8, r24
    1438:	80 91 e4 00 	lds	r24, 0x00E4
    143c:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1440:	f7 01       	movw	r30, r14
    1442:	93 87       	std	Z+11, r25	; 0x0b
    1444:	82 87       	std	Z+10, r24	; 0x0a
    1446:	88 2d       	mov	r24, r8
    1448:	95 2d       	mov	r25, r5
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	9e bf       	out	0x3e, r25	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	8d bf       	out	0x3d, r24	; 61
	}
}
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	7e be       	out	0x3e, r7	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	6d be       	out	0x3d, r6	; 61
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	bf 90       	pop	r11
    1478:	af 90       	pop	r10
    147a:	9f 90       	pop	r9
    147c:	8f 90       	pop	r8
    147e:	7f 90       	pop	r7
    1480:	6f 90       	pop	r6
    1482:	5f 90       	pop	r5
    1484:	08 95       	ret

00001486 <memcmp>:
    1486:	fb 01       	movw	r30, r22
    1488:	dc 01       	movw	r26, r24
    148a:	04 c0       	rjmp	.+8      	; 0x1494 <memcmp+0xe>
    148c:	8d 91       	ld	r24, X+
    148e:	01 90       	ld	r0, Z+
    1490:	80 19       	sub	r24, r0
    1492:	21 f4       	brne	.+8      	; 0x149c <memcmp+0x16>
    1494:	41 50       	subi	r20, 0x01	; 1
    1496:	50 40       	sbci	r21, 0x00	; 0
    1498:	c8 f7       	brcc	.-14     	; 0x148c <memcmp+0x6>
    149a:	88 1b       	sub	r24, r24
    149c:	99 0b       	sbc	r25, r25
    149e:	08 95       	ret

000014a0 <memcpy>:
    14a0:	fb 01       	movw	r30, r22
    14a2:	dc 01       	movw	r26, r24
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <memcpy+0xa>
    14a6:	01 90       	ld	r0, Z+
    14a8:	0d 92       	st	X+, r0
    14aa:	41 50       	subi	r20, 0x01	; 1
    14ac:	50 40       	sbci	r21, 0x00	; 0
    14ae:	d8 f7       	brcc	.-10     	; 0x14a6 <memcpy+0x6>
    14b0:	08 95       	ret

000014b2 <memset>:
    14b2:	dc 01       	movw	r26, r24
    14b4:	01 c0       	rjmp	.+2      	; 0x14b8 <memset+0x6>
    14b6:	6d 93       	st	X+, r22
    14b8:	41 50       	subi	r20, 0x01	; 1
    14ba:	50 40       	sbci	r21, 0x00	; 0
    14bc:	e0 f7       	brcc	.-8      	; 0x14b6 <memset+0x4>
    14be:	08 95       	ret

000014c0 <_exit>:
    14c0:	f8 94       	cli

000014c2 <__stop_program>:
    14c2:	ff cf       	rjmp	.-2      	; 0x14c2 <__stop_program>
